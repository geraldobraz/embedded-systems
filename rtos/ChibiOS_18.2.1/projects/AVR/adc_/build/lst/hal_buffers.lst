   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB173:
  15               		.file 1 "../../../os/hal/src/hal_buffers.c"
   1:../../../os/hal/src/hal_buffers.c **** /*
   2:../../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_buffers.c **** 
   4:../../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_buffers.c **** 
   8:../../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_buffers.c **** 
  10:../../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../../os/hal/src/hal_buffers.c **** */
  16:../../../os/hal/src/hal_buffers.c **** 
  17:../../../os/hal/src/hal_buffers.c **** /**
  18:../../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../../os/hal/src/hal_buffers.c ****  *
  21:../../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:../../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../../os/hal/src/hal_buffers.c ****  *          .
  36:../../../os/hal/src/hal_buffers.c ****  * @{
  37:../../../os/hal/src/hal_buffers.c ****  */
  38:../../../os/hal/src/hal_buffers.c **** 
  39:../../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../../os/hal/src/hal_buffers.c **** 
  41:../../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../../os/hal/src/hal_buffers.c **** 
  43:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_buffers.c **** 
  47:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../../os/hal/src/hal_buffers.c **** 
  51:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../../os/hal/src/hal_buffers.c **** 
  55:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../../os/hal/src/hal_buffers.c **** 
  59:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../../os/hal/src/hal_buffers.c **** 
  63:../../../os/hal/src/hal_buffers.c **** /**
  64:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../../os/hal/src/hal_buffers.c ****  *
  66:../../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../../os/hal/src/hal_buffers.c ****  *
  74:../../../os/hal/src/hal_buffers.c ****  * @init
  75:../../../os/hal/src/hal_buffers.c ****  */
  76:../../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c FC01      		movw r30,r24
  48               	.LVL1:
  49               	.LBB257:
  50               	.LBB258:
  51               	.LBB259:
  52               	.LBB260:
  53               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  54               		.loc 2 539 0
  55 000e 9183      		std Z+1,r25
  56 0010 8083      		st Z,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  57               		.loc 2 540 0
  58 0012 9383      		std Z+3,r25
  59 0014 8283      		std Z+2,r24
  60               	.LBE260:
  61               	.LBE259:
  62               	.LBE258:
  63               	.LBE257:
  78:../../../os/hal/src/hal_buffers.c **** 
  79:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../../os/hal/src/hal_buffers.c **** 
  81:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  64               		.loc 1 82 0
  65 0016 6483      		std Z+4,r22
  83:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  66               		.loc 1 83 0
  67 0018 1682      		std Z+6,__zero_reg__
  68 001a 1582      		std Z+5,__zero_reg__
  84:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  69               		.loc 1 84 0
  70 001c 5287      		std Z+10,r21
  71 001e 4187      		std Z+9,r20
  85:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  72               		.loc 1 85 0
  73 0020 5087      		std Z+8,r21
  74 0022 4783      		std Z+7,r20
  86:../../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  75               		.loc 1 86 0
  76 0024 2E5F      		subi r18,-2
  77 0026 3F4F      		sbci r19,-1
  78               	.LVL2:
  79 0028 209F      		mul r18,r16
  80 002a C001      		movw r24,r0
  81 002c 219F      		mul r18,r17
  82 002e 900D      		add r25,r0
  83 0030 309F      		mul r19,r16
  84 0032 900D      		add r25,r0
  85 0034 1124      		clr r1
  86               	.LVL3:
  87 0036 840F      		add r24,r20
  88 0038 951F      		adc r25,r21
  89 003a 9487      		std Z+12,r25
  90 003c 8387      		std Z+11,r24
  87:../../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  91               		.loc 1 87 0
  92 003e 3687      		std Z+14,r19
  93 0040 2587      		std Z+13,r18
  88:../../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  94               		.loc 1 88 0
  95 0042 108B      		std Z+16,r17
  96 0044 0787      		std Z+15,r16
  89:../../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
  97               		.loc 1 89 0
  98 0046 528B      		std Z+18,r21
  99 0048 418B      		std Z+17,r20
  90:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 100               		.loc 1 90 0
 101 004a 148A      		std Z+20,__zero_reg__
 102 004c 138A      		std Z+19,__zero_reg__
  91:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 103               		.loc 1 91 0
 104 004e 168A      		std Z+22,__zero_reg__
 105 0050 158A      		std Z+21,__zero_reg__
  92:../../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 106               		.loc 1 92 0
 107 0052 F08E      		std Z+24,r15
 108 0054 E78A      		std Z+23,r14
  93:../../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 109               		.loc 1 93 0
 110 0056 D28E      		std Z+26,r13
 111 0058 C18E      		std Z+25,r12
 112               	/* epilogue start */
  94:../../../os/hal/src/hal_buffers.c **** }
 113               		.loc 1 94 0
 114 005a 1F91      		pop r17
 115 005c 0F91      		pop r16
 116               	.LVL4:
 117 005e FF90      		pop r15
 118 0060 EF90      		pop r14
 119               	.LVL5:
 120 0062 DF90      		pop r13
 121 0064 CF90      		pop r12
 122               	.LVL6:
 123 0066 0895      		ret
 124               		.cfi_endproc
 125               	.LFE173:
 127               		.section	.text.ibqResetI,"ax",@progbits
 128               	.global	ibqResetI
 130               	ibqResetI:
 131               	.LFB174:
  95:../../../os/hal/src/hal_buffers.c **** 
  96:../../../os/hal/src/hal_buffers.c **** /**
  97:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../../os/hal/src/hal_buffers.c ****  *
 103:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../../os/hal/src/hal_buffers.c ****  *
 105:../../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../../os/hal/src/hal_buffers.c ****  */
 107:../../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 132               		.loc 1 107 0
 133               		.cfi_startproc
 134               	.LVL7:
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
 139 0000 FC01      		movw r30,r24
 108:../../../os/hal/src/hal_buffers.c **** 
 109:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../../os/hal/src/hal_buffers.c **** 
 111:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 140               		.loc 1 111 0
 141 0002 1682      		std Z+6,__zero_reg__
 142 0004 1582      		std Z+5,__zero_reg__
 112:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 143               		.loc 1 112 0
 144 0006 8189      		ldd r24,Z+17
 145 0008 9289      		ldd r25,Z+18
 146               	.LVL8:
 147 000a 9287      		std Z+10,r25
 148 000c 8187      		std Z+9,r24
 113:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 149               		.loc 1 113 0
 150 000e 9087      		std Z+8,r25
 151 0010 8783      		std Z+7,r24
 114:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 152               		.loc 1 114 0
 153 0012 148A      		std Z+20,__zero_reg__
 154 0014 138A      		std Z+19,__zero_reg__
 115:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 155               		.loc 1 115 0
 156 0016 168A      		std Z+22,__zero_reg__
 157 0018 158A      		std Z+21,__zero_reg__
 158               	.LVL9:
 159               	.LBB261:
 160               	.LBB262:
 161               		.file 3 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 776:../../../os/hal/osal/rt/osal.h **** }
 777:../../../os/hal/osal/rt/osal.h **** 
 778:../../../os/hal/osal/rt/osal.h **** /**
 779:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 780:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 781:../../../os/hal/osal/rt/osal.h ****  *          context.
 782:../../../os/hal/osal/rt/osal.h ****  *
 783:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 784:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 785:../../../os/hal/osal/rt/osal.h ****  *
 786:../../../os/hal/osal/rt/osal.h ****  * @iclass
 787:../../../os/hal/osal/rt/osal.h ****  */
 788:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 789:../../../os/hal/osal/rt/osal.h **** 
 790:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 791:../../../os/hal/osal/rt/osal.h **** }
 792:../../../os/hal/osal/rt/osal.h **** 
 793:../../../os/hal/osal/rt/osal.h **** /**
 794:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 795:../../../os/hal/osal/rt/osal.h ****  *
 796:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 797:../../../os/hal/osal/rt/osal.h ****  *
 798:../../../os/hal/osal/rt/osal.h ****  * @init
 799:../../../os/hal/osal/rt/osal.h ****  */
 800:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 801:../../../os/hal/osal/rt/osal.h **** 
 802:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 803:../../../os/hal/osal/rt/osal.h **** }
 804:../../../os/hal/osal/rt/osal.h **** 
 805:../../../os/hal/osal/rt/osal.h **** /**
 806:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 807:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 808:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 809:../../../os/hal/osal/rt/osal.h ****  *
 810:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 811:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 812:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 813:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 814:../../../os/hal/osal/rt/osal.h ****  *                        state.
 815:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 816:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 817:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 818:../../../os/hal/osal/rt/osal.h ****  *                      .
 819:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 820:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 821:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 822:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 823:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 824:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 825:../../../os/hal/osal/rt/osal.h ****  *
 826:../../../os/hal/osal/rt/osal.h ****  * @sclass
 827:../../../os/hal/osal/rt/osal.h ****  */
 828:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 829:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 830:../../../os/hal/osal/rt/osal.h **** 
 831:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 832:../../../os/hal/osal/rt/osal.h **** }
 833:../../../os/hal/osal/rt/osal.h **** 
 834:../../../os/hal/osal/rt/osal.h **** /**
 835:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 836:../../../os/hal/osal/rt/osal.h ****  *
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 838:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 839:../../../os/hal/osal/rt/osal.h ****  *
 840:../../../os/hal/osal/rt/osal.h ****  * @iclass
 841:../../../os/hal/osal/rt/osal.h ****  */
 842:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 845:../../../os/hal/osal/rt/osal.h **** }
 846:../../../os/hal/osal/rt/osal.h **** 
 847:../../../os/hal/osal/rt/osal.h **** /**
 848:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 849:../../../os/hal/osal/rt/osal.h ****  *
 850:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 851:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 852:../../../os/hal/osal/rt/osal.h ****  *
 853:../../../os/hal/osal/rt/osal.h ****  * @iclass
 854:../../../os/hal/osal/rt/osal.h ****  */
 855:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 856:../../../os/hal/osal/rt/osal.h **** 
 857:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 162               		.loc 3 857 0
 163 001a 6EEF      		ldi r22,lo8(-2)
 164 001c 7FEF      		ldi r23,lo8(-1)
 165 001e CF01      		movw r24,r30
 166 0020 0C94 0000 		jmp chThdDequeueAllI
 167               	.LVL10:
 168               	.LBE262:
 169               	.LBE261:
 170               		.cfi_endproc
 171               	.LFE174:
 173               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 174               	.global	ibqGetEmptyBufferI
 176               	ibqGetEmptyBufferI:
 177               	.LFB175:
 116:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../../os/hal/src/hal_buffers.c **** }
 118:../../../os/hal/src/hal_buffers.c **** 
 119:../../../os/hal/src/hal_buffers.c **** /**
 120:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../../os/hal/src/hal_buffers.c ****  *
 123:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../../os/hal/src/hal_buffers.c ****  *
 127:../../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../../os/hal/src/hal_buffers.c ****  */
 129:../../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 178               		.loc 1 129 0
 179               		.cfi_startproc
 180               	.LVL11:
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 185 0000 FC01      		movw r30,r24
 130:../../../os/hal/src/hal_buffers.c **** 
 131:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../../os/hal/src/hal_buffers.c **** 
 133:../../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 186               		.loc 1 133 0
 187 0002 2781      		ldd r18,Z+7
 188 0004 3085      		ldd r19,Z+8
 189 0006 8185      		ldd r24,Z+9
 190 0008 9285      		ldd r25,Z+10
 191               	.LVL12:
 192 000a 2817      		cp r18,r24
 193 000c 3907      		cpc r19,r25
 194 000e 01F0      		breq .L11
 195               	.L4:
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../../os/hal/src/hal_buffers.c ****   }
 136:../../../os/hal/src/hal_buffers.c **** 
 137:../../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 196               		.loc 1 137 0
 197 0010 C901      		movw r24,r18
 198 0012 0296      		adiw r24,2
 138:../../../os/hal/src/hal_buffers.c **** }
 199               		.loc 1 138 0
 200 0014 0895      		ret
 201               	.L11:
 133:../../../os/hal/src/hal_buffers.c ****     return NULL;
 202               		.loc 1 133 0 discriminator 1
 203 0016 8581      		ldd r24,Z+5
 204 0018 9681      		ldd r25,Z+6
 205 001a 892B      		or r24,r25
 206 001c 01F0      		breq .L4
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 207               		.loc 1 134 0
 208 001e 80E0      		ldi r24,0
 209 0020 90E0      		ldi r25,0
 210 0022 0895      		ret
 211               		.cfi_endproc
 212               	.LFE175:
 214               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 215               	.global	ibqPostFullBufferI
 217               	ibqPostFullBufferI:
 218               	.LFB176:
 139:../../../os/hal/src/hal_buffers.c **** 
 140:../../../os/hal/src/hal_buffers.c **** /**
 141:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../../os/hal/src/hal_buffers.c ****  *
 143:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../../os/hal/src/hal_buffers.c ****  *
 146:../../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../../os/hal/src/hal_buffers.c ****  */
 148:../../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 219               		.loc 1 148 0
 220               		.cfi_startproc
 221               	.LVL13:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
 226 0000 FC01      		movw r30,r24
 149:../../../os/hal/src/hal_buffers.c **** 
 150:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../../os/hal/src/hal_buffers.c **** 
 152:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../../os/hal/src/hal_buffers.c **** 
 155:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../../os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 227               		.loc 1 156 0
 228 0002 A781      		ldd r26,Z+7
 229 0004 B085      		ldd r27,Z+8
 230 0006 1196      		adiw r26,1
 231 0008 7C93      		st X,r23
 232 000a 6E93      		st -X,r22
 157:../../../os/hal/src/hal_buffers.c **** 
 158:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 233               		.loc 1 159 0
 234 000c 2581      		ldd r18,Z+5
 235 000e 3681      		ldd r19,Z+6
 236 0010 2F5F      		subi r18,-1
 237 0012 3F4F      		sbci r19,-1
 238 0014 3683      		std Z+6,r19
 239 0016 2583      		std Z+5,r18
 160:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 240               		.loc 1 160 0
 241 0018 8585      		ldd r24,Z+13
 242 001a 9685      		ldd r25,Z+14
 243               	.LVL14:
 244 001c 8A0F      		add r24,r26
 245 001e 9B1F      		adc r25,r27
 246 0020 9087      		std Z+8,r25
 247 0022 8783      		std Z+7,r24
 161:../../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 248               		.loc 1 161 0
 249 0024 2385      		ldd r18,Z+11
 250 0026 3485      		ldd r19,Z+12
 251 0028 8217      		cp r24,r18
 252 002a 9307      		cpc r25,r19
 253 002c 00F0      		brlo .L13
 162:../../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 254               		.loc 1 162 0
 255 002e 8189      		ldd r24,Z+17
 256 0030 9289      		ldd r25,Z+18
 257 0032 9087      		std Z+8,r25
 258 0034 8783      		std Z+7,r24
 259               	.L13:
 260               	.LVL15:
 261               	.LBB263:
 262               	.LBB264:
 844:../../../os/hal/osal/rt/osal.h **** }
 263               		.loc 3 844 0
 264 0036 60E0      		ldi r22,0
 265 0038 70E0      		ldi r23,0
 266               	.LVL16:
 267 003a CF01      		movw r24,r30
 268 003c 0C94 0000 		jmp chThdDequeueNextI
 269               	.LVL17:
 270               	.LBE264:
 271               	.LBE263:
 272               		.cfi_endproc
 273               	.LFE176:
 275               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 276               	.global	ibqGetFullBufferTimeoutS
 278               	ibqGetFullBufferTimeoutS:
 279               	.LFB178:
 163:../../../os/hal/src/hal_buffers.c ****   }
 164:../../../os/hal/src/hal_buffers.c **** 
 165:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../../os/hal/src/hal_buffers.c **** }
 168:../../../os/hal/src/hal_buffers.c **** 
 169:../../../os/hal/src/hal_buffers.c **** /**
 170:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../../os/hal/src/hal_buffers.c ****  *
 176:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../../os/hal/src/hal_buffers.c ****  *
 188:../../../os/hal/src/hal_buffers.c ****  * @api
 189:../../../os/hal/src/hal_buffers.c ****  */
 190:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 192:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../../os/hal/src/hal_buffers.c **** 
 194:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../../os/hal/src/hal_buffers.c **** 
 198:../../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../../os/hal/src/hal_buffers.c **** }
 200:../../../os/hal/src/hal_buffers.c **** 
 201:../../../os/hal/src/hal_buffers.c ****   /**
 202:../../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../../os/hal/src/hal_buffers.c ****    *
 208:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../../os/hal/src/hal_buffers.c ****    *
 220:../../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../../os/hal/src/hal_buffers.c ****    */
 222:../../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 280               		.loc 1 223 0
 281               		.cfi_startproc
 282               	.LVL18:
 283 0000 0F93      		push r16
 284               	.LCFI6:
 285               		.cfi_def_cfa_offset 3
 286               		.cfi_offset 16, -2
 287 0002 1F93      		push r17
 288               	.LCFI7:
 289               		.cfi_def_cfa_offset 4
 290               		.cfi_offset 17, -3
 291 0004 CF93      		push r28
 292               	.LCFI8:
 293               		.cfi_def_cfa_offset 5
 294               		.cfi_offset 28, -4
 295 0006 DF93      		push r29
 296               	.LCFI9:
 297               		.cfi_def_cfa_offset 6
 298               		.cfi_offset 29, -5
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 4 */
 302               	.L__stack_usage = 4
 303 0008 EC01      		movw r28,r24
 304 000a 8B01      		movw r16,r22
 224:../../../os/hal/src/hal_buffers.c **** 
 225:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../../os/hal/src/hal_buffers.c **** 
 227:../../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 305               		.loc 1 227 0
 306 000c 00C0      		rjmp .L15
 307               	.LVL19:
 308               	.L17:
 309               	.LBB273:
 228:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 310               		.loc 1 228 0
 311 000e 8C81      		ldd r24,Y+4
 312 0010 8111      		cpse r24,__zero_reg__
 313 0012 00C0      		rjmp .L18
 314               	.LVL20:
 315               	.LBB274:
 316               	.LBB275:
 831:../../../os/hal/osal/rt/osal.h **** }
 317               		.loc 3 831 0
 318 0014 B801      		movw r22,r16
 319 0016 CE01      		movw r24,r28
 320 0018 0E94 0000 		call chThdEnqueueTimeoutS
 321               	.LVL21:
 322               	.LBE275:
 323               	.LBE274:
 229:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../../os/hal/src/hal_buffers.c ****     }
 231:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 324               		.loc 1 232 0
 325 001c 97FD      		sbrc r25,7
 326 001e 00C0      		rjmp .L16
 327               	.LVL22:
 328               	.L15:
 329               	.LBE273:
 227:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 330               		.loc 1 227 0
 331 0020 8D81      		ldd r24,Y+5
 332 0022 9E81      		ldd r25,Y+6
 333 0024 892B      		or r24,r25
 334 0026 01F0      		breq .L17
 335               	.LVL23:
 336               	.LBB276:
 337               	.LBB277:
 233:../../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../../os/hal/src/hal_buffers.c ****     }
 235:../../../os/hal/src/hal_buffers.c ****   }
 236:../../../os/hal/src/hal_buffers.c **** 
 237:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../../os/hal/src/hal_buffers.c **** 
 239:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 338               		.loc 1 240 0
 339 0028 E985      		ldd r30,Y+9
 340 002a FA85      		ldd r31,Y+10
 341 002c 9F01      		movw r18,r30
 342 002e 2E5F      		subi r18,-2
 343 0030 3F4F      		sbci r19,-1
 344 0032 3C8B      		std Y+20,r19
 345 0034 2B8B      		std Y+19,r18
 241:../../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 346               		.loc 1 241 0
 347 0036 8081      		ld r24,Z
 348 0038 9181      		ldd r25,Z+1
 349 003a 820F      		add r24,r18
 350 003c 931F      		adc r25,r19
 351 003e 9E8B      		std Y+22,r25
 352 0040 8D8B      		std Y+21,r24
 353 0042 80E0      		ldi r24,0
 354 0044 90E0      		ldi r25,0
 355               	.LVL24:
 356               	.L16:
 357               	/* epilogue start */
 358               	.LBE277:
 359               	.LBE276:
 242:../../../os/hal/src/hal_buffers.c **** 
 243:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../../os/hal/src/hal_buffers.c **** }
 360               		.loc 1 244 0
 361 0046 DF91      		pop r29
 362 0048 CF91      		pop r28
 363               	.LVL25:
 364 004a 1F91      		pop r17
 365 004c 0F91      		pop r16
 366               	.LVL26:
 367 004e 0895      		ret
 368               	.LVL27:
 369               	.L18:
 370               	.LBB278:
 229:../../../os/hal/src/hal_buffers.c ****     }
 371               		.loc 1 229 0
 372 0050 8EEF      		ldi r24,lo8(-2)
 373 0052 9FEF      		ldi r25,lo8(-1)
 374               	/* epilogue start */
 375               	.LBE278:
 376               		.loc 1 244 0
 377 0054 DF91      		pop r29
 378 0056 CF91      		pop r28
 379               	.LVL28:
 380 0058 1F91      		pop r17
 381 005a 0F91      		pop r16
 382               	.LVL29:
 383 005c 0895      		ret
 384               		.cfi_endproc
 385               	.LFE178:
 387               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 388               	.global	ibqGetFullBufferTimeout
 390               	ibqGetFullBufferTimeout:
 391               	.LFB177:
 191:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 392               		.loc 1 191 0
 393               		.cfi_startproc
 394               	.LVL30:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399               	.LBB279:
 400               	.LBB280:
 401               	.LBB281:
 402               	.LBB282:
 403               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 404               		.loc 4 437 0
 405               	/* #APP */
 406               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 407 0000 F894      		cli
 408               	 ;  0 "" 2
 409               	/* #NOAPP */
 410               	.LBE282:
 411               	.LBE281:
 412               	.LBE280:
 413               	.LBE279:
 195:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 414               		.loc 1 195 0
 415 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 416               	.LVL31:
 417               	.LBB283:
 418               	.LBB284:
 419               	.LBB285:
 420               	.LBB286:
 421               	.LBB287:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 422               		.loc 4 447 0
 423               	/* #APP */
 424               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 425 0006 7894      		sei
 426               	 ;  0 "" 2
 427               	/* #NOAPP */
 428               	.LBE287:
 429               	.LBE286:
 430               	.LBE285:
 431               	.LBE284:
 432               	.LBE283:
 199:../../../os/hal/src/hal_buffers.c **** 
 433               		.loc 1 199 0
 434 0008 0895      		ret
 435               		.cfi_endproc
 436               	.LFE177:
 438               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 439               	.global	ibqReleaseEmptyBufferS
 441               	ibqReleaseEmptyBufferS:
 442               	.LFB180:
 245:../../../os/hal/src/hal_buffers.c **** 
 246:../../../os/hal/src/hal_buffers.c **** /**
 247:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../../os/hal/src/hal_buffers.c ****  *
 250:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../../os/hal/src/hal_buffers.c ****  *
 252:../../../os/hal/src/hal_buffers.c ****  * @api
 253:../../../os/hal/src/hal_buffers.c ****  */
 254:../../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 255:../../../os/hal/src/hal_buffers.c **** 
 256:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../../os/hal/src/hal_buffers.c **** }
 260:../../../os/hal/src/hal_buffers.c **** 
 261:../../../os/hal/src/hal_buffers.c ****   /**
 262:../../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../../os/hal/src/hal_buffers.c ****    *
 265:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../../os/hal/src/hal_buffers.c ****    *
 267:../../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../../os/hal/src/hal_buffers.c ****    */
 269:../../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 443               		.loc 1 269 0
 444               		.cfi_startproc
 445               	.LVL32:
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 0 */
 449               	.L__stack_usage = 0
 450 0000 DC01      		movw r26,r24
 270:../../../os/hal/src/hal_buffers.c **** 
 271:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../../os/hal/src/hal_buffers.c **** 
 274:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 451               		.loc 1 275 0
 452 0002 1596      		adiw r26,5
 453 0004 8D91      		ld r24,X+
 454 0006 9C91      		ld r25,X
 455 0008 1697      		sbiw r26,5+1
 456               	.LVL33:
 457 000a 0197      		sbiw r24,1
 458 000c 1696      		adiw r26,5+1
 459 000e 9C93      		st X,r25
 460 0010 8E93      		st -X,r24
 461 0012 1597      		sbiw r26,5
 276:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 462               		.loc 1 276 0
 463 0014 1996      		adiw r26,9
 464 0016 2D91      		ld r18,X+
 465 0018 3C91      		ld r19,X
 466 001a 1A97      		sbiw r26,9+1
 467 001c 1D96      		adiw r26,13
 468 001e 8D91      		ld r24,X+
 469 0020 9C91      		ld r25,X
 470 0022 1E97      		sbiw r26,13+1
 471 0024 820F      		add r24,r18
 472 0026 931F      		adc r25,r19
 473 0028 1A96      		adiw r26,9+1
 474 002a 9C93      		st X,r25
 475 002c 8E93      		st -X,r24
 476 002e 1997      		sbiw r26,9
 277:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 477               		.loc 1 277 0
 478 0030 1B96      		adiw r26,11
 479 0032 2D91      		ld r18,X+
 480 0034 3C91      		ld r19,X
 481 0036 1C97      		sbiw r26,11+1
 482 0038 8217      		cp r24,r18
 483 003a 9307      		cpc r25,r19
 484 003c 00F0      		brlo .L22
 278:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 485               		.loc 1 278 0
 486 003e 5196      		adiw r26,17
 487 0040 8D91      		ld r24,X+
 488 0042 9C91      		ld r25,X
 489 0044 5297      		sbiw r26,17+1
 490 0046 1A96      		adiw r26,9+1
 491 0048 9C93      		st X,r25
 492 004a 8E93      		st -X,r24
 493 004c 1997      		sbiw r26,9
 494               	.L22:
 279:../../../os/hal/src/hal_buffers.c ****   }
 280:../../../os/hal/src/hal_buffers.c **** 
 281:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 495               		.loc 1 282 0
 496 004e 5496      		adiw r26,19+1
 497 0050 1C92      		st X,__zero_reg__
 498 0052 1E92      		st -X,__zero_reg__
 499 0054 5397      		sbiw r26,19
 283:../../../os/hal/src/hal_buffers.c **** 
 284:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 500               		.loc 1 285 0
 501 0056 5796      		adiw r26,23
 502 0058 ED91      		ld r30,X+
 503 005a FC91      		ld r31,X
 504 005c 5897      		sbiw r26,23+1
 505 005e 3097      		sbiw r30,0
 506 0060 01F0      		breq .L21
 286:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 507               		.loc 1 286 0
 508 0062 CD01      		movw r24,r26
 509 0064 0994      		ijmp
 510               	.LVL34:
 511               	.L21:
 512 0066 0895      		ret
 513               		.cfi_endproc
 514               	.LFE180:
 516               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 517               	.global	ibqReleaseEmptyBuffer
 519               	ibqReleaseEmptyBuffer:
 520               	.LFB179:
 254:../../../os/hal/src/hal_buffers.c **** 
 521               		.loc 1 254 0
 522               		.cfi_startproc
 523               	.LVL35:
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 0 */
 527               	.L__stack_usage = 0
 528               	.LBB288:
 529               	.LBB289:
 530               	.LBB290:
 531               	.LBB291:
 437:../../../os/common/ports/AVR/chcore.h **** }
 532               		.loc 4 437 0
 533               	/* #APP */
 534               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 535 0000 F894      		cli
 536               	 ;  0 "" 2
 537               	/* #NOAPP */
 538               	.LBE291:
 539               	.LBE290:
 540               	.LBE289:
 541               	.LBE288:
 257:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 542               		.loc 1 257 0
 543 0002 0E94 0000 		call ibqReleaseEmptyBufferS
 544               	.LVL36:
 545               	.LBB292:
 546               	.LBB293:
 547               	.LBB294:
 548               	.LBB295:
 549               	.LBB296:
 550               		.loc 4 447 0
 551               	/* #APP */
 552               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 553 0006 7894      		sei
 554               	 ;  0 "" 2
 555               	/* #NOAPP */
 556 0008 0895      		ret
 557               	.LBE296:
 558               	.LBE295:
 559               	.LBE294:
 560               	.LBE293:
 561               	.LBE292:
 562               		.cfi_endproc
 563               	.LFE179:
 565               		.section	.text.ibqGetTimeout,"ax",@progbits
 566               	.global	ibqGetTimeout
 568               	ibqGetTimeout:
 569               	.LFB181:
 287:../../../os/hal/src/hal_buffers.c ****   }
 288:../../../os/hal/src/hal_buffers.c **** }
 289:../../../os/hal/src/hal_buffers.c **** 
 290:../../../os/hal/src/hal_buffers.c **** /**
 291:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../../os/hal/src/hal_buffers.c ****  *
 296:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../../os/hal/src/hal_buffers.c ****  *
 307:../../../os/hal/src/hal_buffers.c ****  * @api
 308:../../../os/hal/src/hal_buffers.c ****  */
 309:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 570               		.loc 1 309 0
 571               		.cfi_startproc
 572               	.LVL37:
 573 0000 0F93      		push r16
 574               	.LCFI10:
 575               		.cfi_def_cfa_offset 3
 576               		.cfi_offset 16, -2
 577 0002 1F93      		push r17
 578               	.LCFI11:
 579               		.cfi_def_cfa_offset 4
 580               		.cfi_offset 17, -3
 581 0004 CF93      		push r28
 582               	.LCFI12:
 583               		.cfi_def_cfa_offset 5
 584               		.cfi_offset 28, -4
 585 0006 DF93      		push r29
 586               	.LCFI13:
 587               		.cfi_def_cfa_offset 6
 588               		.cfi_offset 29, -5
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 4 */
 592               	.L__stack_usage = 4
 593 0008 8C01      		movw r16,r24
 594               	.LBB297:
 595               	.LBB298:
 596               	.LBB299:
 597               	.LBB300:
 437:../../../os/common/ports/AVR/chcore.h **** }
 598               		.loc 4 437 0
 599               	/* #APP */
 600               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 601 000a F894      		cli
 602               	 ;  0 "" 2
 603               	/* #NOAPP */
 604               	.LBE300:
 605               	.LBE299:
 606               	.LBE298:
 607               	.LBE297:
 310:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../../os/hal/src/hal_buffers.c **** 
 312:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../../os/hal/src/hal_buffers.c **** 
 314:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 608               		.loc 1 315 0
 609 000c DC01      		movw r26,r24
 610 000e 5396      		adiw r26,19
 611 0010 ED91      		ld r30,X+
 612 0012 FC91      		ld r31,X
 613 0014 5497      		sbiw r26,19+1
 614 0016 3097      		sbiw r30,0
 615 0018 01F0      		breq .L30
 616               	.LVL38:
 617               	.L26:
 316:../../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../../os/hal/src/hal_buffers.c ****     }
 321:../../../os/hal/src/hal_buffers.c ****   }
 322:../../../os/hal/src/hal_buffers.c **** 
 323:../../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 618               		.loc 1 324 0
 619 001a C191      		ld r28,Z+
 620 001c D0E0      		ldi r29,0
 621               	.LVL39:
 325:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 622               		.loc 1 325 0
 623 001e D801      		movw r26,r16
 624 0020 5496      		adiw r26,19+1
 625 0022 FC93      		st X,r31
 626 0024 EE93      		st -X,r30
 627 0026 5397      		sbiw r26,19
 326:../../../os/hal/src/hal_buffers.c **** 
 327:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 628               		.loc 1 329 0
 629 0028 5596      		adiw r26,21
 630 002a 8D91      		ld r24,X+
 631 002c 9C91      		ld r25,X
 632 002e 5697      		sbiw r26,21+1
 633 0030 E817      		cp r30,r24
 634 0032 F907      		cpc r31,r25
 635 0034 00F4      		brsh .L31
 636               	.L29:
 637               	.LBB301:
 638               	.LBB302:
 639               	.LBB303:
 640               	.LBB304:
 641               	.LBB305:
 642               		.loc 4 447 0
 643               	/* #APP */
 644               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 645 0036 7894      		sei
 646               	 ;  0 "" 2
 647               	/* #NOAPP */
 648               	.LBE305:
 649               	.LBE304:
 650               	.LBE303:
 651               	.LBE302:
 652               	.LBE301:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../../os/hal/src/hal_buffers.c ****   }
 332:../../../os/hal/src/hal_buffers.c **** 
 333:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../../os/hal/src/hal_buffers.c ****   return msg;
 653               		.loc 1 334 0
 654 0038 CE01      		movw r24,r28
 655               	.LVL40:
 656               	.L28:
 657               	/* epilogue start */
 335:../../../os/hal/src/hal_buffers.c **** }
 658               		.loc 1 335 0
 659 003a DF91      		pop r29
 660 003c CF91      		pop r28
 661 003e 1F91      		pop r17
 662 0040 0F91      		pop r16
 663               	.LVL41:
 664 0042 0895      		ret
 665               	.LVL42:
 666               	.L31:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 667               		.loc 1 330 0
 668 0044 C801      		movw r24,r16
 669 0046 0E94 0000 		call ibqReleaseEmptyBufferS
 670               	.LVL43:
 671 004a 00C0      		rjmp .L29
 672               	.LVL44:
 673               	.L30:
 316:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 674               		.loc 1 316 0
 675 004c 0E94 0000 		call ibqGetFullBufferTimeoutS
 676               	.LVL45:
 317:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 677               		.loc 1 317 0
 678 0050 0097      		sbiw r24,0
 679 0052 01F4      		brne .L27
 680 0054 D801      		movw r26,r16
 681 0056 5396      		adiw r26,19
 682 0058 ED91      		ld r30,X+
 683 005a FC91      		ld r31,X
 684 005c 5497      		sbiw r26,19+1
 685 005e 00C0      		rjmp .L26
 686               	.L27:
 687               	.LBB306:
 688               	.LBB307:
 689               	.LBB308:
 690               	.LBB309:
 691               	.LBB310:
 692               		.loc 4 447 0
 693               	/* #APP */
 694               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 695 0060 7894      		sei
 696               	 ;  0 "" 2
 697               	/* #NOAPP */
 698               	.LBE310:
 699               	.LBE309:
 700               	.LBE308:
 701               	.LBE307:
 702               	.LBE306:
 319:../../../os/hal/src/hal_buffers.c ****     }
 703               		.loc 1 319 0
 704 0062 00C0      		rjmp .L28
 705               		.cfi_endproc
 706               	.LFE181:
 708               		.section	.text.ibqReadTimeout,"ax",@progbits
 709               	.global	ibqReadTimeout
 711               	ibqReadTimeout:
 712               	.LFB182:
 336:../../../os/hal/src/hal_buffers.c **** 
 337:../../../os/hal/src/hal_buffers.c **** /**
 338:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../../os/hal/src/hal_buffers.c ****  *
 344:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../../os/hal/src/hal_buffers.c ****  *
 356:../../../os/hal/src/hal_buffers.c ****  * @api
 357:../../../os/hal/src/hal_buffers.c ****  */
 358:../../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 713               		.loc 1 359 0
 714               		.cfi_startproc
 715               	.LVL46:
 716 0000 3F92      		push r3
 717               	.LCFI14:
 718               		.cfi_def_cfa_offset 3
 719               		.cfi_offset 3, -2
 720 0002 4F92      		push r4
 721               	.LCFI15:
 722               		.cfi_def_cfa_offset 4
 723               		.cfi_offset 4, -3
 724 0004 5F92      		push r5
 725               	.LCFI16:
 726               		.cfi_def_cfa_offset 5
 727               		.cfi_offset 5, -4
 728 0006 6F92      		push r6
 729               	.LCFI17:
 730               		.cfi_def_cfa_offset 6
 731               		.cfi_offset 6, -5
 732 0008 7F92      		push r7
 733               	.LCFI18:
 734               		.cfi_def_cfa_offset 7
 735               		.cfi_offset 7, -6
 736 000a 8F92      		push r8
 737               	.LCFI19:
 738               		.cfi_def_cfa_offset 8
 739               		.cfi_offset 8, -7
 740 000c 9F92      		push r9
 741               	.LCFI20:
 742               		.cfi_def_cfa_offset 9
 743               		.cfi_offset 9, -8
 744 000e AF92      		push r10
 745               	.LCFI21:
 746               		.cfi_def_cfa_offset 10
 747               		.cfi_offset 10, -9
 748 0010 BF92      		push r11
 749               	.LCFI22:
 750               		.cfi_def_cfa_offset 11
 751               		.cfi_offset 11, -10
 752 0012 CF92      		push r12
 753               	.LCFI23:
 754               		.cfi_def_cfa_offset 12
 755               		.cfi_offset 12, -11
 756 0014 DF92      		push r13
 757               	.LCFI24:
 758               		.cfi_def_cfa_offset 13
 759               		.cfi_offset 13, -12
 760 0016 EF92      		push r14
 761               	.LCFI25:
 762               		.cfi_def_cfa_offset 14
 763               		.cfi_offset 14, -13
 764 0018 FF92      		push r15
 765               	.LCFI26:
 766               		.cfi_def_cfa_offset 15
 767               		.cfi_offset 15, -14
 768 001a 0F93      		push r16
 769               	.LCFI27:
 770               		.cfi_def_cfa_offset 16
 771               		.cfi_offset 16, -15
 772 001c 1F93      		push r17
 773               	.LCFI28:
 774               		.cfi_def_cfa_offset 17
 775               		.cfi_offset 17, -16
 776 001e CF93      		push r28
 777               	.LCFI29:
 778               		.cfi_def_cfa_offset 18
 779               		.cfi_offset 28, -17
 780 0020 DF93      		push r29
 781               	.LCFI30:
 782               		.cfi_def_cfa_offset 19
 783               		.cfi_offset 29, -18
 784               	/* prologue: function */
 785               	/* frame size = 0 */
 786               	/* stack size = 17 */
 787               	.L__stack_usage = 17
 788 0022 8C01      		movw r16,r24
 789 0024 7B01      		movw r14,r22
 790 0026 6A01      		movw r12,r20
 791 0028 5901      		movw r10,r18
 792               	.LVL47:
 793               	.LBB311:
 794               	.LBB312:
 795               	.LBB313:
 796               	.LBB314:
 437:../../../os/common/ports/AVR/chcore.h **** }
 797               		.loc 4 437 0
 798               	/* #APP */
 799               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 800 002a F894      		cli
 801               	 ;  0 "" 2
 802               	/* #NOAPP */
 803               	.LBE314:
 804               	.LBE313:
 805               	.LBE312:
 806               	.LBE311:
 807               	.LBB315:
 808               	.LBB316:
 809               	.LBB317:
 810               	.LBB318:
 811               	.LBB319:
 812               		.file 5 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   AVR/MEGA ST subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                        */
  34:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                        */
  38:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: for models that have many timers, could add AVR_ST_USE_TIMER.      */
  41:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  42:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  43:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                      */
  44:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  45:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  46:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: error checks for valid timer selected.                             */
  47:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  48:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  49:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                        */
  50:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  51:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  52:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  53:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                           */
  54:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  55:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  56:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  57:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                   */
  58:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  59:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  60:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  61:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** extern "C" {
  62:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  63:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  64:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  65:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** }
  66:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  67:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  68:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  69:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  70:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  71:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #else
  72:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  73:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  74:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  75:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  76:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  77:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                 */
  78:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  79:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  80:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  81:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  82:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  83:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  84:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  85:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @notapi
  86:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  88:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  89:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 813               		.loc 5 89 0
 814 002c 4090 8400 		lds r4,132
 815 0030 5090 8500 		lds r5,132+1
 816               	.LVL48:
 817               	.LBE319:
 818               	.LBE318:
 819               	.LBE317:
 820               	.LBE316:
 821               	.LBE315:
 822               	.LBB320:
 823               	.LBB321:
 824               	.LBB322:
 825               		.file 6 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chtime.h **** 
   4:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chtime.h **** 
   6:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chtime.h ****     (at your option) any later version.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @{
  26:../../../os/rt/include/chtime.h ****  */
  27:../../../os/rt/include/chtime.h **** 
  28:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  29:../../../os/rt/include/chtime.h **** #define CHTIME_H
  30:../../../os/rt/include/chtime.h **** 
  31:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  32:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** 
  35:../../../os/rt/include/chtime.h **** /**
  36:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  37:../../../os/rt/include/chtime.h ****  * @{
  38:../../../os/rt/include/chtime.h ****  */
  39:../../../os/rt/include/chtime.h **** /**
  40:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  41:../../../os/rt/include/chtime.h ****  *          specification.
  42:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chtime.h ****  */
  45:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  46:../../../os/rt/include/chtime.h **** 
  47:../../../os/rt/include/chtime.h **** /**
  48:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  49:../../../os/rt/include/chtime.h ****  *          specification.
  50:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chtime.h ****  */
  53:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  54:../../../os/rt/include/chtime.h **** 
  55:../../../os/rt/include/chtime.h **** /**
  56:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  57:../../../os/rt/include/chtime.h ****  */
  58:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  59:../../../os/rt/include/chtime.h **** 
  60:../../../os/rt/include/chtime.h **** /**
  61:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  62:../../../os/rt/include/chtime.h ****  */
  63:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  64:../../../os/rt/include/chtime.h **** /** @} */
  65:../../../os/rt/include/chtime.h **** 
  66:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  67:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** 
  70:../../../os/rt/include/chtime.h **** /**
  71:../../../os/rt/include/chtime.h ****  * @brief   System time counter resolution.
  72:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  73:../../../os/rt/include/chtime.h ****  */
  74:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_RESOLUTION) || defined(__DOXYGEN__)
  75:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_RESOLUTION                32
  76:../../../os/rt/include/chtime.h **** #endif
  77:../../../os/rt/include/chtime.h **** 
  78:../../../os/rt/include/chtime.h **** /**
  79:../../../os/rt/include/chtime.h ****  * @brief   System tick frequency.
  80:../../../os/rt/include/chtime.h ****  * @details Frequency of the system timer that drives the system ticks. This
  81:../../../os/rt/include/chtime.h ****  *          setting also defines the system tick time unit.
  82:../../../os/rt/include/chtime.h ****  */
  83:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_FREQUENCY) || defined(__DOXYGEN__)
  84:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_FREQUENCY                 1000
  85:../../../os/rt/include/chtime.h **** #endif
  86:../../../os/rt/include/chtime.h **** 
  87:../../../os/rt/include/chtime.h **** /**
  88:../../../os/rt/include/chtime.h ****  * @brief   Time intervals data size.
  89:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  90:../../../os/rt/include/chtime.h ****  */
  91:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_INTERVALS_SIZE) || defined(__DOXYGEN__)
  92:../../../os/rt/include/chtime.h **** #define CH_CFG_INTERVALS_SIZE               32
  93:../../../os/rt/include/chtime.h **** #endif
  94:../../../os/rt/include/chtime.h **** 
  95:../../../os/rt/include/chtime.h **** /**
  96:../../../os/rt/include/chtime.h ****  * @brief   Time types data size.
  97:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16 or 32 bits.
  98:../../../os/rt/include/chtime.h ****  */
  99:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_TIME_TYPES_SIZE) || defined(__DOXYGEN__)
 100:../../../os/rt/include/chtime.h **** #define CH_CFG_TIME_TYPES_SIZE              32
 101:../../../os/rt/include/chtime.h **** #endif
 102:../../../os/rt/include/chtime.h **** 
 103:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 104:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
 105:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 106:../../../os/rt/include/chtime.h **** 
 107:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
 108:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
 109:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
 110:../../../os/rt/include/chtime.h **** #endif
 111:../../../os/rt/include/chtime.h **** 
 112:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
 113:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
 114:../../../os/rt/include/chtime.h **** #endif
 115:../../../os/rt/include/chtime.h **** 
 116:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
 117:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
 118:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
 119:../../../os/rt/include/chtime.h **** #endif
 120:../../../os/rt/include/chtime.h **** 
 121:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
 122:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
 123:../../../os/rt/include/chtime.h **** #endif
 124:../../../os/rt/include/chtime.h **** 
 125:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
 126:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
 127:../../../os/rt/include/chtime.h **** #endif
 128:../../../os/rt/include/chtime.h **** 
 129:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 130:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 132:../../../os/rt/include/chtime.h **** 
 133:../../../os/rt/include/chtime.h **** /**
 134:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 135:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 136:../../../os/rt/include/chtime.h ****  */
 137:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 138:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 139:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 140:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 141:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 142:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 143:../../../os/rt/include/chtime.h **** #endif
 144:../../../os/rt/include/chtime.h **** 
 145:../../../os/rt/include/chtime.h **** /**
 146:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 147:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 148:../../../os/rt/include/chtime.h ****  */
 149:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 150:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 151:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 152:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 153:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 154:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 155:../../../os/rt/include/chtime.h **** #endif
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 158:../../../os/rt/include/chtime.h **** /**
 159:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 160:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 161:../../../os/rt/include/chtime.h ****  */
 162:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /**
 165:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 166:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 167:../../../os/rt/include/chtime.h ****  */
 168:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 169:../../../os/rt/include/chtime.h **** 
 170:../../../os/rt/include/chtime.h **** /**
 171:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 172:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 173:../../../os/rt/include/chtime.h ****  */
 174:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 175:../../../os/rt/include/chtime.h **** 
 176:../../../os/rt/include/chtime.h **** /**
 177:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 178:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 179:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 180:../../../os/rt/include/chtime.h ****  */
 181:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 182:../../../os/rt/include/chtime.h **** 
 183:../../../os/rt/include/chtime.h **** #else
 184:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 185:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 186:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 187:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 188:../../../os/rt/include/chtime.h **** #endif
 189:../../../os/rt/include/chtime.h **** 
 190:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 191:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 192:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 193:../../../os/rt/include/chtime.h **** 
 194:../../../os/rt/include/chtime.h **** 
 195:../../../os/rt/include/chtime.h **** /**
 196:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 197:../../../os/rt/include/chtime.h ****  * @{
 198:../../../os/rt/include/chtime.h ****  */
 199:../../../os/rt/include/chtime.h **** /**
 200:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 201:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 202:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 203:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 204:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 205:../../../os/rt/include/chtime.h ****  *          converted.
 206:../../../os/rt/include/chtime.h ****  *
 207:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 208:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 209:../../../os/rt/include/chtime.h ****  *
 210:../../../os/rt/include/chtime.h ****  * @api
 211:../../../os/rt/include/chtime.h ****  */
 212:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 213:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 214:../../../os/rt/include/chtime.h **** 
 215:../../../os/rt/include/chtime.h **** /**
 216:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 217:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 218:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 219:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 220:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 221:../../../os/rt/include/chtime.h ****  *          converted.
 222:../../../os/rt/include/chtime.h ****  *
 223:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 224:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 225:../../../os/rt/include/chtime.h ****  *
 226:../../../os/rt/include/chtime.h ****  * @api
 227:../../../os/rt/include/chtime.h ****  */
 228:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 229:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 230:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 231:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 232:../../../os/rt/include/chtime.h **** 
 233:../../../os/rt/include/chtime.h **** /**
 234:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 235:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 236:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 237:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 238:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 239:../../../os/rt/include/chtime.h ****  *          converted.
 240:../../../os/rt/include/chtime.h ****  *
 241:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 242:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 243:../../../os/rt/include/chtime.h ****  *
 244:../../../os/rt/include/chtime.h ****  * @api
 245:../../../os/rt/include/chtime.h ****  */
 246:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 247:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 248:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 249:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 250:../../../os/rt/include/chtime.h **** 
 251:../../../os/rt/include/chtime.h **** /**
 252:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 253:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 254:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 255:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 256:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 257:../../../os/rt/include/chtime.h ****  *          converted.
 258:../../../os/rt/include/chtime.h ****  *
 259:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 260:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 261:../../../os/rt/include/chtime.h ****  *
 262:../../../os/rt/include/chtime.h ****  * @api
 263:../../../os/rt/include/chtime.h ****  */
 264:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 265:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 266:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 267:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 268:../../../os/rt/include/chtime.h **** 
 269:../../../os/rt/include/chtime.h **** /**
 270:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 271:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 272:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 273:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 274:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 275:../../../os/rt/include/chtime.h ****  *          converted.
 276:../../../os/rt/include/chtime.h ****  *
 277:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 278:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 279:../../../os/rt/include/chtime.h ****  *
 280:../../../os/rt/include/chtime.h ****  * @api
 281:../../../os/rt/include/chtime.h ****  */
 282:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 283:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 284:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 285:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** /**
 288:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 289:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 290:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 291:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 292:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 293:../../../os/rt/include/chtime.h ****  *          converted.
 294:../../../os/rt/include/chtime.h ****  *
 295:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 296:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 297:../../../os/rt/include/chtime.h ****  *
 298:../../../os/rt/include/chtime.h ****  * @api
 299:../../../os/rt/include/chtime.h ****  */
 300:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 301:../../../os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 302:../../../os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 303:../../../os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 304:../../../os/rt/include/chtime.h **** /** @} */
 305:../../../os/rt/include/chtime.h **** 
 306:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 307:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 308:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 309:../../../os/rt/include/chtime.h **** 
 310:../../../os/rt/include/chtime.h **** /*
 311:../../../os/rt/include/chtime.h ****  * Virtual Timers APIs.
 312:../../../os/rt/include/chtime.h ****  */
 313:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 314:../../../os/rt/include/chtime.h **** extern "C" {
 315:../../../os/rt/include/chtime.h **** #endif
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** #endif
 320:../../../os/rt/include/chtime.h **** 
 321:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 322:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 323:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 324:../../../os/rt/include/chtime.h **** 
 325:../../../os/rt/include/chtime.h **** /**
 326:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 327:../../../os/rt/include/chtime.h ****  * @{
 328:../../../os/rt/include/chtime.h ****  */
 329:../../../os/rt/include/chtime.h **** /**
 330:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 331:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 332:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 333:../../../os/rt/include/chtime.h ****  *
 334:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 335:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 336:../../../os/rt/include/chtime.h ****  *
 337:../../../os/rt/include/chtime.h ****  * @special
 338:../../../os/rt/include/chtime.h ****  */
 339:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 340:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 343:../../../os/rt/include/chtime.h **** 
 344:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 345:../../../os/rt/include/chtime.h ****               "conversion overflow");
 346:../../../os/rt/include/chtime.h **** 
 347:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 348:../../../os/rt/include/chtime.h **** }
 349:../../../os/rt/include/chtime.h **** 
 350:../../../os/rt/include/chtime.h **** /**
 351:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 352:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 353:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 354:../../../os/rt/include/chtime.h ****  *
 355:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 356:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 357:../../../os/rt/include/chtime.h ****  *
 358:../../../os/rt/include/chtime.h ****  * @special
 359:../../../os/rt/include/chtime.h ****  */
 360:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 361:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 362:../../../os/rt/include/chtime.h **** 
 363:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 364:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 365:../../../os/rt/include/chtime.h **** 
 366:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 367:../../../os/rt/include/chtime.h ****               "conversion overflow");
 368:../../../os/rt/include/chtime.h **** 
 369:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 370:../../../os/rt/include/chtime.h **** }
 371:../../../os/rt/include/chtime.h **** 
 372:../../../os/rt/include/chtime.h **** /**
 373:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 374:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 375:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 376:../../../os/rt/include/chtime.h ****  *
 377:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 378:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 379:../../../os/rt/include/chtime.h ****  *
 380:../../../os/rt/include/chtime.h ****  * @special
 381:../../../os/rt/include/chtime.h ****  */
 382:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 383:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 384:../../../os/rt/include/chtime.h **** 
 385:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 386:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 387:../../../os/rt/include/chtime.h **** 
 388:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 389:../../../os/rt/include/chtime.h ****               "conversion overflow");
 390:../../../os/rt/include/chtime.h **** 
 391:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 392:../../../os/rt/include/chtime.h **** }
 393:../../../os/rt/include/chtime.h **** 
 394:../../../os/rt/include/chtime.h **** /**
 395:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 396:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 397:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 398:../../../os/rt/include/chtime.h ****  *
 399:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 400:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 401:../../../os/rt/include/chtime.h ****  *
 402:../../../os/rt/include/chtime.h ****  * @special
 403:../../../os/rt/include/chtime.h ****  */
 404:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 405:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 408:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 409:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 410:../../../os/rt/include/chtime.h **** 
 411:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 412:../../../os/rt/include/chtime.h ****               "conversion overflow");
 413:../../../os/rt/include/chtime.h **** 
 414:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 415:../../../os/rt/include/chtime.h **** }
 416:../../../os/rt/include/chtime.h **** 
 417:../../../os/rt/include/chtime.h **** /**
 418:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 419:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 420:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 421:../../../os/rt/include/chtime.h ****  *
 422:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 423:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 424:../../../os/rt/include/chtime.h ****  *
 425:../../../os/rt/include/chtime.h ****  * @special
 426:../../../os/rt/include/chtime.h ****  */
 427:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 428:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 431:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 432:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 433:../../../os/rt/include/chtime.h **** 
 434:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 435:../../../os/rt/include/chtime.h ****               "conversion overflow");
 436:../../../os/rt/include/chtime.h **** 
 437:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 438:../../../os/rt/include/chtime.h **** }
 439:../../../os/rt/include/chtime.h **** 
 440:../../../os/rt/include/chtime.h **** /**
 441:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 442:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 443:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 444:../../../os/rt/include/chtime.h ****  *
 445:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 446:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 447:../../../os/rt/include/chtime.h ****  *
 448:../../../os/rt/include/chtime.h ****  * @special
 449:../../../os/rt/include/chtime.h ****  */
 450:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 451:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 452:../../../os/rt/include/chtime.h **** 
 453:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 454:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 455:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 456:../../../os/rt/include/chtime.h **** 
 457:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 458:../../../os/rt/include/chtime.h ****               "conversion overflow");
 459:../../../os/rt/include/chtime.h **** 
 460:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 461:../../../os/rt/include/chtime.h **** }
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h **** /**
 464:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 465:../../../os/rt/include/chtime.h ****  *
 466:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 467:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 468:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 469:../../../os/rt/include/chtime.h ****  *
 470:../../../os/rt/include/chtime.h ****  * @xclass
 471:../../../os/rt/include/chtime.h ****  */
 472:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 473:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 474:../../../os/rt/include/chtime.h **** 
 475:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 476:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
 477:../../../os/rt/include/chtime.h **** #endif
 478:../../../os/rt/include/chtime.h **** 
 479:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 826               		.loc 6 479 0
 827 0034 420E      		add r4,r18
 828 0036 531E      		adc r5,r19
 829               	.LVL49:
 830               	.LBE322:
 831               	.LBE321:
 832               	.LBE320:
 360:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 833               		.loc 1 360 0
 834 0038 612C      		mov r6,__zero_reg__
 835 003a 712C      		mov r7,__zero_reg__
 836               	.LBB323:
 837               	.LBB324:
 361:../../../os/hal/src/hal_buffers.c ****   systime_t deadline;
 362:../../../os/hal/src/hal_buffers.c **** 
 363:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 364:../../../os/hal/src/hal_buffers.c **** 
 365:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 366:../../../os/hal/src/hal_buffers.c **** 
 367:../../../os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 368:../../../os/hal/src/hal_buffers.c ****   deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 369:../../../os/hal/src/hal_buffers.c **** 
 370:../../../os/hal/src/hal_buffers.c ****   while (true) {
 371:../../../os/hal/src/hal_buffers.c ****     size_t size;
 372:../../../os/hal/src/hal_buffers.c **** 
 373:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 374:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 375:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 376:../../../os/hal/src/hal_buffers.c **** 
 377:../../../os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 378:../../../os/hal/src/hal_buffers.c ****          deadline.*/
 379:../../../os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 838               		.loc 1 379 0
 839 003c 4901      		movw r8,r18
 840 003e 21E0      		ldi r18,1
 841 0040 821A      		sub r8,r18
 842 0042 9108      		sbc r9,__zero_reg__
 843               	.LVL50:
 844               	.LBE324:
 380:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 381:../../../os/hal/src/hal_buffers.c ****       }
 382:../../../os/hal/src/hal_buffers.c ****       else {
 383:../../../os/hal/src/hal_buffers.c ****         sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 384:../../../os/hal/src/hal_buffers.c ****                                                    deadline);
 385:../../../os/hal/src/hal_buffers.c **** 
 386:../../../os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 387:../../../os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 388:../../../os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 389:../../../os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 390:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 391:../../../os/hal/src/hal_buffers.c ****           return r;
 392:../../../os/hal/src/hal_buffers.c ****         }
 393:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 394:../../../os/hal/src/hal_buffers.c ****       }
 395:../../../os/hal/src/hal_buffers.c **** 
 396:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 397:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 398:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 399:../../../os/hal/src/hal_buffers.c ****         return r;
 400:../../../os/hal/src/hal_buffers.c ****       }
 401:../../../os/hal/src/hal_buffers.c ****     }
 402:../../../os/hal/src/hal_buffers.c **** 
 403:../../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 404:../../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 405:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 406:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 407:../../../os/hal/src/hal_buffers.c ****     }
 408:../../../os/hal/src/hal_buffers.c **** 
 409:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 410:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 411:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 412:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 413:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 845               		.loc 1 413 0
 846 0044 80E4      		ldi r24,lo8(64)
 847 0046 382E      		mov r3,r24
 848               	.LVL51:
 849 0048 00C0      		rjmp .L43
 850               	.LVL52:
 851               	.L46:
 852 004a FB01      		movw r30,r22
 853 004c D701      		movw r26,r14
 854 004e 832D      		mov r24,r3
 855               		0:
 856 0050 0190      		ld r0,Z+
 857 0052 0D92      		st X+,r0
 858 0054 8A95      		dec r24
 859 0056 01F4      		brne 0b
 414:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 860               		.loc 1 414 0
 861 0058 F0E4      		ldi r31,64
 862 005a EF0E      		add r14,r31
 863 005c F11C      		adc r15,__zero_reg__
 864               	.LVL53:
 415:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 865               		.loc 1 415 0
 866 005e F801      		movw r30,r16
 867 0060 8389      		ldd r24,Z+19
 868 0062 9489      		ldd r25,Z+20
 869 0064 805C      		subi r24,-64
 870 0066 9F4F      		sbci r25,-1
 871 0068 948B      		std Z+20,r25
 872 006a 838B      		std Z+19,r24
 416:../../../os/hal/src/hal_buffers.c ****       r         += 64U;
 873               		.loc 1 416 0
 874 006c F0E4      		ldi r31,64
 875 006e 6F0E      		add r6,r31
 876 0070 711C      		adc r7,__zero_reg__
 877               	.LVL54:
 417:../../../os/hal/src/hal_buffers.c ****     }
 418:../../../os/hal/src/hal_buffers.c ****     else {
 419:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 420:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 421:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 422:../../../os/hal/src/hal_buffers.c ****       r         += size;
 423:../../../os/hal/src/hal_buffers.c ****     }
 424:../../../os/hal/src/hal_buffers.c **** 
 425:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 426:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 878               		.loc 1 426 0
 879 0072 F801      		movw r30,r16
 880 0074 2589      		ldd r18,Z+21
 881 0076 3689      		ldd r19,Z+22
 882 0078 8217      		cp r24,r18
 883 007a 9307      		cpc r25,r19
 884 007c 00F4      		brsh .L44
 885               	.L42:
 886               	.LBB339:
 887               	.LBB340:
 888               	.LBB341:
 889               	.LBB342:
 890               	.LBB343:
 891               		.loc 4 447 0
 892               	/* #APP */
 893               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 894 007e 7894      		sei
 895               	 ;  0 "" 2
 896               	/* #NOAPP */
 897               	.LBE343:
 898               	.LBE342:
 899               	.LBE341:
 900               	.LBE340:
 901               	.LBE339:
 427:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 428:../../../os/hal/src/hal_buffers.c ****     }
 429:../../../os/hal/src/hal_buffers.c **** 
 430:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 431:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 432:../../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 902               		.loc 1 432 0
 903 0080 6C14      		cp r6,r12
 904 0082 7D04      		cpc r7,r13
 905 0084 00F4      		brsh .L37
 906               	.L47:
 907               	.LBB348:
 908               	.LBB349:
 909               	.LBB350:
 910               	.LBB351:
 437:../../../os/common/ports/AVR/chcore.h **** }
 911               		.loc 4 437 0
 912               	/* #APP */
 913               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 914 0086 F894      		cli
 915               	 ;  0 "" 2
 916               	.LVL55:
 917               	/* #NOAPP */
 918               	.L43:
 919               	.LBE351:
 920               	.LBE350:
 921               	.LBE349:
 922               	.LBE348:
 374:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 923               		.loc 1 374 0
 924 0088 F801      		movw r30,r16
 925 008a 6389      		ldd r22,Z+19
 926 008c 7489      		ldd r23,Z+20
 927 008e 6115      		cp r22,__zero_reg__
 928 0090 7105      		cpc r23,__zero_reg__
 929 0092 01F4      		brne .+2
 930 0094 00C0      		rjmp .L45
 931               	.L33:
 404:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 932               		.loc 1 404 0
 933 0096 F801      		movw r30,r16
 934 0098 C589      		ldd r28,Z+21
 935 009a D689      		ldd r29,Z+22
 936               	.LVL56:
 405:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 937               		.loc 1 405 0
 938 009c C601      		movw r24,r12
 939 009e 8619      		sub r24,r6
 940 00a0 9709      		sbc r25,r7
 941 00a2 C61B      		sub r28,r22
 942 00a4 D70B      		sbc r29,r23
 943               	.LVL57:
 944 00a6 8C17      		cp r24,r28
 945 00a8 9D07      		cpc r25,r29
 946 00aa 00F4      		brsh .L39
 947 00ac EC01      		movw r28,r24
 948               	.LVL58:
 949               	.L39:
 411:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 950               		.loc 1 411 0
 951 00ae C134      		cpi r28,65
 952 00b0 D105      		cpc r29,__zero_reg__
 953 00b2 00F4      		brsh .L46
 419:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 954               		.loc 1 419 0
 955 00b4 AE01      		movw r20,r28
 956 00b6 C701      		movw r24,r14
 957 00b8 0E94 0000 		call memcpy
 958               	.LVL59:
 420:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 959               		.loc 1 420 0
 960 00bc EC0E      		add r14,r28
 961 00be FD1E      		adc r15,r29
 962               	.LVL60:
 421:../../../os/hal/src/hal_buffers.c ****       r         += size;
 963               		.loc 1 421 0
 964 00c0 F801      		movw r30,r16
 965 00c2 8389      		ldd r24,Z+19
 966 00c4 9489      		ldd r25,Z+20
 967 00c6 8C0F      		add r24,r28
 968 00c8 9D1F      		adc r25,r29
 969 00ca 948B      		std Z+20,r25
 970 00cc 838B      		std Z+19,r24
 422:../../../os/hal/src/hal_buffers.c ****     }
 971               		.loc 1 422 0
 972 00ce 6C0E      		add r6,r28
 973 00d0 7D1E      		adc r7,r29
 974               	.LVL61:
 426:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 975               		.loc 1 426 0
 976 00d2 F801      		movw r30,r16
 977 00d4 2589      		ldd r18,Z+21
 978 00d6 3689      		ldd r19,Z+22
 979 00d8 8217      		cp r24,r18
 980 00da 9307      		cpc r25,r19
 981 00dc 00F0      		brlo .L42
 982               	.L44:
 427:../../../os/hal/src/hal_buffers.c ****     }
 983               		.loc 1 427 0
 984 00de C801      		movw r24,r16
 985 00e0 0E94 0000 		call ibqReleaseEmptyBufferS
 986               	.LVL62:
 987               	.LBB352:
 988               	.LBB347:
 989               	.LBB346:
 990               	.LBB345:
 991               	.LBB344:
 992               		.loc 4 447 0
 993               	/* #APP */
 994               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 995 00e4 7894      		sei
 996               	 ;  0 "" 2
 997               	/* #NOAPP */
 998               	.LBE344:
 999               	.LBE345:
 1000               	.LBE346:
 1001               	.LBE347:
 1002               	.LBE352:
 1003               		.loc 1 432 0
 1004 00e6 6C14      		cp r6,r12
 1005 00e8 7D04      		cpc r7,r13
 1006 00ea 00F0      		brlo .L47
 1007               	.LVL63:
 1008               	.L37:
 1009               	.LBE323:
 433:../../../os/hal/src/hal_buffers.c ****       return r;
 434:../../../os/hal/src/hal_buffers.c ****     }
 435:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 436:../../../os/hal/src/hal_buffers.c ****   }
 437:../../../os/hal/src/hal_buffers.c **** }
 1010               		.loc 1 437 0
 1011 00ec C301      		movw r24,r6
 1012               	/* epilogue start */
 1013 00ee DF91      		pop r29
 1014 00f0 CF91      		pop r28
 1015 00f2 1F91      		pop r17
 1016 00f4 0F91      		pop r16
 1017               	.LVL64:
 1018 00f6 FF90      		pop r15
 1019 00f8 EF90      		pop r14
 1020               	.LVL65:
 1021 00fa DF90      		pop r13
 1022 00fc CF90      		pop r12
 1023               	.LVL66:
 1024 00fe BF90      		pop r11
 1025 0100 AF90      		pop r10
 1026               	.LVL67:
 1027 0102 9F90      		pop r9
 1028 0104 8F90      		pop r8
 1029               	.LVL68:
 1030 0106 7F90      		pop r7
 1031 0108 6F90      		pop r6
 1032               	.LVL69:
 1033 010a 5F90      		pop r5
 1034 010c 4F90      		pop r4
 1035 010e 3F90      		pop r3
 1036 0110 0895      		ret
 1037               	.LVL70:
 1038               	.L45:
 1039               	.LBB354:
 1040               	.LBB353:
 379:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 1041               		.loc 1 379 0
 1042 0112 FEEF      		ldi r31,-2
 1043 0114 8F16      		cp r8,r31
 1044 0116 FFEF      		ldi r31,-1
 1045 0118 9F06      		cpc r9,r31
 1046 011a 00F4      		brsh .L48
 1047               	.LBB325:
 1048               	.LBB326:
 1049               	.LBB327:
 1050               	.LBB328:
 1051               	.LBB329:
 1052               	.LBB330:
 1053               		.loc 5 89 0
 1054 011c 8091 8400 		lds r24,132
 1055 0120 9091 8500 		lds r25,132+1
 1056               	.LVL71:
 1057               	.LBE330:
 1058               	.LBE329:
 1059               	.LBE328:
 1060               	.LBE327:
 1061               	.LBE326:
 1062               	.LBB331:
 1063               	.LBB332:
 1064               	.LBB333:
 480:../../../os/rt/include/chtime.h **** }
 481:../../../os/rt/include/chtime.h **** 
 482:../../../os/rt/include/chtime.h **** /**
 483:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 484:../../../os/rt/include/chtime.h ****  *
 485:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 486:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 487:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 488:../../../os/rt/include/chtime.h ****  *
 489:../../../os/rt/include/chtime.h ****  * @xclass
 490:../../../os/rt/include/chtime.h ****  */
 491:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 492:../../../os/rt/include/chtime.h **** 
 493:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 494:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 495:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1065               		.loc 6 495 0
 1066 0124 B201      		movw r22,r4
 1067 0126 681B      		sub r22,r24
 1068 0128 790B      		sbc r23,r25
 1069               	.LBE333:
 1070               	.LBE332:
 1071               	.LBE331:
 389:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 1072               		.loc 1 389 0
 1073 012a A616      		cp r10,r22
 1074 012c B706      		cpc r11,r23
 1075 012e 00F0      		brlo .L38
 393:../../../os/hal/src/hal_buffers.c ****       }
 1076               		.loc 1 393 0
 1077 0130 C801      		movw r24,r16
 1078               	.LVL72:
 1079 0132 0E94 0000 		call ibqGetFullBufferTimeoutS
 1080               	.LVL73:
 1081               	.LBE325:
 397:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1082               		.loc 1 397 0
 1083 0136 892B      		or r24,r25
 1084 0138 01F4      		brne .L38
 1085               	.LVL74:
 1086               	.L49:
 1087 013a F801      		movw r30,r16
 1088 013c 6389      		ldd r22,Z+19
 1089 013e 7489      		ldd r23,Z+20
 1090 0140 00C0      		rjmp .L33
 1091               	.LVL75:
 1092               	.L48:
 380:../../../os/hal/src/hal_buffers.c ****       }
 1093               		.loc 1 380 0
 1094 0142 B501      		movw r22,r10
 1095 0144 C801      		movw r24,r16
 1096 0146 0E94 0000 		call ibqGetFullBufferTimeoutS
 1097               	.LVL76:
 397:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1098               		.loc 1 397 0
 1099 014a 892B      		or r24,r25
 1100 014c 01F0      		breq .L49
 1101               	.LVL77:
 1102               	.L38:
 1103               	.LBB334:
 1104               	.LBB335:
 1105               	.LBB336:
 1106               	.LBB337:
 1107               	.LBB338:
 1108               		.loc 4 447 0
 1109               	/* #APP */
 1110               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1111 014e 7894      		sei
 1112               	 ;  0 "" 2
 1113               	/* #NOAPP */
 1114               	.LBE338:
 1115               	.LBE337:
 1116               	.LBE336:
 1117               	.LBE335:
 1118               	.LBE334:
 399:../../../os/hal/src/hal_buffers.c ****       }
 1119               		.loc 1 399 0
 1120 0150 00C0      		rjmp .L37
 1121               	.LBE353:
 1122               	.LBE354:
 1123               		.cfi_endproc
 1124               	.LFE182:
 1126               		.section	.text.obqObjectInit,"ax",@progbits
 1127               	.global	obqObjectInit
 1129               	obqObjectInit:
 1130               	.LFB183:
 438:../../../os/hal/src/hal_buffers.c **** 
 439:../../../os/hal/src/hal_buffers.c **** /**
 440:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 441:../../../os/hal/src/hal_buffers.c ****  *
 442:../../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 443:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 444:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 445:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 446:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 447:../../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 448:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 449:../../../os/hal/src/hal_buffers.c ****  *
 450:../../../os/hal/src/hal_buffers.c ****  * @init
 451:../../../os/hal/src/hal_buffers.c ****  */
 452:../../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 453:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1131               		.loc 1 453 0
 1132               		.cfi_startproc
 1133               	.LVL78:
 1134 0000 CF92      		push r12
 1135               	.LCFI31:
 1136               		.cfi_def_cfa_offset 3
 1137               		.cfi_offset 12, -2
 1138 0002 DF92      		push r13
 1139               	.LCFI32:
 1140               		.cfi_def_cfa_offset 4
 1141               		.cfi_offset 13, -3
 1142 0004 EF92      		push r14
 1143               	.LCFI33:
 1144               		.cfi_def_cfa_offset 5
 1145               		.cfi_offset 14, -4
 1146 0006 FF92      		push r15
 1147               	.LCFI34:
 1148               		.cfi_def_cfa_offset 6
 1149               		.cfi_offset 15, -5
 1150 0008 0F93      		push r16
 1151               	.LCFI35:
 1152               		.cfi_def_cfa_offset 7
 1153               		.cfi_offset 16, -6
 1154 000a 1F93      		push r17
 1155               	.LCFI36:
 1156               		.cfi_def_cfa_offset 8
 1157               		.cfi_offset 17, -7
 1158               	/* prologue: function */
 1159               	/* frame size = 0 */
 1160               	/* stack size = 6 */
 1161               	.L__stack_usage = 6
 1162 000c FC01      		movw r30,r24
 1163               	.LVL79:
 1164               	.LBB355:
 1165               	.LBB356:
 1166               	.LBB357:
 1167               	.LBB358:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 1168               		.loc 2 539 0
 1169 000e 9183      		std Z+1,r25
 1170 0010 8083      		st Z,r24
 1171               		.loc 2 540 0
 1172 0012 9383      		std Z+3,r25
 1173 0014 8283      		std Z+2,r24
 1174               	.LBE358:
 1175               	.LBE357:
 1176               	.LBE356:
 1177               	.LBE355:
 454:../../../os/hal/src/hal_buffers.c **** 
 455:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 456:../../../os/hal/src/hal_buffers.c **** 
 457:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 458:../../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1178               		.loc 1 458 0
 1179 0016 6483      		std Z+4,r22
 459:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1180               		.loc 1 459 0
 1181 0018 1683      		std Z+6,r17
 1182 001a 0583      		std Z+5,r16
 460:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1183               		.loc 1 460 0
 1184 001c 5287      		std Z+10,r21
 1185 001e 4187      		std Z+9,r20
 461:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1186               		.loc 1 461 0
 1187 0020 5087      		std Z+8,r21
 1188 0022 4783      		std Z+7,r20
 462:../../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1189               		.loc 1 462 0
 1190 0024 2E5F      		subi r18,-2
 1191 0026 3F4F      		sbci r19,-1
 1192               	.LVL80:
 1193 0028 029F      		mul r16,r18
 1194 002a C001      		movw r24,r0
 1195 002c 039F      		mul r16,r19
 1196 002e 900D      		add r25,r0
 1197 0030 129F      		mul r17,r18
 1198 0032 900D      		add r25,r0
 1199 0034 1124      		clr r1
 1200               	.LVL81:
 1201 0036 840F      		add r24,r20
 1202 0038 951F      		adc r25,r21
 1203 003a 9487      		std Z+12,r25
 1204 003c 8387      		std Z+11,r24
 463:../../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1205               		.loc 1 463 0
 1206 003e 3687      		std Z+14,r19
 1207 0040 2587      		std Z+13,r18
 464:../../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1208               		.loc 1 464 0
 1209 0042 108B      		std Z+16,r17
 1210 0044 0787      		std Z+15,r16
 465:../../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1211               		.loc 1 465 0
 1212 0046 528B      		std Z+18,r21
 1213 0048 418B      		std Z+17,r20
 466:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1214               		.loc 1 466 0
 1215 004a 148A      		std Z+20,__zero_reg__
 1216 004c 138A      		std Z+19,__zero_reg__
 467:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1217               		.loc 1 467 0
 1218 004e 168A      		std Z+22,__zero_reg__
 1219 0050 158A      		std Z+21,__zero_reg__
 468:../../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1220               		.loc 1 468 0
 1221 0052 F08E      		std Z+24,r15
 1222 0054 E78A      		std Z+23,r14
 469:../../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1223               		.loc 1 469 0
 1224 0056 D28E      		std Z+26,r13
 1225 0058 C18E      		std Z+25,r12
 1226               	/* epilogue start */
 470:../../../os/hal/src/hal_buffers.c **** }
 1227               		.loc 1 470 0
 1228 005a 1F91      		pop r17
 1229 005c 0F91      		pop r16
 1230               	.LVL82:
 1231 005e FF90      		pop r15
 1232 0060 EF90      		pop r14
 1233               	.LVL83:
 1234 0062 DF90      		pop r13
 1235 0064 CF90      		pop r12
 1236               	.LVL84:
 1237 0066 0895      		ret
 1238               		.cfi_endproc
 1239               	.LFE183:
 1241               		.section	.text.obqResetI,"ax",@progbits
 1242               	.global	obqResetI
 1244               	obqResetI:
 1245               	.LFB184:
 471:../../../os/hal/src/hal_buffers.c **** 
 472:../../../os/hal/src/hal_buffers.c **** /**
 473:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 474:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 475:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 476:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 477:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 478:../../../os/hal/src/hal_buffers.c ****  *
 479:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 480:../../../os/hal/src/hal_buffers.c ****  *
 481:../../../os/hal/src/hal_buffers.c ****  * @iclass
 482:../../../os/hal/src/hal_buffers.c ****  */
 483:../../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1246               		.loc 1 483 0
 1247               		.cfi_startproc
 1248               	.LVL85:
 1249               	/* prologue: function */
 1250               	/* frame size = 0 */
 1251               	/* stack size = 0 */
 1252               	.L__stack_usage = 0
 1253 0000 FC01      		movw r30,r24
 484:../../../os/hal/src/hal_buffers.c **** 
 485:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 486:../../../os/hal/src/hal_buffers.c **** 
 487:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1254               		.loc 1 487 0
 1255 0002 8785      		ldd r24,Z+15
 1256 0004 9089      		ldd r25,Z+16
 1257               	.LVL86:
 1258 0006 9683      		std Z+6,r25
 1259 0008 8583      		std Z+5,r24
 488:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1260               		.loc 1 488 0
 1261 000a 8189      		ldd r24,Z+17
 1262 000c 9289      		ldd r25,Z+18
 1263 000e 9287      		std Z+10,r25
 1264 0010 8187      		std Z+9,r24
 489:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1265               		.loc 1 489 0
 1266 0012 9087      		std Z+8,r25
 1267 0014 8783      		std Z+7,r24
 490:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1268               		.loc 1 490 0
 1269 0016 148A      		std Z+20,__zero_reg__
 1270 0018 138A      		std Z+19,__zero_reg__
 491:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1271               		.loc 1 491 0
 1272 001a 168A      		std Z+22,__zero_reg__
 1273 001c 158A      		std Z+21,__zero_reg__
 1274               	.LVL87:
 1275               	.LBB359:
 1276               	.LBB360:
 1277               		.loc 3 857 0
 1278 001e 6EEF      		ldi r22,lo8(-2)
 1279 0020 7FEF      		ldi r23,lo8(-1)
 1280 0022 CF01      		movw r24,r30
 1281 0024 0C94 0000 		jmp chThdDequeueAllI
 1282               	.LVL88:
 1283               	.LBE360:
 1284               	.LBE359:
 1285               		.cfi_endproc
 1286               	.LFE184:
 1288               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1289               	.global	obqGetFullBufferI
 1291               	obqGetFullBufferI:
 1292               	.LFB185:
 492:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 493:../../../os/hal/src/hal_buffers.c **** }
 494:../../../os/hal/src/hal_buffers.c **** 
 495:../../../os/hal/src/hal_buffers.c **** /**
 496:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 497:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 498:../../../os/hal/src/hal_buffers.c ****  *
 499:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 500:../../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 501:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 502:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 503:../../../os/hal/src/hal_buffers.c ****  *
 504:../../../os/hal/src/hal_buffers.c ****  * @iclass
 505:../../../os/hal/src/hal_buffers.c ****  */
 506:../../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 507:../../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1293               		.loc 1 507 0
 1294               		.cfi_startproc
 1295               	.LVL89:
 1296               	/* prologue: function */
 1297               	/* frame size = 0 */
 1298               	/* stack size = 0 */
 1299               	.L__stack_usage = 0
 1300 0000 FC01      		movw r30,r24
 508:../../../os/hal/src/hal_buffers.c **** 
 509:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 510:../../../os/hal/src/hal_buffers.c **** 
 511:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1301               		.loc 1 511 0
 1302 0002 2185      		ldd r18,Z+9
 1303 0004 3285      		ldd r19,Z+10
 1304 0006 8781      		ldd r24,Z+7
 1305 0008 9085      		ldd r25,Z+8
 1306               	.LVL90:
 1307 000a 8217      		cp r24,r18
 1308 000c 9307      		cpc r25,r19
 1309 000e 01F0      		breq .L59
 1310               	.L53:
 512:../../../os/hal/src/hal_buffers.c ****     return NULL;
 513:../../../os/hal/src/hal_buffers.c ****   }
 514:../../../os/hal/src/hal_buffers.c **** 
 515:../../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 516:../../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1311               		.loc 1 516 0
 1312 0010 F901      		movw r30,r18
 1313               	.LVL91:
 1314 0012 2191      		ld r18,Z+
 1315 0014 3191      		ld r19,Z+
 1316 0016 CF01      		movw r24,r30
 1317 0018 FB01      		movw r30,r22
 1318 001a 3183      		std Z+1,r19
 1319 001c 2083      		st Z,r18
 517:../../../os/hal/src/hal_buffers.c **** 
 518:../../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 519:../../../os/hal/src/hal_buffers.c **** }
 1320               		.loc 1 519 0
 1321 001e 0895      		ret
 1322               	.LVL92:
 1323               	.L59:
 511:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1324               		.loc 1 511 0 discriminator 1
 1325 0020 8581      		ldd r24,Z+5
 1326 0022 9681      		ldd r25,Z+6
 1327 0024 892B      		or r24,r25
 1328 0026 01F0      		breq .L53
 512:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1329               		.loc 1 512 0
 1330 0028 80E0      		ldi r24,0
 1331 002a 90E0      		ldi r25,0
 1332 002c 0895      		ret
 1333               		.cfi_endproc
 1334               	.LFE185:
 1336               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1337               	.global	obqReleaseEmptyBufferI
 1339               	obqReleaseEmptyBufferI:
 1340               	.LFB186:
 520:../../../os/hal/src/hal_buffers.c **** 
 521:../../../os/hal/src/hal_buffers.c **** /**
 522:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 523:../../../os/hal/src/hal_buffers.c ****  *
 524:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 525:../../../os/hal/src/hal_buffers.c ****  *
 526:../../../os/hal/src/hal_buffers.c ****  * @iclass
 527:../../../os/hal/src/hal_buffers.c ****  */
 528:../../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1341               		.loc 1 528 0
 1342               		.cfi_startproc
 1343               	.LVL93:
 1344               	/* prologue: function */
 1345               	/* frame size = 0 */
 1346               	/* stack size = 0 */
 1347               	.L__stack_usage = 0
 1348 0000 FC01      		movw r30,r24
 529:../../../os/hal/src/hal_buffers.c **** 
 530:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 531:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 532:../../../os/hal/src/hal_buffers.c **** 
 533:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 534:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1349               		.loc 1 534 0
 1350 0002 8581      		ldd r24,Z+5
 1351 0004 9681      		ldd r25,Z+6
 1352               	.LVL94:
 1353 0006 0196      		adiw r24,1
 1354 0008 9683      		std Z+6,r25
 1355 000a 8583      		std Z+5,r24
 535:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1356               		.loc 1 535 0
 1357 000c 2185      		ldd r18,Z+9
 1358 000e 3285      		ldd r19,Z+10
 1359 0010 8585      		ldd r24,Z+13
 1360 0012 9685      		ldd r25,Z+14
 1361 0014 820F      		add r24,r18
 1362 0016 931F      		adc r25,r19
 1363 0018 9287      		std Z+10,r25
 1364 001a 8187      		std Z+9,r24
 536:../../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1365               		.loc 1 536 0
 1366 001c 2385      		ldd r18,Z+11
 1367 001e 3485      		ldd r19,Z+12
 1368 0020 8217      		cp r24,r18
 1369 0022 9307      		cpc r25,r19
 1370 0024 00F0      		brlo .L61
 537:../../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1371               		.loc 1 537 0
 1372 0026 8189      		ldd r24,Z+17
 1373 0028 9289      		ldd r25,Z+18
 1374 002a 9287      		std Z+10,r25
 1375 002c 8187      		std Z+9,r24
 1376               	.L61:
 1377               	.LVL95:
 1378               	.LBB361:
 1379               	.LBB362:
 844:../../../os/hal/osal/rt/osal.h **** }
 1380               		.loc 3 844 0
 1381 002e 60E0      		ldi r22,0
 1382 0030 70E0      		ldi r23,0
 1383 0032 CF01      		movw r24,r30
 1384 0034 0C94 0000 		jmp chThdDequeueNextI
 1385               	.LVL96:
 1386               	.LBE362:
 1387               	.LBE361:
 1388               		.cfi_endproc
 1389               	.LFE186:
 1391               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1392               	.global	obqGetEmptyBufferTimeoutS
 1394               	obqGetEmptyBufferTimeoutS:
 1395               	.LFB188:
 538:../../../os/hal/src/hal_buffers.c ****   }
 539:../../../os/hal/src/hal_buffers.c **** 
 540:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 541:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 542:../../../os/hal/src/hal_buffers.c **** }
 543:../../../os/hal/src/hal_buffers.c **** 
 544:../../../os/hal/src/hal_buffers.c **** /**
 545:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 546:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 547:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 548:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 549:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 550:../../../os/hal/src/hal_buffers.c ****  *
 551:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 552:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 553:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 554:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 555:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 556:../../../os/hal/src/hal_buffers.c ****  *                      .
 557:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 558:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 559:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 560:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 561:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 562:../../../os/hal/src/hal_buffers.c ****  *
 563:../../../os/hal/src/hal_buffers.c ****  * @api
 564:../../../os/hal/src/hal_buffers.c ****  */
 565:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 566:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 567:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 568:../../../os/hal/src/hal_buffers.c **** 
 569:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 570:../../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 571:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 572:../../../os/hal/src/hal_buffers.c **** 
 573:../../../os/hal/src/hal_buffers.c ****   return msg;
 574:../../../os/hal/src/hal_buffers.c **** }
 575:../../../os/hal/src/hal_buffers.c **** 
 576:../../../os/hal/src/hal_buffers.c **** /**
 577:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 578:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 579:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 580:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 581:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 582:../../../os/hal/src/hal_buffers.c ****  *
 583:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 584:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 585:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 586:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 587:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 588:../../../os/hal/src/hal_buffers.c ****  *                      .
 589:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 590:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 591:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 592:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 593:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 594:../../../os/hal/src/hal_buffers.c ****  *
 595:../../../os/hal/src/hal_buffers.c ****  * @sclass
 596:../../../os/hal/src/hal_buffers.c ****  */
 597:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 598:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1396               		.loc 1 598 0
 1397               		.cfi_startproc
 1398               	.LVL97:
 1399 0000 0F93      		push r16
 1400               	.LCFI37:
 1401               		.cfi_def_cfa_offset 3
 1402               		.cfi_offset 16, -2
 1403 0002 1F93      		push r17
 1404               	.LCFI38:
 1405               		.cfi_def_cfa_offset 4
 1406               		.cfi_offset 17, -3
 1407 0004 CF93      		push r28
 1408               	.LCFI39:
 1409               		.cfi_def_cfa_offset 5
 1410               		.cfi_offset 28, -4
 1411 0006 DF93      		push r29
 1412               	.LCFI40:
 1413               		.cfi_def_cfa_offset 6
 1414               		.cfi_offset 29, -5
 1415               	/* prologue: function */
 1416               	/* frame size = 0 */
 1417               	/* stack size = 4 */
 1418               	.L__stack_usage = 4
 1419 0008 EC01      		movw r28,r24
 1420 000a 8B01      		movw r16,r22
 599:../../../os/hal/src/hal_buffers.c **** 
 600:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 601:../../../os/hal/src/hal_buffers.c **** 
 602:../../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1421               		.loc 1 602 0
 1422 000c 00C0      		rjmp .L63
 1423               	.LVL98:
 1424               	.L65:
 1425               	.LBB371:
 603:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1426               		.loc 1 603 0
 1427 000e 8C81      		ldd r24,Y+4
 1428 0010 8111      		cpse r24,__zero_reg__
 1429 0012 00C0      		rjmp .L66
 1430               	.LVL99:
 1431               	.LBB372:
 1432               	.LBB373:
 831:../../../os/hal/osal/rt/osal.h **** }
 1433               		.loc 3 831 0
 1434 0014 B801      		movw r22,r16
 1435 0016 CE01      		movw r24,r28
 1436 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1437               	.LVL100:
 1438               	.LBE373:
 1439               	.LBE372:
 604:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 605:../../../os/hal/src/hal_buffers.c ****     }
 606:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 607:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1440               		.loc 1 607 0
 1441 001c 97FD      		sbrc r25,7
 1442 001e 00C0      		rjmp .L64
 1443               	.LVL101:
 1444               	.L63:
 1445               	.LBE371:
 602:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1446               		.loc 1 602 0
 1447 0020 8D81      		ldd r24,Y+5
 1448 0022 9E81      		ldd r25,Y+6
 1449 0024 892B      		or r24,r25
 1450 0026 01F0      		breq .L65
 1451               	.LVL102:
 1452               	.LBB374:
 1453               	.LBB375:
 608:../../../os/hal/src/hal_buffers.c ****       return msg;
 609:../../../os/hal/src/hal_buffers.c ****     }
 610:../../../os/hal/src/hal_buffers.c ****   }
 611:../../../os/hal/src/hal_buffers.c **** 
 612:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 613:../../../os/hal/src/hal_buffers.c **** 
 614:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 615:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1454               		.loc 1 615 0
 1455 0028 2F81      		ldd r18,Y+7
 1456 002a 3885      		ldd r19,Y+8
 1457 002c C901      		movw r24,r18
 1458 002e 0296      		adiw r24,2
 1459 0030 9C8B      		std Y+20,r25
 1460 0032 8B8B      		std Y+19,r24
 616:../../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1461               		.loc 1 616 0
 1462 0034 8D85      		ldd r24,Y+13
 1463 0036 9E85      		ldd r25,Y+14
 1464 0038 820F      		add r24,r18
 1465 003a 931F      		adc r25,r19
 1466 003c 9E8B      		std Y+22,r25
 1467 003e 8D8B      		std Y+21,r24
 1468 0040 80E0      		ldi r24,0
 1469 0042 90E0      		ldi r25,0
 1470               	.LVL103:
 1471               	.L64:
 1472               	/* epilogue start */
 1473               	.LBE375:
 1474               	.LBE374:
 617:../../../os/hal/src/hal_buffers.c **** 
 618:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 619:../../../os/hal/src/hal_buffers.c **** }
 1475               		.loc 1 619 0
 1476 0044 DF91      		pop r29
 1477 0046 CF91      		pop r28
 1478               	.LVL104:
 1479 0048 1F91      		pop r17
 1480 004a 0F91      		pop r16
 1481               	.LVL105:
 1482 004c 0895      		ret
 1483               	.LVL106:
 1484               	.L66:
 1485               	.LBB376:
 604:../../../os/hal/src/hal_buffers.c ****     }
 1486               		.loc 1 604 0
 1487 004e 8EEF      		ldi r24,lo8(-2)
 1488 0050 9FEF      		ldi r25,lo8(-1)
 1489               	/* epilogue start */
 1490               	.LBE376:
 1491               		.loc 1 619 0
 1492 0052 DF91      		pop r29
 1493 0054 CF91      		pop r28
 1494               	.LVL107:
 1495 0056 1F91      		pop r17
 1496 0058 0F91      		pop r16
 1497               	.LVL108:
 1498 005a 0895      		ret
 1499               		.cfi_endproc
 1500               	.LFE188:
 1502               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1503               	.global	obqGetEmptyBufferTimeout
 1505               	obqGetEmptyBufferTimeout:
 1506               	.LFB187:
 566:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1507               		.loc 1 566 0
 1508               		.cfi_startproc
 1509               	.LVL109:
 1510               	/* prologue: function */
 1511               	/* frame size = 0 */
 1512               	/* stack size = 0 */
 1513               	.L__stack_usage = 0
 1514               	.LBB377:
 1515               	.LBB378:
 1516               	.LBB379:
 1517               	.LBB380:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1518               		.loc 4 437 0
 1519               	/* #APP */
 1520               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1521 0000 F894      		cli
 1522               	 ;  0 "" 2
 1523               	/* #NOAPP */
 1524               	.LBE380:
 1525               	.LBE379:
 1526               	.LBE378:
 1527               	.LBE377:
 570:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1528               		.loc 1 570 0
 1529 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1530               	.LVL110:
 1531               	.LBB381:
 1532               	.LBB382:
 1533               	.LBB383:
 1534               	.LBB384:
 1535               	.LBB385:
 1536               		.loc 4 447 0
 1537               	/* #APP */
 1538               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1539 0006 7894      		sei
 1540               	 ;  0 "" 2
 1541               	/* #NOAPP */
 1542               	.LBE385:
 1543               	.LBE384:
 1544               	.LBE383:
 1545               	.LBE382:
 1546               	.LBE381:
 574:../../../os/hal/src/hal_buffers.c **** 
 1547               		.loc 1 574 0
 1548 0008 0895      		ret
 1549               		.cfi_endproc
 1550               	.LFE187:
 1552               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1553               	.global	obqPostFullBufferS
 1555               	obqPostFullBufferS:
 1556               	.LFB190:
 620:../../../os/hal/src/hal_buffers.c **** 
 621:../../../os/hal/src/hal_buffers.c **** /**
 622:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 623:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 624:../../../os/hal/src/hal_buffers.c ****  *
 625:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 626:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 627:../../../os/hal/src/hal_buffers.c ****  *
 628:../../../os/hal/src/hal_buffers.c ****  * @api
 629:../../../os/hal/src/hal_buffers.c ****  */
 630:../../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 631:../../../os/hal/src/hal_buffers.c **** 
 632:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 633:../../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 634:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 635:../../../os/hal/src/hal_buffers.c **** }
 636:../../../os/hal/src/hal_buffers.c **** 
 637:../../../os/hal/src/hal_buffers.c **** /**
 638:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 639:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 640:../../../os/hal/src/hal_buffers.c ****  *
 641:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 642:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 643:../../../os/hal/src/hal_buffers.c ****  *
 644:../../../os/hal/src/hal_buffers.c ****  * @sclass
 645:../../../os/hal/src/hal_buffers.c ****  */
 646:../../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 1557               		.loc 1 646 0
 1558               		.cfi_startproc
 1559               	.LVL111:
 1560               	/* prologue: function */
 1561               	/* frame size = 0 */
 1562               	/* stack size = 0 */
 1563               	.L__stack_usage = 0
 1564 0000 DC01      		movw r26,r24
 647:../../../os/hal/src/hal_buffers.c **** 
 648:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 649:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 650:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 651:../../../os/hal/src/hal_buffers.c **** 
 652:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 653:../../../os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1565               		.loc 1 653 0
 1566 0002 1796      		adiw r26,7
 1567 0004 ED91      		ld r30,X+
 1568 0006 FC91      		ld r31,X
 1569 0008 1897      		sbiw r26,7+1
 1570 000a 7183      		std Z+1,r23
 1571 000c 6083      		st Z,r22
 654:../../../os/hal/src/hal_buffers.c **** 
 655:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 656:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1572               		.loc 1 656 0
 1573 000e 1596      		adiw r26,5
 1574 0010 2D91      		ld r18,X+
 1575 0012 3C91      		ld r19,X
 1576 0014 1697      		sbiw r26,5+1
 1577 0016 2150      		subi r18,1
 1578 0018 3109      		sbc r19,__zero_reg__
 1579 001a 1696      		adiw r26,5+1
 1580 001c 3C93      		st X,r19
 1581 001e 2E93      		st -X,r18
 1582 0020 1597      		sbiw r26,5
 657:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1583               		.loc 1 657 0
 1584 0022 1D96      		adiw r26,13
 1585 0024 8D91      		ld r24,X+
 1586 0026 9C91      		ld r25,X
 1587 0028 1E97      		sbiw r26,13+1
 1588               	.LVL112:
 1589 002a 8E0F      		add r24,r30
 1590 002c 9F1F      		adc r25,r31
 1591 002e 1896      		adiw r26,7+1
 1592 0030 9C93      		st X,r25
 1593 0032 8E93      		st -X,r24
 1594 0034 1797      		sbiw r26,7
 658:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1595               		.loc 1 658 0
 1596 0036 1B96      		adiw r26,11
 1597 0038 2D91      		ld r18,X+
 1598 003a 3C91      		ld r19,X
 1599 003c 1C97      		sbiw r26,11+1
 1600 003e 8217      		cp r24,r18
 1601 0040 9307      		cpc r25,r19
 1602 0042 00F0      		brlo .L70
 659:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1603               		.loc 1 659 0
 1604 0044 5196      		adiw r26,17
 1605 0046 8D91      		ld r24,X+
 1606 0048 9C91      		ld r25,X
 1607 004a 5297      		sbiw r26,17+1
 1608 004c 1896      		adiw r26,7+1
 1609 004e 9C93      		st X,r25
 1610 0050 8E93      		st -X,r24
 1611 0052 1797      		sbiw r26,7
 1612               	.L70:
 660:../../../os/hal/src/hal_buffers.c ****   }
 661:../../../os/hal/src/hal_buffers.c **** 
 662:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 663:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1613               		.loc 1 663 0
 1614 0054 5496      		adiw r26,19+1
 1615 0056 1C92      		st X,__zero_reg__
 1616 0058 1E92      		st -X,__zero_reg__
 1617 005a 5397      		sbiw r26,19
 664:../../../os/hal/src/hal_buffers.c **** 
 665:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 666:../../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1618               		.loc 1 666 0
 1619 005c 5796      		adiw r26,23
 1620 005e ED91      		ld r30,X+
 1621 0060 FC91      		ld r31,X
 1622 0062 5897      		sbiw r26,23+1
 1623 0064 3097      		sbiw r30,0
 1624 0066 01F0      		breq .L69
 667:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1625               		.loc 1 667 0
 1626 0068 CD01      		movw r24,r26
 1627 006a 0994      		ijmp
 1628               	.LVL113:
 1629               	.L69:
 1630 006c 0895      		ret
 1631               		.cfi_endproc
 1632               	.LFE190:
 1634               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1635               	.global	obqPostFullBuffer
 1637               	obqPostFullBuffer:
 1638               	.LFB189:
 630:../../../os/hal/src/hal_buffers.c **** 
 1639               		.loc 1 630 0
 1640               		.cfi_startproc
 1641               	.LVL114:
 1642               	/* prologue: function */
 1643               	/* frame size = 0 */
 1644               	/* stack size = 0 */
 1645               	.L__stack_usage = 0
 1646               	.LBB386:
 1647               	.LBB387:
 1648               	.LBB388:
 1649               	.LBB389:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1650               		.loc 4 437 0
 1651               	/* #APP */
 1652               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1653 0000 F894      		cli
 1654               	 ;  0 "" 2
 1655               	/* #NOAPP */
 1656               	.LBE389:
 1657               	.LBE388:
 1658               	.LBE387:
 1659               	.LBE386:
 633:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1660               		.loc 1 633 0
 1661 0002 0E94 0000 		call obqPostFullBufferS
 1662               	.LVL115:
 1663               	.LBB390:
 1664               	.LBB391:
 1665               	.LBB392:
 1666               	.LBB393:
 1667               	.LBB394:
 1668               		.loc 4 447 0
 1669               	/* #APP */
 1670               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1671 0006 7894      		sei
 1672               	 ;  0 "" 2
 1673               	/* #NOAPP */
 1674 0008 0895      		ret
 1675               	.LBE394:
 1676               	.LBE393:
 1677               	.LBE392:
 1678               	.LBE391:
 1679               	.LBE390:
 1680               		.cfi_endproc
 1681               	.LFE189:
 1683               		.section	.text.obqPutTimeout,"ax",@progbits
 1684               	.global	obqPutTimeout
 1686               	obqPutTimeout:
 1687               	.LFB191:
 668:../../../os/hal/src/hal_buffers.c ****   }
 669:../../../os/hal/src/hal_buffers.c **** }
 670:../../../os/hal/src/hal_buffers.c **** 
 671:../../../os/hal/src/hal_buffers.c **** /**
 672:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 673:../../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 674:../../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 675:../../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 676:../../../os/hal/src/hal_buffers.c ****  *
 677:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 678:../../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 679:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 680:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 681:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 682:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 683:../../../os/hal/src/hal_buffers.c ****  *                      .
 684:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 685:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 686:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 687:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 688:../../../os/hal/src/hal_buffers.c ****  *
 689:../../../os/hal/src/hal_buffers.c ****  * @api
 690:../../../os/hal/src/hal_buffers.c ****  */
 691:../../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 692:../../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1688               		.loc 1 692 0
 1689               		.cfi_startproc
 1690               	.LVL116:
 1691 0000 1F93      		push r17
 1692               	.LCFI41:
 1693               		.cfi_def_cfa_offset 3
 1694               		.cfi_offset 17, -2
 1695 0002 CF93      		push r28
 1696               	.LCFI42:
 1697               		.cfi_def_cfa_offset 4
 1698               		.cfi_offset 28, -3
 1699 0004 DF93      		push r29
 1700               	.LCFI43:
 1701               		.cfi_def_cfa_offset 5
 1702               		.cfi_offset 29, -4
 1703               	/* prologue: function */
 1704               	/* frame size = 0 */
 1705               	/* stack size = 3 */
 1706               	.L__stack_usage = 3
 1707 0006 EC01      		movw r28,r24
 1708 0008 162F      		mov r17,r22
 1709               	.LBB395:
 1710               	.LBB396:
 1711               	.LBB397:
 1712               	.LBB398:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1713               		.loc 4 437 0
 1714               	/* #APP */
 1715               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1716 000a F894      		cli
 1717               	 ;  0 "" 2
 1718               	/* #NOAPP */
 1719               	.LBE398:
 1720               	.LBE397:
 1721               	.LBE396:
 1722               	.LBE395:
 693:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 694:../../../os/hal/src/hal_buffers.c **** 
 695:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 696:../../../os/hal/src/hal_buffers.c **** 
 697:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 698:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1723               		.loc 1 698 0
 1724 000c EB89      		ldd r30,Y+19
 1725 000e FC89      		ldd r31,Y+20
 1726 0010 3097      		sbiw r30,0
 1727 0012 01F0      		breq .L78
 1728               	.LVL117:
 1729               	.L74:
 699:../../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 700:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 701:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 702:../../../os/hal/src/hal_buffers.c ****       return msg;
 703:../../../os/hal/src/hal_buffers.c ****     }
 704:../../../os/hal/src/hal_buffers.c ****   }
 705:../../../os/hal/src/hal_buffers.c **** 
 706:../../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 707:../../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1730               		.loc 1 707 0
 1731 0014 1083      		st Z,r17
 708:../../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1732               		.loc 1 708 0
 1733 0016 8B89      		ldd r24,Y+19
 1734 0018 9C89      		ldd r25,Y+20
 1735 001a 0196      		adiw r24,1
 1736 001c 9C8B      		std Y+20,r25
 1737 001e 8B8B      		std Y+19,r24
 709:../../../os/hal/src/hal_buffers.c **** 
 710:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 711:../../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 712:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1738               		.loc 1 712 0
 1739 0020 2D89      		ldd r18,Y+21
 1740 0022 3E89      		ldd r19,Y+22
 1741 0024 8217      		cp r24,r18
 1742 0026 9307      		cpc r25,r19
 1743 0028 00F4      		brsh .L79
 1744               	.L77:
 1745               	.LBB399:
 1746               	.LBB400:
 1747               	.LBB401:
 1748               	.LBB402:
 1749               	.LBB403:
 1750               		.loc 4 447 0
 1751               	/* #APP */
 1752               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1753 002a 7894      		sei
 1754               	 ;  0 "" 2
 1755               	/* #NOAPP */
 1756               	.LBE403:
 1757               	.LBE402:
 1758               	.LBE401:
 1759               	.LBE400:
 1760               	.LBE399:
 713:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 714:../../../os/hal/src/hal_buffers.c ****   }
 715:../../../os/hal/src/hal_buffers.c **** 
 716:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 717:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1761               		.loc 1 717 0
 1762 002c 80E0      		ldi r24,0
 1763 002e 90E0      		ldi r25,0
 1764               	.L76:
 1765               	/* epilogue start */
 718:../../../os/hal/src/hal_buffers.c **** }
 1766               		.loc 1 718 0
 1767 0030 DF91      		pop r29
 1768 0032 CF91      		pop r28
 1769               	.LVL118:
 1770 0034 1F91      		pop r17
 1771               	.LVL119:
 1772 0036 0895      		ret
 1773               	.LVL120:
 1774               	.L79:
 713:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1775               		.loc 1 713 0
 1776 0038 6D85      		ldd r22,Y+13
 1777 003a 7E85      		ldd r23,Y+14
 1778 003c 6250      		subi r22,2
 1779 003e 7109      		sbc r23,__zero_reg__
 1780 0040 CE01      		movw r24,r28
 1781 0042 0E94 0000 		call obqPostFullBufferS
 1782               	.LVL121:
 1783 0046 00C0      		rjmp .L77
 1784               	.LVL122:
 1785               	.L78:
 699:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1786               		.loc 1 699 0
 1787 0048 BA01      		movw r22,r20
 1788 004a 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1789               	.LVL123:
 700:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1790               		.loc 1 700 0
 1791 004e 0097      		sbiw r24,0
 1792 0050 01F4      		brne .L75
 1793 0052 EB89      		ldd r30,Y+19
 1794 0054 FC89      		ldd r31,Y+20
 1795 0056 00C0      		rjmp .L74
 1796               	.L75:
 1797               	.LBB404:
 1798               	.LBB405:
 1799               	.LBB406:
 1800               	.LBB407:
 1801               	.LBB408:
 1802               		.loc 4 447 0
 1803               	/* #APP */
 1804               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1805 0058 7894      		sei
 1806               	 ;  0 "" 2
 1807               	/* #NOAPP */
 1808               	.LBE408:
 1809               	.LBE407:
 1810               	.LBE406:
 1811               	.LBE405:
 1812               	.LBE404:
 702:../../../os/hal/src/hal_buffers.c ****     }
 1813               		.loc 1 702 0
 1814 005a 00C0      		rjmp .L76
 1815               		.cfi_endproc
 1816               	.LFE191:
 1818               		.section	.text.obqWriteTimeout,"ax",@progbits
 1819               	.global	obqWriteTimeout
 1821               	obqWriteTimeout:
 1822               	.LFB192:
 719:../../../os/hal/src/hal_buffers.c **** 
 720:../../../os/hal/src/hal_buffers.c **** /**
 721:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 722:../../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 723:../../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 724:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 725:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 726:../../../os/hal/src/hal_buffers.c ****  *
 727:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 728:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 729:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 730:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 731:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 732:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 733:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 734:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 735:../../../os/hal/src/hal_buffers.c ****  *                      .
 736:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 737:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 738:../../../os/hal/src/hal_buffers.c ****  *
 739:../../../os/hal/src/hal_buffers.c ****  * @api
 740:../../../os/hal/src/hal_buffers.c ****  */
 741:../../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 742:../../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1823               		.loc 1 742 0
 1824               		.cfi_startproc
 1825               	.LVL124:
 1826 0000 3F92      		push r3
 1827               	.LCFI44:
 1828               		.cfi_def_cfa_offset 3
 1829               		.cfi_offset 3, -2
 1830 0002 4F92      		push r4
 1831               	.LCFI45:
 1832               		.cfi_def_cfa_offset 4
 1833               		.cfi_offset 4, -3
 1834 0004 5F92      		push r5
 1835               	.LCFI46:
 1836               		.cfi_def_cfa_offset 5
 1837               		.cfi_offset 5, -4
 1838 0006 6F92      		push r6
 1839               	.LCFI47:
 1840               		.cfi_def_cfa_offset 6
 1841               		.cfi_offset 6, -5
 1842 0008 7F92      		push r7
 1843               	.LCFI48:
 1844               		.cfi_def_cfa_offset 7
 1845               		.cfi_offset 7, -6
 1846 000a 8F92      		push r8
 1847               	.LCFI49:
 1848               		.cfi_def_cfa_offset 8
 1849               		.cfi_offset 8, -7
 1850 000c 9F92      		push r9
 1851               	.LCFI50:
 1852               		.cfi_def_cfa_offset 9
 1853               		.cfi_offset 9, -8
 1854 000e AF92      		push r10
 1855               	.LCFI51:
 1856               		.cfi_def_cfa_offset 10
 1857               		.cfi_offset 10, -9
 1858 0010 BF92      		push r11
 1859               	.LCFI52:
 1860               		.cfi_def_cfa_offset 11
 1861               		.cfi_offset 11, -10
 1862 0012 CF92      		push r12
 1863               	.LCFI53:
 1864               		.cfi_def_cfa_offset 12
 1865               		.cfi_offset 12, -11
 1866 0014 DF92      		push r13
 1867               	.LCFI54:
 1868               		.cfi_def_cfa_offset 13
 1869               		.cfi_offset 13, -12
 1870 0016 EF92      		push r14
 1871               	.LCFI55:
 1872               		.cfi_def_cfa_offset 14
 1873               		.cfi_offset 14, -13
 1874 0018 FF92      		push r15
 1875               	.LCFI56:
 1876               		.cfi_def_cfa_offset 15
 1877               		.cfi_offset 15, -14
 1878 001a 0F93      		push r16
 1879               	.LCFI57:
 1880               		.cfi_def_cfa_offset 16
 1881               		.cfi_offset 16, -15
 1882 001c 1F93      		push r17
 1883               	.LCFI58:
 1884               		.cfi_def_cfa_offset 17
 1885               		.cfi_offset 17, -16
 1886 001e CF93      		push r28
 1887               	.LCFI59:
 1888               		.cfi_def_cfa_offset 18
 1889               		.cfi_offset 28, -17
 1890 0020 DF93      		push r29
 1891               	.LCFI60:
 1892               		.cfi_def_cfa_offset 19
 1893               		.cfi_offset 29, -18
 1894               	/* prologue: function */
 1895               	/* frame size = 0 */
 1896               	/* stack size = 17 */
 1897               	.L__stack_usage = 17
 1898 0022 8C01      		movw r16,r24
 1899 0024 7B01      		movw r14,r22
 1900 0026 6A01      		movw r12,r20
 1901 0028 5901      		movw r10,r18
 1902               	.LVL125:
 1903               	.LBB409:
 1904               	.LBB410:
 1905               	.LBB411:
 1906               	.LBB412:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1907               		.loc 4 437 0
 1908               	/* #APP */
 1909               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1910 002a F894      		cli
 1911               	 ;  0 "" 2
 1912               	/* #NOAPP */
 1913               	.LBE412:
 1914               	.LBE411:
 1915               	.LBE410:
 1916               	.LBE409:
 1917               	.LBB413:
 1918               	.LBB414:
 1919               	.LBB415:
 1920               	.LBB416:
 1921               	.LBB417:
 1922               		.loc 5 89 0
 1923 002c 4090 8400 		lds r4,132
 1924 0030 5090 8500 		lds r5,132+1
 1925               	.LVL126:
 1926               	.LBE417:
 1927               	.LBE416:
 1928               	.LBE415:
 1929               	.LBE414:
 1930               	.LBE413:
 1931               	.LBB418:
 1932               	.LBB419:
 1933               	.LBB420:
 479:../../../os/rt/include/chtime.h **** }
 1934               		.loc 6 479 0
 1935 0034 420E      		add r4,r18
 1936 0036 531E      		adc r5,r19
 1937               	.LVL127:
 1938               	.LBE420:
 1939               	.LBE419:
 1940               	.LBE418:
 743:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 1941               		.loc 1 743 0
 1942 0038 612C      		mov r6,__zero_reg__
 1943 003a 712C      		mov r7,__zero_reg__
 1944               	.LBB421:
 1945               	.LBB422:
 744:../../../os/hal/src/hal_buffers.c ****   systime_t deadline;
 745:../../../os/hal/src/hal_buffers.c **** 
 746:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 747:../../../os/hal/src/hal_buffers.c **** 
 748:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 749:../../../os/hal/src/hal_buffers.c **** 
 750:../../../os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 751:../../../os/hal/src/hal_buffers.c ****   deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 752:../../../os/hal/src/hal_buffers.c **** 
 753:../../../os/hal/src/hal_buffers.c ****   while (true) {
 754:../../../os/hal/src/hal_buffers.c ****     size_t size;
 755:../../../os/hal/src/hal_buffers.c **** 
 756:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 757:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 758:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 759:../../../os/hal/src/hal_buffers.c **** 
 760:../../../os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 761:../../../os/hal/src/hal_buffers.c ****          deadline.*/
 762:../../../os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1946               		.loc 1 762 0
 1947 003c 4901      		movw r8,r18
 1948 003e 21E0      		ldi r18,1
 1949 0040 821A      		sub r8,r18
 1950 0042 9108      		sbc r9,__zero_reg__
 1951               	.LVL128:
 1952               	.LBE422:
 763:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 764:../../../os/hal/src/hal_buffers.c ****       }
 765:../../../os/hal/src/hal_buffers.c ****       else {
 766:../../../os/hal/src/hal_buffers.c ****         sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 767:../../../os/hal/src/hal_buffers.c ****                                                    deadline);
 768:../../../os/hal/src/hal_buffers.c **** 
 769:../../../os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 770:../../../os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 771:../../../os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 772:../../../os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 773:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 774:../../../os/hal/src/hal_buffers.c ****           return w;
 775:../../../os/hal/src/hal_buffers.c ****         }
 776:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 777:../../../os/hal/src/hal_buffers.c ****       }
 778:../../../os/hal/src/hal_buffers.c **** 
 779:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 780:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 781:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 782:../../../os/hal/src/hal_buffers.c ****         return w;
 783:../../../os/hal/src/hal_buffers.c ****       }
 784:../../../os/hal/src/hal_buffers.c ****     }
 785:../../../os/hal/src/hal_buffers.c **** 
 786:../../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 787:../../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 788:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 789:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 790:../../../os/hal/src/hal_buffers.c ****     }
 791:../../../os/hal/src/hal_buffers.c **** 
 792:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 793:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 794:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 795:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 796:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 1953               		.loc 1 796 0
 1954 0044 80E4      		ldi r24,lo8(64)
 1955 0046 382E      		mov r3,r24
 1956               	.LVL129:
 1957 0048 00C0      		rjmp .L91
 1958               	.LVL130:
 1959               	.L94:
 1960 004a F701      		movw r30,r14
 1961 004c DC01      		movw r26,r24
 1962 004e 832D      		mov r24,r3
 1963               		0:
 1964 0050 0190      		ld r0,Z+
 1965 0052 0D92      		st X+,r0
 1966 0054 8A95      		dec r24
 1967 0056 01F4      		brne 0b
 797:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 1968               		.loc 1 797 0
 1969 0058 F0E4      		ldi r31,64
 1970 005a EF0E      		add r14,r31
 1971 005c F11C      		adc r15,__zero_reg__
 1972               	.LVL131:
 798:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 1973               		.loc 1 798 0
 1974 005e F801      		movw r30,r16
 1975 0060 8389      		ldd r24,Z+19
 1976 0062 9489      		ldd r25,Z+20
 1977 0064 805C      		subi r24,-64
 1978 0066 9F4F      		sbci r25,-1
 1979 0068 948B      		std Z+20,r25
 1980 006a 838B      		std Z+19,r24
 799:../../../os/hal/src/hal_buffers.c ****       w         += 64U;
 1981               		.loc 1 799 0
 1982 006c F0E4      		ldi r31,64
 1983 006e 6F0E      		add r6,r31
 1984 0070 711C      		adc r7,__zero_reg__
 1985               	.LVL132:
 800:../../../os/hal/src/hal_buffers.c ****     }
 801:../../../os/hal/src/hal_buffers.c ****     else {
 802:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 803:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 804:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 805:../../../os/hal/src/hal_buffers.c ****       w         += size;
 806:../../../os/hal/src/hal_buffers.c ****     }
 807:../../../os/hal/src/hal_buffers.c **** 
 808:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 809:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 1986               		.loc 1 809 0
 1987 0072 F801      		movw r30,r16
 1988 0074 2589      		ldd r18,Z+21
 1989 0076 3689      		ldd r19,Z+22
 1990 0078 8217      		cp r24,r18
 1991 007a 9307      		cpc r25,r19
 1992 007c 00F4      		brsh .L92
 1993               	.L90:
 1994               	.LBB437:
 1995               	.LBB438:
 1996               	.LBB439:
 1997               	.LBB440:
 1998               	.LBB441:
 1999               		.loc 4 447 0
 2000               	/* #APP */
 2001               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2002 007e 7894      		sei
 2003               	 ;  0 "" 2
 2004               	/* #NOAPP */
 2005               	.LBE441:
 2006               	.LBE440:
 2007               	.LBE439:
 2008               	.LBE438:
 2009               	.LBE437:
 810:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 811:../../../os/hal/src/hal_buffers.c ****     }
 812:../../../os/hal/src/hal_buffers.c **** 
 813:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 814:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 815:../../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2010               		.loc 1 815 0
 2011 0080 6C14      		cp r6,r12
 2012 0082 7D04      		cpc r7,r13
 2013 0084 00F4      		brsh .L85
 2014               	.L95:
 2015               	.LBB446:
 2016               	.LBB447:
 2017               	.LBB448:
 2018               	.LBB449:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2019               		.loc 4 437 0
 2020               	/* #APP */
 2021               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2022 0086 F894      		cli
 2023               	 ;  0 "" 2
 2024               	.LVL133:
 2025               	/* #NOAPP */
 2026               	.L91:
 2027               	.LBE449:
 2028               	.LBE448:
 2029               	.LBE447:
 2030               	.LBE446:
 757:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2031               		.loc 1 757 0
 2032 0088 F801      		movw r30,r16
 2033 008a 8389      		ldd r24,Z+19
 2034 008c 9489      		ldd r25,Z+20
 2035 008e 0097      		sbiw r24,0
 2036 0090 01F4      		brne .+2
 2037 0092 00C0      		rjmp .L93
 2038               	.L81:
 787:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2039               		.loc 1 787 0
 2040 0094 F801      		movw r30,r16
 2041 0096 C589      		ldd r28,Z+21
 2042 0098 D689      		ldd r29,Z+22
 2043               	.LVL134:
 788:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 2044               		.loc 1 788 0
 2045 009a 9601      		movw r18,r12
 2046 009c 2619      		sub r18,r6
 2047 009e 3709      		sbc r19,r7
 2048 00a0 C81B      		sub r28,r24
 2049 00a2 D90B      		sbc r29,r25
 2050               	.LVL135:
 2051 00a4 2C17      		cp r18,r28
 2052 00a6 3D07      		cpc r19,r29
 2053 00a8 00F4      		brsh .L87
 2054 00aa E901      		movw r28,r18
 2055               	.LVL136:
 2056               	.L87:
 794:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2057               		.loc 1 794 0
 2058 00ac C134      		cpi r28,65
 2059 00ae D105      		cpc r29,__zero_reg__
 2060 00b0 00F4      		brsh .L94
 802:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 2061               		.loc 1 802 0
 2062 00b2 AE01      		movw r20,r28
 2063 00b4 B701      		movw r22,r14
 2064 00b6 0E94 0000 		call memcpy
 2065               	.LVL137:
 803:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2066               		.loc 1 803 0
 2067 00ba EC0E      		add r14,r28
 2068 00bc FD1E      		adc r15,r29
 2069               	.LVL138:
 804:../../../os/hal/src/hal_buffers.c ****       w         += size;
 2070               		.loc 1 804 0
 2071 00be F801      		movw r30,r16
 2072 00c0 8389      		ldd r24,Z+19
 2073 00c2 9489      		ldd r25,Z+20
 2074 00c4 8C0F      		add r24,r28
 2075 00c6 9D1F      		adc r25,r29
 2076 00c8 948B      		std Z+20,r25
 2077 00ca 838B      		std Z+19,r24
 805:../../../os/hal/src/hal_buffers.c ****     }
 2078               		.loc 1 805 0
 2079 00cc 6C0E      		add r6,r28
 2080 00ce 7D1E      		adc r7,r29
 2081               	.LVL139:
 809:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 2082               		.loc 1 809 0
 2083 00d0 F801      		movw r30,r16
 2084 00d2 2589      		ldd r18,Z+21
 2085 00d4 3689      		ldd r19,Z+22
 2086 00d6 8217      		cp r24,r18
 2087 00d8 9307      		cpc r25,r19
 2088 00da 00F0      		brlo .L90
 2089               	.L92:
 810:../../../os/hal/src/hal_buffers.c ****     }
 2090               		.loc 1 810 0
 2091 00dc 6585      		ldd r22,Z+13
 2092 00de 7685      		ldd r23,Z+14
 2093 00e0 6250      		subi r22,2
 2094 00e2 7109      		sbc r23,__zero_reg__
 2095 00e4 C801      		movw r24,r16
 2096 00e6 0E94 0000 		call obqPostFullBufferS
 2097               	.LVL140:
 2098               	.LBB450:
 2099               	.LBB445:
 2100               	.LBB444:
 2101               	.LBB443:
 2102               	.LBB442:
 2103               		.loc 4 447 0
 2104               	/* #APP */
 2105               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2106 00ea 7894      		sei
 2107               	 ;  0 "" 2
 2108               	/* #NOAPP */
 2109               	.LBE442:
 2110               	.LBE443:
 2111               	.LBE444:
 2112               	.LBE445:
 2113               	.LBE450:
 2114               		.loc 1 815 0
 2115 00ec 6C14      		cp r6,r12
 2116 00ee 7D04      		cpc r7,r13
 2117 00f0 00F0      		brlo .L95
 2118               	.LVL141:
 2119               	.L85:
 2120               	.LBE421:
 816:../../../os/hal/src/hal_buffers.c ****       return w;
 817:../../../os/hal/src/hal_buffers.c ****     }
 818:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 819:../../../os/hal/src/hal_buffers.c ****   }
 820:../../../os/hal/src/hal_buffers.c **** }
 2121               		.loc 1 820 0
 2122 00f2 C301      		movw r24,r6
 2123               	/* epilogue start */
 2124 00f4 DF91      		pop r29
 2125 00f6 CF91      		pop r28
 2126 00f8 1F91      		pop r17
 2127 00fa 0F91      		pop r16
 2128               	.LVL142:
 2129 00fc FF90      		pop r15
 2130 00fe EF90      		pop r14
 2131               	.LVL143:
 2132 0100 DF90      		pop r13
 2133 0102 CF90      		pop r12
 2134               	.LVL144:
 2135 0104 BF90      		pop r11
 2136 0106 AF90      		pop r10
 2137               	.LVL145:
 2138 0108 9F90      		pop r9
 2139 010a 8F90      		pop r8
 2140               	.LVL146:
 2141 010c 7F90      		pop r7
 2142 010e 6F90      		pop r6
 2143               	.LVL147:
 2144 0110 5F90      		pop r5
 2145 0112 4F90      		pop r4
 2146 0114 3F90      		pop r3
 2147 0116 0895      		ret
 2148               	.LVL148:
 2149               	.L93:
 2150               	.LBB452:
 2151               	.LBB451:
 762:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 2152               		.loc 1 762 0
 2153 0118 FEEF      		ldi r31,-2
 2154 011a 8F16      		cp r8,r31
 2155 011c FFEF      		ldi r31,-1
 2156 011e 9F06      		cpc r9,r31
 2157 0120 00F4      		brsh .L96
 2158               	.LBB423:
 2159               	.LBB424:
 2160               	.LBB425:
 2161               	.LBB426:
 2162               	.LBB427:
 2163               	.LBB428:
 2164               		.loc 5 89 0
 2165 0122 8091 8400 		lds r24,132
 2166 0126 9091 8500 		lds r25,132+1
 2167               	.LVL149:
 2168               	.LBE428:
 2169               	.LBE427:
 2170               	.LBE426:
 2171               	.LBE425:
 2172               	.LBE424:
 2173               	.LBB429:
 2174               	.LBB430:
 2175               	.LBB431:
 2176               		.loc 6 495 0
 2177 012a B201      		movw r22,r4
 2178 012c 681B      		sub r22,r24
 2179 012e 790B      		sbc r23,r25
 2180               	.LBE431:
 2181               	.LBE430:
 2182               	.LBE429:
 772:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 2183               		.loc 1 772 0
 2184 0130 A616      		cp r10,r22
 2185 0132 B706      		cpc r11,r23
 2186 0134 00F0      		brlo .L86
 776:../../../os/hal/src/hal_buffers.c ****       }
 2187               		.loc 1 776 0
 2188 0136 C801      		movw r24,r16
 2189               	.LVL150:
 2190 0138 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2191               	.LVL151:
 2192               	.LBE423:
 780:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2193               		.loc 1 780 0
 2194 013c 892B      		or r24,r25
 2195 013e 01F4      		brne .L86
 2196               	.LVL152:
 2197               	.L97:
 2198 0140 F801      		movw r30,r16
 2199 0142 8389      		ldd r24,Z+19
 2200 0144 9489      		ldd r25,Z+20
 2201               	.LVL153:
 2202 0146 00C0      		rjmp .L81
 2203               	.L96:
 763:../../../os/hal/src/hal_buffers.c ****       }
 2204               		.loc 1 763 0
 2205 0148 B501      		movw r22,r10
 2206 014a C801      		movw r24,r16
 2207 014c 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2208               	.LVL154:
 780:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2209               		.loc 1 780 0
 2210 0150 892B      		or r24,r25
 2211 0152 01F0      		breq .L97
 2212               	.LVL155:
 2213               	.L86:
 2214               	.LBB432:
 2215               	.LBB433:
 2216               	.LBB434:
 2217               	.LBB435:
 2218               	.LBB436:
 2219               		.loc 4 447 0
 2220               	/* #APP */
 2221               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2222 0154 7894      		sei
 2223               	 ;  0 "" 2
 2224               	/* #NOAPP */
 2225               	.LBE436:
 2226               	.LBE435:
 2227               	.LBE434:
 2228               	.LBE433:
 2229               	.LBE432:
 782:../../../os/hal/src/hal_buffers.c ****       }
 2230               		.loc 1 782 0
 2231 0156 00C0      		rjmp .L85
 2232               	.LBE451:
 2233               	.LBE452:
 2234               		.cfi_endproc
 2235               	.LFE192:
 2237               		.section	.text.obqTryFlushI,"ax",@progbits
 2238               	.global	obqTryFlushI
 2240               	obqTryFlushI:
 2241               	.LFB193:
 821:../../../os/hal/src/hal_buffers.c **** 
 822:../../../os/hal/src/hal_buffers.c **** /**
 823:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 824:../../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 825:../../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 826:../../../os/hal/src/hal_buffers.c ****  *          returned instead.
 827:../../../os/hal/src/hal_buffers.c ****  *
 828:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 829:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 830:../../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 831:../../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 832:../../../os/hal/src/hal_buffers.c ****  *
 833:../../../os/hal/src/hal_buffers.c ****  * @iclass
 834:../../../os/hal/src/hal_buffers.c ****  */
 835:../../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2242               		.loc 1 835 0
 2243               		.cfi_startproc
 2244               	.LVL156:
 2245               	/* prologue: function */
 2246               	/* frame size = 0 */
 2247               	/* stack size = 0 */
 2248               	.L__stack_usage = 0
 2249 0000 FC01      		movw r30,r24
 836:../../../os/hal/src/hal_buffers.c **** 
 837:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 838:../../../os/hal/src/hal_buffers.c **** 
 839:../../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 840:../../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 841:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2250               		.loc 1 841 0
 2251 0002 A781      		ldd r26,Z+7
 2252 0004 B085      		ldd r27,Z+8
 2253 0006 8185      		ldd r24,Z+9
 2254 0008 9285      		ldd r25,Z+10
 2255               	.LVL157:
 2256 000a A817      		cp r26,r24
 2257 000c B907      		cpc r27,r25
 2258 000e 01F0      		breq .L107
 2259               	.L106:
 842:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 843:../../../os/hal/src/hal_buffers.c **** 
 844:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 845:../../../os/hal/src/hal_buffers.c **** 
 846:../../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 847:../../../os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 848:../../../os/hal/src/hal_buffers.c **** 
 849:../../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 850:../../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 851:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 852:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 853:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 854:../../../os/hal/src/hal_buffers.c ****       }
 855:../../../os/hal/src/hal_buffers.c **** 
 856:../../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 857:../../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 858:../../../os/hal/src/hal_buffers.c **** 
 859:../../../os/hal/src/hal_buffers.c ****       return true;
 860:../../../os/hal/src/hal_buffers.c ****     }
 861:../../../os/hal/src/hal_buffers.c ****   }
 862:../../../os/hal/src/hal_buffers.c ****   return false;
 2260               		.loc 1 862 0
 2261 0010 80E0      		ldi r24,0
 863:../../../os/hal/src/hal_buffers.c **** }
 2262               		.loc 1 863 0
 2263 0012 0895      		ret
 2264               	.L107:
 841:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2265               		.loc 1 841 0 discriminator 1
 2266 0014 8581      		ldd r24,Z+5
 2267 0016 9681      		ldd r25,Z+6
 2268 0018 892B      		or r24,r25
 2269 001a 01F0      		breq .L106
 841:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2270               		.loc 1 841 0 is_stmt 0
 2271 001c 8389      		ldd r24,Z+19
 2272 001e 9489      		ldd r25,Z+20
 2273 0020 0097      		sbiw r24,0
 2274 0022 01F0      		breq .L106
 2275 0024 0297      		sbiw r24,2
 2276               	.LBB453:
 842:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2277               		.loc 1 842 0 is_stmt 1
 2278 0026 8A1B      		sub r24,r26
 2279 0028 9B0B      		sbc r25,r27
 2280               	.LVL158:
 844:../../../os/hal/src/hal_buffers.c **** 
 2281               		.loc 1 844 0
 2282 002a 01F0      		breq .L106
 847:../../../os/hal/src/hal_buffers.c **** 
 2283               		.loc 1 847 0
 2284 002c 1196      		adiw r26,1
 2285 002e 9C93      		st X,r25
 2286 0030 8E93      		st -X,r24
 850:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2287               		.loc 1 850 0
 2288 0032 8581      		ldd r24,Z+5
 2289 0034 9681      		ldd r25,Z+6
 2290               	.LVL159:
 2291 0036 0197      		sbiw r24,1
 2292 0038 9683      		std Z+6,r25
 2293 003a 8583      		std Z+5,r24
 2294               	.LVL160:
 851:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2295               		.loc 1 851 0
 2296 003c 8585      		ldd r24,Z+13
 2297 003e 9685      		ldd r25,Z+14
 2298 0040 A80F      		add r26,r24
 2299 0042 B91F      		adc r27,r25
 2300               	.LVL161:
 2301 0044 B087      		std Z+8,r27
 2302 0046 A783      		std Z+7,r26
 2303               	.LVL162:
 852:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2304               		.loc 1 852 0
 2305 0048 8385      		ldd r24,Z+11
 2306 004a 9485      		ldd r25,Z+12
 2307 004c A817      		cp r26,r24
 2308 004e B907      		cpc r27,r25
 2309 0050 00F0      		brlo .L101
 853:../../../os/hal/src/hal_buffers.c ****       }
 2310               		.loc 1 853 0
 2311 0052 8189      		ldd r24,Z+17
 2312 0054 9289      		ldd r25,Z+18
 2313 0056 9087      		std Z+8,r25
 2314 0058 8783      		std Z+7,r24
 2315               	.L101:
 857:../../../os/hal/src/hal_buffers.c **** 
 2316               		.loc 1 857 0
 2317 005a 148A      		std Z+20,__zero_reg__
 2318 005c 138A      		std Z+19,__zero_reg__
 859:../../../os/hal/src/hal_buffers.c ****     }
 2319               		.loc 1 859 0
 2320 005e 81E0      		ldi r24,lo8(1)
 2321 0060 0895      		ret
 2322               	.LBE453:
 2323               		.cfi_endproc
 2324               	.LFE193:
 2326               		.section	.text.obqFlush,"ax",@progbits
 2327               	.global	obqFlush
 2329               	obqFlush:
 2330               	.LFB194:
 864:../../../os/hal/src/hal_buffers.c **** 
 865:../../../os/hal/src/hal_buffers.c **** /**
 866:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 867:../../../os/hal/src/hal_buffers.c ****  *
 868:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 869:../../../os/hal/src/hal_buffers.c ****  *
 870:../../../os/hal/src/hal_buffers.c ****  * @api
 871:../../../os/hal/src/hal_buffers.c ****  */
 872:../../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2331               		.loc 1 872 0
 2332               		.cfi_startproc
 2333               	.LVL163:
 2334               	/* prologue: function */
 2335               	/* frame size = 0 */
 2336               	/* stack size = 0 */
 2337               	.L__stack_usage = 0
 2338               	.LBB454:
 2339               	.LBB455:
 2340               	.LBB456:
 2341               	.LBB457:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2342               		.loc 4 437 0
 2343               	/* #APP */
 2344               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2345 0000 F894      		cli
 2346               	 ;  0 "" 2
 2347               	/* #NOAPP */
 2348               	.LBE457:
 2349               	.LBE456:
 2350               	.LBE455:
 2351               	.LBE454:
 873:../../../os/hal/src/hal_buffers.c **** 
 874:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 875:../../../os/hal/src/hal_buffers.c **** 
 876:../../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 877:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2352               		.loc 1 877 0
 2353 0002 FC01      		movw r30,r24
 2354 0004 6389      		ldd r22,Z+19
 2355 0006 7489      		ldd r23,Z+20
 2356 0008 6115      		cp r22,__zero_reg__
 2357 000a 7105      		cpc r23,__zero_reg__
 2358 000c 01F0      		breq .L109
 2359 000e 6250      		subi r22,2
 2360 0010 7109      		sbc r23,__zero_reg__
 2361               	.LBB458:
 878:../../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2362               		.loc 1 878 0
 2363 0012 2781      		ldd r18,Z+7
 2364 0014 3085      		ldd r19,Z+8
 2365 0016 621B      		sub r22,r18
 2366 0018 730B      		sbc r23,r19
 2367               	.LVL164:
 879:../../../os/hal/src/hal_buffers.c **** 
 880:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2368               		.loc 1 880 0
 2369 001a 01F0      		breq .L109
 881:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 2370               		.loc 1 881 0
 2371 001c 0E94 0000 		call obqPostFullBufferS
 2372               	.LVL165:
 2373               	.L109:
 2374               	.LBE458:
 2375               	.LBB459:
 2376               	.LBB460:
 2377               	.LBB461:
 2378               	.LBB462:
 2379               	.LBB463:
 2380               		.loc 4 447 0
 2381               	/* #APP */
 2382               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2383 0020 7894      		sei
 2384               	 ;  0 "" 2
 2385               	/* #NOAPP */
 2386 0022 0895      		ret
 2387               	.LBE463:
 2388               	.LBE462:
 2389               	.LBE461:
 2390               	.LBE460:
 2391               	.LBE459:
 2392               		.cfi_endproc
 2393               	.LFE194:
 2395               		.text
 2396               	.Letext0:
 2397               		.file 7 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 2398               		.file 8 "/usr/lib/avr/include/stdint.h"
 2399               		.file 9 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2400               		.file 10 "../../../os/rt/include/chsystypes.h"
 2401               		.file 11 "../../../os/rt/include/chsem.h"
 2402               		.file 12 "../../../os/rt/include/chmtx.h"
 2403               		.file 13 "../../../os/hal/include/hal_buffers.h"
 2404               		.file 14 "../../../os/common/ports/AVR/chcore_timer.h"
 2405               		.file 15 "../../../os/rt/include/chsys.h"
 2406               		.file 16 "../../../os/rt/include/chvt.h"
 2407               		.file 17 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/ccCdQeZQ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccCdQeZQ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccCdQeZQ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccCdQeZQ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccCdQeZQ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccCdQeZQ.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/ccCdQeZQ.s:130    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/ccCdQeZQ.s:176    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/ccCdQeZQ.s:217    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/ccCdQeZQ.s:278    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/ccCdQeZQ.s:390    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/ccCdQeZQ.s:441    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/ccCdQeZQ.s:519    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/ccCdQeZQ.s:568    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/ccCdQeZQ.s:711    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/ccCdQeZQ.s:1129   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/ccCdQeZQ.s:1244   .text.obqResetI:0000000000000000 obqResetI
     /tmp/ccCdQeZQ.s:1291   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/ccCdQeZQ.s:1339   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/ccCdQeZQ.s:1394   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/ccCdQeZQ.s:1505   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/ccCdQeZQ.s:1555   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/ccCdQeZQ.s:1637   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/ccCdQeZQ.s:1686   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/ccCdQeZQ.s:1821   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/ccCdQeZQ.s:2240   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/ccCdQeZQ.s:2329   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
