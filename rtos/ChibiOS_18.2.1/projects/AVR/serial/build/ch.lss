
build/ch.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         00000044  00800100  00001a14  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019f  00800144  00800144  00001aec  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012761  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c50  00000000  00000000  00014a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005086  00000000  00000000  00018659  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014ac  00000000  00000000  0001d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b14  00000000  00000000  0001eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006643  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  00026ce3  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9d c7       	rjmp	.+3898   	; 0xf68 <__vector_11>
      2e:	00 00       	nop
      30:	cf c7       	rjmp	.+3998   	; 0xfd0 <__vector_12>
      32:	00 00       	nop
      34:	65 c7       	rjmp	.+3786   	; 0xf00 <__vector_13>
      36:	00 00       	nop
      38:	2e c7       	rjmp	.+3676   	; 0xe96 <__vector_14>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_18>
      4c:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_19>
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2159>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2294>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e4 e1       	ldi	r30, 0x14	; 20
      9e:	fa e1       	ldi	r31, 0x1A	; 26
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a4 34       	cpi	r26, 0x44	; 68
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a4 e4       	ldi	r26, 0x44	; 68
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a3 3e       	cpi	r26, 0xE3	; 227
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <main>
      c0:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
      c6:	ff cf       	rjmp	.-2      	; 0xc6 <_idle_thread>

000000c8 <chSysInit>:
      c8:	22 d1       	rcall	.+580    	; 0x30e <_scheduler_init>
      ca:	5c d0       	rcall	.+184    	; 0x184 <_vt_init>
      cc:	7a d3       	rcall	.+1780   	; 0x7c2 <_core_init>
      ce:	b0 d3       	rcall	.+1888   	; 0x830 <_heap_init>
      d0:	40 e8       	ldi	r20, 0x80	; 128
      d2:	60 e1       	ldi	r22, 0x10	; 16
      d4:	71 e0       	ldi	r23, 0x01	; 1
      d6:	82 e5       	ldi	r24, 0x52	; 82
      d8:	92 e0       	ldi	r25, 0x02	; 2
      da:	30 d2       	rcall	.+1120   	; 0x53c <_thread_init>
      dc:	fc 01       	movw	r30, r24
      de:	90 93 47 02 	sts	0x0247, r25
      e2:	80 93 46 02 	sts	0x0246, r24
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	95 87       	std	Z+13, r25	; 0x0d
      ea:	90 93 72 02 	sts	0x0272, r25
      ee:	78 94       	sei
      f0:	85 e0       	ldi	r24, 0x05	; 5
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	a6 c2       	rjmp	.+1356   	; 0x642 <chThdCreate>

000000f6 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
      fe:	80 91 4e 02 	lds	r24, 0x024E
     102:	90 91 4f 02 	lds	r25, 0x024F
     106:	01 96       	adiw	r24, 0x01	; 1
     108:	90 93 4f 02 	sts	0x024F, r25
     10c:	80 93 4e 02 	sts	0x024E, r24
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
     110:	a0 91 48 02 	lds	r26, 0x0248
     114:	b0 91 49 02 	lds	r27, 0x0249
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	a8 34       	cpi	r26, 0x48	; 72
     11c:	b8 07       	cpc	r27, r24
     11e:	69 f1       	breq	.+90     	; 0x17a <chSysTimerHandlerI+0x84>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
     120:	14 96       	adiw	r26, 0x04	; 4
     122:	8d 91       	ld	r24, X+
     124:	9c 91       	ld	r25, X
     126:	15 97       	sbiw	r26, 0x05	; 5
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	15 96       	adiw	r26, 0x05	; 5
     12c:	9c 93       	st	X, r25
     12e:	8e 93       	st	-X, r24
     130:	14 97       	sbiw	r26, 0x04	; 4
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     132:	89 2b       	or	r24, r25
     134:	11 f5       	brne	.+68     	; 0x17a <chSysTimerHandlerI+0x84>
     136:	08 e4       	ldi	r16, 0x48	; 72
     138:	12 e0       	ldi	r17, 0x02	; 2
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
     13a:	16 96       	adiw	r26, 0x06	; 6
     13c:	ed 91       	ld	r30, X+
     13e:	fc 91       	ld	r31, X
     140:	17 97       	sbiw	r26, 0x07	; 7
      vtp->func = NULL;
     142:	17 96       	adiw	r26, 0x07	; 7
     144:	1c 92       	st	X, r1
     146:	1e 92       	st	-X, r1
     148:	16 97       	sbiw	r26, 0x06	; 6
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     14a:	cd 91       	ld	r28, X+
     14c:	dc 91       	ld	r29, X
     14e:	11 97       	sbiw	r26, 0x01	; 1
     150:	1b 83       	std	Y+3, r17	; 0x03
     152:	0a 83       	std	Y+2, r16	; 0x02
      ch.vtlist.next = vtp->next;
     154:	d0 93 49 02 	sts	0x0249, r29
     158:	c0 93 48 02 	sts	0x0248, r28
      chSysUnlockFromISR();
      fn(vtp->par);
     15c:	18 96       	adiw	r26, 0x08	; 8
     15e:	8d 91       	ld	r24, X+
     160:	9c 91       	ld	r25, X
     162:	19 97       	sbiw	r26, 0x09	; 9
     164:	09 95       	icall
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     166:	a0 91 48 02 	lds	r26, 0x0248
     16a:	b0 91 49 02 	lds	r27, 0x0249
     16e:	14 96       	adiw	r26, 0x04	; 4
     170:	8d 91       	ld	r24, X+
     172:	9c 91       	ld	r25, X
     174:	15 97       	sbiw	r26, 0x05	; 5
     176:	89 2b       	or	r24, r25
     178:	01 f3       	breq	.-64     	; 0x13a <chSysTimerHandlerI+0x44>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	08 95       	ret

00000184 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     184:	eb e3       	ldi	r30, 0x3B	; 59
     186:	f2 e0       	ldi	r31, 0x02	; 2
     188:	88 e4       	ldi	r24, 0x48	; 72
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	96 87       	std	Z+14, r25	; 0x0e
     18e:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     190:	90 8b       	std	Z+16, r25	; 0x10
     192:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	9f ef       	ldi	r25, 0xFF	; 255
     198:	92 8b       	std	Z+18, r25	; 0x12
     19a:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
     19c:	14 8a       	std	Z+20, r1	; 0x14
     19e:	13 8a       	std	Z+19, r1	; 0x13
     1a0:	08 95       	ret

000001a2 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	dc 01       	movw	r26, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     1a8:	19 96       	adiw	r26, 0x09	; 9
     1aa:	3c 93       	st	X, r19
     1ac:	2e 93       	st	-X, r18
     1ae:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     1b0:	17 96       	adiw	r26, 0x07	; 7
     1b2:	5c 93       	st	X, r21
     1b4:	4e 93       	st	-X, r20
     1b6:	16 97       	sbiw	r26, 0x06	; 6
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
     1b8:	e0 91 48 02 	lds	r30, 0x0248
     1bc:	f0 91 49 02 	lds	r31, 0x0249
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     1c0:	24 81       	ldd	r18, Z+4	; 0x04
     1c2:	35 81       	ldd	r19, Z+5	; 0x05
     1c4:	26 17       	cp	r18, r22
     1c6:	37 07       	cpc	r19, r23
     1c8:	50 f4       	brcc	.+20     	; 0x1de <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     1ca:	62 1b       	sub	r22, r18
     1cc:	73 0b       	sbc	r23, r19
    p = p->next;
     1ce:	01 90       	ld	r0, Z+
     1d0:	f0 81       	ld	r31, Z
     1d2:	e0 2d       	mov	r30, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     1d4:	24 81       	ldd	r18, Z+4	; 0x04
     1d6:	35 81       	ldd	r19, Z+5	; 0x05
     1d8:	26 17       	cp	r18, r22
     1da:	37 07       	cpc	r19, r23
     1dc:	b0 f3       	brcs	.-20     	; 0x1ca <chVTDoSetI+0x28>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     1de:	11 96       	adiw	r26, 0x01	; 1
     1e0:	fc 93       	st	X, r31
     1e2:	ee 93       	st	-X, r30
  vtp->prev = vtp->next->prev;
     1e4:	c2 81       	ldd	r28, Z+2	; 0x02
     1e6:	d3 81       	ldd	r29, Z+3	; 0x03
     1e8:	13 96       	adiw	r26, 0x03	; 3
     1ea:	dc 93       	st	X, r29
     1ec:	ce 93       	st	-X, r28
     1ee:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     1f0:	b9 83       	std	Y+1, r27	; 0x01
     1f2:	a8 83       	st	Y, r26
  p->prev = vtp;
     1f4:	b3 83       	std	Z+3, r27	; 0x03
     1f6:	a2 83       	std	Z+2, r26	; 0x02
  vtp->delta = delta;
     1f8:	15 96       	adiw	r26, 0x05	; 5
     1fa:	7c 93       	st	X, r23
     1fc:	6e 93       	st	-X, r22
     1fe:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     200:	84 81       	ldd	r24, Z+4	; 0x04
     202:	95 81       	ldd	r25, Z+5	; 0x05
     204:	86 1b       	sub	r24, r22
     206:	97 0b       	sbc	r25, r23
     208:	95 83       	std	Z+5, r25	; 0x05
     20a:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	9f ef       	ldi	r25, 0xFF	; 255
     210:	90 93 4d 02 	sts	0x024D, r25
     214:	80 93 4c 02 	sts	0x024C, r24
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	fc 01       	movw	r30, r24
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	14 96       	adiw	r26, 0x04	; 4
     22a:	2d 91       	ld	r18, X+
     22c:	3c 91       	ld	r19, X
     22e:	15 97       	sbiw	r26, 0x05	; 5
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	82 0f       	add	r24, r18
     236:	93 1f       	adc	r25, r19
     238:	15 96       	adiw	r26, 0x05	; 5
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	14 97       	sbiw	r26, 0x04	; 4

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
     240:	c2 81       	ldd	r28, Z+2	; 0x02
     242:	d3 81       	ldd	r29, Z+3	; 0x03
     244:	b9 83       	std	Y+1, r27	; 0x01
     246:	a8 83       	st	Y, r26
  vtp->next->prev = vtp->prev;
     248:	a0 81       	ld	r26, Z
     24a:	b1 81       	ldd	r27, Z+1	; 0x01
     24c:	13 96       	adiw	r26, 0x03	; 3
     24e:	dc 93       	st	X, r29
     250:	ce 93       	st	-X, r28
     252:	12 97       	sbiw	r26, 0x02	; 2
  vtp->func = NULL;
     254:	17 82       	std	Z+7, r1	; 0x07
     256:	16 82       	std	Z+6, r1	; 0x06

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	90 93 4d 02 	sts	0x024D, r25
     260:	80 93 4c 02 	sts	0x024C, r24
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <wakeup>:
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
    chSchDoRescheduleAhead();
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	dc 01       	movw	r26, r24
     270:	1d 96       	adiw	r26, 0x0d	; 13
     272:	8c 91       	ld	r24, X
     274:	1d 97       	sbiw	r26, 0x0d	; 13
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	99 f1       	breq	.+102    	; 0x2e0 <wakeup+0x76>
     27a:	70 f5       	brcc	.+92     	; 0x2d8 <wakeup+0x6e>
     27c:	88 23       	and	r24, r24
     27e:	49 f1       	breq	.+82     	; 0x2d2 <wakeup+0x68>
     280:	83 30       	cpi	r24, 0x03	; 3
     282:	31 f4       	brne	.+12     	; 0x290 <wakeup+0x26>
     284:	50 96       	adiw	r26, 0x10	; 16
     286:	ed 91       	ld	r30, X+
     288:	fc 91       	ld	r31, X
     28a:	51 97       	sbiw	r26, 0x11	; 17
     28c:	11 82       	std	Z+1, r1	; 0x01
     28e:	10 82       	st	Z, r1
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	9f ef       	ldi	r25, 0xFF	; 255
     294:	51 96       	adiw	r26, 0x11	; 17
     296:	9c 93       	st	X, r25
     298:	8e 93       	st	-X, r24
     29a:	50 97       	sbiw	r26, 0x10	; 16
     29c:	1d 96       	adiw	r26, 0x0d	; 13
     29e:	1c 92       	st	X, r1
     2a0:	1d 97       	sbiw	r26, 0x0d	; 13
     2a2:	14 96       	adiw	r26, 0x04	; 4
     2a4:	2c 91       	ld	r18, X
     2a6:	14 97       	sbiw	r26, 0x04	; 4
     2a8:	eb e3       	ldi	r30, 0x3B	; 59
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
     2ac:	01 90       	ld	r0, Z+
     2ae:	f0 81       	ld	r31, Z
     2b0:	e0 2d       	mov	r30, r0
     2b2:	94 81       	ldd	r25, Z+4	; 0x04
     2b4:	92 17       	cp	r25, r18
     2b6:	d0 f7       	brcc	.-12     	; 0x2ac <wakeup+0x42>
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	fc 93       	st	X, r31
     2bc:	ee 93       	st	-X, r30
     2be:	c2 81       	ldd	r28, Z+2	; 0x02
     2c0:	d3 81       	ldd	r29, Z+3	; 0x03
     2c2:	13 96       	adiw	r26, 0x03	; 3
     2c4:	dc 93       	st	X, r29
     2c6:	ce 93       	st	-X, r28
     2c8:	12 97       	sbiw	r26, 0x02	; 2
     2ca:	b9 83       	std	Y+1, r27	; 0x01
     2cc:	a8 83       	st	Y, r26
     2ce:	b3 83       	std	Z+3, r27	; 0x03
     2d0:	a2 83       	std	Z+2, r26	; 0x02
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret
     2d8:	85 30       	cpi	r24, 0x05	; 5
     2da:	89 f0       	breq	.+34     	; 0x2fe <wakeup+0x94>
     2dc:	87 30       	cpi	r24, 0x07	; 7
     2de:	c1 f6       	brne	.-80     	; 0x290 <wakeup+0x26>
     2e0:	12 96       	adiw	r26, 0x02	; 2
     2e2:	ed 91       	ld	r30, X+
     2e4:	fc 91       	ld	r31, X
     2e6:	13 97       	sbiw	r26, 0x03	; 3
     2e8:	8d 91       	ld	r24, X+
     2ea:	9c 91       	ld	r25, X
     2ec:	11 97       	sbiw	r26, 0x01	; 1
     2ee:	91 83       	std	Z+1, r25	; 0x01
     2f0:	80 83       	st	Z, r24
     2f2:	cd 91       	ld	r28, X+
     2f4:	dc 91       	ld	r29, X
     2f6:	11 97       	sbiw	r26, 0x01	; 1
     2f8:	fb 83       	std	Y+3, r31	; 0x03
     2fa:	ea 83       	std	Y+2, r30	; 0x02
     2fc:	c9 cf       	rjmp	.-110    	; 0x290 <wakeup+0x26>
     2fe:	50 96       	adiw	r26, 0x10	; 16
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	51 97       	sbiw	r26, 0x11	; 17
     306:	84 81       	ldd	r24, Z+4	; 0x04
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	84 83       	std	Z+4, r24	; 0x04
     30c:	e9 cf       	rjmp	.-46     	; 0x2e0 <wakeup+0x76>

0000030e <_scheduler_init>:
     30e:	eb e3       	ldi	r30, 0x3B	; 59
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	f1 83       	std	Z+1, r31	; 0x01
     314:	e0 83       	st	Z, r30
     316:	f3 83       	std	Z+3, r31	; 0x03
     318:	e2 83       	std	Z+2, r30	; 0x02
     31a:	14 82       	std	Z+4, r1	; 0x04
     31c:	f0 87       	std	Z+8, r31	; 0x08
     31e:	e7 83       	std	Z+7, r30	; 0x07
     320:	f2 87       	std	Z+10, r31	; 0x0a
     322:	e1 87       	std	Z+9, r30	; 0x09
     324:	08 95       	ret

00000326 <chSchReadyI>:
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	dc 01       	movw	r26, r24
     32c:	1d 96       	adiw	r26, 0x0d	; 13
     32e:	1c 92       	st	X, r1
     330:	1d 97       	sbiw	r26, 0x0d	; 13
     332:	14 96       	adiw	r26, 0x04	; 4
     334:	2c 91       	ld	r18, X
     336:	14 97       	sbiw	r26, 0x04	; 4
     338:	eb e3       	ldi	r30, 0x3B	; 59
     33a:	f2 e0       	ldi	r31, 0x02	; 2
     33c:	01 90       	ld	r0, Z+
     33e:	f0 81       	ld	r31, Z
     340:	e0 2d       	mov	r30, r0
     342:	94 81       	ldd	r25, Z+4	; 0x04
     344:	92 17       	cp	r25, r18
     346:	d0 f7       	brcc	.-12     	; 0x33c <chSchReadyI+0x16>
     348:	11 96       	adiw	r26, 0x01	; 1
     34a:	fc 93       	st	X, r31
     34c:	ee 93       	st	-X, r30
     34e:	c2 81       	ldd	r28, Z+2	; 0x02
     350:	d3 81       	ldd	r29, Z+3	; 0x03
     352:	13 96       	adiw	r26, 0x03	; 3
     354:	dc 93       	st	X, r29
     356:	ce 93       	st	-X, r28
     358:	12 97       	sbiw	r26, 0x02	; 2
     35a:	b9 83       	std	Y+1, r27	; 0x01
     35c:	a8 83       	st	Y, r26
     35e:	b3 83       	std	Z+3, r27	; 0x03
     360:	a2 83       	std	Z+2, r26	; 0x02
     362:	cd 01       	movw	r24, r26
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <chSchGoSleepS>:
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	eb e3       	ldi	r30, 0x3B	; 59
     370:	f2 e0       	ldi	r31, 0x02	; 2
     372:	63 85       	ldd	r22, Z+11	; 0x0b
     374:	74 85       	ldd	r23, Z+12	; 0x0c
     376:	db 01       	movw	r26, r22
     378:	1d 96       	adiw	r26, 0x0d	; 13
     37a:	8c 93       	st	X, r24
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	ec 01       	movw	r28, r24
     382:	a8 81       	ld	r26, Y
     384:	b9 81       	ldd	r27, Y+1	; 0x01
     386:	b1 83       	std	Z+1, r27	; 0x01
     388:	a0 83       	st	Z, r26
     38a:	13 96       	adiw	r26, 0x03	; 3
     38c:	fc 93       	st	X, r31
     38e:	ee 93       	st	-X, r30
     390:	12 97       	sbiw	r26, 0x02	; 2
     392:	94 87       	std	Z+12, r25	; 0x0c
     394:	83 87       	std	Z+11, r24	; 0x0b
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	2d 87       	std	Y+13, r18	; 0x0d
     39a:	57 d2       	rcall	.+1198   	; 0x84a <_port_switch>
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <chSchGoSleepTimeoutS>:
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	2a 97       	sbiw	r28, 0x0a	; 10
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	18 2f       	mov	r17, r24
     3ba:	6f 3f       	cpi	r22, 0xFF	; 255
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	78 07       	cpc	r23, r24
     3c0:	11 f1       	breq	.+68     	; 0x406 <chSchGoSleepTimeoutS+0x64>
     3c2:	20 91 46 02 	lds	r18, 0x0246
     3c6:	30 91 47 02 	lds	r19, 0x0247
     3ca:	45 e3       	ldi	r20, 0x35	; 53
     3cc:	51 e0       	ldi	r21, 0x01	; 1
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	e7 de       	rcall	.-562    	; 0x1a2 <chVTDoSetI>
     3d4:	81 2f       	mov	r24, r17
     3d6:	c9 df       	rcall	.-110    	; 0x36a <chSchGoSleepS>
     3d8:	8f 81       	ldd	r24, Y+7	; 0x07
     3da:	98 85       	ldd	r25, Y+8	; 0x08
     3dc:	89 2b       	or	r24, r25
     3de:	19 f0       	breq	.+6      	; 0x3e6 <chSchGoSleepTimeoutS+0x44>
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	1c df       	rcall	.-456    	; 0x21e <chVTDoResetI>
     3e6:	e0 91 46 02 	lds	r30, 0x0246
     3ea:	f0 91 47 02 	lds	r31, 0x0247
     3ee:	80 89       	ldd	r24, Z+16	; 0x10
     3f0:	91 89       	ldd	r25, Z+17	; 0x11
     3f2:	2a 96       	adiw	r28, 0x0a	; 10
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	08 95       	ret
     406:	81 2f       	mov	r24, r17
     408:	b0 df       	rcall	.-160    	; 0x36a <chSchGoSleepS>
     40a:	ed cf       	rjmp	.-38     	; 0x3e6 <chSchGoSleepTimeoutS+0x44>

0000040c <chSchWakeupS>:
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	dc 01       	movw	r26, r24
     412:	c0 91 46 02 	lds	r28, 0x0246
     416:	d0 91 47 02 	lds	r29, 0x0247
     41a:	51 96       	adiw	r26, 0x11	; 17
     41c:	7c 93       	st	X, r23
     41e:	6e 93       	st	-X, r22
     420:	50 97       	sbiw	r26, 0x10	; 16
     422:	14 96       	adiw	r26, 0x04	; 4
     424:	2c 91       	ld	r18, X
     426:	14 97       	sbiw	r26, 0x04	; 4
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	82 17       	cp	r24, r18
     42c:	d8 f0       	brcs	.+54     	; 0x464 <chSchWakeupS+0x58>
     42e:	1d 96       	adiw	r26, 0x0d	; 13
     430:	1c 92       	st	X, r1
     432:	1d 97       	sbiw	r26, 0x0d	; 13
     434:	eb e3       	ldi	r30, 0x3B	; 59
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	94 81       	ldd	r25, Z+4	; 0x04
     440:	92 17       	cp	r25, r18
     442:	d0 f7       	brcc	.-12     	; 0x438 <chSchWakeupS+0x2c>
     444:	11 96       	adiw	r26, 0x01	; 1
     446:	fc 93       	st	X, r31
     448:	ee 93       	st	-X, r30
     44a:	c2 81       	ldd	r28, Z+2	; 0x02
     44c:	d3 81       	ldd	r29, Z+3	; 0x03
     44e:	13 96       	adiw	r26, 0x03	; 3
     450:	dc 93       	st	X, r29
     452:	ce 93       	st	-X, r28
     454:	12 97       	sbiw	r26, 0x02	; 2
     456:	b9 83       	std	Y+1, r27	; 0x01
     458:	a8 83       	st	Y, r26
     45a:	b3 83       	std	Z+3, r27	; 0x03
     45c:	a2 83       	std	Z+2, r26	; 0x02
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret
     464:	1d 86       	std	Y+13, r1	; 0x0d
     466:	eb e3       	ldi	r30, 0x3B	; 59
     468:	f2 e0       	ldi	r31, 0x02	; 2
     46a:	01 90       	ld	r0, Z+
     46c:	f0 81       	ld	r31, Z
     46e:	e0 2d       	mov	r30, r0
     470:	94 81       	ldd	r25, Z+4	; 0x04
     472:	98 17       	cp	r25, r24
     474:	d0 f7       	brcc	.-12     	; 0x46a <chSchWakeupS+0x5e>
     476:	cd 01       	movw	r24, r26
     478:	f9 83       	std	Y+1, r31	; 0x01
     47a:	e8 83       	st	Y, r30
     47c:	a2 81       	ldd	r26, Z+2	; 0x02
     47e:	b3 81       	ldd	r27, Z+3	; 0x03
     480:	bb 83       	std	Y+3, r27	; 0x03
     482:	aa 83       	std	Y+2, r26	; 0x02
     484:	cd 93       	st	X+, r28
     486:	dc 93       	st	X, r29
     488:	d3 83       	std	Z+3, r29	; 0x03
     48a:	c2 83       	std	Z+2, r28	; 0x02
     48c:	90 93 47 02 	sts	0x0247, r25
     490:	80 93 46 02 	sts	0x0246, r24
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	fc 01       	movw	r30, r24
     498:	25 87       	std	Z+13, r18	; 0x0d
     49a:	be 01       	movw	r22, r28
     49c:	d6 d1       	rcall	.+940    	; 0x84a <_port_switch>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <chSchIsPreemptionRequired>:
     4a4:	a0 91 3b 02 	lds	r26, 0x023B
     4a8:	b0 91 3c 02 	lds	r27, 0x023C
     4ac:	e0 91 46 02 	lds	r30, 0x0246
     4b0:	f0 91 47 02 	lds	r31, 0x0247
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	14 96       	adiw	r26, 0x04	; 4
     4b8:	2c 91       	ld	r18, X
     4ba:	94 81       	ldd	r25, Z+4	; 0x04
     4bc:	92 17       	cp	r25, r18
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <chSchIsPreemptionRequired+0x1e>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
  thread_t *otp = currp;
     4c8:	a0 91 46 02 	lds	r26, 0x0246
     4cc:	b0 91 47 02 	lds	r27, 0x0247
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     4d0:	40 91 3b 02 	lds	r20, 0x023B
     4d4:	50 91 3c 02 	lds	r21, 0x023C

  tqp->next             = tp->queue.next;
     4d8:	ea 01       	movw	r28, r20
     4da:	e8 81       	ld	r30, Y
     4dc:	f9 81       	ldd	r31, Y+1	; 0x01
     4de:	f0 93 3c 02 	sts	0x023C, r31
     4e2:	e0 93 3b 02 	sts	0x023B, r30
  tqp->next->queue.prev = (thread_t *)tqp;
     4e6:	8b e3       	ldi	r24, 0x3B	; 59
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	93 83       	std	Z+3, r25	; 0x03
     4ec:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     4ee:	50 93 47 02 	sts	0x0247, r21
     4f2:	40 93 46 02 	sts	0x0246, r20
  currp->state = CH_STATE_CURRENT;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     4fa:	1d 96       	adiw	r26, 0x0d	; 13
     4fc:	1c 92       	st	X, r1
     4fe:	1d 97       	sbiw	r26, 0x0d	; 13
     500:	14 96       	adiw	r26, 0x04	; 4
     502:	2c 91       	ld	r18, X
     504:	14 97       	sbiw	r26, 0x04	; 4
     506:	03 c0       	rjmp	.+6      	; 0x50e <chSchDoReschedule+0x4a>
     508:	01 90       	ld	r0, Z+
     50a:	f0 81       	ld	r31, Z
     50c:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     50e:	94 81       	ldd	r25, Z+4	; 0x04
     510:	29 17       	cp	r18, r25
     512:	d0 f3       	brcs	.-12     	; 0x508 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	fc 93       	st	X, r31
     518:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	93 81       	ldd	r25, Z+3	; 0x03
     51e:	13 96       	adiw	r26, 0x03	; 3
     520:	9c 93       	st	X, r25
     522:	8e 93       	st	-X, r24
     524:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     526:	ec 01       	movw	r28, r24
     528:	b9 83       	std	Y+1, r27	; 0x01
     52a:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     52c:	b3 83       	std	Z+3, r27	; 0x03
     52e:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     530:	bd 01       	movw	r22, r26
     532:	ca 01       	movw	r24, r20
     534:	8a d1       	rcall	.+788    	; 0x84a <_port_switch>
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	fc 01       	movw	r30, r24
     542:	44 83       	std	Z+4, r20	; 0x04
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	85 87       	std	Z+13, r24	; 0x0d
     548:	16 86       	std	Z+14, r1	; 0x0e
     54a:	43 8f       	std	Z+27, r20	; 0x1b
     54c:	12 8e       	std	Z+26, r1	; 0x1a
     54e:	11 8e       	std	Z+25, r1	; 0x19
     550:	10 8e       	std	Z+24, r1	; 0x18
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	87 87       	std	Z+15, r24	; 0x0f
     556:	74 87       	std	Z+12, r23	; 0x0c
     558:	63 87       	std	Z+11, r22	; 0x0b
     55a:	ab e3       	ldi	r26, 0x3B	; 59
     55c:	b2 e0       	ldi	r27, 0x02	; 2
     55e:	b0 87       	std	Z+8, r27	; 0x08
     560:	a7 83       	std	Z+7, r26	; 0x07
     562:	19 96       	adiw	r26, 0x09	; 9
     564:	cd 91       	ld	r28, X+
     566:	dc 91       	ld	r29, X
     568:	1a 97       	sbiw	r26, 0x0a	; 10
     56a:	d2 87       	std	Z+10, r29	; 0x0a
     56c:	c1 87       	std	Z+9, r28	; 0x09
     56e:	f8 87       	std	Y+8, r31	; 0x08
     570:	ef 83       	std	Y+7, r30	; 0x07
     572:	1a 96       	adiw	r26, 0x0a	; 10
     574:	fc 93       	st	X, r31
     576:	ee 93       	st	-X, r30
     578:	19 97       	sbiw	r26, 0x09	; 9
     57a:	cf 01       	movw	r24, r30
     57c:	42 96       	adiw	r24, 0x12	; 18
     57e:	93 8b       	std	Z+19, r25	; 0x13
     580:	82 8b       	std	Z+18, r24	; 0x12
     582:	02 96       	adiw	r24, 0x02	; 2
     584:	95 8b       	std	Z+21, r25	; 0x15
     586:	84 8b       	std	Z+20, r24	; 0x14
     588:	97 8b       	std	Z+23, r25	; 0x17
     58a:	86 8b       	std	Z+22, r24	; 0x16
     58c:	cf 01       	movw	r24, r30
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <chThdCreateSuspendedI>:
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
     59a:	4c 81       	ldd	r20, Y+4	; 0x04
     59c:	5d 81       	ldd	r21, Y+5	; 0x05
     59e:	fa 01       	movw	r30, r20
     5a0:	7c 97       	sbiw	r30, 0x1c	; 28
     5a2:	ca 01       	movw	r24, r20
     5a4:	c1 97       	sbiw	r24, 0x31	; 49
     5a6:	96 83       	std	Z+6, r25	; 0x06
     5a8:	85 83       	std	Z+5, r24	; 0x05
     5aa:	2f 81       	ldd	r18, Y+7	; 0x07
     5ac:	dc 01       	movw	r26, r24
     5ae:	52 96       	adiw	r26, 0x12	; 18
     5b0:	2c 93       	st	X, r18
     5b2:	52 97       	sbiw	r26, 0x12	; 18
     5b4:	28 85       	ldd	r18, Y+8	; 0x08
     5b6:	51 96       	adiw	r26, 0x11	; 17
     5b8:	2c 93       	st	X, r18
     5ba:	51 97       	sbiw	r26, 0x11	; 17
     5bc:	29 85       	ldd	r18, Y+9	; 0x09
     5be:	50 96       	adiw	r26, 0x10	; 16
     5c0:	2c 93       	st	X, r18
     5c2:	50 97       	sbiw	r26, 0x10	; 16
     5c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     5c6:	1f 96       	adiw	r26, 0x0f	; 15
     5c8:	2c 93       	st	X, r18
     5ca:	1f 97       	sbiw	r26, 0x0f	; 15
     5cc:	24 e5       	ldi	r18, 0x54	; 84
     5ce:	34 e0       	ldi	r19, 0x04	; 4
     5d0:	53 96       	adiw	r26, 0x13	; 19
     5d2:	3c 93       	st	X, r19
     5d4:	53 97       	sbiw	r26, 0x13	; 19
     5d6:	54 96       	adiw	r26, 0x14	; 20
     5d8:	2c 93       	st	X, r18
     5da:	8e 81       	ldd	r24, Y+6	; 0x06
     5dc:	28 81       	ld	r18, Y
     5de:	39 81       	ldd	r19, Y+1	; 0x01
     5e0:	84 83       	std	Z+4, r24	; 0x04
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	95 87       	std	Z+13, r25	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	83 8f       	std	Z+27, r24	; 0x1b
     5ea:	12 8e       	std	Z+26, r1	; 0x1a
     5ec:	11 8e       	std	Z+25, r1	; 0x19
     5ee:	10 8e       	std	Z+24, r1	; 0x18
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	87 87       	std	Z+15, r24	; 0x0f
     5f4:	34 87       	std	Z+12, r19	; 0x0c
     5f6:	23 87       	std	Z+11, r18	; 0x0b
     5f8:	cb e3       	ldi	r28, 0x3B	; 59
     5fa:	d2 e0       	ldi	r29, 0x02	; 2
     5fc:	d0 87       	std	Z+8, r29	; 0x08
     5fe:	c7 83       	std	Z+7, r28	; 0x07
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	92 87       	std	Z+10, r25	; 0x0a
     606:	81 87       	std	Z+9, r24	; 0x09
     608:	dc 01       	movw	r26, r24
     60a:	18 96       	adiw	r26, 0x08	; 8
     60c:	fc 93       	st	X, r31
     60e:	ee 93       	st	-X, r30
     610:	17 97       	sbiw	r26, 0x07	; 7
     612:	fa 87       	std	Y+10, r31	; 0x0a
     614:	e9 87       	std	Y+9, r30	; 0x09
     616:	ea 01       	movw	r28, r20
     618:	2a 97       	sbiw	r28, 0x0a	; 10
     61a:	d9 83       	std	Y+1, r29	; 0x01
     61c:	c8 83       	st	Y, r28
     61e:	da 01       	movw	r26, r20
     620:	18 97       	sbiw	r26, 0x08	; 8
     622:	0b 2e       	mov	r0, r27
     624:	11 96       	adiw	r26, 0x01	; 1
     626:	0c 92       	st	X, r0
     628:	11 97       	sbiw	r26, 0x01	; 1
     62a:	ac 93       	st	X, r26
     62c:	0a 2e       	mov	r0, r26
     62e:	1b 2e       	mov	r1, r27
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	1c 92       	st	X, r1
     634:	0e 92       	st	-X, r0
     636:	11 24       	eor	r1, r1
     638:	12 97       	sbiw	r26, 0x02	; 2
     63a:	cf 01       	movw	r24, r30
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <chThdCreate>:
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	f8 94       	cli
     648:	a5 df       	rcall	.-182    	; 0x594 <chThdCreateSuspendedI>
     64a:	ec 01       	movw	r28, r24
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	dd de       	rcall	.-582    	; 0x40c <chSchWakeupS>
     652:	78 94       	sei
     654:	ce 01       	movw	r24, r28
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <chThdExitS>:
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	c0 91 46 02 	lds	r28, 0x0246
     668:	d0 91 47 02 	lds	r29, 0x0247
     66c:	99 8b       	std	Y+17, r25	; 0x11
     66e:	88 8b       	std	Y+16, r24	; 0x10
     670:	8e 01       	movw	r16, r28
     672:	0e 5e       	subi	r16, 0xEE	; 238
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	8a 89       	ldd	r24, Y+18	; 0x12
     678:	9b 89       	ldd	r25, Y+19	; 0x13
     67a:	08 17       	cp	r16, r24
     67c:	19 07       	cpc	r17, r25
     67e:	59 f0       	breq	.+22     	; 0x696 <chThdExitS+0x3a>
     680:	fc 01       	movw	r30, r24
     682:	20 81       	ld	r18, Z
     684:	31 81       	ldd	r19, Z+1	; 0x01
     686:	3b 8b       	std	Y+19, r19	; 0x13
     688:	2a 8b       	std	Y+18, r18	; 0x12
     68a:	4d de       	rcall	.-870    	; 0x326 <chSchReadyI>
     68c:	8a 89       	ldd	r24, Y+18	; 0x12
     68e:	9b 89       	ldd	r25, Y+19	; 0x13
     690:	80 17       	cp	r24, r16
     692:	91 07       	cpc	r25, r17
     694:	a9 f7       	brne	.-22     	; 0x680 <chThdExitS+0x24>
     696:	8f 85       	ldd	r24, Y+15	; 0x0f
     698:	81 11       	cpse	r24, r1
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <chThdExitS+0x58>
     69c:	e9 85       	ldd	r30, Y+9	; 0x09
     69e:	fa 85       	ldd	r31, Y+10	; 0x0a
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	98 85       	ldd	r25, Y+8	; 0x08
     6a4:	90 87       	std	Z+8, r25	; 0x08
     6a6:	87 83       	std	Z+7, r24	; 0x07
     6a8:	af 81       	ldd	r26, Y+7	; 0x07
     6aa:	b8 85       	ldd	r27, Y+8	; 0x08
     6ac:	1a 96       	adiw	r26, 0x0a	; 10
     6ae:	fc 93       	st	X, r31
     6b0:	ee 93       	st	-X, r30
     6b2:	19 97       	sbiw	r26, 0x09	; 9
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	55 ce       	rjmp	.-854    	; 0x36a <chSchGoSleepS>

000006c0 <chThdExit>:
     6c0:	f8 94       	cli
     6c2:	cc cf       	rjmp	.-104    	; 0x65c <chThdExitS>

000006c4 <chThdSleep>:
     6c4:	f8 94       	cli
     6c6:	bc 01       	movw	r22, r24
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	6b de       	rcall	.-810    	; 0x3a2 <chSchGoSleepTimeoutS>
     6cc:	78 94       	sei
     6ce:	08 95       	ret

000006d0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     6d4:	61 15       	cp	r22, r1
     6d6:	71 05       	cpc	r23, r1
     6d8:	99 f0       	breq	.+38     	; 0x700 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     6da:	e0 91 46 02 	lds	r30, 0x0246
     6de:	f0 91 47 02 	lds	r31, 0x0247
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     6e6:	ec 01       	movw	r28, r24
     6e8:	aa 81       	ldd	r26, Y+2	; 0x02
     6ea:	bb 81       	ldd	r27, Y+3	; 0x03
     6ec:	b3 83       	std	Z+3, r27	; 0x03
     6ee:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     6f0:	ed 93       	st	X+, r30
     6f2:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     6f4:	fb 83       	std	Y+3, r31	; 0x03
     6f6:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     6f8:	84 e0       	ldi	r24, 0x04	; 4
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     6fe:	51 ce       	rjmp	.-862    	; 0x3a2 <chSchGoSleepTimeoutS>
}
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     710:	80 81       	ld	r24, Z
     712:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     714:	e8 17       	cp	r30, r24
     716:	f9 07       	cpc	r31, r25
     718:	71 f0       	breq	.+28     	; 0x736 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     71a:	ec 01       	movw	r28, r24
     71c:	a8 81       	ld	r26, Y
     71e:	b9 81       	ldd	r27, Y+1	; 0x01
     720:	b1 83       	std	Z+1, r27	; 0x01
     722:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     724:	13 96       	adiw	r26, 0x03	; 3
     726:	fc 93       	st	X, r31
     728:	ee 93       	st	-X, r30
     72a:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     72c:	79 8b       	std	Y+17, r23	; 0x11
     72e:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     734:	f8 cd       	rjmp	.-1040   	; 0x326 <chSchReadyI>
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     73c:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     742:	93 83       	std	Z+3, r25	; 0x03
     744:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     746:	15 82       	std	Z+5, r1	; 0x05
     748:	14 82       	std	Z+4, r1	; 0x04
     74a:	08 95       	ret

0000074c <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     74c:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     74e:	90 8d       	ldd	r25, Z+24	; 0x18
     750:	69 2b       	or	r22, r25
     752:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     754:	85 85       	ldd	r24, Z+13	; 0x0d
     756:	8a 30       	cpi	r24, 0x0A	; 10
     758:	59 f0       	breq	.+22     	; 0x770 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	09 f0       	breq	.+2      	; 0x760 <chEvtSignalI+0x14>
     75e:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     760:	80 89       	ldd	r24, Z+16	; 0x10
     762:	68 23       	and	r22, r24

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     764:	86 13       	cpse	r24, r22
     766:	fb cf       	rjmp	.-10     	; 0x75e <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     768:	11 8a       	std	Z+17, r1	; 0x11
     76a:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     76c:	cf 01       	movw	r24, r30
     76e:	db cd       	rjmp	.-1098   	; 0x326 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     770:	80 89       	ldd	r24, Z+16	; 0x10
     772:	68 23       	and	r22, r24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     774:	c9 f7       	brne	.-14     	; 0x768 <chEvtSignalI+0x1c>
     776:	08 95       	ret

00000778 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	7c 01       	movw	r14, r24
     784:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     786:	fc 01       	movw	r30, r24
     788:	c0 81       	ld	r28, Z
     78a:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     78c:	8c 17       	cp	r24, r28
     78e:	9d 07       	cpc	r25, r29
     790:	91 f0       	breq	.+36     	; 0x7b6 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     792:	9d 81       	ldd	r25, Y+5	; 0x05
     794:	91 2b       	or	r25, r17
     796:	9d 83       	std	Y+5, r25	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     798:	11 23       	and	r17, r17
     79a:	19 f0       	breq	.+6      	; 0x7a2 <chEvtBroadcastFlagsI+0x2a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
     79c:	2e 81       	ldd	r18, Y+6	; 0x06
     79e:	92 23       	and	r25, r18
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     7a0:	21 f0       	breq	.+8      	; 0x7aa <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     7a2:	6c 81       	ldd	r22, Y+4	; 0x04
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	9b 81       	ldd	r25, Y+3	; 0x03
     7a8:	d1 df       	rcall	.-94     	; 0x74c <chEvtSignalI>
    }
    elp = elp->next;
     7aa:	09 90       	ld	r0, Y+
     7ac:	d8 81       	ld	r29, Y
     7ae:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     7b0:	ec 16       	cp	r14, r28
     7b2:	fd 06       	cpc	r15, r29
     7b4:	71 f7       	brne	.-36     	; 0x792 <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	08 95       	ret

000007c2 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     7c2:	ee e6       	ldi	r30, 0x6E	; 110
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	84 e4       	ldi	r24, 0x44	; 68
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	91 83       	std	Z+1, r25	; 0x01
     7cc:	80 83       	st	Z, r24
     7ce:	84 ec       	ldi	r24, 0xC4	; 196
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	93 83       	std	Z+3, r25	; 0x03
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	08 95       	ret

000007d8 <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     7d8:	f8 94       	cli
     7da:	fb 01       	movw	r30, r22
     7dc:	31 97       	sbiw	r30, 0x01	; 1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     7de:	71 95       	neg	r23
     7e0:	61 95       	neg	r22
     7e2:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     7e4:	20 91 6e 02 	lds	r18, 0x026E
     7e8:	30 91 6f 02 	lds	r19, 0x026F
     7ec:	42 0f       	add	r20, r18
     7ee:	53 1f       	adc	r21, r19
     7f0:	4e 0f       	add	r20, r30
     7f2:	5f 1f       	adc	r21, r31
     7f4:	46 23       	and	r20, r22
     7f6:	57 23       	and	r21, r23
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     7f8:	8e 0f       	add	r24, r30
     7fa:	9f 1f       	adc	r25, r31
     7fc:	68 23       	and	r22, r24
     7fe:	79 23       	and	r23, r25
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
     800:	ca 01       	movw	r24, r20
     802:	86 0f       	add	r24, r22
     804:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     806:	60 91 70 02 	lds	r22, 0x0270
     80a:	70 91 71 02 	lds	r23, 0x0271
     80e:	68 17       	cp	r22, r24
     810:	79 07       	cpc	r23, r25
     812:	50 f0       	brcs	.+20     	; 0x828 <chCoreAllocAlignedWithOffset+0x50>
     814:	82 17       	cp	r24, r18
     816:	93 07       	cpc	r25, r19
     818:	38 f0       	brcs	.+14     	; 0x828 <chCoreAllocAlignedWithOffset+0x50>
    return NULL;
  }

  ch_memcore.nextmem = next;
     81a:	90 93 6f 02 	sts	0x026F, r25
     81e:	80 93 6e 02 	sts	0x026E, r24

  return p;
     822:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     824:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     826:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     82e:	08 95       	ret

00000830 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     830:	e4 ec       	ldi	r30, 0xC4	; 196
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	8c ee       	ldi	r24, 0xEC	; 236
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     83c:	13 82       	std	Z+3, r1	; 0x03
     83e:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     840:	15 82       	std	Z+5, r1	; 0x05
     842:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     844:	8a ec       	ldi	r24, 0xCA	; 202
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	79 cf       	rjmp	.-270    	; 0x73c <chMtxObjectInit>

0000084a <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     84a:	2f 92       	push	r2
  asm volatile ("push    r3");
     84c:	3f 92       	push	r3
  asm volatile ("push    r4");
     84e:	4f 92       	push	r4
  asm volatile ("push    r5");
     850:	5f 92       	push	r5
  asm volatile ("push    r6");
     852:	6f 92       	push	r6
  asm volatile ("push    r7");
     854:	7f 92       	push	r7
  asm volatile ("push    r8");
     856:	8f 92       	push	r8
  asm volatile ("push    r9");
     858:	9f 92       	push	r9
  asm volatile ("push    r10");
     85a:	af 92       	push	r10
  asm volatile ("push    r11");
     85c:	bf 92       	push	r11
  asm volatile ("push    r12");
     85e:	cf 92       	push	r12
  asm volatile ("push    r13");
     860:	df 92       	push	r13
  asm volatile ("push    r14");
     862:	ef 92       	push	r14
  asm volatile ("push    r15");
     864:	ff 92       	push	r15
  asm volatile ("push    r16");
     866:	0f 93       	push	r16
  asm volatile ("push    r17");
     868:	1f 93       	push	r17
  asm volatile ("push    r28");
     86a:	cf 93       	push	r28
  asm volatile ("push    r29");
     86c:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     86e:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     870:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     872:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     874:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     876:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     878:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     87a:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     87c:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     87e:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     880:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     882:	df 91       	pop	r29
  asm volatile ("pop     r28");
     884:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     886:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     888:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     88a:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     88c:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     88e:	df 90       	pop	r13
  asm volatile ("pop     r12");
     890:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     892:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     894:	af 90       	pop	r10
  asm volatile ("pop     r9");
     896:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     898:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     89a:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     89c:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     89e:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     8a0:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     8a2:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     8a4:	2f 90       	pop	r2
  asm volatile ("ret");
     8a6:	08 95       	ret

000008a8 <_port_thread_start>:
     8a8:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     8aa:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     8ac:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     8ae:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     8b0:	07 cf       	rjmp	.-498    	; 0x6c0 <chThdExit>

000008b2 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     8b2:	e2 d2       	rcall	.+1476   	; 0xe78 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
     8b4:	8d e3       	ldi	r24, 0x3D	; 61
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	e0 d2       	rcall	.+1472   	; 0xe7a <_pal_lld_init>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
     8ba:	45 d2       	rcall	.+1162   	; 0xd46 <pwmInit>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     8bc:	68 d2       	rcall	.+1232   	; 0xd8e <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     8be:	79 d4       	rcall	.+2290   	; 0x11b2 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <stInit>

000008c2 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     8c2:	14 c3       	rjmp	.+1576   	; 0xeec <st_lld_init>

000008c4 <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     8c4:	af 92       	push	r10
     8c6:	bf 92       	push	r11
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	ec 01       	movw	r28, r24
     8da:	6b 01       	movw	r12, r22
     8dc:	8a 01       	movw	r16, r20
     8de:	8c 81       	ldd	r24, Y+4	; 0x04
     8e0:	9d 81       	ldd	r25, Y+5	; 0x05
     8e2:	84 17       	cp	r24, r20
     8e4:	95 07       	cpc	r25, r21
     8e6:	10 f4       	brcc	.+4      	; 0x8ec <iq_read+0x28>
     8e8:	0c 81       	ldd	r16, Y+4	; 0x04
     8ea:	1d 81       	ldd	r17, Y+5	; 0x05
     8ec:	6c 85       	ldd	r22, Y+12	; 0x0c
     8ee:	7d 85       	ldd	r23, Y+13	; 0x0d
     8f0:	e8 84       	ldd	r14, Y+8	; 0x08
     8f2:	f9 84       	ldd	r15, Y+9	; 0x09
     8f4:	e6 1a       	sub	r14, r22
     8f6:	f7 0a       	sbc	r15, r23
     8f8:	0e 15       	cp	r16, r14
     8fa:	1f 05       	cpc	r17, r15
     8fc:	80 f1       	brcs	.+96     	; 0x95e <__stack+0x5f>
     8fe:	e0 16       	cp	r14, r16
     900:	f1 06       	cpc	r15, r17
     902:	c8 f0       	brcs	.+50     	; 0x936 <__stack+0x37>
     904:	a8 01       	movw	r20, r16
     906:	c6 01       	movw	r24, r12
     908:	8a d7       	rcall	.+3860   	; 0x181e <memcpy>
     90a:	8e 81       	ldd	r24, Y+6	; 0x06
     90c:	9f 81       	ldd	r25, Y+7	; 0x07
     90e:	9d 87       	std	Y+13, r25	; 0x0d
     910:	8c 87       	std	Y+12, r24	; 0x0c
     912:	8c 81       	ldd	r24, Y+4	; 0x04
     914:	9d 81       	ldd	r25, Y+5	; 0x05
     916:	80 1b       	sub	r24, r16
     918:	91 0b       	sbc	r25, r17
     91a:	9d 83       	std	Y+5, r25	; 0x05
     91c:	8c 83       	std	Y+4, r24	; 0x04
     91e:	c8 01       	movw	r24, r16
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	08 95       	ret
     936:	a7 01       	movw	r20, r14
     938:	c6 01       	movw	r24, r12
     93a:	71 d7       	rcall	.+3810   	; 0x181e <memcpy>
     93c:	58 01       	movw	r10, r16
     93e:	ae 18       	sub	r10, r14
     940:	bf 08       	sbc	r11, r15
     942:	6e 81       	ldd	r22, Y+6	; 0x06
     944:	7f 81       	ldd	r23, Y+7	; 0x07
     946:	a5 01       	movw	r20, r10
     948:	c6 01       	movw	r24, r12
     94a:	8e 0d       	add	r24, r14
     94c:	9f 1d       	adc	r25, r15
     94e:	67 d7       	rcall	.+3790   	; 0x181e <memcpy>
     950:	8e 81       	ldd	r24, Y+6	; 0x06
     952:	9f 81       	ldd	r25, Y+7	; 0x07
     954:	a8 0e       	add	r10, r24
     956:	b9 1e       	adc	r11, r25
     958:	bd 86       	std	Y+13, r11	; 0x0d
     95a:	ac 86       	std	Y+12, r10	; 0x0c
     95c:	da cf       	rjmp	.-76     	; 0x912 <__stack+0x13>
     95e:	a8 01       	movw	r20, r16
     960:	c6 01       	movw	r24, r12
     962:	5d d7       	rcall	.+3770   	; 0x181e <memcpy>
     964:	8c 85       	ldd	r24, Y+12	; 0x0c
     966:	9d 85       	ldd	r25, Y+13	; 0x0d
     968:	80 0f       	add	r24, r16
     96a:	91 1f       	adc	r25, r17
     96c:	9d 87       	std	Y+13, r25	; 0x0d
     96e:	8c 87       	std	Y+12, r24	; 0x0c
     970:	d0 cf       	rjmp	.-96     	; 0x912 <__stack+0x13>

00000972 <oq_write>:
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	6b 01       	movw	r12, r22
     98a:	8a 01       	movw	r16, r20
     98c:	8c 81       	ldd	r24, Y+4	; 0x04
     98e:	9d 81       	ldd	r25, Y+5	; 0x05
     990:	84 17       	cp	r24, r20
     992:	95 07       	cpc	r25, r21
     994:	10 f4       	brcc	.+4      	; 0x99a <oq_write+0x28>
     996:	0c 81       	ldd	r16, Y+4	; 0x04
     998:	1d 81       	ldd	r17, Y+5	; 0x05
     99a:	8a 85       	ldd	r24, Y+10	; 0x0a
     99c:	9b 85       	ldd	r25, Y+11	; 0x0b
     99e:	e8 84       	ldd	r14, Y+8	; 0x08
     9a0:	f9 84       	ldd	r15, Y+9	; 0x09
     9a2:	e8 1a       	sub	r14, r24
     9a4:	f9 0a       	sbc	r15, r25
     9a6:	0e 15       	cp	r16, r14
     9a8:	1f 05       	cpc	r17, r15
     9aa:	80 f1       	brcs	.+96     	; 0xa0c <oq_write+0x9a>
     9ac:	e0 16       	cp	r14, r16
     9ae:	f1 06       	cpc	r15, r17
     9b0:	c8 f0       	brcs	.+50     	; 0x9e4 <oq_write+0x72>
     9b2:	a8 01       	movw	r20, r16
     9b4:	b6 01       	movw	r22, r12
     9b6:	33 d7       	rcall	.+3686   	; 0x181e <memcpy>
     9b8:	8e 81       	ldd	r24, Y+6	; 0x06
     9ba:	9f 81       	ldd	r25, Y+7	; 0x07
     9bc:	9b 87       	std	Y+11, r25	; 0x0b
     9be:	8a 87       	std	Y+10, r24	; 0x0a
     9c0:	8c 81       	ldd	r24, Y+4	; 0x04
     9c2:	9d 81       	ldd	r25, Y+5	; 0x05
     9c4:	80 1b       	sub	r24, r16
     9c6:	91 0b       	sbc	r25, r17
     9c8:	9d 83       	std	Y+5, r25	; 0x05
     9ca:	8c 83       	std	Y+4, r24	; 0x04
     9cc:	c8 01       	movw	r24, r16
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	08 95       	ret
     9e4:	a7 01       	movw	r20, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	1a d7       	rcall	.+3636   	; 0x181e <memcpy>
     9ea:	58 01       	movw	r10, r16
     9ec:	ae 18       	sub	r10, r14
     9ee:	bf 08       	sbc	r11, r15
     9f0:	b6 01       	movw	r22, r12
     9f2:	6e 0d       	add	r22, r14
     9f4:	7f 1d       	adc	r23, r15
     9f6:	a5 01       	movw	r20, r10
     9f8:	8e 81       	ldd	r24, Y+6	; 0x06
     9fa:	9f 81       	ldd	r25, Y+7	; 0x07
     9fc:	10 d7       	rcall	.+3616   	; 0x181e <memcpy>
     9fe:	8e 81       	ldd	r24, Y+6	; 0x06
     a00:	9f 81       	ldd	r25, Y+7	; 0x07
     a02:	a8 0e       	add	r10, r24
     a04:	b9 1e       	adc	r11, r25
     a06:	bb 86       	std	Y+11, r11	; 0x0b
     a08:	aa 86       	std	Y+10, r10	; 0x0a
     a0a:	da cf       	rjmp	.-76     	; 0x9c0 <oq_write+0x4e>
     a0c:	a8 01       	movw	r20, r16
     a0e:	b6 01       	movw	r22, r12
     a10:	06 d7       	rcall	.+3596   	; 0x181e <memcpy>
     a12:	8a 85       	ldd	r24, Y+10	; 0x0a
     a14:	9b 85       	ldd	r25, Y+11	; 0x0b
     a16:	80 0f       	add	r24, r16
     a18:	91 1f       	adc	r25, r17
     a1a:	9b 87       	std	Y+11, r25	; 0x0b
     a1c:	8a 87       	std	Y+10, r24	; 0x0a
     a1e:	d0 cf       	rjmp	.-96     	; 0x9c0 <oq_write+0x4e>

00000a20 <iqObjectInit>:
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	fc 01       	movw	r30, r24
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	80 83       	st	Z, r24
     a2a:	93 83       	std	Z+3, r25	; 0x03
     a2c:	82 83       	std	Z+2, r24	; 0x02
     a2e:	15 82       	std	Z+5, r1	; 0x05
     a30:	14 82       	std	Z+4, r1	; 0x04
     a32:	77 83       	std	Z+7, r23	; 0x07
     a34:	66 83       	std	Z+6, r22	; 0x06
     a36:	75 87       	std	Z+13, r23	; 0x0d
     a38:	64 87       	std	Z+12, r22	; 0x0c
     a3a:	73 87       	std	Z+11, r23	; 0x0b
     a3c:	62 87       	std	Z+10, r22	; 0x0a
     a3e:	64 0f       	add	r22, r20
     a40:	75 1f       	adc	r23, r21
     a42:	71 87       	std	Z+9, r23	; 0x09
     a44:	60 87       	std	Z+8, r22	; 0x08
     a46:	37 87       	std	Z+15, r19	; 0x0f
     a48:	26 87       	std	Z+14, r18	; 0x0e
     a4a:	11 8b       	std	Z+17, r17	; 0x11
     a4c:	00 8b       	std	Z+16, r16	; 0x10
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <iqPutI>:
     a54:	fc 01       	movw	r30, r24
     a56:	a2 85       	ldd	r26, Z+10	; 0x0a
     a58:	b3 85       	ldd	r27, Z+11	; 0x0b
     a5a:	84 85       	ldd	r24, Z+12	; 0x0c
     a5c:	95 85       	ldd	r25, Z+13	; 0x0d
     a5e:	a8 17       	cp	r26, r24
     a60:	b9 07       	cpc	r27, r25
     a62:	e1 f0       	breq	.+56     	; 0xa9c <iqPutI+0x48>
     a64:	84 81       	ldd	r24, Z+4	; 0x04
     a66:	95 81       	ldd	r25, Z+5	; 0x05
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	95 83       	std	Z+5, r25	; 0x05
     a6c:	84 83       	std	Z+4, r24	; 0x04
     a6e:	cd 01       	movw	r24, r26
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	93 87       	std	Z+11, r25	; 0x0b
     a74:	82 87       	std	Z+10, r24	; 0x0a
     a76:	6c 93       	st	X, r22
     a78:	22 85       	ldd	r18, Z+10	; 0x0a
     a7a:	33 85       	ldd	r19, Z+11	; 0x0b
     a7c:	80 85       	ldd	r24, Z+8	; 0x08
     a7e:	91 85       	ldd	r25, Z+9	; 0x09
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	20 f0       	brcs	.+8      	; 0xa8e <iqPutI+0x3a>
     a86:	86 81       	ldd	r24, Z+6	; 0x06
     a88:	97 81       	ldd	r25, Z+7	; 0x07
     a8a:	93 87       	std	Z+11, r25	; 0x0b
     a8c:	82 87       	std	Z+10, r24	; 0x0a
     a8e:	cf 01       	movw	r24, r30
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	3a de       	rcall	.-908    	; 0x70a <chThdDequeueNextI>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	08 95       	ret
     a9c:	84 81       	ldd	r24, Z+4	; 0x04
     a9e:	95 81       	ldd	r25, Z+5	; 0x05
     aa0:	89 2b       	or	r24, r25
     aa2:	01 f3       	breq	.-64     	; 0xa64 <iqPutI+0x10>
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	9f ef       	ldi	r25, 0xFF	; 255
     aa8:	08 95       	ret

00000aaa <iqGetTimeout>:
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ec 01       	movw	r28, r24
     ab4:	8b 01       	movw	r16, r22
     ab6:	f8 94       	cli
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <iqGetTimeout+0x1a>
     aba:	b8 01       	movw	r22, r16
     abc:	ce 01       	movw	r24, r28
     abe:	08 de       	rcall	.-1008   	; 0x6d0 <chThdEnqueueTimeoutS>
     ac0:	97 fd       	sbrc	r25, 7
     ac2:	27 c0       	rjmp	.+78     	; 0xb12 <iqGetTimeout+0x68>
     ac4:	8c 81       	ldd	r24, Y+4	; 0x04
     ac6:	9d 81       	ldd	r25, Y+5	; 0x05
     ac8:	89 2b       	or	r24, r25
     aca:	b9 f3       	breq	.-18     	; 0xaba <iqGetTimeout+0x10>
     acc:	8c 81       	ldd	r24, Y+4	; 0x04
     ace:	9d 81       	ldd	r25, Y+5	; 0x05
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	9d 83       	std	Y+5, r25	; 0x05
     ad4:	8c 83       	std	Y+4, r24	; 0x04
     ad6:	ec 85       	ldd	r30, Y+12	; 0x0c
     ad8:	fd 85       	ldd	r31, Y+13	; 0x0d
     ada:	cf 01       	movw	r24, r30
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	9d 87       	std	Y+13, r25	; 0x0d
     ae0:	8c 87       	std	Y+12, r24	; 0x0c
     ae2:	10 81       	ld	r17, Z
     ae4:	28 85       	ldd	r18, Y+8	; 0x08
     ae6:	39 85       	ldd	r19, Y+9	; 0x09
     ae8:	82 17       	cp	r24, r18
     aea:	93 07       	cpc	r25, r19
     aec:	20 f0       	brcs	.+8      	; 0xaf6 <iqGetTimeout+0x4c>
     aee:	8e 81       	ldd	r24, Y+6	; 0x06
     af0:	9f 81       	ldd	r25, Y+7	; 0x07
     af2:	9d 87       	std	Y+13, r25	; 0x0d
     af4:	8c 87       	std	Y+12, r24	; 0x0c
     af6:	ee 85       	ldd	r30, Y+14	; 0x0e
     af8:	ff 85       	ldd	r31, Y+15	; 0x0f
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	11 f0       	breq	.+4      	; 0xb02 <iqGetTimeout+0x58>
     afe:	ce 01       	movw	r24, r28
     b00:	09 95       	icall
     b02:	78 94       	sei
     b04:	81 2f       	mov	r24, r17
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret
     b12:	78 94       	sei
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <iqReadTimeout>:
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	6c 01       	movw	r12, r24
     b3c:	8b 01       	movw	r16, r22
     b3e:	7a 01       	movw	r14, r20
     b40:	49 01       	movw	r8, r18
     b42:	fc 01       	movw	r30, r24
     b44:	a6 84       	ldd	r10, Z+14	; 0x0e
     b46:	b7 84       	ldd	r11, Z+15	; 0x0f
     b48:	f8 94       	cli
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	45 2b       	or	r20, r21
     b50:	81 f4       	brne	.+32     	; 0xb72 <iqReadTimeout+0x54>
     b52:	1b c0       	rjmp	.+54     	; 0xb8a <iqReadTimeout+0x6c>
     b54:	a1 14       	cp	r10, r1
     b56:	b1 04       	cpc	r11, r1
     b58:	19 f0       	breq	.+6      	; 0xb60 <iqReadTimeout+0x42>
     b5a:	c6 01       	movw	r24, r12
     b5c:	f5 01       	movw	r30, r10
     b5e:	09 95       	icall
     b60:	78 94       	sei
     b62:	c6 0d       	add	r28, r6
     b64:	d7 1d       	adc	r29, r7
     b66:	06 0d       	add	r16, r6
     b68:	17 1d       	adc	r17, r7
     b6a:	f8 94       	cli
     b6c:	ce 15       	cp	r28, r14
     b6e:	df 05       	cpc	r29, r15
     b70:	60 f4       	brcc	.+24     	; 0xb8a <iqReadTimeout+0x6c>
     b72:	a7 01       	movw	r20, r14
     b74:	b8 01       	movw	r22, r16
     b76:	c6 01       	movw	r24, r12
     b78:	a5 de       	rcall	.-694    	; 0x8c4 <iq_read>
     b7a:	3c 01       	movw	r6, r24
     b7c:	89 2b       	or	r24, r25
     b7e:	51 f7       	brne	.-44     	; 0xb54 <iqReadTimeout+0x36>
     b80:	b4 01       	movw	r22, r8
     b82:	c6 01       	movw	r24, r12
     b84:	a5 dd       	rcall	.-1206   	; 0x6d0 <chThdEnqueueTimeoutS>
     b86:	89 2b       	or	r24, r25
     b88:	89 f3       	breq	.-30     	; 0xb6c <iqReadTimeout+0x4e>
     b8a:	78 94       	sei
     b8c:	ce 01       	movw	r24, r28
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	08 95       	ret

00000bac <oqObjectInit>:
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	fc 01       	movw	r30, r24
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24
     bb6:	93 83       	std	Z+3, r25	; 0x03
     bb8:	82 83       	std	Z+2, r24	; 0x02
     bba:	55 83       	std	Z+5, r21	; 0x05
     bbc:	44 83       	std	Z+4, r20	; 0x04
     bbe:	77 83       	std	Z+7, r23	; 0x07
     bc0:	66 83       	std	Z+6, r22	; 0x06
     bc2:	75 87       	std	Z+13, r23	; 0x0d
     bc4:	64 87       	std	Z+12, r22	; 0x0c
     bc6:	73 87       	std	Z+11, r23	; 0x0b
     bc8:	62 87       	std	Z+10, r22	; 0x0a
     bca:	46 0f       	add	r20, r22
     bcc:	57 1f       	adc	r21, r23
     bce:	51 87       	std	Z+9, r21	; 0x09
     bd0:	40 87       	std	Z+8, r20	; 0x08
     bd2:	37 87       	std	Z+15, r19	; 0x0f
     bd4:	26 87       	std	Z+14, r18	; 0x0e
     bd6:	11 8b       	std	Z+17, r17	; 0x11
     bd8:	00 8b       	std	Z+16, r16	; 0x10
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <oqPutTimeout>:
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
     bec:	f6 2e       	mov	r15, r22
     bee:	8a 01       	movw	r16, r20
     bf0:	f8 94       	cli
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <oqPutTimeout+0x1e>
     bf4:	b8 01       	movw	r22, r16
     bf6:	ce 01       	movw	r24, r28
     bf8:	6b dd       	rcall	.-1322   	; 0x6d0 <chThdEnqueueTimeoutS>
     bfa:	97 fd       	sbrc	r25, 7
     bfc:	2a c0       	rjmp	.+84     	; 0xc52 <oqPutTimeout+0x72>
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	9d 81       	ldd	r25, Y+5	; 0x05
     c02:	89 2b       	or	r24, r25
     c04:	b9 f3       	breq	.-18     	; 0xbf4 <oqPutTimeout+0x14>
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	9d 81       	ldd	r25, Y+5	; 0x05
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	9d 83       	std	Y+5, r25	; 0x05
     c0e:	8c 83       	std	Y+4, r24	; 0x04
     c10:	ea 85       	ldd	r30, Y+10	; 0x0a
     c12:	fb 85       	ldd	r31, Y+11	; 0x0b
     c14:	cf 01       	movw	r24, r30
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	9b 87       	std	Y+11, r25	; 0x0b
     c1a:	8a 87       	std	Y+10, r24	; 0x0a
     c1c:	f0 82       	st	Z, r15
     c1e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c20:	3b 85       	ldd	r19, Y+11	; 0x0b
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	99 85       	ldd	r25, Y+9	; 0x09
     c26:	28 17       	cp	r18, r24
     c28:	39 07       	cpc	r19, r25
     c2a:	20 f0       	brcs	.+8      	; 0xc34 <oqPutTimeout+0x54>
     c2c:	8e 81       	ldd	r24, Y+6	; 0x06
     c2e:	9f 81       	ldd	r25, Y+7	; 0x07
     c30:	9b 87       	std	Y+11, r25	; 0x0b
     c32:	8a 87       	std	Y+10, r24	; 0x0a
     c34:	ee 85       	ldd	r30, Y+14	; 0x0e
     c36:	ff 85       	ldd	r31, Y+15	; 0x0f
     c38:	30 97       	sbiw	r30, 0x00	; 0
     c3a:	11 f0       	breq	.+4      	; 0xc40 <oqPutTimeout+0x60>
     c3c:	ce 01       	movw	r24, r28
     c3e:	09 95       	icall
     c40:	78 94       	sei
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	08 95       	ret
     c52:	78 94       	sei
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	08 95       	ret

00000c60 <oqGetI>:
     c60:	cf 93       	push	r28
     c62:	fc 01       	movw	r30, r24
     c64:	a4 85       	ldd	r26, Z+12	; 0x0c
     c66:	b5 85       	ldd	r27, Z+13	; 0x0d
     c68:	82 85       	ldd	r24, Z+10	; 0x0a
     c6a:	93 85       	ldd	r25, Z+11	; 0x0b
     c6c:	8a 17       	cp	r24, r26
     c6e:	9b 07       	cpc	r25, r27
     c70:	e1 f0       	breq	.+56     	; 0xcaa <oqGetI+0x4a>
     c72:	84 81       	ldd	r24, Z+4	; 0x04
     c74:	95 81       	ldd	r25, Z+5	; 0x05
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	95 83       	std	Z+5, r25	; 0x05
     c7a:	84 83       	std	Z+4, r24	; 0x04
     c7c:	cd 01       	movw	r24, r26
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	95 87       	std	Z+13, r25	; 0x0d
     c82:	84 87       	std	Z+12, r24	; 0x0c
     c84:	cc 91       	ld	r28, X
     c86:	20 85       	ldd	r18, Z+8	; 0x08
     c88:	31 85       	ldd	r19, Z+9	; 0x09
     c8a:	82 17       	cp	r24, r18
     c8c:	93 07       	cpc	r25, r19
     c8e:	40 f4       	brcc	.+16     	; 0xca0 <oqGetI+0x40>
     c90:	cf 01       	movw	r24, r30
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	39 dd       	rcall	.-1422   	; 0x70a <chThdDequeueNextI>
     c98:	8c 2f       	mov	r24, r28
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret
     ca0:	86 81       	ldd	r24, Z+6	; 0x06
     ca2:	97 81       	ldd	r25, Z+7	; 0x07
     ca4:	95 87       	std	Z+13, r25	; 0x0d
     ca6:	84 87       	std	Z+12, r24	; 0x0c
     ca8:	f3 cf       	rjmp	.-26     	; 0xc90 <oqGetI+0x30>
     caa:	84 81       	ldd	r24, Z+4	; 0x04
     cac:	95 81       	ldd	r25, Z+5	; 0x05
     cae:	89 2b       	or	r24, r25
     cb0:	01 f3       	breq	.-64     	; 0xc72 <oqGetI+0x12>
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	9f ef       	ldi	r25, 0xFF	; 255
     cb6:	f2 cf       	rjmp	.-28     	; 0xc9c <oqGetI+0x3c>

00000cb8 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     cb8:	6f 92       	push	r6
     cba:	7f 92       	push	r7
     cbc:	8f 92       	push	r8
     cbe:	9f 92       	push	r9
     cc0:	af 92       	push	r10
     cc2:	bf 92       	push	r11
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	6c 01       	movw	r12, r24
     cd6:	8b 01       	movw	r16, r22
     cd8:	7a 01       	movw	r14, r20
     cda:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
     cdc:	fc 01       	movw	r30, r24
     cde:	a6 84       	ldd	r10, Z+14	; 0x0e
     ce0:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     ce2:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
     ce8:	45 2b       	or	r20, r21
     cea:	81 f4       	brne	.+32     	; 0xd0c <oqWriteTimeout+0x54>
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     cee:	a1 14       	cp	r10, r1
     cf0:	b1 04       	cpc	r11, r1
     cf2:	19 f0       	breq	.+6      	; 0xcfa <oqWriteTimeout+0x42>
        nfy(oqp);
     cf4:	c6 01       	movw	r24, r12
     cf6:	f5 01       	movw	r30, r10
     cf8:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     cfa:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
     cfc:	c6 0d       	add	r28, r6
     cfe:	d7 1d       	adc	r29, r7
      bp += done;
     d00:	06 0d       	add	r16, r6
     d02:	17 1d       	adc	r17, r7
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     d04:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
     d06:	ce 15       	cp	r28, r14
     d08:	df 05       	cpc	r29, r15
     d0a:	60 f4       	brcc	.+24     	; 0xd24 <oqWriteTimeout+0x6c>
    size_t done;

    done = oq_write(oqp, bp, n);
     d0c:	a7 01       	movw	r20, r14
     d0e:	b8 01       	movw	r22, r16
     d10:	c6 01       	movw	r24, r12
     d12:	2f de       	rcall	.-930    	; 0x972 <oq_write>
     d14:	3c 01       	movw	r6, r24
    if (done == (size_t)0) {
     d16:	89 2b       	or	r24, r25
     d18:	51 f7       	brne	.-44     	; 0xcee <oqWriteTimeout+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     d1a:	b4 01       	movw	r22, r8
     d1c:	c6 01       	movw	r24, r12
     d1e:	d8 dc       	rcall	.-1616   	; 0x6d0 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     d20:	89 2b       	or	r24, r25
     d22:	89 f3       	breq	.-30     	; 0xd06 <oqWriteTimeout+0x4e>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     d24:	78 94       	sei
    }
  }

  osalSysUnlock();
  return wr;
}
     d26:	ce 01       	movw	r24, r28
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	9f 90       	pop	r9
     d3e:	8f 90       	pop	r8
     d40:	7f 90       	pop	r7
     d42:	6f 90       	pop	r6
     d44:	08 95       	ret

00000d46 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
     d46:	78 c1       	rjmp	.+752    	; 0x1038 <pwm_lld_init>

00000d48 <pwmObjectInit>:
 *
 * @param[out] pwmp     pointer to a @p PWMDriver object
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {
     d48:	fc 01       	movw	r30, r24

  pwmp->state    = PWM_STOP;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 83       	st	Z, r24
  pwmp->config   = NULL;
     d4e:	12 82       	std	Z+2, r1	; 0x02
     d50:	11 82       	std	Z+1, r1	; 0x01
  pwmp->enabled  = 0;
     d52:	15 82       	std	Z+5, r1	; 0x05
  pwmp->channels = 0;
     d54:	16 82       	std	Z+6, r1	; 0x06
     d56:	08 95       	ret

00000d58 <_ctl>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <_readt>:
     d5e:	05 96       	adiw	r24, 0x05	; 5
     d60:	de ce       	rjmp	.-580    	; 0xb1e <iqReadTimeout>

00000d62 <_read>:
     d62:	2f ef       	ldi	r18, 0xFF	; 255
     d64:	3f ef       	ldi	r19, 0xFF	; 255
     d66:	05 96       	adiw	r24, 0x05	; 5
     d68:	da ce       	rjmp	.-588    	; 0xb1e <iqReadTimeout>

00000d6a <_writet>:
     d6a:	47 96       	adiw	r24, 0x17	; 23
     d6c:	a5 cf       	rjmp	.-182    	; 0xcb8 <oqWriteTimeout>

00000d6e <_write>:
     d6e:	2f ef       	ldi	r18, 0xFF	; 255
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	47 96       	adiw	r24, 0x17	; 23
     d74:	a1 cf       	rjmp	.-190    	; 0xcb8 <oqWriteTimeout>

00000d76 <_gett>:
     d76:	05 96       	adiw	r24, 0x05	; 5
     d78:	98 ce       	rjmp	.-720    	; 0xaaa <iqGetTimeout>

00000d7a <_get>:
     d7a:	6f ef       	ldi	r22, 0xFF	; 255
     d7c:	7f ef       	ldi	r23, 0xFF	; 255
     d7e:	05 96       	adiw	r24, 0x05	; 5
     d80:	94 ce       	rjmp	.-728    	; 0xaaa <iqGetTimeout>

00000d82 <_putt>:
     d82:	47 96       	adiw	r24, 0x17	; 23
     d84:	2d cf       	rjmp	.-422    	; 0xbe0 <oqPutTimeout>

00000d86 <_put>:
     d86:	4f ef       	ldi	r20, 0xFF	; 255
     d88:	5f ef       	ldi	r21, 0xFF	; 255
     d8a:	47 96       	adiw	r24, 0x17	; 23
     d8c:	29 cf       	rjmp	.-430    	; 0xbe0 <oqPutTimeout>

00000d8e <sdInit>:
     d8e:	d9 c1       	rjmp	.+946    	; 0x1142 <sd_lld_init>

00000d90 <sdObjectInit>:
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
     d9e:	9b 01       	movw	r18, r22
     da0:	7a 01       	movw	r14, r20
     da2:	fc 01       	movw	r30, r24
     da4:	86 e2       	ldi	r24, 0x26	; 38
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	81 93       	st	Z+, r24
     daa:	91 93       	st	Z+, r25
     dac:	fb 83       	std	Y+3, r31	; 0x03
     dae:	ea 83       	std	Y+2, r30	; 0x02
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	8c 83       	std	Y+4, r24	; 0x04
     db4:	be 01       	movw	r22, r28
     db6:	67 5d       	subi	r22, 0xD7	; 215
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8e 01       	movw	r16, r28
     dbc:	40 e2       	ldi	r20, 0x20	; 32
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	ce 01       	movw	r24, r28
     dc2:	05 96       	adiw	r24, 0x05	; 5
     dc4:	2d de       	rcall	.-934    	; 0xa20 <iqObjectInit>
     dc6:	be 01       	movw	r22, r28
     dc8:	67 5b       	subi	r22, 0xB7	; 183
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	97 01       	movw	r18, r14
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	ce 01       	movw	r24, r28
     dd4:	47 96       	adiw	r24, 0x17	; 23
     dd6:	ea de       	rcall	.-556    	; 0xbac <oqObjectInit>
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	08 95       	ret

00000de6 <sdStart>:
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	f8 94       	cli
     dee:	b0 d1       	rcall	.+864    	; 0x1150 <sd_lld_start>
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	8c 83       	std	Y+4, r24	; 0x04
     df4:	78 94       	sei
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
     e04:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	89 2b       	or	r24, r25
     e0c:	51 f0       	breq	.+20     	; 0xe22 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     e0e:	61 2f       	mov	r22, r17
     e10:	ce 01       	movw	r24, r28
     e12:	05 96       	adiw	r24, 0x05	; 5
     e14:	1f de       	rcall	.-962    	; 0xa54 <iqPutI>
     e16:	97 fd       	sbrc	r25, 7
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     e22:	64 e0       	ldi	r22, 0x04	; 4
     e24:	ce 01       	movw	r24, r28
     e26:	02 96       	adiw	r24, 0x02	; 2
     e28:	a7 dc       	rcall	.-1714   	; 0x778 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     e2a:	61 2f       	mov	r22, r17
     e2c:	ce 01       	movw	r24, r28
     e2e:	05 96       	adiw	r24, 0x05	; 5
     e30:	11 de       	rcall	.-990    	; 0xa54 <iqPutI>
     e32:	97 ff       	sbrs	r25, 7
     e34:	f2 cf       	rjmp	.-28     	; 0xe1a <sdIncomingDataI+0x1e>
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	ce 01       	movw	r24, r28
     e3a:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	9a cc       	rjmp	.-1740   	; 0x778 <chEvtBroadcastFlagsI>

00000e44 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     e4e:	47 96       	adiw	r24, 0x17	; 23
     e50:	07 df       	rcall	.-498    	; 0xc60 <oqGetI>
     e52:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
     e54:	97 fd       	sbrc	r25, 7
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     e58:	ce 01       	movw	r24, r28
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret
     e64:	68 e0       	ldi	r22, 0x08	; 8
     e66:	c8 01       	movw	r24, r16
     e68:	02 96       	adiw	r24, 0x02	; 2
     e6a:	86 dc       	rcall	.-1780   	; 0x778 <chEvtBroadcastFlagsI>
     e6c:	ce 01       	movw	r24, r28
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	08 95       	ret

00000e78 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     e78:	08 95       	ret

00000e7a <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     e7a:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     e7c:	80 81       	ld	r24, Z
     e7e:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     e88:	83 81       	ldd	r24, Z+3	; 0x03
     e8a:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     e90:	85 81       	ldd	r24, Z+5	; 0x05
     e92:	8a b9       	out	0x0a, r24	; 10
     e94:	08 95       	ret

00000e96 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 72 02 	sts	0x0272, r24
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     ebe:	1b d9       	rcall	.-3530   	; 0xf6 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     ec0:	10 92 72 02 	sts	0x0272, r1
     ec4:	ef da       	rcall	.-2594   	; 0x4a4 <chSchIsPreemptionRequired>
     ec6:	81 11       	cpse	r24, r1
     ec8:	fd da       	rcall	.-2566   	; 0x4c4 <chSchDoReschedule>
}
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     ef0:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     ef2:	9f e7       	ldi	r25, 0x7F	; 127
     ef4:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     ef6:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     ef8:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     efa:	80 93 6e 00 	sts	0x006E, r24
     efe:	08 95       	ret

00000f00 <__vector_13>:

/*
 * Interrupt for compare1&2 and clock overflow. pwmd1 & pwmd2.
 */
#if AVR_PWM_USE_TIM1 || defined(__DOXYGEN__)
OSAL_IRQ_HANDLER(TIMER1_OVF_vect) {
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 72 02 	sts	0x0272, r24
  PWMD1.config->callback(&PWMD1);
     f28:	e0 91 74 02 	lds	r30, 0x0274
     f2c:	f0 91 75 02 	lds	r31, 0x0275
     f30:	06 80       	ldd	r0, Z+6	; 0x06
     f32:	f7 81       	ldd	r31, Z+7	; 0x07
     f34:	e0 2d       	mov	r30, r0
     f36:	83 e7       	ldi	r24, 0x73	; 115
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	09 95       	icall
  OSAL_IRQ_EPILOGUE();
     f3c:	10 92 72 02 	sts	0x0272, r1
     f40:	b1 da       	rcall	.-2718   	; 0x4a4 <chSchIsPreemptionRequired>
     f42:	81 11       	cpse	r24, r1
     f44:	bf da       	rcall	.-2690   	; 0x4c4 <chSchDoReschedule>
}
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_11>:

OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	5f 93       	push	r21
     f7a:	6f 93       	push	r22
     f7c:	7f 93       	push	r23
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 72 02 	sts	0x0272, r24
  PWMD1.config->channels[0].callback(&PWMD1);
     f90:	e0 91 74 02 	lds	r30, 0x0274
     f94:	f0 91 75 02 	lds	r31, 0x0275
     f98:	01 84       	ldd	r0, Z+9	; 0x09
     f9a:	f2 85       	ldd	r31, Z+10	; 0x0a
     f9c:	e0 2d       	mov	r30, r0
     f9e:	83 e7       	ldi	r24, 0x73	; 115
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	09 95       	icall
  OSAL_IRQ_EPILOGUE();
     fa4:	10 92 72 02 	sts	0x0272, r1
     fa8:	7d da       	rcall	.-2822   	; 0x4a4 <chSchIsPreemptionRequired>
     faa:	81 11       	cpse	r24, r1
     fac:	8b da       	rcall	.-2794   	; 0x4c4 <chSchDoReschedule>
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <__vector_12>:

OSAL_IRQ_HANDLER(TIMER1_COMPB_vect) {
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 72 02 	sts	0x0272, r24
  PWMD1.config->channels[1].callback(&PWMD1);
     ff8:	e0 91 74 02 	lds	r30, 0x0274
     ffc:	f0 91 75 02 	lds	r31, 0x0275
    1000:	04 84       	ldd	r0, Z+12	; 0x0c
    1002:	f5 85       	ldd	r31, Z+13	; 0x0d
    1004:	e0 2d       	mov	r30, r0
    1006:	83 e7       	ldi	r24, 0x73	; 115
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	09 95       	icall
  OSAL_IRQ_EPILOGUE();
    100c:	10 92 72 02 	sts	0x0272, r1
    1010:	49 da       	rcall	.-2926   	; 0x4a4 <chSchIsPreemptionRequired>
    1012:	81 11       	cpse	r24, r1
    1014:	57 da       	rcall	.-2898   	; 0x4c4 <chSchDoReschedule>
}
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <pwm_lld_init>:
 * @notapi
 */
void pwm_lld_init(void) {

#if AVR_PWM_USE_TIM1 || defined(__DOXYGEN__)
  pwmObjectInit(&PWMD1);
    1038:	83 e7       	ldi	r24, 0x73	; 115
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	85 de       	rcall	.-758    	; 0xd48 <pwmObjectInit>
  PWMD1.channels = PWM_CHANNELS;
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	80 93 79 02 	sts	0x0279, r24
    1044:	08 95       	ret

00001046 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    1046:	e1 ec       	ldi	r30, 0xC1	; 193
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 62       	ori	r24, 0x20	; 32
    104e:	80 83       	st	Z, r24
    1050:	08 95       	ret

00001052 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 72 02 	sts	0x0272, r24

  sra = UCSR0A;
    107a:	80 91 c0 00 	lds	r24, 0x00C0
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    107e:	98 2f       	mov	r25, r24
    1080:	9c 71       	andi	r25, 0x1C	; 28
    1082:	d9 f4       	brne	.+54     	; 0x10ba <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    1084:	60 91 c6 00 	lds	r22, 0x00C6
    1088:	8a e7       	ldi	r24, 0x7A	; 122
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	b7 de       	rcall	.-658    	; 0xdfc <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    108e:	10 92 72 02 	sts	0x0272, r1
    1092:	08 da       	rcall	.-3056   	; 0x4a4 <chSchIsPreemptionRequired>
    1094:	81 11       	cpse	r24, r1
    1096:	16 da       	rcall	.-3028   	; 0x4c4 <chSchDoReschedule>
}
    1098:	ff 91       	pop	r31
    109a:	ef 91       	pop	r30
    109c:	bf 91       	pop	r27
    109e:	af 91       	pop	r26
    10a0:	9f 91       	pop	r25
    10a2:	8f 91       	pop	r24
    10a4:	7f 91       	pop	r23
    10a6:	6f 91       	pop	r22
    10a8:	5f 91       	pop	r21
    10aa:	4f 91       	pop	r20
    10ac:	3f 91       	pop	r19
    10ae:	2f 91       	pop	r18
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    10ba:	83 fd       	sbrc	r24, 3
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    10be:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    10c0:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    10c2:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    10c4:	84 fd       	sbrc	r24, 4
    sts |= SD_FRAMING_ERROR;
    10c6:	60 64       	ori	r22, 0x40	; 64
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    10c8:	8c e7       	ldi	r24, 0x7C	; 124
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	55 db       	rcall	.-2390   	; 0x778 <chEvtBroadcastFlagsI>
    10ce:	da cf       	rjmp	.-76     	; 0x1084 <__vector_18+0x32>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    10d0:	60 e8       	ldi	r22, 0x80	; 128
    10d2:	f6 cf       	rjmp	.-20     	; 0x10c0 <__vector_18+0x6e>

000010d4 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	80 93 72 02 	sts	0x0272, r24

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    10fc:	8a e7       	ldi	r24, 0x7A	; 122
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	a1 de       	rcall	.-702    	; 0xe44 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    1102:	97 fd       	sbrc	r25, 7
    1104:	18 c0       	rjmp	.+48     	; 0x1136 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1106:	80 93 c6 00 	sts	0x00C6, r24

  OSAL_IRQ_EPILOGUE();
    110a:	10 92 72 02 	sts	0x0272, r1
    110e:	ca d9       	rcall	.-3180   	; 0x4a4 <chSchIsPreemptionRequired>
    1110:	81 11       	cpse	r24, r1
    1112:	d8 d9       	rcall	.-3152   	; 0x4c4 <chSchDoReschedule>
}
    1114:	ff 91       	pop	r31
    1116:	ef 91       	pop	r30
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    1136:	80 91 c1 00 	lds	r24, 0x00C1
    113a:	8f 7d       	andi	r24, 0xDF	; 223
    113c:	80 93 c1 00 	sts	0x00C1, r24
    1140:	e4 cf       	rjmp	.-56     	; 0x110a <__vector_19+0x36>

00001142 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    1142:	43 e2       	ldi	r20, 0x23	; 35
    1144:	58 e0       	ldi	r21, 0x08	; 8
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	8a e7       	ldi	r24, 0x7A	; 122
    114c:	92 e0       	ldi	r25, 0x02	; 2
    114e:	20 ce       	rjmp	.-960    	; 0xd90 <sdObjectInit>

00001150 <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    1150:	61 15       	cp	r22, r1
    1152:	71 05       	cpc	r23, r1
    1154:	19 f1       	breq	.+70     	; 0x119c <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    1156:	8a 57       	subi	r24, 0x7A	; 122
    1158:	92 40       	sbci	r25, 0x02	; 2
    115a:	09 f0       	breq	.+2      	; 0x115e <sd_lld_start+0xe>
    115c:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    115e:	fb 01       	movw	r30, r22
    1160:	80 81       	ld	r24, Z
    1162:	80 93 c4 00 	sts	0x00C4, r24
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    1166:	81 81       	ldd	r24, Z+1	; 0x01
    1168:	8f 70       	andi	r24, 0x0F	; 15
    116a:	80 93 c5 00 	sts	0x00C5, r24
  UCSR0A = (1 << U2X0);
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    1174:	88 e9       	ldi	r24, 0x98	; 152
    1176:	80 93 c1 00 	sts	0x00C1, r24
  switch (config->sc_bits_per_char) {
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	b9 f0       	breq	.+46     	; 0x11ae <sd_lld_start+0x5e>
    1180:	a0 f0       	brcs	.+40     	; 0x11aa <sd_lld_start+0x5a>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	71 f0       	breq	.+28     	; 0x11a2 <sd_lld_start+0x52>
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	71 f4       	brne	.+28     	; 0x11a6 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    118a:	80 91 c1 00 	lds	r24, 0x00C1
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	80 93 c1 00 	sts	0x00C1, r24
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    1194:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    1196:	80 93 c2 00 	sts	0x00C2, r24
    119a:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    119c:	6a e3       	ldi	r22, 0x3A	; 58
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	da cf       	rjmp	.-76     	; 0x1156 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	f8 cf       	rjmp	.-16     	; 0x1196 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    11a6:	86 e0       	ldi	r24, 0x06	; 6
    11a8:	f6 cf       	rjmp	.-20     	; 0x1196 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	f4 cf       	rjmp	.-24     	; 0x1196 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	f2 cf       	rjmp	.-28     	; 0x1196 <sd_lld_start+0x46>

000011b2 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    11b2:	10 92 69 00 	sts	0x0069, r1
  EIMSK  = 0x00;
    11b6:	1d ba       	out	0x1d, r1	; 29
    11b8:	08 95       	ret

000011ba <main>:
    //static PWMConfig pwmcfg = {
    //    0, 0x3FF, 0,
    //    {{PWM_OUTPUT_DISABLED, 0}, {PWM_OUTPUT_ACTIVE_HIGH, 0}}
    // };

    halInit();
    11ba:	7b db       	rcall	.-2314   	; 0x8b2 <halInit>
    chSysInit();
    11bc:	0e 94 64 00 	call	0xc8	; 0xc8 <chSysInit>

   // pwmStart(&PWMD1, &pwmcfg);
    sdStart(&SD1,0);
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	8a e7       	ldi	r24, 0x7A	; 122
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e de       	rcall	.-996    	; 0xde6 <sdStart>
       // width += step;
       // if ((width >= 0x3FF) || (width < 10)) {
       //     width -= step;
       //     step = -step;
       // }
        chThdSleepMilliseconds(100);
    11ca:	8b e1       	ldi	r24, 0x1B	; 27
    11cc:	96 e0       	ldi	r25, 0x06	; 6
    11ce:	7a da       	rcall	.-2828   	; 0x6c4 <chThdSleep>
    }
    11d0:	fc cf       	rjmp	.-8      	; 0x11ca <main+0x10>

000011d2 <vfprintf>:
    11d2:	ac e0       	ldi	r26, 0x0C	; 12
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ee ee       	ldi	r30, 0xEE	; 238
    11d8:	f8 e0       	ldi	r31, 0x08	; 8
    11da:	db c2       	rjmp	.+1462   	; 0x1792 <__prologue_saves__+0x8>
    11dc:	6c 01       	movw	r12, r24
    11de:	5b 01       	movw	r10, r22
    11e0:	7a 01       	movw	r14, r20
    11e2:	fc 01       	movw	r30, r24
    11e4:	17 82       	std	Z+7, r1	; 0x07
    11e6:	16 82       	std	Z+6, r1	; 0x06
    11e8:	83 81       	ldd	r24, Z+3	; 0x03
    11ea:	81 ff       	sbrs	r24, 1
    11ec:	04 c1       	rjmp	.+520    	; 0x13f6 <vfprintf+0x224>
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	4c 01       	movw	r8, r24
    11f4:	f6 01       	movw	r30, r12
    11f6:	03 81       	ldd	r16, Z+3	; 0x03
    11f8:	f5 01       	movw	r30, r10
    11fa:	03 fd       	sbrc	r16, 3
    11fc:	15 91       	lpm	r17, Z+
    11fe:	03 ff       	sbrs	r16, 3
    1200:	11 91       	ld	r17, Z+
    1202:	5f 01       	movw	r10, r30
    1204:	11 23       	and	r17, r17
    1206:	09 f4       	brne	.+2      	; 0x120a <vfprintf+0x38>
    1208:	f2 c0       	rjmp	.+484    	; 0x13ee <vfprintf+0x21c>
    120a:	15 32       	cpi	r17, 0x25	; 37
    120c:	49 f4       	brne	.+18     	; 0x1220 <vfprintf+0x4e>
    120e:	03 fd       	sbrc	r16, 3
    1210:	15 91       	lpm	r17, Z+
    1212:	03 ff       	sbrs	r16, 3
    1214:	11 91       	ld	r17, Z+
    1216:	5f 01       	movw	r10, r30
    1218:	15 32       	cpi	r17, 0x25	; 37
    121a:	11 f0       	breq	.+4      	; 0x1220 <vfprintf+0x4e>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	19 c0       	rjmp	.+50     	; 0x1252 <vfprintf+0x80>
    1220:	b6 01       	movw	r22, r12
    1222:	81 2f       	mov	r24, r17
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	42 d3       	rcall	.+1668   	; 0x18ac <fputc>
    1228:	37 01       	movw	r6, r14
    122a:	73 01       	movw	r14, r6
    122c:	e3 cf       	rjmp	.-58     	; 0x11f4 <vfprintf+0x22>
    122e:	11 23       	and	r17, r17
    1230:	09 f4       	brne	.+2      	; 0x1234 <vfprintf+0x62>
    1232:	dd c0       	rjmp	.+442    	; 0x13ee <vfprintf+0x21c>
    1234:	61 2f       	mov	r22, r17
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	8f e6       	ldi	r24, 0x6F	; 111
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	2c 87       	std	Y+12, r18	; 0x0c
    123e:	e4 d2       	rcall	.+1480   	; 0x1808 <strchr_P>
    1240:	2c 85       	ldd	r18, Y+12	; 0x0c
    1242:	89 2b       	or	r24, r25
    1244:	49 f0       	breq	.+18     	; 0x1258 <vfprintf+0x86>
    1246:	f5 01       	movw	r30, r10
    1248:	03 fd       	sbrc	r16, 3
    124a:	15 91       	lpm	r17, Z+
    124c:	03 ff       	sbrs	r16, 3
    124e:	11 91       	ld	r17, Z+
    1250:	5f 01       	movw	r10, r30
    1252:	27 ff       	sbrs	r18, 7
    1254:	ec cf       	rjmp	.-40     	; 0x122e <vfprintf+0x5c>
    1256:	09 c0       	rjmp	.+18     	; 0x126a <vfprintf+0x98>
    1258:	13 32       	cpi	r17, 0x23	; 35
    125a:	29 f0       	breq	.+10     	; 0x1266 <vfprintf+0x94>
    125c:	1c 36       	cpi	r17, 0x6C	; 108
    125e:	09 f0       	breq	.+2      	; 0x1262 <vfprintf+0x90>
    1260:	cd c0       	rjmp	.+410    	; 0x13fc <vfprintf+0x22a>
    1262:	20 68       	ori	r18, 0x80	; 128
    1264:	f0 cf       	rjmp	.-32     	; 0x1246 <vfprintf+0x74>
    1266:	20 e1       	ldi	r18, 0x10	; 16
    1268:	ee cf       	rjmp	.-36     	; 0x1246 <vfprintf+0x74>
    126a:	02 2f       	mov	r16, r18
    126c:	11 23       	and	r17, r17
    126e:	09 f4       	brne	.+2      	; 0x1272 <vfprintf+0xa0>
    1270:	be c0       	rjmp	.+380    	; 0x13ee <vfprintf+0x21c>
    1272:	61 2f       	mov	r22, r17
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	88 e6       	ldi	r24, 0x68	; 104
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	2c 87       	std	Y+12, r18	; 0x0c
    127c:	c5 d2       	rcall	.+1418   	; 0x1808 <strchr_P>
    127e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1280:	89 2b       	or	r24, r25
    1282:	41 f0       	breq	.+16     	; 0x1294 <vfprintf+0xc2>
    1284:	37 01       	movw	r6, r14
    1286:	f4 e0       	ldi	r31, 0x04	; 4
    1288:	6f 0e       	add	r6, r31
    128a:	71 1c       	adc	r7, r1
    128c:	b6 01       	movw	r22, r12
    128e:	8f e3       	ldi	r24, 0x3F	; 63
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <vfprintf+0xe4>
    1294:	13 36       	cpi	r17, 0x63	; 99
    1296:	39 f0       	breq	.+14     	; 0x12a6 <vfprintf+0xd4>
    1298:	13 37       	cpi	r17, 0x73	; 115
    129a:	79 f0       	breq	.+30     	; 0x12ba <vfprintf+0xe8>
    129c:	13 35       	cpi	r17, 0x53	; 83
    129e:	09 f5       	brne	.+66     	; 0x12e2 <vfprintf+0x110>
    12a0:	02 2f       	mov	r16, r18
    12a2:	01 60       	ori	r16, 0x01	; 1
    12a4:	0a c0       	rjmp	.+20     	; 0x12ba <vfprintf+0xe8>
    12a6:	37 01       	movw	r6, r14
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	68 0e       	add	r6, r24
    12ac:	71 1c       	adc	r7, r1
    12ae:	b6 01       	movw	r22, r12
    12b0:	f7 01       	movw	r30, r14
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	fa d2       	rcall	.+1524   	; 0x18ac <fputc>
    12b8:	b8 cf       	rjmp	.-144    	; 0x122a <vfprintf+0x58>
    12ba:	37 01       	movw	r6, r14
    12bc:	f2 e0       	ldi	r31, 0x02	; 2
    12be:	6f 0e       	add	r6, r31
    12c0:	71 1c       	adc	r7, r1
    12c2:	f7 01       	movw	r30, r14
    12c4:	e0 80       	ld	r14, Z
    12c6:	f1 80       	ldd	r15, Z+1	; 0x01
    12c8:	f7 01       	movw	r30, r14
    12ca:	00 fd       	sbrc	r16, 0
    12cc:	85 91       	lpm	r24, Z+
    12ce:	00 ff       	sbrs	r16, 0
    12d0:	81 91       	ld	r24, Z+
    12d2:	7f 01       	movw	r14, r30
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <vfprintf+0x108>
    12d8:	a8 cf       	rjmp	.-176    	; 0x122a <vfprintf+0x58>
    12da:	b6 01       	movw	r22, r12
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	e6 d2       	rcall	.+1484   	; 0x18ac <fputc>
    12e0:	f3 cf       	rjmp	.-26     	; 0x12c8 <vfprintf+0xf6>
    12e2:	14 36       	cpi	r17, 0x64	; 100
    12e4:	11 f0       	breq	.+4      	; 0x12ea <vfprintf+0x118>
    12e6:	19 36       	cpi	r17, 0x69	; 105
    12e8:	29 f5       	brne	.+74     	; 0x1334 <vfprintf+0x162>
    12ea:	37 01       	movw	r6, r14
    12ec:	27 ff       	sbrs	r18, 7
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <vfprintf+0x130>
    12f0:	f4 e0       	ldi	r31, 0x04	; 4
    12f2:	6f 0e       	add	r6, r31
    12f4:	71 1c       	adc	r7, r1
    12f6:	f7 01       	movw	r30, r14
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	0a c0       	rjmp	.+20     	; 0x1316 <vfprintf+0x144>
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	6f 0e       	add	r6, r31
    1306:	71 1c       	adc	r7, r1
    1308:	f7 01       	movw	r30, r14
    130a:	60 81       	ld	r22, Z
    130c:	71 81       	ldd	r23, Z+1	; 0x01
    130e:	07 2e       	mov	r0, r23
    1310:	00 0c       	add	r0, r0
    1312:	88 0b       	sbc	r24, r24
    1314:	99 0b       	sbc	r25, r25
    1316:	02 2f       	mov	r16, r18
    1318:	0f 7e       	andi	r16, 0xEF	; 239
    131a:	97 ff       	sbrs	r25, 7
    131c:	08 c0       	rjmp	.+16     	; 0x132e <vfprintf+0x15c>
    131e:	90 95       	com	r25
    1320:	80 95       	com	r24
    1322:	70 95       	com	r23
    1324:	61 95       	neg	r22
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	8f 4f       	sbci	r24, 0xFF	; 255
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	00 64       	ori	r16, 0x40	; 64
    132e:	2a e0       	ldi	r18, 0x0A	; 10
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	33 c0       	rjmp	.+102    	; 0x139a <vfprintf+0x1c8>
    1334:	10 37       	cpi	r17, 0x70	; 112
    1336:	99 f0       	breq	.+38     	; 0x135e <vfprintf+0x18c>
    1338:	40 f4       	brcc	.+16     	; 0x134a <vfprintf+0x178>
    133a:	18 35       	cpi	r17, 0x58	; 88
    133c:	b1 f0       	breq	.+44     	; 0x136a <vfprintf+0x198>
    133e:	1f 36       	cpi	r17, 0x6F	; 111
    1340:	09 f0       	breq	.+2      	; 0x1344 <vfprintf+0x172>
    1342:	55 c0       	rjmp	.+170    	; 0x13ee <vfprintf+0x21c>
    1344:	28 e0       	ldi	r18, 0x08	; 8
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	14 c0       	rjmp	.+40     	; 0x1372 <vfprintf+0x1a0>
    134a:	15 37       	cpi	r17, 0x75	; 117
    134c:	19 f0       	breq	.+6      	; 0x1354 <vfprintf+0x182>
    134e:	18 37       	cpi	r17, 0x78	; 120
    1350:	41 f0       	breq	.+16     	; 0x1362 <vfprintf+0x190>
    1352:	4d c0       	rjmp	.+154    	; 0x13ee <vfprintf+0x21c>
    1354:	02 2f       	mov	r16, r18
    1356:	0f 7e       	andi	r16, 0xEF	; 239
    1358:	2a e0       	ldi	r18, 0x0A	; 10
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <vfprintf+0x1a0>
    135e:	02 2f       	mov	r16, r18
    1360:	00 61       	ori	r16, 0x10	; 16
    1362:	04 62       	ori	r16, 0x24	; 36
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <vfprintf+0x1a0>
    136a:	02 2f       	mov	r16, r18
    136c:	04 60       	ori	r16, 0x04	; 4
    136e:	20 e1       	ldi	r18, 0x10	; 16
    1370:	32 e0       	ldi	r19, 0x02	; 2
    1372:	37 01       	movw	r6, r14
    1374:	07 ff       	sbrs	r16, 7
    1376:	09 c0       	rjmp	.+18     	; 0x138a <vfprintf+0x1b8>
    1378:	f4 e0       	ldi	r31, 0x04	; 4
    137a:	6f 0e       	add	r6, r31
    137c:	71 1c       	adc	r7, r1
    137e:	f7 01       	movw	r30, r14
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	08 c0       	rjmp	.+16     	; 0x139a <vfprintf+0x1c8>
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	6f 0e       	add	r6, r31
    138e:	71 1c       	adc	r7, r1
    1390:	f7 01       	movw	r30, r14
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a4 01       	movw	r20, r8
    139c:	d8 d2       	rcall	.+1456   	; 0x194e <__ultoa_invert>
    139e:	18 2f       	mov	r17, r24
    13a0:	18 19       	sub	r17, r8
    13a2:	06 ff       	sbrs	r16, 6
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <vfprintf+0x1dc>
    13a6:	b6 01       	movw	r22, r12
    13a8:	8d e2       	ldi	r24, 0x2D	; 45
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	7f d2       	rcall	.+1278   	; 0x18ac <fputc>
    13ae:	04 ff       	sbrs	r16, 4
    13b0:	13 c0       	rjmp	.+38     	; 0x13d8 <vfprintf+0x206>
    13b2:	fe 01       	movw	r30, r28
    13b4:	e1 0f       	add	r30, r17
    13b6:	f1 1d       	adc	r31, r1
    13b8:	80 81       	ld	r24, Z
    13ba:	80 33       	cpi	r24, 0x30	; 48
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <vfprintf+0x206>
    13be:	b6 01       	movw	r22, r12
    13c0:	80 e3       	ldi	r24, 0x30	; 48
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	73 d2       	rcall	.+1254   	; 0x18ac <fputc>
    13c6:	02 ff       	sbrs	r16, 2
    13c8:	07 c0       	rjmp	.+14     	; 0x13d8 <vfprintf+0x206>
    13ca:	00 72       	andi	r16, 0x20	; 32
    13cc:	80 2f       	mov	r24, r16
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	b6 01       	movw	r22, r12
    13d2:	88 5a       	subi	r24, 0xA8	; 168
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	6a d2       	rcall	.+1236   	; 0x18ac <fputc>
    13d8:	11 50       	subi	r17, 0x01	; 1
    13da:	f4 01       	movw	r30, r8
    13dc:	e1 0f       	add	r30, r17
    13de:	f1 1d       	adc	r31, r1
    13e0:	80 81       	ld	r24, Z
    13e2:	b6 01       	movw	r22, r12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	62 d2       	rcall	.+1220   	; 0x18ac <fputc>
    13e8:	11 11       	cpse	r17, r1
    13ea:	f6 cf       	rjmp	.-20     	; 0x13d8 <vfprintf+0x206>
    13ec:	1e cf       	rjmp	.-452    	; 0x122a <vfprintf+0x58>
    13ee:	f6 01       	movw	r30, r12
    13f0:	86 81       	ldd	r24, Z+6	; 0x06
    13f2:	97 81       	ldd	r25, Z+7	; 0x07
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <vfprintf+0x22e>
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <vfprintf+0x22e>
    13fc:	02 2f       	mov	r16, r18
    13fe:	39 cf       	rjmp	.-398    	; 0x1272 <vfprintf+0xa0>
    1400:	2c 96       	adiw	r28, 0x0c	; 12
    1402:	ee e0       	ldi	r30, 0x0E	; 14
    1404:	e2 c1       	rjmp	.+964    	; 0x17ca <__epilogue_restores__+0x8>

00001406 <putval>:
    1406:	20 fd       	sbrc	r18, 0
    1408:	09 c0       	rjmp	.+18     	; 0x141c <putval+0x16>
    140a:	fc 01       	movw	r30, r24
    140c:	23 fd       	sbrc	r18, 3
    140e:	05 c0       	rjmp	.+10     	; 0x141a <putval+0x14>
    1410:	22 ff       	sbrs	r18, 2
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <putval+0x12>
    1414:	73 83       	std	Z+3, r23	; 0x03
    1416:	62 83       	std	Z+2, r22	; 0x02
    1418:	51 83       	std	Z+1, r21	; 0x01
    141a:	40 83       	st	Z, r20
    141c:	08 95       	ret

0000141e <mulacc>:
    141e:	44 fd       	sbrc	r20, 4
    1420:	10 c0       	rjmp	.+32     	; 0x1442 <mulacc+0x24>
    1422:	46 fd       	sbrc	r20, 6
    1424:	10 c0       	rjmp	.+32     	; 0x1446 <mulacc+0x28>
    1426:	db 01       	movw	r26, r22
    1428:	fc 01       	movw	r30, r24
    142a:	aa 0f       	add	r26, r26
    142c:	bb 1f       	adc	r27, r27
    142e:	ee 1f       	adc	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	10 94       	com	r1
    1434:	d1 f7       	brne	.-12     	; 0x142a <mulacc+0xc>
    1436:	6a 0f       	add	r22, r26
    1438:	7b 1f       	adc	r23, r27
    143a:	8e 1f       	adc	r24, r30
    143c:	9f 1f       	adc	r25, r31
    143e:	31 e0       	ldi	r19, 0x01	; 1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <mulacc+0x2a>
    1442:	33 e0       	ldi	r19, 0x03	; 3
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <mulacc+0x2a>
    1446:	34 e0       	ldi	r19, 0x04	; 4
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	88 1f       	adc	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	31 50       	subi	r19, 0x01	; 1
    1452:	d1 f7       	brne	.-12     	; 0x1448 <mulacc+0x2a>
    1454:	62 0f       	add	r22, r18
    1456:	71 1d       	adc	r23, r1
    1458:	81 1d       	adc	r24, r1
    145a:	91 1d       	adc	r25, r1
    145c:	08 95       	ret

0000145e <skip_spaces>:
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	8c 01       	movw	r16, r24
    1468:	c8 01       	movw	r24, r16
    146a:	e2 d1       	rcall	.+964    	; 0x1830 <fgetc>
    146c:	ec 01       	movw	r28, r24
    146e:	97 fd       	sbrc	r25, 7
    1470:	06 c0       	rjmp	.+12     	; 0x147e <skip_spaces+0x20>
    1472:	c2 d1       	rcall	.+900    	; 0x17f8 <isspace>
    1474:	89 2b       	or	r24, r25
    1476:	c1 f7       	brne	.-16     	; 0x1468 <skip_spaces+0xa>
    1478:	b8 01       	movw	r22, r16
    147a:	ce 01       	movw	r24, r28
    147c:	4f d2       	rcall	.+1182   	; 0x191c <ungetc>
    147e:	ce 01       	movw	r24, r28
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <conv_int>:
    148a:	a1 e0       	ldi	r26, 0x01	; 1
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ea e4       	ldi	r30, 0x4A	; 74
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	81 c1       	rjmp	.+770    	; 0x1796 <__prologue_saves__+0xc>
    1494:	8c 01       	movw	r16, r24
    1496:	c6 2e       	mov	r12, r22
    1498:	7a 01       	movw	r14, r20
    149a:	29 83       	std	Y+1, r18	; 0x01
    149c:	c9 d1       	rcall	.+914    	; 0x1830 <fgetc>
    149e:	ac 01       	movw	r20, r24
    14a0:	55 27       	eor	r21, r21
    14a2:	29 81       	ldd	r18, Y+1	; 0x01
    14a4:	4b 32       	cpi	r20, 0x2B	; 43
    14a6:	51 05       	cpc	r21, r1
    14a8:	21 f0       	breq	.+8      	; 0x14b2 <conv_int+0x28>
    14aa:	4d 32       	cpi	r20, 0x2D	; 45
    14ac:	51 05       	cpc	r21, r1
    14ae:	61 f4       	brne	.+24     	; 0x14c8 <conv_int+0x3e>
    14b0:	20 68       	ori	r18, 0x80	; 128
    14b2:	ca 94       	dec	r12
    14b4:	c1 10       	cpse	r12, r1
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <conv_int+0x32>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	6f c0       	rjmp	.+222    	; 0x159a <conv_int+0x110>
    14bc:	c8 01       	movw	r24, r16
    14be:	29 83       	std	Y+1, r18	; 0x01
    14c0:	b7 d1       	rcall	.+878    	; 0x1830 <fgetc>
    14c2:	29 81       	ldd	r18, Y+1	; 0x01
    14c4:	97 fd       	sbrc	r25, 7
    14c6:	f8 cf       	rjmp	.-16     	; 0x14b8 <conv_int+0x2e>
    14c8:	32 2f       	mov	r19, r18
    14ca:	3d 7f       	andi	r19, 0xFD	; 253
    14cc:	d3 2e       	mov	r13, r19
    14ce:	32 2f       	mov	r19, r18
    14d0:	30 73       	andi	r19, 0x30	; 48
    14d2:	39 f5       	brne	.+78     	; 0x1522 <conv_int+0x98>
    14d4:	80 33       	cpi	r24, 0x30	; 48
    14d6:	29 f5       	brne	.+74     	; 0x1522 <conv_int+0x98>
    14d8:	bb 24       	eor	r11, r11
    14da:	ba 94       	dec	r11
    14dc:	bc 0c       	add	r11, r12
    14de:	09 f4       	brne	.+2      	; 0x14e2 <conv_int+0x58>
    14e0:	49 c0       	rjmp	.+146    	; 0x1574 <conv_int+0xea>
    14e2:	c8 01       	movw	r24, r16
    14e4:	29 83       	std	Y+1, r18	; 0x01
    14e6:	a4 d1       	rcall	.+840    	; 0x1830 <fgetc>
    14e8:	29 81       	ldd	r18, Y+1	; 0x01
    14ea:	97 fd       	sbrc	r25, 7
    14ec:	43 c0       	rjmp	.+134    	; 0x1574 <conv_int+0xea>
    14ee:	38 2f       	mov	r19, r24
    14f0:	3f 7d       	andi	r19, 0xDF	; 223
    14f2:	38 35       	cpi	r19, 0x58	; 88
    14f4:	61 f4       	brne	.+24     	; 0x150e <conv_int+0x84>
    14f6:	8d 2d       	mov	r24, r13
    14f8:	82 64       	ori	r24, 0x42	; 66
    14fa:	d8 2e       	mov	r13, r24
    14fc:	ca 94       	dec	r12
    14fe:	ca 94       	dec	r12
    1500:	cc 20       	and	r12, r12
    1502:	c1 f1       	breq	.+112    	; 0x1574 <conv_int+0xea>
    1504:	c8 01       	movw	r24, r16
    1506:	94 d1       	rcall	.+808    	; 0x1830 <fgetc>
    1508:	97 ff       	sbrs	r25, 7
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <conv_int+0x98>
    150c:	33 c0       	rjmp	.+102    	; 0x1574 <conv_int+0xea>
    150e:	26 ff       	sbrs	r18, 6
    1510:	04 c0       	rjmp	.+8      	; 0x151a <conv_int+0x90>
    1512:	2d 2d       	mov	r18, r13
    1514:	22 60       	ori	r18, 0x02	; 2
    1516:	d2 2e       	mov	r13, r18
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <conv_int+0x96>
    151a:	3d 2d       	mov	r19, r13
    151c:	32 61       	ori	r19, 0x12	; 18
    151e:	d3 2e       	mov	r13, r19
    1520:	cb 2c       	mov	r12, r11
    1522:	81 2c       	mov	r8, r1
    1524:	91 2c       	mov	r9, r1
    1526:	54 01       	movw	r10, r8
    1528:	20 ed       	ldi	r18, 0xD0	; 208
    152a:	28 0f       	add	r18, r24
    152c:	28 30       	cpi	r18, 0x08	; 8
    152e:	78 f0       	brcs	.+30     	; 0x154e <conv_int+0xc4>
    1530:	d4 fe       	sbrs	r13, 4
    1532:	03 c0       	rjmp	.+6      	; 0x153a <conv_int+0xb0>
    1534:	b8 01       	movw	r22, r16
    1536:	f2 d1       	rcall	.+996    	; 0x191c <ungetc>
    1538:	1a c0       	rjmp	.+52     	; 0x156e <conv_int+0xe4>
    153a:	2a 30       	cpi	r18, 0x0A	; 10
    153c:	40 f0       	brcs	.+16     	; 0x154e <conv_int+0xc4>
    153e:	d6 fe       	sbrs	r13, 6
    1540:	f9 cf       	rjmp	.-14     	; 0x1534 <conv_int+0xaa>
    1542:	2f 7d       	andi	r18, 0xDF	; 223
    1544:	3f ee       	ldi	r19, 0xEF	; 239
    1546:	32 0f       	add	r19, r18
    1548:	36 30       	cpi	r19, 0x06	; 6
    154a:	a0 f7       	brcc	.-24     	; 0x1534 <conv_int+0xaa>
    154c:	27 50       	subi	r18, 0x07	; 7
    154e:	4d 2d       	mov	r20, r13
    1550:	c5 01       	movw	r24, r10
    1552:	b4 01       	movw	r22, r8
    1554:	64 df       	rcall	.-312    	; 0x141e <mulacc>
    1556:	4b 01       	movw	r8, r22
    1558:	5c 01       	movw	r10, r24
    155a:	8d 2d       	mov	r24, r13
    155c:	82 60       	ori	r24, 0x02	; 2
    155e:	d8 2e       	mov	r13, r24
    1560:	ca 94       	dec	r12
    1562:	cc 20       	and	r12, r12
    1564:	51 f0       	breq	.+20     	; 0x157a <conv_int+0xf0>
    1566:	c8 01       	movw	r24, r16
    1568:	63 d1       	rcall	.+710    	; 0x1830 <fgetc>
    156a:	97 ff       	sbrs	r25, 7
    156c:	dd cf       	rjmp	.-70     	; 0x1528 <conv_int+0x9e>
    156e:	d1 fc       	sbrc	r13, 1
    1570:	04 c0       	rjmp	.+8      	; 0x157a <conv_int+0xf0>
    1572:	a2 cf       	rjmp	.-188    	; 0x14b8 <conv_int+0x2e>
    1574:	81 2c       	mov	r8, r1
    1576:	91 2c       	mov	r9, r1
    1578:	54 01       	movw	r10, r8
    157a:	d7 fe       	sbrs	r13, 7
    157c:	08 c0       	rjmp	.+16     	; 0x158e <conv_int+0x104>
    157e:	b0 94       	com	r11
    1580:	a0 94       	com	r10
    1582:	90 94       	com	r9
    1584:	80 94       	com	r8
    1586:	81 1c       	adc	r8, r1
    1588:	91 1c       	adc	r9, r1
    158a:	a1 1c       	adc	r10, r1
    158c:	b1 1c       	adc	r11, r1
    158e:	2d 2d       	mov	r18, r13
    1590:	b5 01       	movw	r22, r10
    1592:	a4 01       	movw	r20, r8
    1594:	c7 01       	movw	r24, r14
    1596:	37 df       	rcall	.-402    	; 0x1406 <putval>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	21 96       	adiw	r28, 0x01	; 1
    159c:	ec e0       	ldi	r30, 0x0C	; 12
    159e:	17 c1       	rjmp	.+558    	; 0x17ce <__epilogue_restores__+0xc>

000015a0 <vfscanf>:
    15a0:	a1 e0       	ldi	r26, 0x01	; 1
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 ed       	ldi	r30, 0xD5	; 213
    15a6:	fa e0       	ldi	r31, 0x0A	; 10
    15a8:	f2 c0       	rjmp	.+484    	; 0x178e <__prologue_saves__+0x4>
    15aa:	7c 01       	movw	r14, r24
    15ac:	2b 01       	movw	r4, r22
    15ae:	5a 01       	movw	r10, r20
    15b0:	fc 01       	movw	r30, r24
    15b2:	17 82       	std	Z+7, r1	; 0x07
    15b4:	16 82       	std	Z+6, r1	; 0x06
    15b6:	81 2c       	mov	r8, r1
    15b8:	f7 01       	movw	r30, r14
    15ba:	73 80       	ldd	r7, Z+3	; 0x03
    15bc:	f2 01       	movw	r30, r4
    15be:	73 fc       	sbrc	r7, 3
    15c0:	85 91       	lpm	r24, Z+
    15c2:	73 fe       	sbrs	r7, 3
    15c4:	81 91       	ld	r24, Z+
    15c6:	38 2f       	mov	r19, r24
    15c8:	2f 01       	movw	r4, r30
    15ca:	88 23       	and	r24, r24
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <vfscanf+0x30>
    15ce:	d5 c0       	rjmp	.+426    	; 0x177a <vfscanf+0x1da>
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	39 83       	std	Y+1, r19	; 0x01
    15d4:	11 d1       	rcall	.+546    	; 0x17f8 <isspace>
    15d6:	39 81       	ldd	r19, Y+1	; 0x01
    15d8:	89 2b       	or	r24, r25
    15da:	19 f0       	breq	.+6      	; 0x15e2 <vfscanf+0x42>
    15dc:	c7 01       	movw	r24, r14
    15de:	3f df       	rcall	.-386    	; 0x145e <skip_spaces>
    15e0:	eb cf       	rjmp	.-42     	; 0x15b8 <vfscanf+0x18>
    15e2:	35 32       	cpi	r19, 0x25	; 37
    15e4:	41 f4       	brne	.+16     	; 0x15f6 <vfscanf+0x56>
    15e6:	f2 01       	movw	r30, r4
    15e8:	73 fc       	sbrc	r7, 3
    15ea:	35 91       	lpm	r19, Z+
    15ec:	73 fe       	sbrs	r7, 3
    15ee:	31 91       	ld	r19, Z+
    15f0:	2f 01       	movw	r4, r30
    15f2:	35 32       	cpi	r19, 0x25	; 37
    15f4:	59 f4       	brne	.+22     	; 0x160c <vfscanf+0x6c>
    15f6:	c7 01       	movw	r24, r14
    15f8:	39 83       	std	Y+1, r19	; 0x01
    15fa:	1a d1       	rcall	.+564    	; 0x1830 <fgetc>
    15fc:	39 81       	ldd	r19, Y+1	; 0x01
    15fe:	97 fd       	sbrc	r25, 7
    1600:	ba c0       	rjmp	.+372    	; 0x1776 <vfscanf+0x1d6>
    1602:	38 17       	cp	r19, r24
    1604:	c9 f2       	breq	.-78     	; 0x15b8 <vfscanf+0x18>
    1606:	b7 01       	movw	r22, r14
    1608:	89 d1       	rcall	.+786    	; 0x191c <ungetc>
    160a:	b7 c0       	rjmp	.+366    	; 0x177a <vfscanf+0x1da>
    160c:	3a 32       	cpi	r19, 0x2A	; 42
    160e:	39 f4       	brne	.+14     	; 0x161e <vfscanf+0x7e>
    1610:	73 fc       	sbrc	r7, 3
    1612:	35 91       	lpm	r19, Z+
    1614:	73 fe       	sbrs	r7, 3
    1616:	31 91       	ld	r19, Z+
    1618:	2f 01       	movw	r4, r30
    161a:	11 e0       	ldi	r17, 0x01	; 1
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <vfscanf+0x80>
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	62 01       	movw	r12, r4
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	20 ed       	ldi	r18, 0xD0	; 208
    1626:	23 0f       	add	r18, r19
    1628:	2a 30       	cpi	r18, 0x0A	; 10
    162a:	68 f4       	brcc	.+26     	; 0x1646 <vfscanf+0xa6>
    162c:	12 60       	ori	r17, 0x02	; 2
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	f3 de       	rcall	.-538    	; 0x141e <mulacc>
    1638:	f6 01       	movw	r30, r12
    163a:	73 fc       	sbrc	r7, 3
    163c:	35 91       	lpm	r19, Z+
    163e:	73 fe       	sbrs	r7, 3
    1640:	31 91       	ld	r19, Z+
    1642:	6f 01       	movw	r12, r30
    1644:	ef cf       	rjmp	.-34     	; 0x1624 <vfscanf+0x84>
    1646:	96 2e       	mov	r9, r22
    1648:	03 2f       	mov	r16, r19
    164a:	26 01       	movw	r4, r12
    164c:	11 ff       	sbrs	r17, 1
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <vfscanf+0xb6>
    1650:	61 11       	cpse	r22, r1
    1652:	03 c0       	rjmp	.+6      	; 0x165a <vfscanf+0xba>
    1654:	92 c0       	rjmp	.+292    	; 0x177a <vfscanf+0x1da>
    1656:	99 24       	eor	r9, r9
    1658:	9a 94       	dec	r9
    165a:	38 36       	cpi	r19, 0x68	; 104
    165c:	19 f0       	breq	.+6      	; 0x1664 <vfscanf+0xc4>
    165e:	3c 36       	cpi	r19, 0x6C	; 108
    1660:	51 f0       	breq	.+20     	; 0x1676 <vfscanf+0xd6>
    1662:	10 c0       	rjmp	.+32     	; 0x1684 <vfscanf+0xe4>
    1664:	f6 01       	movw	r30, r12
    1666:	73 fc       	sbrc	r7, 3
    1668:	05 91       	lpm	r16, Z+
    166a:	73 fe       	sbrs	r7, 3
    166c:	01 91       	ld	r16, Z+
    166e:	2f 01       	movw	r4, r30
    1670:	08 36       	cpi	r16, 0x68	; 104
    1672:	41 f4       	brne	.+16     	; 0x1684 <vfscanf+0xe4>
    1674:	18 60       	ori	r17, 0x08	; 8
    1676:	14 60       	ori	r17, 0x04	; 4
    1678:	f2 01       	movw	r30, r4
    167a:	73 fc       	sbrc	r7, 3
    167c:	05 91       	lpm	r16, Z+
    167e:	73 fe       	sbrs	r7, 3
    1680:	01 91       	ld	r16, Z+
    1682:	2f 01       	movw	r4, r30
    1684:	00 23       	and	r16, r16
    1686:	09 f4       	brne	.+2      	; 0x168a <vfscanf+0xea>
    1688:	78 c0       	rjmp	.+240    	; 0x177a <vfscanf+0x1da>
    168a:	60 2f       	mov	r22, r16
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	8f e7       	ldi	r24, 0x7F	; 127
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	ba d0       	rcall	.+372    	; 0x1808 <strchr_P>
    1694:	89 2b       	or	r24, r25
    1696:	09 f4       	brne	.+2      	; 0x169a <vfscanf+0xfa>
    1698:	70 c0       	rjmp	.+224    	; 0x177a <vfscanf+0x1da>
    169a:	10 fd       	sbrc	r17, 0
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <vfscanf+0x10c>
    169e:	f5 01       	movw	r30, r10
    16a0:	c0 80       	ld	r12, Z
    16a2:	d1 80       	ldd	r13, Z+1	; 0x01
    16a4:	c5 01       	movw	r24, r10
    16a6:	02 96       	adiw	r24, 0x02	; 2
    16a8:	5c 01       	movw	r10, r24
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfscanf+0x110>
    16ac:	c1 2c       	mov	r12, r1
    16ae:	d1 2c       	mov	r13, r1
    16b0:	0e 36       	cpi	r16, 0x6E	; 110
    16b2:	49 f4       	brne	.+18     	; 0x16c6 <vfscanf+0x126>
    16b4:	f7 01       	movw	r30, r14
    16b6:	46 81       	ldd	r20, Z+6	; 0x06
    16b8:	57 81       	ldd	r21, Z+7	; 0x07
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	21 2f       	mov	r18, r17
    16c0:	c6 01       	movw	r24, r12
    16c2:	a1 de       	rcall	.-702    	; 0x1406 <putval>
    16c4:	79 cf       	rjmp	.-270    	; 0x15b8 <vfscanf+0x18>
    16c6:	03 36       	cpi	r16, 0x63	; 99
    16c8:	a1 f4       	brne	.+40     	; 0x16f2 <vfscanf+0x152>
    16ca:	11 fd       	sbrc	r17, 1
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfscanf+0x132>
    16ce:	99 24       	eor	r9, r9
    16d0:	93 94       	inc	r9
    16d2:	c7 01       	movw	r24, r14
    16d4:	ad d0       	rcall	.+346    	; 0x1830 <fgetc>
    16d6:	97 fd       	sbrc	r25, 7
    16d8:	4e c0       	rjmp	.+156    	; 0x1776 <vfscanf+0x1d6>
    16da:	c1 14       	cp	r12, r1
    16dc:	d1 04       	cpc	r13, r1
    16de:	29 f0       	breq	.+10     	; 0x16ea <vfscanf+0x14a>
    16e0:	f6 01       	movw	r30, r12
    16e2:	80 83       	st	Z, r24
    16e4:	c6 01       	movw	r24, r12
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	6c 01       	movw	r12, r24
    16ea:	9a 94       	dec	r9
    16ec:	91 10       	cpse	r9, r1
    16ee:	f1 cf       	rjmp	.-30     	; 0x16d2 <vfscanf+0x132>
    16f0:	3e c0       	rjmp	.+124    	; 0x176e <vfscanf+0x1ce>
    16f2:	c7 01       	movw	r24, r14
    16f4:	b4 de       	rcall	.-664    	; 0x145e <skip_spaces>
    16f6:	97 fd       	sbrc	r25, 7
    16f8:	3e c0       	rjmp	.+124    	; 0x1776 <vfscanf+0x1d6>
    16fa:	0f 36       	cpi	r16, 0x6F	; 111
    16fc:	49 f1       	breq	.+82     	; 0x1750 <vfscanf+0x1b0>
    16fe:	28 f4       	brcc	.+10     	; 0x170a <vfscanf+0x16a>
    1700:	04 36       	cpi	r16, 0x64	; 100
    1702:	21 f1       	breq	.+72     	; 0x174c <vfscanf+0x1ac>
    1704:	09 36       	cpi	r16, 0x69	; 105
    1706:	39 f1       	breq	.+78     	; 0x1756 <vfscanf+0x1b6>
    1708:	25 c0       	rjmp	.+74     	; 0x1754 <vfscanf+0x1b4>
    170a:	03 37       	cpi	r16, 0x73	; 115
    170c:	71 f0       	breq	.+28     	; 0x172a <vfscanf+0x18a>
    170e:	05 37       	cpi	r16, 0x75	; 117
    1710:	e9 f0       	breq	.+58     	; 0x174c <vfscanf+0x1ac>
    1712:	20 c0       	rjmp	.+64     	; 0x1754 <vfscanf+0x1b4>
    1714:	c1 14       	cp	r12, r1
    1716:	d1 04       	cpc	r13, r1
    1718:	29 f0       	breq	.+10     	; 0x1724 <vfscanf+0x184>
    171a:	f6 01       	movw	r30, r12
    171c:	60 82       	st	Z, r6
    171e:	c6 01       	movw	r24, r12
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	6c 01       	movw	r12, r24
    1724:	9a 94       	dec	r9
    1726:	99 20       	and	r9, r9
    1728:	59 f0       	breq	.+22     	; 0x1740 <vfscanf+0x1a0>
    172a:	c7 01       	movw	r24, r14
    172c:	81 d0       	rcall	.+258    	; 0x1830 <fgetc>
    172e:	3c 01       	movw	r6, r24
    1730:	97 fd       	sbrc	r25, 7
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <vfscanf+0x1a0>
    1734:	61 d0       	rcall	.+194    	; 0x17f8 <isspace>
    1736:	89 2b       	or	r24, r25
    1738:	69 f3       	breq	.-38     	; 0x1714 <vfscanf+0x174>
    173a:	b7 01       	movw	r22, r14
    173c:	c3 01       	movw	r24, r6
    173e:	ee d0       	rcall	.+476    	; 0x191c <ungetc>
    1740:	c1 14       	cp	r12, r1
    1742:	d1 04       	cpc	r13, r1
    1744:	a1 f0       	breq	.+40     	; 0x176e <vfscanf+0x1ce>
    1746:	f6 01       	movw	r30, r12
    1748:	10 82       	st	Z, r1
    174a:	11 c0       	rjmp	.+34     	; 0x176e <vfscanf+0x1ce>
    174c:	10 62       	ori	r17, 0x20	; 32
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <vfscanf+0x1b6>
    1750:	10 61       	ori	r17, 0x10	; 16
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <vfscanf+0x1b6>
    1754:	10 64       	ori	r17, 0x40	; 64
    1756:	21 2f       	mov	r18, r17
    1758:	a6 01       	movw	r20, r12
    175a:	69 2d       	mov	r22, r9
    175c:	c7 01       	movw	r24, r14
    175e:	95 de       	rcall	.-726    	; 0x148a <conv_int>
    1760:	81 11       	cpse	r24, r1
    1762:	05 c0       	rjmp	.+10     	; 0x176e <vfscanf+0x1ce>
    1764:	f7 01       	movw	r30, r14
    1766:	83 81       	ldd	r24, Z+3	; 0x03
    1768:	80 73       	andi	r24, 0x30	; 48
    176a:	29 f4       	brne	.+10     	; 0x1776 <vfscanf+0x1d6>
    176c:	06 c0       	rjmp	.+12     	; 0x177a <vfscanf+0x1da>
    176e:	10 fd       	sbrc	r17, 0
    1770:	23 cf       	rjmp	.-442    	; 0x15b8 <vfscanf+0x18>
    1772:	83 94       	inc	r8
    1774:	21 cf       	rjmp	.-446    	; 0x15b8 <vfscanf+0x18>
    1776:	88 20       	and	r8, r8
    1778:	19 f0       	breq	.+6      	; 0x1780 <vfscanf+0x1e0>
    177a:	88 2d       	mov	r24, r8
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <vfscanf+0x1e4>
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	21 96       	adiw	r28, 0x01	; 1
    1786:	e0 e1       	ldi	r30, 0x10	; 16
    1788:	1e c0       	rjmp	.+60     	; 0x17c6 <__epilogue_restores__+0x4>

0000178a <__prologue_saves__>:
    178a:	2f 92       	push	r2
    178c:	3f 92       	push	r3
    178e:	4f 92       	push	r4
    1790:	5f 92       	push	r5
    1792:	6f 92       	push	r6
    1794:	7f 92       	push	r7
    1796:	8f 92       	push	r8
    1798:	9f 92       	push	r9
    179a:	af 92       	push	r10
    179c:	bf 92       	push	r11
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	ca 1b       	sub	r28, r26
    17b4:	db 0b       	sbc	r29, r27
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	09 94       	ijmp

000017c2 <__epilogue_restores__>:
    17c2:	2a 88       	ldd	r2, Y+18	; 0x12
    17c4:	39 88       	ldd	r3, Y+17	; 0x11
    17c6:	48 88       	ldd	r4, Y+16	; 0x10
    17c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    17ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    17cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    17ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d4:	b9 84       	ldd	r11, Y+9	; 0x09
    17d6:	c8 84       	ldd	r12, Y+8	; 0x08
    17d8:	df 80       	ldd	r13, Y+7	; 0x07
    17da:	ee 80       	ldd	r14, Y+6	; 0x06
    17dc:	fd 80       	ldd	r15, Y+5	; 0x05
    17de:	0c 81       	ldd	r16, Y+4	; 0x04
    17e0:	1b 81       	ldd	r17, Y+3	; 0x03
    17e2:	aa 81       	ldd	r26, Y+2	; 0x02
    17e4:	b9 81       	ldd	r27, Y+1	; 0x01
    17e6:	ce 0f       	add	r28, r30
    17e8:	d1 1d       	adc	r29, r1
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	ed 01       	movw	r28, r26
    17f6:	08 95       	ret

000017f8 <isspace>:
    17f8:	91 11       	cpse	r25, r1
    17fa:	07 c1       	rjmp	.+526    	; 0x1a0a <__ctype_isfalse>
    17fc:	80 32       	cpi	r24, 0x20	; 32
    17fe:	19 f0       	breq	.+6      	; 0x1806 <isspace+0xe>
    1800:	89 50       	subi	r24, 0x09	; 9
    1802:	85 50       	subi	r24, 0x05	; 5
    1804:	d0 f7       	brcc	.-12     	; 0x17fa <isspace+0x2>
    1806:	08 95       	ret

00001808 <strchr_P>:
    1808:	fc 01       	movw	r30, r24
    180a:	05 90       	lpm	r0, Z+
    180c:	06 16       	cp	r0, r22
    180e:	21 f0       	breq	.+8      	; 0x1818 <strchr_P+0x10>
    1810:	00 20       	and	r0, r0
    1812:	d9 f7       	brne	.-10     	; 0x180a <strchr_P+0x2>
    1814:	c0 01       	movw	r24, r0
    1816:	08 95       	ret
    1818:	31 97       	sbiw	r30, 0x01	; 1
    181a:	cf 01       	movw	r24, r30
    181c:	08 95       	ret

0000181e <memcpy>:
    181e:	fb 01       	movw	r30, r22
    1820:	dc 01       	movw	r26, r24
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <memcpy+0xa>
    1824:	01 90       	ld	r0, Z+
    1826:	0d 92       	st	X+, r0
    1828:	41 50       	subi	r20, 0x01	; 1
    182a:	50 40       	sbci	r21, 0x00	; 0
    182c:	d8 f7       	brcc	.-10     	; 0x1824 <memcpy+0x6>
    182e:	08 95       	ret

00001830 <fgetc>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	2b 81       	ldd	r18, Y+3	; 0x03
    1838:	20 ff       	sbrs	r18, 0
    183a:	33 c0       	rjmp	.+102    	; 0x18a2 <fgetc+0x72>
    183c:	26 ff       	sbrs	r18, 6
    183e:	0a c0       	rjmp	.+20     	; 0x1854 <fgetc+0x24>
    1840:	2f 7b       	andi	r18, 0xBF	; 191
    1842:	2b 83       	std	Y+3, r18	; 0x03
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	9f 83       	std	Y+7, r25	; 0x07
    184c:	8e 83       	std	Y+6, r24	; 0x06
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	29 c0       	rjmp	.+82     	; 0x18a6 <fgetc+0x76>
    1854:	22 ff       	sbrs	r18, 2
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <fgetc+0x46>
    1858:	e8 81       	ld	r30, Y
    185a:	f9 81       	ldd	r31, Y+1	; 0x01
    185c:	80 81       	ld	r24, Z
    185e:	08 2e       	mov	r0, r24
    1860:	00 0c       	add	r0, r0
    1862:	99 0b       	sbc	r25, r25
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	19 f4       	brne	.+6      	; 0x186e <fgetc+0x3e>
    1868:	20 62       	ori	r18, 0x20	; 32
    186a:	2b 83       	std	Y+3, r18	; 0x03
    186c:	1a c0       	rjmp	.+52     	; 0x18a2 <fgetc+0x72>
    186e:	31 96       	adiw	r30, 0x01	; 1
    1870:	f9 83       	std	Y+1, r31	; 0x01
    1872:	e8 83       	st	Y, r30
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <fgetc+0x62>
    1876:	ea 85       	ldd	r30, Y+10	; 0x0a
    1878:	fb 85       	ldd	r31, Y+11	; 0x0b
    187a:	09 95       	icall
    187c:	97 ff       	sbrs	r25, 7
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <fgetc+0x62>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	11 f0       	breq	.+4      	; 0x188a <fgetc+0x5a>
    1886:	80 e2       	ldi	r24, 0x20	; 32
    1888:	01 c0       	rjmp	.+2      	; 0x188c <fgetc+0x5c>
    188a:	80 e1       	ldi	r24, 0x10	; 16
    188c:	82 2b       	or	r24, r18
    188e:	8b 83       	std	Y+3, r24	; 0x03
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <fgetc+0x72>
    1892:	2e 81       	ldd	r18, Y+6	; 0x06
    1894:	3f 81       	ldd	r19, Y+7	; 0x07
    1896:	2f 5f       	subi	r18, 0xFF	; 255
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	3f 83       	std	Y+7, r19	; 0x07
    189c:	2e 83       	std	Y+6, r18	; 0x06
    189e:	99 27       	eor	r25, r25
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <fgetc+0x76>
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <fputc>:
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	fb 01       	movw	r30, r22
    18b6:	23 81       	ldd	r18, Z+3	; 0x03
    18b8:	21 fd       	sbrc	r18, 1
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <fputc+0x16>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	28 c0       	rjmp	.+80     	; 0x1912 <fputc+0x66>
    18c2:	22 ff       	sbrs	r18, 2
    18c4:	16 c0       	rjmp	.+44     	; 0x18f2 <fputc+0x46>
    18c6:	46 81       	ldd	r20, Z+6	; 0x06
    18c8:	57 81       	ldd	r21, Z+7	; 0x07
    18ca:	24 81       	ldd	r18, Z+4	; 0x04
    18cc:	35 81       	ldd	r19, Z+5	; 0x05
    18ce:	42 17       	cp	r20, r18
    18d0:	53 07       	cpc	r21, r19
    18d2:	44 f4       	brge	.+16     	; 0x18e4 <fputc+0x38>
    18d4:	a0 81       	ld	r26, Z
    18d6:	b1 81       	ldd	r27, Z+1	; 0x01
    18d8:	9d 01       	movw	r18, r26
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	20 83       	st	Z, r18
    18e2:	8c 93       	st	X, r24
    18e4:	26 81       	ldd	r18, Z+6	; 0x06
    18e6:	37 81       	ldd	r19, Z+7	; 0x07
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	37 83       	std	Z+7, r19	; 0x07
    18ee:	26 83       	std	Z+6, r18	; 0x06
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <fputc+0x66>
    18f2:	eb 01       	movw	r28, r22
    18f4:	09 2f       	mov	r16, r25
    18f6:	18 2f       	mov	r17, r24
    18f8:	00 84       	ldd	r0, Z+8	; 0x08
    18fa:	f1 85       	ldd	r31, Z+9	; 0x09
    18fc:	e0 2d       	mov	r30, r0
    18fe:	09 95       	icall
    1900:	89 2b       	or	r24, r25
    1902:	e1 f6       	brne	.-72     	; 0x18bc <fputc+0x10>
    1904:	8e 81       	ldd	r24, Y+6	; 0x06
    1906:	9f 81       	ldd	r25, Y+7	; 0x07
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	9f 83       	std	Y+7, r25	; 0x07
    190c:	8e 83       	std	Y+6, r24	; 0x06
    190e:	81 2f       	mov	r24, r17
    1910:	90 2f       	mov	r25, r16
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	08 95       	ret

0000191c <ungetc>:
    191c:	fb 01       	movw	r30, r22
    191e:	23 81       	ldd	r18, Z+3	; 0x03
    1920:	20 ff       	sbrs	r18, 0
    1922:	12 c0       	rjmp	.+36     	; 0x1948 <ungetc+0x2c>
    1924:	26 fd       	sbrc	r18, 6
    1926:	10 c0       	rjmp	.+32     	; 0x1948 <ungetc+0x2c>
    1928:	8f 3f       	cpi	r24, 0xFF	; 255
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	93 07       	cpc	r25, r19
    192e:	61 f0       	breq	.+24     	; 0x1948 <ungetc+0x2c>
    1930:	82 83       	std	Z+2, r24	; 0x02
    1932:	2f 7d       	andi	r18, 0xDF	; 223
    1934:	20 64       	ori	r18, 0x40	; 64
    1936:	23 83       	std	Z+3, r18	; 0x03
    1938:	26 81       	ldd	r18, Z+6	; 0x06
    193a:	37 81       	ldd	r19, Z+7	; 0x07
    193c:	21 50       	subi	r18, 0x01	; 1
    193e:	31 09       	sbc	r19, r1
    1940:	37 83       	std	Z+7, r19	; 0x07
    1942:	26 83       	std	Z+6, r18	; 0x06
    1944:	99 27       	eor	r25, r25
    1946:	08 95       	ret
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	9f ef       	ldi	r25, 0xFF	; 255
    194c:	08 95       	ret

0000194e <__ultoa_invert>:
    194e:	fa 01       	movw	r30, r20
    1950:	aa 27       	eor	r26, r26
    1952:	28 30       	cpi	r18, 0x08	; 8
    1954:	51 f1       	breq	.+84     	; 0x19aa <__ultoa_invert+0x5c>
    1956:	20 31       	cpi	r18, 0x10	; 16
    1958:	81 f1       	breq	.+96     	; 0x19ba <__ultoa_invert+0x6c>
    195a:	e8 94       	clt
    195c:	6f 93       	push	r22
    195e:	6e 7f       	andi	r22, 0xFE	; 254
    1960:	6e 5f       	subi	r22, 0xFE	; 254
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	af 4f       	sbci	r26, 0xFF	; 255
    196a:	b1 e0       	ldi	r27, 0x01	; 1
    196c:	3e d0       	rcall	.+124    	; 0x19ea <__ultoa_invert+0x9c>
    196e:	b4 e0       	ldi	r27, 0x04	; 4
    1970:	3c d0       	rcall	.+120    	; 0x19ea <__ultoa_invert+0x9c>
    1972:	67 0f       	add	r22, r23
    1974:	78 1f       	adc	r23, r24
    1976:	89 1f       	adc	r24, r25
    1978:	9a 1f       	adc	r25, r26
    197a:	a1 1d       	adc	r26, r1
    197c:	68 0f       	add	r22, r24
    197e:	79 1f       	adc	r23, r25
    1980:	8a 1f       	adc	r24, r26
    1982:	91 1d       	adc	r25, r1
    1984:	a1 1d       	adc	r26, r1
    1986:	6a 0f       	add	r22, r26
    1988:	71 1d       	adc	r23, r1
    198a:	81 1d       	adc	r24, r1
    198c:	91 1d       	adc	r25, r1
    198e:	a1 1d       	adc	r26, r1
    1990:	20 d0       	rcall	.+64     	; 0x19d2 <__ultoa_invert+0x84>
    1992:	09 f4       	brne	.+2      	; 0x1996 <__ultoa_invert+0x48>
    1994:	68 94       	set
    1996:	3f 91       	pop	r19
    1998:	2a e0       	ldi	r18, 0x0A	; 10
    199a:	26 9f       	mul	r18, r22
    199c:	11 24       	eor	r1, r1
    199e:	30 19       	sub	r19, r0
    19a0:	30 5d       	subi	r19, 0xD0	; 208
    19a2:	31 93       	st	Z+, r19
    19a4:	de f6       	brtc	.-74     	; 0x195c <__ultoa_invert+0xe>
    19a6:	cf 01       	movw	r24, r30
    19a8:	08 95       	ret
    19aa:	46 2f       	mov	r20, r22
    19ac:	47 70       	andi	r20, 0x07	; 7
    19ae:	40 5d       	subi	r20, 0xD0	; 208
    19b0:	41 93       	st	Z+, r20
    19b2:	b3 e0       	ldi	r27, 0x03	; 3
    19b4:	0f d0       	rcall	.+30     	; 0x19d4 <__ultoa_invert+0x86>
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__ultoa_invert+0x5c>
    19b8:	f6 cf       	rjmp	.-20     	; 0x19a6 <__ultoa_invert+0x58>
    19ba:	46 2f       	mov	r20, r22
    19bc:	4f 70       	andi	r20, 0x0F	; 15
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	4a 33       	cpi	r20, 0x3A	; 58
    19c2:	18 f0       	brcs	.+6      	; 0x19ca <__ultoa_invert+0x7c>
    19c4:	49 5d       	subi	r20, 0xD9	; 217
    19c6:	31 fd       	sbrc	r19, 1
    19c8:	40 52       	subi	r20, 0x20	; 32
    19ca:	41 93       	st	Z+, r20
    19cc:	02 d0       	rcall	.+4      	; 0x19d2 <__ultoa_invert+0x84>
    19ce:	a9 f7       	brne	.-22     	; 0x19ba <__ultoa_invert+0x6c>
    19d0:	ea cf       	rjmp	.-44     	; 0x19a6 <__ultoa_invert+0x58>
    19d2:	b4 e0       	ldi	r27, 0x04	; 4
    19d4:	a6 95       	lsr	r26
    19d6:	97 95       	ror	r25
    19d8:	87 95       	ror	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	ba 95       	dec	r27
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0x86>
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	61 05       	cpc	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	08 95       	ret
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	0a 2e       	mov	r0, r26
    19f0:	06 94       	lsr	r0
    19f2:	57 95       	ror	r21
    19f4:	47 95       	ror	r20
    19f6:	37 95       	ror	r19
    19f8:	27 95       	ror	r18
    19fa:	ba 95       	dec	r27
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__ultoa_invert+0xa2>
    19fe:	62 0f       	add	r22, r18
    1a00:	73 1f       	adc	r23, r19
    1a02:	84 1f       	adc	r24, r20
    1a04:	95 1f       	adc	r25, r21
    1a06:	a0 1d       	adc	r26, r0
    1a08:	08 95       	ret

00001a0a <__ctype_isfalse>:
    1a0a:	99 27       	eor	r25, r25
    1a0c:	88 27       	eor	r24, r24

00001a0e <__ctype_istrue>:
    1a0e:	08 95       	ret

00001a10 <_exit>:
    1a10:	f8 94       	cli

00001a12 <__stop_program>:
    1a12:	ff cf       	rjmp	.-2      	; 0x1a12 <__stop_program>
