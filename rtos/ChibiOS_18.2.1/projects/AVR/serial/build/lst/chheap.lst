   1               		.file	"chheap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._heap_init,"ax",@progbits
  11               	.global	_heap_init
  13               	_heap_init:
  14               	.LFB130:
  15               		.file 1 "../../../os/common/oslib/src/chheap.c"
   1:../../../os/common/oslib/src/chheap.c **** /*
   2:../../../os/common/oslib/src/chheap.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/oslib/src/chheap.c **** 
   4:../../../os/common/oslib/src/chheap.c ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/src/chheap.c **** 
   6:../../../os/common/oslib/src/chheap.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/src/chheap.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/src/chheap.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/src/chheap.c ****     (at your option) any later version.
  10:../../../os/common/oslib/src/chheap.c **** 
  11:../../../os/common/oslib/src/chheap.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/src/chheap.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/src/chheap.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/src/chheap.c ****     GNU General Public License for more details.
  15:../../../os/common/oslib/src/chheap.c **** 
  16:../../../os/common/oslib/src/chheap.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/src/chheap.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/src/chheap.c **** */
  19:../../../os/common/oslib/src/chheap.c **** 
  20:../../../os/common/oslib/src/chheap.c **** /**
  21:../../../os/common/oslib/src/chheap.c ****  * @file    chheap.c
  22:../../../os/common/oslib/src/chheap.c ****  * @brief   Heaps code.
  23:../../../os/common/oslib/src/chheap.c ****  *
  24:../../../os/common/oslib/src/chheap.c ****  * @addtogroup heaps
  25:../../../os/common/oslib/src/chheap.c ****  * @details Heap Allocator related APIs.
  26:../../../os/common/oslib/src/chheap.c ****  *          <h2>Operation mode</h2>
  27:../../../os/common/oslib/src/chheap.c ****  *          The heap allocator implements a first-fit strategy and its APIs
  28:../../../os/common/oslib/src/chheap.c ****  *          are functionally equivalent to the usual @p malloc() and @p free()
  29:../../../os/common/oslib/src/chheap.c ****  *          library functions. The main difference is that the OS heap APIs
  30:../../../os/common/oslib/src/chheap.c ****  *          are guaranteed to be thread safe and there is the ability to
  31:../../../os/common/oslib/src/chheap.c ****  *          return memory blocks aligned to arbitrary powers of two.<br>
  32:../../../os/common/oslib/src/chheap.c ****  * @pre     In order to use the heap APIs the @p CH_CFG_USE_HEAP option must
  33:../../../os/common/oslib/src/chheap.c ****  *          be enabled in @p chconf.h.
  34:../../../os/common/oslib/src/chheap.c ****  * @note    Compatible with RT and NIL.
  35:../../../os/common/oslib/src/chheap.c ****  * @{
  36:../../../os/common/oslib/src/chheap.c ****  */
  37:../../../os/common/oslib/src/chheap.c **** 
  38:../../../os/common/oslib/src/chheap.c **** #include "ch.h"
  39:../../../os/common/oslib/src/chheap.c **** 
  40:../../../os/common/oslib/src/chheap.c **** #if (CH_CFG_USE_HEAP == TRUE) || defined(__DOXYGEN__)
  41:../../../os/common/oslib/src/chheap.c **** 
  42:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  43:../../../os/common/oslib/src/chheap.c **** /* Module local definitions.                                                 */
  44:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  45:../../../os/common/oslib/src/chheap.c **** 
  46:../../../os/common/oslib/src/chheap.c **** /*
  47:../../../os/common/oslib/src/chheap.c ****  * Defaults on the best synchronization mechanism available.
  48:../../../os/common/oslib/src/chheap.c ****  */
  49:../../../os/common/oslib/src/chheap.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  50:../../../os/common/oslib/src/chheap.c **** #define H_LOCK(h)       chMtxLock(&(h)->mtx)
  51:../../../os/common/oslib/src/chheap.c **** #define H_UNLOCK(h)     chMtxUnlock(&(h)->mtx)
  52:../../../os/common/oslib/src/chheap.c **** #else
  53:../../../os/common/oslib/src/chheap.c **** #define H_LOCK(h)       (void) chSemWait(&(h)->sem)
  54:../../../os/common/oslib/src/chheap.c **** #define H_UNLOCK(h)     chSemSignal(&(h)->sem)
  55:../../../os/common/oslib/src/chheap.c **** #endif
  56:../../../os/common/oslib/src/chheap.c **** 
  57:../../../os/common/oslib/src/chheap.c **** #define H_BLOCK(hp)     ((hp) + 1U)
  58:../../../os/common/oslib/src/chheap.c **** 
  59:../../../os/common/oslib/src/chheap.c **** #define H_LIMIT(hp)     (H_BLOCK(hp) + H_PAGES(hp))
  60:../../../os/common/oslib/src/chheap.c **** 
  61:../../../os/common/oslib/src/chheap.c **** #define H_NEXT(hp)      ((hp)->free.next)
  62:../../../os/common/oslib/src/chheap.c **** 
  63:../../../os/common/oslib/src/chheap.c **** #define H_PAGES(hp)     ((hp)->free.pages)
  64:../../../os/common/oslib/src/chheap.c **** 
  65:../../../os/common/oslib/src/chheap.c **** #define H_HEAP(hp)      ((hp)->used.heap)
  66:../../../os/common/oslib/src/chheap.c **** 
  67:../../../os/common/oslib/src/chheap.c **** #define H_SIZE(hp)      ((hp)->used.size)
  68:../../../os/common/oslib/src/chheap.c **** 
  69:../../../os/common/oslib/src/chheap.c **** /*
  70:../../../os/common/oslib/src/chheap.c ****  * Number of pages between two pointers in a MISRA-compatible way.
  71:../../../os/common/oslib/src/chheap.c ****  */
  72:../../../os/common/oslib/src/chheap.c **** #define NPAGES(p1, p2)                                                      \
  73:../../../os/common/oslib/src/chheap.c ****   /*lint -save -e9033 [10.8] The cast is safe.*/                            \
  74:../../../os/common/oslib/src/chheap.c ****   ((size_t)((p1) - (p2)))                                                   \
  75:../../../os/common/oslib/src/chheap.c ****   /*lint -restore*/
  76:../../../os/common/oslib/src/chheap.c **** 
  77:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  78:../../../os/common/oslib/src/chheap.c **** /* Module exported variables.                                                */
  79:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  80:../../../os/common/oslib/src/chheap.c **** 
  81:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  82:../../../os/common/oslib/src/chheap.c **** /* Module local types.                                                       */
  83:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  84:../../../os/common/oslib/src/chheap.c **** 
  85:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  86:../../../os/common/oslib/src/chheap.c **** /* Module local variables.                                                   */
  87:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  88:../../../os/common/oslib/src/chheap.c **** 
  89:../../../os/common/oslib/src/chheap.c **** /**
  90:../../../os/common/oslib/src/chheap.c ****  * @brief   Default heap descriptor.
  91:../../../os/common/oslib/src/chheap.c ****  */
  92:../../../os/common/oslib/src/chheap.c **** static memory_heap_t default_heap;
  93:../../../os/common/oslib/src/chheap.c **** 
  94:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  95:../../../os/common/oslib/src/chheap.c **** /* Module local functions.                                                   */
  96:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  97:../../../os/common/oslib/src/chheap.c **** 
  98:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
  99:../../../os/common/oslib/src/chheap.c **** /* Module exported functions.                                                */
 100:../../../os/common/oslib/src/chheap.c **** /*===========================================================================*/
 101:../../../os/common/oslib/src/chheap.c **** 
 102:../../../os/common/oslib/src/chheap.c **** /**
 103:../../../os/common/oslib/src/chheap.c ****  * @brief   Initializes the default heap.
 104:../../../os/common/oslib/src/chheap.c ****  *
 105:../../../os/common/oslib/src/chheap.c ****  * @notapi
 106:../../../os/common/oslib/src/chheap.c ****  */
 107:../../../os/common/oslib/src/chheap.c **** void _heap_init(void) {
  16               		.loc 1 107 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 108:../../../os/common/oslib/src/chheap.c **** 
 109:../../../os/common/oslib/src/chheap.c ****   default_heap.provider = chCoreAllocAlignedWithOffset;
  22               		.loc 1 109 0
  23 0000 E0E0      		ldi r30,lo8(default_heap)
  24 0002 F0E0      		ldi r31,hi8(default_heap)
  25 0004 80E0      		ldi r24,lo8(gs(chCoreAllocAlignedWithOffset))
  26 0006 90E0      		ldi r25,hi8(gs(chCoreAllocAlignedWithOffset))
  27 0008 9183      		std Z+1,r25
  28 000a 8083      		st Z,r24
 110:../../../os/common/oslib/src/chheap.c ****   H_NEXT(&default_heap.header) = NULL;
  29               		.loc 1 110 0
  30 000c 1382      		std Z+3,__zero_reg__
  31 000e 1282      		std Z+2,__zero_reg__
 111:../../../os/common/oslib/src/chheap.c ****   H_PAGES(&default_heap.header) = 0;
  32               		.loc 1 111 0
  33 0010 1582      		std Z+5,__zero_reg__
  34 0012 1482      		std Z+4,__zero_reg__
 112:../../../os/common/oslib/src/chheap.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 113:../../../os/common/oslib/src/chheap.c ****   chMtxObjectInit(&default_heap.mtx);
  35               		.loc 1 113 0
  36 0014 80E0      		ldi r24,lo8(default_heap+6)
  37 0016 90E0      		ldi r25,hi8(default_heap+6)
  38 0018 0C94 0000 		jmp chMtxObjectInit
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE130:
  43               		.section	.text.chHeapObjectInit,"ax",@progbits
  44               	.global	chHeapObjectInit
  46               	chHeapObjectInit:
  47               	.LFB131:
 114:../../../os/common/oslib/src/chheap.c **** #else
 115:../../../os/common/oslib/src/chheap.c ****   chSemObjectInit(&default_heap.sem, (cnt_t)1);
 116:../../../os/common/oslib/src/chheap.c **** #endif
 117:../../../os/common/oslib/src/chheap.c **** }
 118:../../../os/common/oslib/src/chheap.c **** 
 119:../../../os/common/oslib/src/chheap.c **** /**
 120:../../../os/common/oslib/src/chheap.c ****  * @brief   Initializes a memory heap from a static memory area.
 121:../../../os/common/oslib/src/chheap.c ****  * @note    The heap buffer base and size are adjusted if the passed buffer
 122:../../../os/common/oslib/src/chheap.c ****  *          is not aligned to @p CH_HEAP_ALIGNMENT. This mean that the
 123:../../../os/common/oslib/src/chheap.c ****  *          effective heap size can be less than @p size.
 124:../../../os/common/oslib/src/chheap.c ****  *
 125:../../../os/common/oslib/src/chheap.c ****  * @param[out] heapp    pointer to the memory heap descriptor to be initialized
 126:../../../os/common/oslib/src/chheap.c ****  * @param[in] buf       heap buffer base
 127:../../../os/common/oslib/src/chheap.c ****  * @param[in] size      heap size
 128:../../../os/common/oslib/src/chheap.c ****  *
 129:../../../os/common/oslib/src/chheap.c ****  * @init
 130:../../../os/common/oslib/src/chheap.c ****  */
 131:../../../os/common/oslib/src/chheap.c **** void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  48               		.loc 1 131 0
  49               		.cfi_startproc
  50               	.LVL1:
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 0 */
  54               	.L__stack_usage = 0
 132:../../../os/common/oslib/src/chheap.c ****   heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
  55               		.loc 1 132 0
  56 0000 FB01      		movw r30,r22
  57 0002 3396      		adiw r30,3
  58 0004 EC7F      		andi r30,252
  59               	.LVL2:
 133:../../../os/common/oslib/src/chheap.c **** 
 134:../../../os/common/oslib/src/chheap.c ****   chDbgCheck((heapp != NULL) && (size > 0U));
 135:../../../os/common/oslib/src/chheap.c **** 
 136:../../../os/common/oslib/src/chheap.c ****   /* Adjusting the size in case the initial block was not correctly
 137:../../../os/common/oslib/src/chheap.c ****      aligned.*/
 138:../../../os/common/oslib/src/chheap.c ****   /*lint -save -e9033 [10.8] Required cast operations.*/
 139:../../../os/common/oslib/src/chheap.c ****   size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 140:../../../os/common/oslib/src/chheap.c ****   /*lint restore*/
 141:../../../os/common/oslib/src/chheap.c **** 
 142:../../../os/common/oslib/src/chheap.c ****   /* Initializing the heap header.*/
 143:../../../os/common/oslib/src/chheap.c ****   heapp->provider = NULL;
  60               		.loc 1 143 0
  61 0006 DC01      		movw r26,r24
  62 0008 1196      		adiw r26,1
  63 000a 1C92      		st X,__zero_reg__
  64 000c 1E92      		st -X,__zero_reg__
 144:../../../os/common/oslib/src/chheap.c ****   H_NEXT(&heapp->header) = hp;
  65               		.loc 1 144 0
  66 000e 1396      		adiw r26,2+1
  67 0010 FC93      		st X,r31
  68 0012 EE93      		st -X,r30
  69 0014 1297      		sbiw r26,2
 145:../../../os/common/oslib/src/chheap.c ****   H_PAGES(&heapp->header) = 0;
  70               		.loc 1 145 0
  71 0016 1596      		adiw r26,4+1
  72 0018 1C92      		st X,__zero_reg__
  73 001a 1E92      		st -X,__zero_reg__
  74 001c 1497      		sbiw r26,4
 146:../../../os/common/oslib/src/chheap.c ****   H_NEXT(hp) = NULL;
  75               		.loc 1 146 0
  76 001e 1182      		std Z+1,__zero_reg__
  77 0020 1082      		st Z,__zero_reg__
  78 0022 4450      		subi r20,4
  79 0024 5109      		sbc r21,__zero_reg__
  80               	.LVL3:
 139:../../../os/common/oslib/src/chheap.c ****   /*lint restore*/
  81               		.loc 1 139 0
  82 0026 6E1B      		sub r22,r30
  83 0028 7F0B      		sbc r23,r31
  84               	.LVL4:
 147:../../../os/common/oslib/src/chheap.c ****   H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
  85               		.loc 1 147 0
  86 002a 640F      		add r22,r20
  87 002c 751F      		adc r23,r21
  88 002e 7695      		lsr r23
  89 0030 6795      		ror r22
  90 0032 7695      		lsr r23
  91 0034 6795      		ror r22
  92 0036 7383      		std Z+3,r23
  93 0038 6283      		std Z+2,r22
 148:../../../os/common/oslib/src/chheap.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 149:../../../os/common/oslib/src/chheap.c ****   chMtxObjectInit(&heapp->mtx);
  94               		.loc 1 149 0
  95 003a 0696      		adiw r24,6
  96               	.LVL5:
  97 003c 0C94 0000 		jmp chMtxObjectInit
  98               	.LVL6:
  99               		.cfi_endproc
 100               	.LFE131:
 102               		.section	.text.chHeapAllocAligned,"ax",@progbits
 103               	.global	chHeapAllocAligned
 105               	chHeapAllocAligned:
 106               	.LFB132:
 150:../../../os/common/oslib/src/chheap.c **** #else
 151:../../../os/common/oslib/src/chheap.c ****   chSemObjectInit(&heapp->sem, (cnt_t)1);
 152:../../../os/common/oslib/src/chheap.c **** #endif
 153:../../../os/common/oslib/src/chheap.c **** }
 154:../../../os/common/oslib/src/chheap.c **** 
 155:../../../os/common/oslib/src/chheap.c **** /**
 156:../../../os/common/oslib/src/chheap.c ****  * @brief   Allocates a block of memory from the heap by using the first-fit
 157:../../../os/common/oslib/src/chheap.c ****  *          algorithm.
 158:../../../os/common/oslib/src/chheap.c ****  * @details The allocated block is guaranteed to be properly aligned to the
 159:../../../os/common/oslib/src/chheap.c ****  *          specified alignment.
 160:../../../os/common/oslib/src/chheap.c ****  *
 161:../../../os/common/oslib/src/chheap.c ****  * @param[in] heapp     pointer to a heap descriptor or @p NULL in order to
 162:../../../os/common/oslib/src/chheap.c ****  *                      access the default heap.
 163:../../../os/common/oslib/src/chheap.c ****  * @param[in] size      the size of the block to be allocated. Note that the
 164:../../../os/common/oslib/src/chheap.c ****  *                      allocated block may be a bit bigger than the requested
 165:../../../os/common/oslib/src/chheap.c ****  *                      size for alignment and fragmentation reasons.
 166:../../../os/common/oslib/src/chheap.c ****  * @param[in] align     desired memory alignment
 167:../../../os/common/oslib/src/chheap.c ****  * @return              A pointer to the aligned allocated block.
 168:../../../os/common/oslib/src/chheap.c ****  * @retval NULL         if the block cannot be allocated.
 169:../../../os/common/oslib/src/chheap.c ****  *
 170:../../../os/common/oslib/src/chheap.c ****  * @api
 171:../../../os/common/oslib/src/chheap.c ****  */
 172:../../../os/common/oslib/src/chheap.c **** void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 107               		.loc 1 172 0
 108               		.cfi_startproc
 109               	.LVL7:
 110 0000 2F92      		push r2
 111               	.LCFI0:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 2, -2
 114 0002 3F92      		push r3
 115               	.LCFI1:
 116               		.cfi_def_cfa_offset 4
 117               		.cfi_offset 3, -3
 118 0004 4F92      		push r4
 119               	.LCFI2:
 120               		.cfi_def_cfa_offset 5
 121               		.cfi_offset 4, -4
 122 0006 5F92      		push r5
 123               	.LCFI3:
 124               		.cfi_def_cfa_offset 6
 125               		.cfi_offset 5, -5
 126 0008 6F92      		push r6
 127               	.LCFI4:
 128               		.cfi_def_cfa_offset 7
 129               		.cfi_offset 6, -6
 130 000a 7F92      		push r7
 131               	.LCFI5:
 132               		.cfi_def_cfa_offset 8
 133               		.cfi_offset 7, -7
 134 000c 8F92      		push r8
 135               	.LCFI6:
 136               		.cfi_def_cfa_offset 9
 137               		.cfi_offset 8, -8
 138 000e 9F92      		push r9
 139               	.LCFI7:
 140               		.cfi_def_cfa_offset 10
 141               		.cfi_offset 9, -9
 142 0010 AF92      		push r10
 143               	.LCFI8:
 144               		.cfi_def_cfa_offset 11
 145               		.cfi_offset 10, -10
 146 0012 BF92      		push r11
 147               	.LCFI9:
 148               		.cfi_def_cfa_offset 12
 149               		.cfi_offset 11, -11
 150 0014 CF92      		push r12
 151               	.LCFI10:
 152               		.cfi_def_cfa_offset 13
 153               		.cfi_offset 12, -12
 154 0016 DF92      		push r13
 155               	.LCFI11:
 156               		.cfi_def_cfa_offset 14
 157               		.cfi_offset 13, -13
 158 0018 EF92      		push r14
 159               	.LCFI12:
 160               		.cfi_def_cfa_offset 15
 161               		.cfi_offset 14, -14
 162 001a FF92      		push r15
 163               	.LCFI13:
 164               		.cfi_def_cfa_offset 16
 165               		.cfi_offset 15, -15
 166 001c 0F93      		push r16
 167               	.LCFI14:
 168               		.cfi_def_cfa_offset 17
 169               		.cfi_offset 16, -16
 170 001e 1F93      		push r17
 171               	.LCFI15:
 172               		.cfi_def_cfa_offset 18
 173               		.cfi_offset 17, -17
 174 0020 CF93      		push r28
 175               	.LCFI16:
 176               		.cfi_def_cfa_offset 19
 177               		.cfi_offset 28, -18
 178 0022 DF93      		push r29
 179               	.LCFI17:
 180               		.cfi_def_cfa_offset 20
 181               		.cfi_offset 29, -19
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 18 */
 185               	.L__stack_usage = 18
 186 0024 5C01      		movw r10,r24
 187 0026 3B01      		movw r6,r22
 188 0028 7A01      		movw r14,r20
 173:../../../os/common/oslib/src/chheap.c ****   heap_header_t *qp, *hp, *ahp;
 174:../../../os/common/oslib/src/chheap.c ****   size_t pages;
 175:../../../os/common/oslib/src/chheap.c **** 
 176:../../../os/common/oslib/src/chheap.c ****   chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 177:../../../os/common/oslib/src/chheap.c **** 
 178:../../../os/common/oslib/src/chheap.c ****   /* If an heap is not specified then the default system header is used.*/
 179:../../../os/common/oslib/src/chheap.c ****   if (heapp == NULL) {
 189               		.loc 1 179 0
 190 002a 892B      		or r24,r25
 191 002c 01F4      		brne .+2
 192 002e 00C0      		rjmp .L17
 193               	.L4:
 194               	.LVL8:
 180:../../../os/common/oslib/src/chheap.c ****     heapp = &default_heap;
 181:../../../os/common/oslib/src/chheap.c ****   }
 182:../../../os/common/oslib/src/chheap.c **** 
 183:../../../os/common/oslib/src/chheap.c ****   /* Minimum alignment is constrained by the heap header structure size.*/
 184:../../../os/common/oslib/src/chheap.c ****   if (align < CH_HEAP_ALIGNMENT) {
 195               		.loc 1 184 0
 196 0030 64E0      		ldi r22,4
 197 0032 E616      		cp r14,r22
 198 0034 F104      		cpc r15,__zero_reg__
 199               	.LVL9:
 200 0036 00F4      		brsh .L5
 185:../../../os/common/oslib/src/chheap.c ****     align = CH_HEAP_ALIGNMENT;
 201               		.loc 1 185 0
 202 0038 E4E0      		ldi r30,lo8(4)
 203 003a EE2E      		mov r14,r30
 204 003c F12C      		mov r15,__zero_reg__
 205               	.L5:
 206               	.LVL10:
 186:../../../os/common/oslib/src/chheap.c ****   }
 187:../../../os/common/oslib/src/chheap.c **** 
 188:../../../os/common/oslib/src/chheap.c ****   /* Size is converted in number of elementary allocation units.*/
 189:../../../os/common/oslib/src/chheap.c ****   pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 207               		.loc 1 189 0
 208 003e 6301      		movw r12,r6
 209 0040 83E0      		ldi r24,3
 210 0042 C80E      		add r12,r24
 211 0044 D11C      		adc r13,__zero_reg__
 212 0046 D694      		lsr r13
 213 0048 C794      		ror r12
 214 004a D694      		lsr r13
 215 004c C794      		ror r12
 216               	.LVL11:
 190:../../../os/common/oslib/src/chheap.c **** 
 191:../../../os/common/oslib/src/chheap.c ****   /* Taking heap mutex/semaphore.*/
 192:../../../os/common/oslib/src/chheap.c ****   H_LOCK(heapp);
 217               		.loc 1 192 0
 218 004e 4501      		movw r8,r10
 219 0050 A6E0      		ldi r26,6
 220 0052 8A0E      		add r8,r26
 221 0054 911C      		adc r9,__zero_reg__
 222 0056 C401      		movw r24,r8
 223 0058 0E94 0000 		call chMtxLock
 224               	.LVL12:
 193:../../../os/common/oslib/src/chheap.c **** 
 194:../../../os/common/oslib/src/chheap.c ****   /* Start of the free blocks list.*/
 195:../../../os/common/oslib/src/chheap.c ****   qp = &heapp->header;
 225               		.loc 1 195 0
 226 005c E501      		movw r28,r10
 227 005e 2296      		adiw r28,2
 228               	.LVL13:
 196:../../../os/common/oslib/src/chheap.c ****   while (H_NEXT(qp) != NULL) {
 197:../../../os/common/oslib/src/chheap.c **** 
 198:../../../os/common/oslib/src/chheap.c ****     /* Next free block.*/
 199:../../../os/common/oslib/src/chheap.c ****     hp = H_NEXT(qp);
 200:../../../os/common/oslib/src/chheap.c **** 
 201:../../../os/common/oslib/src/chheap.c ****     /* Pointer aligned to the requested alignment.*/
 202:../../../os/common/oslib/src/chheap.c ****     ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 229               		.loc 1 202 0
 230 0060 8827      		clr r24
 231 0062 9927      		clr r25
 232 0064 8E19      		sub r24,r14
 233 0066 9F09      		sbc r25,r15
 196:../../../os/common/oslib/src/chheap.c ****   while (H_NEXT(qp) != NULL) {
 234               		.loc 1 196 0
 235 0068 E881      		ld r30,Y
 236 006a F981      		ldd r31,Y+1
 237 006c 3097      		sbiw r30,0
 238 006e 01F0      		breq .L18
 239               	.L13:
 240               	.LVL14:
 241               		.loc 1 202 0
 242 0070 AF01      		movw r20,r30
 243 0072 4C5F      		subi r20,-4
 244 0074 5F4F      		sbci r21,-1
 245 0076 9F01      		movw r18,r30
 246 0078 2D5F      		subi r18,-3
 247 007a 3F4F      		sbci r19,-1
 248 007c 2E0D      		add r18,r14
 249 007e 3F1D      		adc r19,r15
 250 0080 2823      		and r18,r24
 251 0082 3923      		and r19,r25
 252 0084 2450      		subi r18,4
 253 0086 3109      		sbc r19,__zero_reg__
 254               	.LVL15:
 203:../../../os/common/oslib/src/chheap.c **** 
 204:../../../os/common/oslib/src/chheap.c ****     if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 255               		.loc 1 204 0
 256 0088 0281      		ldd r16,Z+2
 257 008a 1381      		ldd r17,Z+3
 258 008c D801      		movw r26,r16
 259 008e 1196      		adiw r26,1
 260 0090 AA0F      		lsl r26
 261 0092 BB1F      		rol r27
 262 0094 AA0F      		lsl r26
 263 0096 BB1F      		rol r27
 264 0098 BF01      		movw r22,r30
 265 009a 6A0F      		add r22,r26
 266 009c 7B1F      		adc r23,r27
 267 009e 2617      		cp r18,r22
 268 00a0 3707      		cpc r19,r23
 269 00a2 00F4      		brsh .L7
 270               		.loc 1 204 0 is_stmt 0 discriminator 1
 271 00a4 1D01      		movw r2,r26
 272 00a6 64E0      		ldi r22,4
 273 00a8 261A      		sub r2,r22
 274 00aa 3108      		sbc r3,__zero_reg__
 275 00ac BF01      		movw r22,r30
 276 00ae 621B      		sub r22,r18
 277 00b0 730B      		sbc r23,r19
 278 00b2 620D      		add r22,r2
 279 00b4 731D      		adc r23,r3
 280 00b6 7595      		asr r23
 281 00b8 6795      		ror r22
 282 00ba 7595      		asr r23
 283 00bc 6795      		ror r22
 284 00be 6C15      		cp r22,r12
 285 00c0 7D05      		cpc r23,r13
 286 00c2 00F4      		brsh .L19
 287               	.L7:
 196:../../../os/common/oslib/src/chheap.c ****   while (H_NEXT(qp) != NULL) {
 288               		.loc 1 196 0 is_stmt 1
 289 00c4 EF01      		movw r28,r30
 290               	.LVL16:
 291 00c6 E881      		ld r30,Y
 292 00c8 F981      		ldd r31,Y+1
 293               	.LVL17:
 294 00ca 3097      		sbiw r30,0
 295 00cc 01F4      		brne .L13
 296               	.LVL18:
 297               	.L18:
 205:../../../os/common/oslib/src/chheap.c ****       /* The block is large enough to contain a correctly aligned area
 206:../../../os/common/oslib/src/chheap.c ****          of sufficient size.*/
 207:../../../os/common/oslib/src/chheap.c **** 
 208:../../../os/common/oslib/src/chheap.c ****       if (ahp > hp) {
 209:../../../os/common/oslib/src/chheap.c ****         /* The block is not properly aligned, must split it.*/
 210:../../../os/common/oslib/src/chheap.c ****         size_t bpages;
 211:../../../os/common/oslib/src/chheap.c **** 
 212:../../../os/common/oslib/src/chheap.c ****         bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
 213:../../../os/common/oslib/src/chheap.c ****         H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 214:../../../os/common/oslib/src/chheap.c ****         if (bpages > pages) {
 215:../../../os/common/oslib/src/chheap.c ****           /* The block is bigger than required, must split the excess.*/
 216:../../../os/common/oslib/src/chheap.c ****           heap_header_t *fp;
 217:../../../os/common/oslib/src/chheap.c **** 
 218:../../../os/common/oslib/src/chheap.c ****           /* Creating the excess block.*/
 219:../../../os/common/oslib/src/chheap.c ****           fp = H_BLOCK(ahp) + pages;
 220:../../../os/common/oslib/src/chheap.c ****           H_PAGES(fp) = (bpages - pages) - 1U;
 221:../../../os/common/oslib/src/chheap.c **** 
 222:../../../os/common/oslib/src/chheap.c ****           /* Linking the excess block.*/
 223:../../../os/common/oslib/src/chheap.c ****           H_NEXT(fp) = H_NEXT(hp);
 224:../../../os/common/oslib/src/chheap.c ****           H_NEXT(hp) = fp;
 225:../../../os/common/oslib/src/chheap.c ****         }
 226:../../../os/common/oslib/src/chheap.c **** 
 227:../../../os/common/oslib/src/chheap.c ****         hp = ahp;
 228:../../../os/common/oslib/src/chheap.c ****       }
 229:../../../os/common/oslib/src/chheap.c ****       else {
 230:../../../os/common/oslib/src/chheap.c ****         /* The block is already properly aligned.*/
 231:../../../os/common/oslib/src/chheap.c **** 
 232:../../../os/common/oslib/src/chheap.c ****         if (H_PAGES(hp) == pages) {
 233:../../../os/common/oslib/src/chheap.c ****           /* Exact size, getting the whole block.*/
 234:../../../os/common/oslib/src/chheap.c ****           H_NEXT(qp) = H_NEXT(hp);
 235:../../../os/common/oslib/src/chheap.c ****         }
 236:../../../os/common/oslib/src/chheap.c ****         else {
 237:../../../os/common/oslib/src/chheap.c ****           /* The block is bigger than required, must split the excess.*/
 238:../../../os/common/oslib/src/chheap.c ****           heap_header_t *fp;
 239:../../../os/common/oslib/src/chheap.c **** 
 240:../../../os/common/oslib/src/chheap.c ****           fp = H_BLOCK(hp) + pages;
 241:../../../os/common/oslib/src/chheap.c ****           H_NEXT(fp) = H_NEXT(hp);
 242:../../../os/common/oslib/src/chheap.c ****           H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 243:../../../os/common/oslib/src/chheap.c ****           H_NEXT(qp) = fp;
 244:../../../os/common/oslib/src/chheap.c ****         }
 245:../../../os/common/oslib/src/chheap.c ****       }
 246:../../../os/common/oslib/src/chheap.c **** 
 247:../../../os/common/oslib/src/chheap.c ****       /* Setting in the block owner heap and size.*/
 248:../../../os/common/oslib/src/chheap.c ****       H_SIZE(hp) = size;
 249:../../../os/common/oslib/src/chheap.c ****       H_HEAP(hp) = heapp;
 250:../../../os/common/oslib/src/chheap.c **** 
 251:../../../os/common/oslib/src/chheap.c ****       /* Releasing heap mutex/semaphore.*/
 252:../../../os/common/oslib/src/chheap.c ****       H_UNLOCK(heapp);
 253:../../../os/common/oslib/src/chheap.c **** 
 254:../../../os/common/oslib/src/chheap.c ****       /*lint -save -e9087 [11.3] Safe cast.*/
 255:../../../os/common/oslib/src/chheap.c ****       return (void *)H_BLOCK(hp);
 256:../../../os/common/oslib/src/chheap.c ****       /*lint -restore*/
 257:../../../os/common/oslib/src/chheap.c ****     }
 258:../../../os/common/oslib/src/chheap.c **** 
 259:../../../os/common/oslib/src/chheap.c ****     /* Next in the free blocks list.*/
 260:../../../os/common/oslib/src/chheap.c ****     qp = hp;
 261:../../../os/common/oslib/src/chheap.c ****   }
 262:../../../os/common/oslib/src/chheap.c **** 
 263:../../../os/common/oslib/src/chheap.c ****   /* Releasing heap mutex/semaphore.*/
 264:../../../os/common/oslib/src/chheap.c ****   H_UNLOCK(heapp);
 298               		.loc 1 264 0
 299 00ce C401      		movw r24,r8
 300 00d0 0E94 0000 		call chMtxUnlock
 301               	.LVL19:
 265:../../../os/common/oslib/src/chheap.c **** 
 266:../../../os/common/oslib/src/chheap.c ****   /* More memory is required, tries to get it from the associated provider
 267:../../../os/common/oslib/src/chheap.c ****      else fails.*/
 268:../../../os/common/oslib/src/chheap.c ****   if (heapp->provider != NULL) {
 302               		.loc 1 268 0
 303 00d4 D501      		movw r26,r10
 304 00d6 ED91      		ld r30,X+
 305 00d8 FC91      		ld r31,X
 306 00da 3097      		sbiw r30,0
 307 00dc 01F4      		brne .+2
 308 00de 00C0      		rjmp .L15
 269:../../../os/common/oslib/src/chheap.c ****     ahp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT,
 309               		.loc 1 269 0
 310 00e0 C601      		movw r24,r12
 311 00e2 0196      		adiw r24,1
 312 00e4 44E0      		ldi r20,lo8(4)
 313 00e6 50E0      		ldi r21,0
 314 00e8 B701      		movw r22,r14
 315 00ea 880F      		lsl r24
 316 00ec 991F      		rol r25
 317 00ee 880F      		lsl r24
 318 00f0 991F      		rol r25
 319 00f2 0995      		icall
 320               	.LVL20:
 270:../../../os/common/oslib/src/chheap.c ****                           align,
 271:../../../os/common/oslib/src/chheap.c ****                           sizeof (heap_header_t));
 272:../../../os/common/oslib/src/chheap.c ****     if (ahp != NULL) {
 321               		.loc 1 272 0
 322 00f4 0097      		sbiw r24,0
 323 00f6 01F4      		brne .+2
 324 00f8 00C0      		rjmp .L15
 325               	.LVL21:
 273:../../../os/common/oslib/src/chheap.c ****       hp = ahp - 1U;
 274:../../../os/common/oslib/src/chheap.c ****       H_HEAP(hp) = heapp;
 326               		.loc 1 274 0
 327 00fa FC01      		movw r30,r24
 328 00fc 3497      		sbiw r30,4
 329               	.LVL22:
 330 00fe B182      		std Z+1,r11
 331 0100 A082      		st Z,r10
 275:../../../os/common/oslib/src/chheap.c ****       H_SIZE(hp) = size;
 332               		.loc 1 275 0
 333 0102 7382      		std Z+3,r7
 334 0104 6282      		std Z+2,r6
 335               	.LVL23:
 336               	.L12:
 337               	/* epilogue start */
 276:../../../os/common/oslib/src/chheap.c **** 
 277:../../../os/common/oslib/src/chheap.c ****       /*lint -save -e9087 [11.3] Safe cast.*/
 278:../../../os/common/oslib/src/chheap.c ****       return (void *)ahp;
 279:../../../os/common/oslib/src/chheap.c ****       /*lint -restore*/
 280:../../../os/common/oslib/src/chheap.c ****     }
 281:../../../os/common/oslib/src/chheap.c ****   }
 282:../../../os/common/oslib/src/chheap.c **** 
 283:../../../os/common/oslib/src/chheap.c ****   return NULL;
 284:../../../os/common/oslib/src/chheap.c **** }
 338               		.loc 1 284 0
 339 0106 DF91      		pop r29
 340 0108 CF91      		pop r28
 341               	.LVL24:
 342 010a 1F91      		pop r17
 343 010c 0F91      		pop r16
 344 010e FF90      		pop r15
 345 0110 EF90      		pop r14
 346 0112 DF90      		pop r13
 347 0114 CF90      		pop r12
 348 0116 BF90      		pop r11
 349 0118 AF90      		pop r10
 350               	.LVL25:
 351 011a 9F90      		pop r9
 352 011c 8F90      		pop r8
 353               	.LVL26:
 354 011e 7F90      		pop r7
 355 0120 6F90      		pop r6
 356               	.LVL27:
 357 0122 5F90      		pop r5
 358 0124 4F90      		pop r4
 359 0126 3F90      		pop r3
 360 0128 2F90      		pop r2
 361 012a 0895      		ret
 362               	.LVL28:
 363               	.L19:
 364 012c 7901      		movw r14,r18
 365               	.LVL29:
 202:../../../os/common/oslib/src/chheap.c **** 
 366               		.loc 1 202 0
 367 012e 2A01      		movw r4,r20
 208:../../../os/common/oslib/src/chheap.c ****         /* The block is not properly aligned, must split it.*/
 368               		.loc 1 208 0
 369 0130 E217      		cp r30,r18
 370 0132 F307      		cpc r31,r19
 371 0134 00F4      		brsh .L8
 372               	.LVL30:
 373               	.LBB2:
 213:../../../os/common/oslib/src/chheap.c ****         if (bpages > pages) {
 374               		.loc 1 213 0
 375 0136 C901      		movw r24,r18
 376               	.LVL31:
 377 0138 841B      		sub r24,r20
 378 013a 950B      		sbc r25,r21
 379 013c 9595      		asr r25
 380 013e 8795      		ror r24
 381 0140 9595      		asr r25
 382 0142 8795      		ror r24
 383 0144 9383      		std Z+3,r25
 384 0146 8283      		std Z+2,r24
 214:../../../os/common/oslib/src/chheap.c ****           /* The block is bigger than required, must split the excess.*/
 385               		.loc 1 214 0
 386 0148 C616      		cp r12,r22
 387 014a D706      		cpc r13,r23
 388 014c 00F4      		brsh .L9
 389               	.LBB3:
 219:../../../os/common/oslib/src/chheap.c ****           H_PAGES(fp) = (bpages - pages) - 1U;
 390               		.loc 1 219 0
 391 014e D601      		movw r26,r12
 392 0150 1196      		adiw r26,1
 393 0152 AA0F      		lsl r26
 394 0154 BB1F      		rol r27
 395 0156 AA0F      		lsl r26
 396 0158 BB1F      		rol r27
 397 015a A20F      		add r26,r18
 398 015c B31F      		adc r27,r19
 399               	.LVL32:
 400 015e C094      		com r12
 401 0160 D094      		com r13
 402               	.LVL33:
 220:../../../os/common/oslib/src/chheap.c **** 
 403               		.loc 1 220 0
 404 0162 6C0D      		add r22,r12
 405 0164 7D1D      		adc r23,r13
 406               	.LVL34:
 407 0166 1396      		adiw r26,2+1
 408 0168 7C93      		st X,r23
 409 016a 6E93      		st -X,r22
 410 016c 1297      		sbiw r26,2
 223:../../../os/common/oslib/src/chheap.c ****           H_NEXT(hp) = fp;
 411               		.loc 1 223 0
 412 016e 8081      		ld r24,Z
 413 0170 9181      		ldd r25,Z+1
 414 0172 1196      		adiw r26,1
 415 0174 9C93      		st X,r25
 416 0176 8E93      		st -X,r24
 224:../../../os/common/oslib/src/chheap.c ****         }
 417               		.loc 1 224 0
 418 0178 B183      		std Z+1,r27
 419 017a A083      		st Z,r26
 420               	.LVL35:
 421               	.L9:
 422 017c 2901      		movw r4,r18
 423 017e 84E0      		ldi r24,4
 424 0180 480E      		add r4,r24
 425 0182 511C      		adc r5,__zero_reg__
 426               	.LBE3:
 427               	.LBE2:
 428 0184 00C0      		rjmp .L10
 429               	.LVL36:
 430               	.L8:
 232:../../../os/common/oslib/src/chheap.c ****           /* Exact size, getting the whole block.*/
 431               		.loc 1 232 0
 432 0186 C016      		cp r12,r16
 433 0188 D106      		cpc r13,r17
 434 018a 01F0      		breq .L20
 435               	.LBB4:
 240:../../../os/common/oslib/src/chheap.c ****           H_NEXT(fp) = H_NEXT(hp);
 436               		.loc 1 240 0
 437 018c C601      		movw r24,r12
 438               	.LVL37:
 439 018e 0196      		adiw r24,1
 440 0190 880F      		lsl r24
 441 0192 991F      		rol r25
 442 0194 880F      		lsl r24
 443 0196 991F      		rol r25
 444 0198 8E0F      		add r24,r30
 445 019a 9F1F      		adc r25,r31
 446               	.LVL38:
 241:../../../os/common/oslib/src/chheap.c ****           H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 447               		.loc 1 241 0
 448 019c 2081      		ld r18,Z
 449 019e 3181      		ldd r19,Z+1
 450 01a0 DC01      		movw r26,r24
 451 01a2 2D93      		st X+,r18
 452 01a4 3C93      		st X,r19
 242:../../../os/common/oslib/src/chheap.c ****           H_NEXT(qp) = fp;
 453               		.loc 1 242 0
 454 01a6 9F01      		movw r18,r30
 455 01a8 281B      		sub r18,r24
 456 01aa 390B      		sbc r19,r25
 457 01ac D101      		movw r26,r2
 458 01ae A20F      		add r26,r18
 459 01b0 B31F      		adc r27,r19
 460 01b2 9D01      		movw r18,r26
 461 01b4 3595      		asr r19
 462 01b6 2795      		ror r18
 463 01b8 3595      		asr r19
 464 01ba 2795      		ror r18
 465 01bc DC01      		movw r26,r24
 466 01be 1396      		adiw r26,2+1
 467 01c0 3C93      		st X,r19
 468 01c2 2E93      		st -X,r18
 469 01c4 1297      		sbiw r26,2
 243:../../../os/common/oslib/src/chheap.c ****         }
 470               		.loc 1 243 0
 471 01c6 9983      		std Y+1,r25
 472 01c8 8883      		st Y,r24
 473               	.LBE4:
 196:../../../os/common/oslib/src/chheap.c **** 
 474               		.loc 1 196 0
 475 01ca 7F01      		movw r14,r30
 476               	.LVL39:
 477               	.L10:
 248:../../../os/common/oslib/src/chheap.c ****       H_HEAP(hp) = heapp;
 478               		.loc 1 248 0
 479 01cc F701      		movw r30,r14
 480 01ce 7382      		std Z+3,r7
 481 01d0 6282      		std Z+2,r6
 249:../../../os/common/oslib/src/chheap.c **** 
 482               		.loc 1 249 0
 483 01d2 B182      		std Z+1,r11
 484 01d4 A082      		st Z,r10
 252:../../../os/common/oslib/src/chheap.c **** 
 485               		.loc 1 252 0
 486 01d6 C401      		movw r24,r8
 487 01d8 0E94 0000 		call chMtxUnlock
 488               	.LVL40:
 255:../../../os/common/oslib/src/chheap.c ****       /*lint -restore*/
 489               		.loc 1 255 0
 490 01dc C201      		movw r24,r4
 491 01de 00C0      		rjmp .L12
 492               	.LVL41:
 493               	.L17:
 180:../../../os/common/oslib/src/chheap.c ****   }
 494               		.loc 1 180 0
 495 01e0 F0E0      		ldi r31,lo8(default_heap)
 496 01e2 AF2E      		mov r10,r31
 497 01e4 F0E0      		ldi r31,hi8(default_heap)
 498 01e6 BF2E      		mov r11,r31
 499               	.LVL42:
 500 01e8 00C0      		rjmp .L4
 501               	.LVL43:
 502               	.L20:
 234:../../../os/common/oslib/src/chheap.c ****         }
 503               		.loc 1 234 0
 504 01ea 8081      		ld r24,Z
 505 01ec 9181      		ldd r25,Z+1
 506               	.LVL44:
 507 01ee 9983      		std Y+1,r25
 508 01f0 8883      		st Y,r24
 196:../../../os/common/oslib/src/chheap.c **** 
 509               		.loc 1 196 0
 510 01f2 7F01      		movw r14,r30
 511               	.LVL45:
 512 01f4 00C0      		rjmp .L10
 513               	.LVL46:
 514               	.L15:
 283:../../../os/common/oslib/src/chheap.c **** }
 515               		.loc 1 283 0
 516 01f6 80E0      		ldi r24,0
 517 01f8 90E0      		ldi r25,0
 518 01fa 00C0      		rjmp .L12
 519               		.cfi_endproc
 520               	.LFE132:
 522               		.section	.text.chHeapFree,"ax",@progbits
 523               	.global	chHeapFree
 525               	chHeapFree:
 526               	.LFB133:
 285:../../../os/common/oslib/src/chheap.c **** 
 286:../../../os/common/oslib/src/chheap.c **** /**
 287:../../../os/common/oslib/src/chheap.c ****  * @brief   Frees a previously allocated memory block.
 288:../../../os/common/oslib/src/chheap.c ****  *
 289:../../../os/common/oslib/src/chheap.c ****  * @param[in] p         pointer to the memory block to be freed
 290:../../../os/common/oslib/src/chheap.c ****  *
 291:../../../os/common/oslib/src/chheap.c ****  * @api
 292:../../../os/common/oslib/src/chheap.c ****  */
 293:../../../os/common/oslib/src/chheap.c **** void chHeapFree(void *p) {
 527               		.loc 1 293 0
 528               		.cfi_startproc
 529               	.LVL47:
 530 0000 EF92      		push r14
 531               	.LCFI18:
 532               		.cfi_def_cfa_offset 3
 533               		.cfi_offset 14, -2
 534 0002 FF92      		push r15
 535               	.LCFI19:
 536               		.cfi_def_cfa_offset 4
 537               		.cfi_offset 15, -3
 538 0004 0F93      		push r16
 539               	.LCFI20:
 540               		.cfi_def_cfa_offset 5
 541               		.cfi_offset 16, -4
 542 0006 1F93      		push r17
 543               	.LCFI21:
 544               		.cfi_def_cfa_offset 6
 545               		.cfi_offset 17, -5
 546 0008 CF93      		push r28
 547               	.LCFI22:
 548               		.cfi_def_cfa_offset 7
 549               		.cfi_offset 28, -6
 550 000a DF93      		push r29
 551               	.LCFI23:
 552               		.cfi_def_cfa_offset 8
 553               		.cfi_offset 29, -7
 554               	/* prologue: function */
 555               	/* frame size = 0 */
 556               	/* stack size = 6 */
 557               	.L__stack_usage = 6
 294:../../../os/common/oslib/src/chheap.c ****   heap_header_t *qp, *hp;
 295:../../../os/common/oslib/src/chheap.c ****   memory_heap_t *heapp;
 296:../../../os/common/oslib/src/chheap.c **** 
 297:../../../os/common/oslib/src/chheap.c ****   chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 298:../../../os/common/oslib/src/chheap.c **** 
 299:../../../os/common/oslib/src/chheap.c ****   /*lint -save -e9087 [11.3] Safe cast.*/
 300:../../../os/common/oslib/src/chheap.c ****   hp = (heap_header_t *)p - 1U;
 558               		.loc 1 300 0
 559 000c EC01      		movw r28,r24
 560 000e 2497      		sbiw r28,4
 561               	.LVL48:
 301:../../../os/common/oslib/src/chheap.c ****   /*lint -restore*/
 302:../../../os/common/oslib/src/chheap.c ****   heapp = H_HEAP(hp);
 562               		.loc 1 302 0
 563 0010 E880      		ld r14,Y
 564 0012 F980      		ldd r15,Y+1
 565               	.LVL49:
 303:../../../os/common/oslib/src/chheap.c ****   qp = &heapp->header;
 566               		.loc 1 303 0
 567 0014 8701      		movw r16,r14
 568 0016 0E5F      		subi r16,-2
 569 0018 1F4F      		sbci r17,-1
 570               	.LVL50:
 304:../../../os/common/oslib/src/chheap.c **** 
 305:../../../os/common/oslib/src/chheap.c ****   /* Size is converted in number of elementary allocation units.*/
 306:../../../os/common/oslib/src/chheap.c ****   H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 571               		.loc 1 306 0
 572 001a 8A81      		ldd r24,Y+2
 573 001c 9B81      		ldd r25,Y+3
 574               	.LVL51:
 575 001e 0396      		adiw r24,3
 307:../../../os/common/oslib/src/chheap.c ****                                CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 576               		.loc 1 307 0
 577 0020 9695      		lsr r25
 578 0022 8795      		ror r24
 579 0024 9695      		lsr r25
 580 0026 8795      		ror r24
 306:../../../os/common/oslib/src/chheap.c ****                                CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 581               		.loc 1 306 0
 582 0028 9B83      		std Y+3,r25
 583 002a 8A83      		std Y+2,r24
 308:../../../os/common/oslib/src/chheap.c **** 
 309:../../../os/common/oslib/src/chheap.c ****   /* Taking heap mutex/semaphore.*/
 310:../../../os/common/oslib/src/chheap.c ****   H_LOCK(heapp);
 584               		.loc 1 310 0
 585 002c 86E0      		ldi r24,6
 586 002e E80E      		add r14,r24
 587 0030 F11C      		adc r15,__zero_reg__
 588               	.LVL52:
 589 0032 C701      		movw r24,r14
 590 0034 0E94 0000 		call chMtxLock
 591               	.LVL53:
 303:../../../os/common/oslib/src/chheap.c **** 
 592               		.loc 1 303 0
 593 0038 F801      		movw r30,r16
 594               	.LVL54:
 595               	.L28:
 311:../../../os/common/oslib/src/chheap.c **** 
 312:../../../os/common/oslib/src/chheap.c ****   while (true) {
 313:../../../os/common/oslib/src/chheap.c ****     chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 314:../../../os/common/oslib/src/chheap.c **** 
 315:../../../os/common/oslib/src/chheap.c ****     if (((qp == &heapp->header) || (hp > qp)) &&
 596               		.loc 1 315 0
 597 003a E017      		cp r30,r16
 598 003c F107      		cpc r31,r17
 599 003e 01F0      		breq .L22
 600               	.L33:
 601               		.loc 1 315 0 is_stmt 0 discriminator 2
 602 0040 EC17      		cp r30,r28
 603 0042 FD07      		cpc r31,r29
 604 0044 00F0      		brlo .L22
 605 0046 0190      		ld __tmp_reg__,Z+
 606 0048 F081      		ld r31,Z
 607 004a E02D      		mov r30,__tmp_reg__
 608               	.LVL55:
 609               		.loc 1 315 0
 610 004c E017      		cp r30,r16
 611 004e F107      		cpc r31,r17
 612 0050 01F4      		brne .L33
 613               	.L22:
 316:../../../os/common/oslib/src/chheap.c ****         ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 614               		.loc 1 316 0 is_stmt 1 discriminator 3
 615 0052 2081      		ld r18,Z
 616 0054 3181      		ldd r19,Z+1
 315:../../../os/common/oslib/src/chheap.c ****         ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 617               		.loc 1 315 0 discriminator 3
 618 0056 2115      		cp r18,__zero_reg__
 619 0058 3105      		cpc r19,__zero_reg__
 620 005a 01F0      		breq .L24
 621               		.loc 1 316 0
 622 005c C217      		cp r28,r18
 623 005e D307      		cpc r29,r19
 624 0060 00F0      		brlo .L24
 625 0062 F901      		movw r30,r18
 626               	.LVL56:
 317:../../../os/common/oslib/src/chheap.c ****       /* Insertion after qp.*/
 318:../../../os/common/oslib/src/chheap.c ****       H_NEXT(hp) = H_NEXT(qp);
 319:../../../os/common/oslib/src/chheap.c ****       H_NEXT(qp) = hp;
 320:../../../os/common/oslib/src/chheap.c ****       /* Verifies if the newly inserted block should be merged.*/
 321:../../../os/common/oslib/src/chheap.c ****       if (H_LIMIT(hp) == H_NEXT(hp)) {
 322:../../../os/common/oslib/src/chheap.c ****         /* Merge with the next block.*/
 323:../../../os/common/oslib/src/chheap.c ****         H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 324:../../../os/common/oslib/src/chheap.c ****         H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 325:../../../os/common/oslib/src/chheap.c ****       }
 326:../../../os/common/oslib/src/chheap.c ****       if ((H_LIMIT(qp) == hp)) {
 327:../../../os/common/oslib/src/chheap.c ****         /* Merge with the previous block.*/
 328:../../../os/common/oslib/src/chheap.c ****         H_PAGES(qp) += H_PAGES(hp) + 1U;
 329:../../../os/common/oslib/src/chheap.c ****         H_NEXT(qp) = H_NEXT(hp);
 330:../../../os/common/oslib/src/chheap.c ****       }
 331:../../../os/common/oslib/src/chheap.c ****       break;
 332:../../../os/common/oslib/src/chheap.c ****     }
 333:../../../os/common/oslib/src/chheap.c ****     qp = H_NEXT(qp);
 334:../../../os/common/oslib/src/chheap.c ****   }
 627               		.loc 1 334 0
 628 0064 00C0      		rjmp .L28
 629               	.LVL57:
 630               	.L24:
 318:../../../os/common/oslib/src/chheap.c ****       H_NEXT(qp) = hp;
 631               		.loc 1 318 0
 632 0066 3983      		std Y+1,r19
 633 0068 2883      		st Y,r18
 319:../../../os/common/oslib/src/chheap.c ****       /* Verifies if the newly inserted block should be merged.*/
 634               		.loc 1 319 0
 635 006a D183      		std Z+1,r29
 636 006c C083      		st Z,r28
 321:../../../os/common/oslib/src/chheap.c ****         /* Merge with the next block.*/
 637               		.loc 1 321 0
 638 006e 8A81      		ldd r24,Y+2
 639 0070 9B81      		ldd r25,Y+3
 640 0072 DC01      		movw r26,r24
 641 0074 1196      		adiw r26,1
 642 0076 AA0F      		lsl r26
 643 0078 BB1F      		rol r27
 644 007a AA0F      		lsl r26
 645 007c BB1F      		rol r27
 646 007e AC0F      		add r26,r28
 647 0080 BD1F      		adc r27,r29
 648 0082 2881      		ld r18,Y
 649 0084 3981      		ldd r19,Y+1
 650 0086 A217      		cp r26,r18
 651 0088 B307      		cpc r27,r19
 652 008a 01F0      		breq .L34
 653               	.L26:
 326:../../../os/common/oslib/src/chheap.c ****         /* Merge with the previous block.*/
 654               		.loc 1 326 0
 655 008c 2281      		ldd r18,Z+2
 656 008e 3381      		ldd r19,Z+3
 657 0090 C901      		movw r24,r18
 658 0092 0196      		adiw r24,1
 659 0094 880F      		lsl r24
 660 0096 991F      		rol r25
 661 0098 880F      		lsl r24
 662 009a 991F      		rol r25
 663 009c 8E0F      		add r24,r30
 664 009e 9F1F      		adc r25,r31
 665 00a0 C817      		cp r28,r24
 666 00a2 D907      		cpc r29,r25
 667 00a4 01F0      		breq .L35
 668               	.L27:
 335:../../../os/common/oslib/src/chheap.c **** 
 336:../../../os/common/oslib/src/chheap.c ****   /* Releasing heap mutex/semaphore.*/
 337:../../../os/common/oslib/src/chheap.c ****   H_UNLOCK(heapp);
 669               		.loc 1 337 0
 670 00a6 C701      		movw r24,r14
 671               	/* epilogue start */
 338:../../../os/common/oslib/src/chheap.c **** 
 339:../../../os/common/oslib/src/chheap.c ****   return;
 340:../../../os/common/oslib/src/chheap.c **** }
 672               		.loc 1 340 0
 673 00a8 DF91      		pop r29
 674 00aa CF91      		pop r28
 675               	.LVL58:
 676 00ac 1F91      		pop r17
 677 00ae 0F91      		pop r16
 678 00b0 FF90      		pop r15
 679 00b2 EF90      		pop r14
 680               	.LVL59:
 337:../../../os/common/oslib/src/chheap.c **** 
 681               		.loc 1 337 0
 682 00b4 0C94 0000 		jmp chMtxUnlock
 683               	.LVL60:
 684               	.L34:
 323:../../../os/common/oslib/src/chheap.c ****         H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 685               		.loc 1 323 0
 686 00b8 1296      		adiw r26,2
 687 00ba 2D91      		ld r18,X+
 688 00bc 3C91      		ld r19,X
 689 00be 1397      		sbiw r26,2+1
 690 00c0 820F      		add r24,r18
 691 00c2 931F      		adc r25,r19
 692 00c4 0196      		adiw r24,1
 693 00c6 9B83      		std Y+3,r25
 694 00c8 8A83      		std Y+2,r24
 324:../../../os/common/oslib/src/chheap.c ****       }
 695               		.loc 1 324 0
 696 00ca 8D91      		ld r24,X+
 697 00cc 9C91      		ld r25,X
 698 00ce 9983      		std Y+1,r25
 699 00d0 8883      		st Y,r24
 700 00d2 00C0      		rjmp .L26
 701               	.L35:
 328:../../../os/common/oslib/src/chheap.c ****         H_NEXT(qp) = H_NEXT(hp);
 702               		.loc 1 328 0
 703 00d4 8A81      		ldd r24,Y+2
 704 00d6 9B81      		ldd r25,Y+3
 705 00d8 280F      		add r18,r24
 706 00da 391F      		adc r19,r25
 707 00dc 2F5F      		subi r18,-1
 708 00de 3F4F      		sbci r19,-1
 709 00e0 3383      		std Z+3,r19
 710 00e2 2283      		std Z+2,r18
 329:../../../os/common/oslib/src/chheap.c ****       }
 711               		.loc 1 329 0
 712 00e4 8881      		ld r24,Y
 713 00e6 9981      		ldd r25,Y+1
 714 00e8 9183      		std Z+1,r25
 715 00ea 8083      		st Z,r24
 716 00ec 00C0      		rjmp .L27
 717               		.cfi_endproc
 718               	.LFE133:
 720               		.section	.text.chHeapStatus,"ax",@progbits
 721               	.global	chHeapStatus
 723               	chHeapStatus:
 724               	.LFB134:
 341:../../../os/common/oslib/src/chheap.c **** 
 342:../../../os/common/oslib/src/chheap.c **** /**
 343:../../../os/common/oslib/src/chheap.c ****  * @brief   Reports the heap status.
 344:../../../os/common/oslib/src/chheap.c ****  * @note    This function is meant to be used in the test suite, it should
 345:../../../os/common/oslib/src/chheap.c ****  *          not be really useful for the application code.
 346:../../../os/common/oslib/src/chheap.c ****  *
 347:../../../os/common/oslib/src/chheap.c ****  * @param[in] heapp     pointer to a heap descriptor or @p NULL in order to
 348:../../../os/common/oslib/src/chheap.c ****  *                      access the default heap.
 349:../../../os/common/oslib/src/chheap.c ****  * @param[in] totalp    pointer to a variable that will receive the total
 350:../../../os/common/oslib/src/chheap.c ****  *                      fragmented free space or @p NULL
 351:../../../os/common/oslib/src/chheap.c ****  * @param[in] largestp  pointer to a variable that will receive the largest
 352:../../../os/common/oslib/src/chheap.c ****  *                      free free block found space or @p NULL
 353:../../../os/common/oslib/src/chheap.c ****  * @return              The number of fragments in the heap.
 354:../../../os/common/oslib/src/chheap.c ****  *
 355:../../../os/common/oslib/src/chheap.c ****  * @api
 356:../../../os/common/oslib/src/chheap.c ****  */
 357:../../../os/common/oslib/src/chheap.c **** size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 725               		.loc 1 357 0
 726               		.cfi_startproc
 727               	.LVL61:
 728 0000 CF92      		push r12
 729               	.LCFI24:
 730               		.cfi_def_cfa_offset 3
 731               		.cfi_offset 12, -2
 732 0002 DF92      		push r13
 733               	.LCFI25:
 734               		.cfi_def_cfa_offset 4
 735               		.cfi_offset 13, -3
 736 0004 EF92      		push r14
 737               	.LCFI26:
 738               		.cfi_def_cfa_offset 5
 739               		.cfi_offset 14, -4
 740 0006 FF92      		push r15
 741               	.LCFI27:
 742               		.cfi_def_cfa_offset 6
 743               		.cfi_offset 15, -5
 744 0008 0F93      		push r16
 745               	.LCFI28:
 746               		.cfi_def_cfa_offset 7
 747               		.cfi_offset 16, -6
 748 000a 1F93      		push r17
 749               	.LCFI29:
 750               		.cfi_def_cfa_offset 8
 751               		.cfi_offset 17, -7
 752 000c CF93      		push r28
 753               	.LCFI30:
 754               		.cfi_def_cfa_offset 9
 755               		.cfi_offset 28, -8
 756 000e DF93      		push r29
 757               	.LCFI31:
 758               		.cfi_def_cfa_offset 10
 759               		.cfi_offset 29, -9
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 8 */
 763               	.L__stack_usage = 8
 764 0010 EC01      		movw r28,r24
 765 0012 7B01      		movw r14,r22
 766 0014 8A01      		movw r16,r20
 358:../../../os/common/oslib/src/chheap.c ****   heap_header_t *qp;
 359:../../../os/common/oslib/src/chheap.c ****   size_t n, tpages, lpages;
 360:../../../os/common/oslib/src/chheap.c **** 
 361:../../../os/common/oslib/src/chheap.c ****   if (heapp == NULL) {
 767               		.loc 1 361 0
 768 0016 892B      		or r24,r25
 769 0018 01F4      		brne .+2
 770 001a 00C0      		rjmp .L49
 771               	.L37:
 772               	.LVL62:
 362:../../../os/common/oslib/src/chheap.c ****     heapp = &default_heap;
 363:../../../os/common/oslib/src/chheap.c ****   }
 364:../../../os/common/oslib/src/chheap.c **** 
 365:../../../os/common/oslib/src/chheap.c ****   H_LOCK(heapp);
 773               		.loc 1 365 0
 774 001c 6E01      		movw r12,r28
 775 001e 86E0      		ldi r24,6
 776 0020 C80E      		add r12,r24
 777 0022 D11C      		adc r13,__zero_reg__
 778 0024 C601      		movw r24,r12
 779 0026 0E94 0000 		call chMtxLock
 780               	.LVL63:
 366:../../../os/common/oslib/src/chheap.c ****   tpages = 0U;
 367:../../../os/common/oslib/src/chheap.c ****   lpages = 0U;
 368:../../../os/common/oslib/src/chheap.c ****   n = 0U;
 369:../../../os/common/oslib/src/chheap.c ****   qp = &heapp->header;
 781               		.loc 1 369 0
 782 002a FE01      		movw r30,r28
 783 002c 3296      		adiw r30,2
 784               	.LVL64:
 367:../../../os/common/oslib/src/chheap.c ****   n = 0U;
 785               		.loc 1 367 0
 786 002e 80E0      		ldi r24,0
 787 0030 90E0      		ldi r25,0
 366:../../../os/common/oslib/src/chheap.c ****   tpages = 0U;
 788               		.loc 1 366 0
 789 0032 A0E0      		ldi r26,0
 790 0034 B0E0      		ldi r27,0
 368:../../../os/common/oslib/src/chheap.c ****   qp = &heapp->header;
 791               		.loc 1 368 0
 792 0036 C0E0      		ldi r28,0
 793 0038 D0E0      		ldi r29,0
 794               	.LVL65:
 795               	.L38:
 370:../../../os/common/oslib/src/chheap.c ****   while (H_NEXT(qp) != NULL) {
 796               		.loc 1 370 0
 797 003a 0190      		ld __tmp_reg__,Z+
 798 003c F081      		ld r31,Z
 799 003e E02D      		mov r30,__tmp_reg__
 800               	.LVL66:
 801 0040 3097      		sbiw r30,0
 802 0042 01F0      		breq .L50
 803               	.L40:
 804               	.LBB5:
 371:../../../os/common/oslib/src/chheap.c ****     size_t pages = H_PAGES(H_NEXT(qp));
 805               		.loc 1 371 0
 806 0044 2281      		ldd r18,Z+2
 807 0046 3381      		ldd r19,Z+3
 808               	.LVL67:
 372:../../../os/common/oslib/src/chheap.c **** 
 373:../../../os/common/oslib/src/chheap.c ****     /* Updating counters.*/
 374:../../../os/common/oslib/src/chheap.c ****     n++;
 809               		.loc 1 374 0
 810 0048 2196      		adiw r28,1
 811               	.LVL68:
 375:../../../os/common/oslib/src/chheap.c ****     tpages += pages;
 812               		.loc 1 375 0
 813 004a A20F      		add r26,r18
 814 004c B31F      		adc r27,r19
 815               	.LVL69:
 816 004e 8217      		cp r24,r18
 817 0050 9307      		cpc r25,r19
 818 0052 00F4      		brsh .L38
 819 0054 C901      		movw r24,r18
 820               	.LVL70:
 821               	.LBE5:
 370:../../../os/common/oslib/src/chheap.c ****     size_t pages = H_PAGES(H_NEXT(qp));
 822               		.loc 1 370 0
 823 0056 0190      		ld __tmp_reg__,Z+
 824 0058 F081      		ld r31,Z
 825 005a E02D      		mov r30,__tmp_reg__
 826               	.LVL71:
 827 005c 3097      		sbiw r30,0
 828 005e 01F4      		brne .L40
 829               	.LVL72:
 830               	.L50:
 376:../../../os/common/oslib/src/chheap.c ****     if (pages > lpages) {
 377:../../../os/common/oslib/src/chheap.c ****       lpages = pages;
 378:../../../os/common/oslib/src/chheap.c ****     }
 379:../../../os/common/oslib/src/chheap.c **** 
 380:../../../os/common/oslib/src/chheap.c ****     qp = H_NEXT(qp);
 381:../../../os/common/oslib/src/chheap.c ****   }
 382:../../../os/common/oslib/src/chheap.c **** 
 383:../../../os/common/oslib/src/chheap.c ****   /* Writing out fragmented free memory.*/
 384:../../../os/common/oslib/src/chheap.c ****   if (totalp != NULL) {
 831               		.loc 1 384 0
 832 0060 E114      		cp r14,__zero_reg__
 833 0062 F104      		cpc r15,__zero_reg__
 834 0064 01F0      		breq .L41
 385:../../../os/common/oslib/src/chheap.c ****     *totalp = tpages * CH_HEAP_ALIGNMENT;
 835               		.loc 1 385 0
 836 0066 AA0F      		lsl r26
 837 0068 BB1F      		rol r27
 838 006a AA0F      		lsl r26
 839 006c BB1F      		rol r27
 840               	.LVL73:
 841 006e F701      		movw r30,r14
 842 0070 B183      		std Z+1,r27
 843 0072 A083      		st Z,r26
 844               	.L41:
 386:../../../os/common/oslib/src/chheap.c ****   }
 387:../../../os/common/oslib/src/chheap.c **** 
 388:../../../os/common/oslib/src/chheap.c ****   /* Writing out unfragmented free memory.*/
 389:../../../os/common/oslib/src/chheap.c ****   if (largestp != NULL) {
 845               		.loc 1 389 0
 846 0074 0115      		cp r16,__zero_reg__
 847 0076 1105      		cpc r17,__zero_reg__
 848 0078 01F0      		breq .L42
 390:../../../os/common/oslib/src/chheap.c ****     *largestp = lpages * CH_HEAP_ALIGNMENT;
 849               		.loc 1 390 0
 850 007a 880F      		lsl r24
 851 007c 991F      		rol r25
 852 007e 880F      		lsl r24
 853 0080 991F      		rol r25
 854               	.LVL74:
 855 0082 F801      		movw r30,r16
 856 0084 9183      		std Z+1,r25
 857 0086 8083      		st Z,r24
 858               	.L42:
 391:../../../os/common/oslib/src/chheap.c ****   }
 392:../../../os/common/oslib/src/chheap.c ****   H_UNLOCK(heapp);
 859               		.loc 1 392 0
 860 0088 C601      		movw r24,r12
 861 008a 0E94 0000 		call chMtxUnlock
 862               	.LVL75:
 393:../../../os/common/oslib/src/chheap.c **** 
 394:../../../os/common/oslib/src/chheap.c ****   return n;
 395:../../../os/common/oslib/src/chheap.c **** }
 863               		.loc 1 395 0
 864 008e CE01      		movw r24,r28
 865               	/* epilogue start */
 866 0090 DF91      		pop r29
 867 0092 CF91      		pop r28
 868               	.LVL76:
 869 0094 1F91      		pop r17
 870 0096 0F91      		pop r16
 871               	.LVL77:
 872 0098 FF90      		pop r15
 873 009a EF90      		pop r14
 874               	.LVL78:
 875 009c DF90      		pop r13
 876 009e CF90      		pop r12
 877               	.LVL79:
 878 00a0 0895      		ret
 879               	.LVL80:
 880               	.L49:
 362:../../../os/common/oslib/src/chheap.c ****   }
 881               		.loc 1 362 0
 882 00a2 C0E0      		ldi r28,lo8(default_heap)
 883 00a4 D0E0      		ldi r29,hi8(default_heap)
 884 00a6 00C0      		rjmp .L37
 885               		.cfi_endproc
 886               	.LFE134:
 888               		.section	.bss.default_heap,"aw",@nobits
 891               	default_heap:
 892 0000 0000 0000 		.zero	14
 892      0000 0000 
 892      0000 0000 
 892      0000 
 893               		.text
 894               	.Letext0:
 895               		.file 2 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 896               		.file 3 "/usr/lib/avr/include/stdint.h"
 897               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 898               		.file 5 "../../../os/rt/include/chsystypes.h"
 899               		.file 6 "../../../os/rt/include/chschd.h"
 900               		.file 7 "../../../os/rt/include/chtime.h"
 901               		.file 8 "../../../os/common/ports/AVR/chcore.h"
 902               		.file 9 "../../../os/rt/include/chsem.h"
 903               		.file 10 "../../../os/rt/include/chmtx.h"
 904               		.file 11 "../../../os/common/oslib/include/chmemcore.h"
 905               		.file 12 "../../../os/common/oslib/include/chheap.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chheap.c
     /tmp/ccLytcjB.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLytcjB.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLytcjB.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLytcjB.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLytcjB.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLytcjB.s:13     .text._heap_init:0000000000000000 _heap_init
     /tmp/ccLytcjB.s:891    .bss.default_heap:0000000000000000 default_heap
     /tmp/ccLytcjB.s:46     .text.chHeapObjectInit:0000000000000000 chHeapObjectInit
     /tmp/ccLytcjB.s:105    .text.chHeapAllocAligned:0000000000000000 chHeapAllocAligned
     /tmp/ccLytcjB.s:525    .text.chHeapFree:0000000000000000 chHeapFree
     /tmp/ccLytcjB.s:723    .text.chHeapStatus:0000000000000000 chHeapStatus

UNDEFINED SYMBOLS
chCoreAllocAlignedWithOffset
chMtxObjectInit
chMtxLock
chMtxUnlock
__do_clear_bss
