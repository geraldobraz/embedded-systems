   1               		.file	"hal_pwm.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.pwmInit,"ax",@progbits
  11               	.global	pwmInit
  13               	pwmInit:
  14               	.LFB168:
  15               		.file 1 "../../../os/hal/src/hal_pwm.c"
   1:../../../os/hal/src/hal_pwm.c **** /*
   2:../../../os/hal/src/hal_pwm.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_pwm.c **** 
   4:../../../os/hal/src/hal_pwm.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_pwm.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_pwm.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_pwm.c **** 
   8:../../../os/hal/src/hal_pwm.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_pwm.c **** 
  10:../../../os/hal/src/hal_pwm.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_pwm.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_pwm.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_pwm.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_pwm.c ****     limitations under the License.
  15:../../../os/hal/src/hal_pwm.c **** */
  16:../../../os/hal/src/hal_pwm.c **** 
  17:../../../os/hal/src/hal_pwm.c **** /**
  18:../../../os/hal/src/hal_pwm.c ****  * @file    hal_pwm.c
  19:../../../os/hal/src/hal_pwm.c ****  * @brief   PWM Driver code.
  20:../../../os/hal/src/hal_pwm.c ****  *
  21:../../../os/hal/src/hal_pwm.c ****  * @addtogroup PWM
  22:../../../os/hal/src/hal_pwm.c ****  * @{
  23:../../../os/hal/src/hal_pwm.c ****  */
  24:../../../os/hal/src/hal_pwm.c **** 
  25:../../../os/hal/src/hal_pwm.c **** #include "hal.h"
  26:../../../os/hal/src/hal_pwm.c **** 
  27:../../../os/hal/src/hal_pwm.c **** #if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_pwm.c **** 
  29:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_pwm.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_pwm.c **** 
  33:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_pwm.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_pwm.c **** 
  37:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_pwm.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_pwm.c **** 
  41:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_pwm.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_pwm.c **** 
  45:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_pwm.c **** /* Driver exported functions.                                                */
  47:../../../os/hal/src/hal_pwm.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_pwm.c **** 
  49:../../../os/hal/src/hal_pwm.c **** /**
  50:../../../os/hal/src/hal_pwm.c ****  * @brief   PWM Driver initialization.
  51:../../../os/hal/src/hal_pwm.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
  52:../../../os/hal/src/hal_pwm.c ****  *          no need to explicitly initialize the driver.
  53:../../../os/hal/src/hal_pwm.c ****  *
  54:../../../os/hal/src/hal_pwm.c ****  * @init
  55:../../../os/hal/src/hal_pwm.c ****  */
  56:../../../os/hal/src/hal_pwm.c **** void pwmInit(void) {
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  57:../../../os/hal/src/hal_pwm.c **** 
  58:../../../os/hal/src/hal_pwm.c ****   pwm_lld_init();
  22               		.loc 1 58 0
  23 0000 0C94 0000 		jmp pwm_lld_init
  24               	.LVL0:
  25               		.cfi_endproc
  26               	.LFE168:
  28               		.section	.text.pwmObjectInit,"ax",@progbits
  29               	.global	pwmObjectInit
  31               	pwmObjectInit:
  32               	.LFB169:
  59:../../../os/hal/src/hal_pwm.c **** }
  60:../../../os/hal/src/hal_pwm.c **** 
  61:../../../os/hal/src/hal_pwm.c **** /**
  62:../../../os/hal/src/hal_pwm.c ****  * @brief   Initializes the standard part of a @p PWMDriver structure.
  63:../../../os/hal/src/hal_pwm.c ****  *
  64:../../../os/hal/src/hal_pwm.c ****  * @param[out] pwmp     pointer to a @p PWMDriver object
  65:../../../os/hal/src/hal_pwm.c ****  *
  66:../../../os/hal/src/hal_pwm.c ****  * @init
  67:../../../os/hal/src/hal_pwm.c ****  */
  68:../../../os/hal/src/hal_pwm.c **** void pwmObjectInit(PWMDriver *pwmp) {
  33               		.loc 1 68 0
  34               		.cfi_startproc
  35               	.LVL1:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40 0000 FC01      		movw r30,r24
  69:../../../os/hal/src/hal_pwm.c **** 
  70:../../../os/hal/src/hal_pwm.c ****   pwmp->state    = PWM_STOP;
  41               		.loc 1 70 0
  42 0002 81E0      		ldi r24,lo8(1)
  43               	.LVL2:
  44 0004 8083      		st Z,r24
  71:../../../os/hal/src/hal_pwm.c ****   pwmp->config   = NULL;
  45               		.loc 1 71 0
  46 0006 1282      		std Z+2,__zero_reg__
  47 0008 1182      		std Z+1,__zero_reg__
  72:../../../os/hal/src/hal_pwm.c ****   pwmp->enabled  = 0;
  48               		.loc 1 72 0
  49 000a 1582      		std Z+5,__zero_reg__
  73:../../../os/hal/src/hal_pwm.c ****   pwmp->channels = 0;
  50               		.loc 1 73 0
  51 000c 1682      		std Z+6,__zero_reg__
  52 000e 0895      		ret
  53               		.cfi_endproc
  54               	.LFE169:
  56               		.section	.text.pwmStart,"ax",@progbits
  57               	.global	pwmStart
  59               	pwmStart:
  60               	.LFB170:
  74:../../../os/hal/src/hal_pwm.c **** #if defined(PWM_DRIVER_EXT_INIT_HOOK)
  75:../../../os/hal/src/hal_pwm.c ****   PWM_DRIVER_EXT_INIT_HOOK(pwmp);
  76:../../../os/hal/src/hal_pwm.c **** #endif
  77:../../../os/hal/src/hal_pwm.c **** }
  78:../../../os/hal/src/hal_pwm.c **** 
  79:../../../os/hal/src/hal_pwm.c **** /**
  80:../../../os/hal/src/hal_pwm.c ****  * @brief   Configures and activates the PWM peripheral.
  81:../../../os/hal/src/hal_pwm.c ****  * @note    Starting a driver that is already in the @p PWM_READY state
  82:../../../os/hal/src/hal_pwm.c ****  *          disables all the active channels.
  83:../../../os/hal/src/hal_pwm.c ****  *
  84:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
  85:../../../os/hal/src/hal_pwm.c ****  * @param[in] config    pointer to a @p PWMConfig object
  86:../../../os/hal/src/hal_pwm.c ****  *
  87:../../../os/hal/src/hal_pwm.c ****  * @api
  88:../../../os/hal/src/hal_pwm.c ****  */
  89:../../../os/hal/src/hal_pwm.c **** void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
  61               		.loc 1 89 0
  62               		.cfi_startproc
  63               	.LVL3:
  64 0000 CF93      		push r28
  65               	.LCFI0:
  66               		.cfi_def_cfa_offset 3
  67               		.cfi_offset 28, -2
  68 0002 DF93      		push r29
  69               	.LCFI1:
  70               		.cfi_def_cfa_offset 4
  71               		.cfi_offset 29, -3
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 2 */
  75               	.L__stack_usage = 2
  76 0004 EC01      		movw r28,r24
  77               	.LBB113:
  78               	.LBB114:
  79               	.LBB115:
  80               	.LBB116:
  81               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  82               		.loc 2 437 0
  83               	/* #APP */
  84               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  85 0006 F894      		cli
  86               	 ;  0 "" 2
  87               	/* #NOAPP */
  88               	.LBE116:
  89               	.LBE115:
  90               	.LBE114:
  91               	.LBE113:
  90:../../../os/hal/src/hal_pwm.c **** 
  91:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck((pwmp != NULL) && (config != NULL));
  92:../../../os/hal/src/hal_pwm.c **** 
  93:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
  94:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
  95:../../../os/hal/src/hal_pwm.c ****                 "invalid state");
  96:../../../os/hal/src/hal_pwm.c ****   pwmp->config = config;
  92               		.loc 1 96 0
  93 0008 7A83      		std Y+2,r23
  94 000a 6983      		std Y+1,r22
  97:../../../os/hal/src/hal_pwm.c ****   pwmp->period = config->period;
  95               		.loc 1 97 0
  96 000c FB01      		movw r30,r22
  97 000e 8481      		ldd r24,Z+4
  98 0010 9581      		ldd r25,Z+5
  99               	.LVL4:
 100 0012 9C83      		std Y+4,r25
 101 0014 8B83      		std Y+3,r24
  98:../../../os/hal/src/hal_pwm.c ****   pwm_lld_start(pwmp);
 102               		.loc 1 98 0
 103 0016 CE01      		movw r24,r28
 104 0018 0E94 0000 		call pwm_lld_start
 105               	.LVL5:
  99:../../../os/hal/src/hal_pwm.c ****   pwmp->enabled = 0;
 106               		.loc 1 99 0
 107 001c 1D82      		std Y+5,__zero_reg__
 100:../../../os/hal/src/hal_pwm.c ****   pwmp->state = PWM_READY;
 108               		.loc 1 100 0
 109 001e 82E0      		ldi r24,lo8(2)
 110 0020 8883      		st Y,r24
 111               	.LBB117:
 112               	.LBB118:
 113               	.LBB119:
 114               	.LBB120:
 115               	.LBB121:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 116               		.loc 2 447 0
 117               	/* #APP */
 118               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 119 0022 7894      		sei
 120               	 ;  0 "" 2
 121               	/* epilogue start */
 122               	/* #NOAPP */
 123               	.LBE121:
 124               	.LBE120:
 125               	.LBE119:
 126               	.LBE118:
 127               	.LBE117:
 101:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 102:../../../os/hal/src/hal_pwm.c **** }
 128               		.loc 1 102 0
 129 0024 DF91      		pop r29
 130 0026 CF91      		pop r28
 131               	.LVL6:
 132 0028 0895      		ret
 133               		.cfi_endproc
 134               	.LFE170:
 136               		.section	.text.pwmStop,"ax",@progbits
 137               	.global	pwmStop
 139               	pwmStop:
 140               	.LFB171:
 103:../../../os/hal/src/hal_pwm.c **** 
 104:../../../os/hal/src/hal_pwm.c **** /**
 105:../../../os/hal/src/hal_pwm.c ****  * @brief   Deactivates the PWM peripheral.
 106:../../../os/hal/src/hal_pwm.c ****  *
 107:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 108:../../../os/hal/src/hal_pwm.c ****  *
 109:../../../os/hal/src/hal_pwm.c ****  * @api
 110:../../../os/hal/src/hal_pwm.c ****  */
 111:../../../os/hal/src/hal_pwm.c **** void pwmStop(PWMDriver *pwmp) {
 141               		.loc 1 111 0
 142               		.cfi_startproc
 143               	.LVL7:
 144 0000 CF93      		push r28
 145               	.LCFI2:
 146               		.cfi_def_cfa_offset 3
 147               		.cfi_offset 28, -2
 148 0002 DF93      		push r29
 149               	.LCFI3:
 150               		.cfi_def_cfa_offset 4
 151               		.cfi_offset 29, -3
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 2 */
 155               	.L__stack_usage = 2
 156 0004 EC01      		movw r28,r24
 157               	.LBB122:
 158               	.LBB123:
 159               	.LBB124:
 160               	.LBB125:
 437:../../../os/common/ports/AVR/chcore.h **** }
 161               		.loc 2 437 0
 162               	/* #APP */
 163               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 164 0006 F894      		cli
 165               	 ;  0 "" 2
 166               	/* #NOAPP */
 167               	.LBE125:
 168               	.LBE124:
 169               	.LBE123:
 170               	.LBE122:
 112:../../../os/hal/src/hal_pwm.c **** 
 113:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck(pwmp != NULL);
 114:../../../os/hal/src/hal_pwm.c **** 
 115:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 116:../../../os/hal/src/hal_pwm.c **** 
 117:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 118:../../../os/hal/src/hal_pwm.c ****                 "invalid state");
 119:../../../os/hal/src/hal_pwm.c **** 
 120:../../../os/hal/src/hal_pwm.c ****   pwm_lld_stop(pwmp);
 171               		.loc 1 120 0
 172 0008 0E94 0000 		call pwm_lld_stop
 173               	.LVL8:
 121:../../../os/hal/src/hal_pwm.c ****   pwmp->enabled = 0;
 174               		.loc 1 121 0
 175 000c 1D82      		std Y+5,__zero_reg__
 122:../../../os/hal/src/hal_pwm.c ****   pwmp->config  = NULL;
 176               		.loc 1 122 0
 177 000e 1A82      		std Y+2,__zero_reg__
 178 0010 1982      		std Y+1,__zero_reg__
 123:../../../os/hal/src/hal_pwm.c ****   pwmp->state   = PWM_STOP;
 179               		.loc 1 123 0
 180 0012 81E0      		ldi r24,lo8(1)
 181 0014 8883      		st Y,r24
 182               	.LBB126:
 183               	.LBB127:
 184               	.LBB128:
 185               	.LBB129:
 186               	.LBB130:
 187               		.loc 2 447 0
 188               	/* #APP */
 189               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 190 0016 7894      		sei
 191               	 ;  0 "" 2
 192               	/* epilogue start */
 193               	/* #NOAPP */
 194               	.LBE130:
 195               	.LBE129:
 196               	.LBE128:
 197               	.LBE127:
 198               	.LBE126:
 124:../../../os/hal/src/hal_pwm.c **** 
 125:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 126:../../../os/hal/src/hal_pwm.c **** }
 199               		.loc 1 126 0
 200 0018 DF91      		pop r29
 201 001a CF91      		pop r28
 202               	.LVL9:
 203 001c 0895      		ret
 204               		.cfi_endproc
 205               	.LFE171:
 207               		.section	.text.pwmChangePeriod,"ax",@progbits
 208               	.global	pwmChangePeriod
 210               	pwmChangePeriod:
 211               	.LFB172:
 127:../../../os/hal/src/hal_pwm.c **** 
 128:../../../os/hal/src/hal_pwm.c **** /**
 129:../../../os/hal/src/hal_pwm.c ****  * @brief   Changes the period the PWM peripheral.
 130:../../../os/hal/src/hal_pwm.c ****  * @details This function changes the period of a PWM unit that has already
 131:../../../os/hal/src/hal_pwm.c ****  *          been activated using @p pwmStart().
 132:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 133:../../../os/hal/src/hal_pwm.c ****  * @post    The PWM unit period is changed to the new value.
 134:../../../os/hal/src/hal_pwm.c ****  * @note    If a period is specified that is shorter than the pulse width
 135:../../../os/hal/src/hal_pwm.c ****  *          programmed in one of the channels then the behavior is not
 136:../../../os/hal/src/hal_pwm.c ****  *          guaranteed.
 137:../../../os/hal/src/hal_pwm.c ****  *
 138:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 139:../../../os/hal/src/hal_pwm.c ****  * @param[in] period    new cycle time in ticks
 140:../../../os/hal/src/hal_pwm.c ****  *
 141:../../../os/hal/src/hal_pwm.c ****  * @api
 142:../../../os/hal/src/hal_pwm.c ****  */
 143:../../../os/hal/src/hal_pwm.c **** void pwmChangePeriod(PWMDriver *pwmp, pwmcnt_t period) {
 212               		.loc 1 143 0
 213               		.cfi_startproc
 214               	.LVL10:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 219               	.LBB131:
 220               	.LBB132:
 221               	.LBB133:
 222               	.LBB134:
 437:../../../os/common/ports/AVR/chcore.h **** }
 223               		.loc 2 437 0
 224               	/* #APP */
 225               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 226 0000 F894      		cli
 227               	 ;  0 "" 2
 228               	/* #NOAPP */
 229               	.LBE134:
 230               	.LBE133:
 231               	.LBE132:
 232               	.LBE131:
 144:../../../os/hal/src/hal_pwm.c **** 
 145:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck(pwmp != NULL);
 146:../../../os/hal/src/hal_pwm.c **** 
 147:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 148:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "invalid state");
 149:../../../os/hal/src/hal_pwm.c ****   pwmChangePeriodI(pwmp, period);
 233               		.loc 1 149 0
 234 0002 FC01      		movw r30,r24
 235 0004 7483      		std Z+4,r23
 236 0006 6383      		std Z+3,r22
 237 0008 0E94 0000 		call pwm_lld_change_period
 238               	.LVL11:
 239               	.LBB135:
 240               	.LBB136:
 241               	.LBB137:
 242               	.LBB138:
 243               	.LBB139:
 244               		.loc 2 447 0
 245               	/* #APP */
 246               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 247 000c 7894      		sei
 248               	 ;  0 "" 2
 249               	/* #NOAPP */
 250 000e 0895      		ret
 251               	.LBE139:
 252               	.LBE138:
 253               	.LBE137:
 254               	.LBE136:
 255               	.LBE135:
 256               		.cfi_endproc
 257               	.LFE172:
 259               		.section	.text.pwmEnableChannel,"ax",@progbits
 260               	.global	pwmEnableChannel
 262               	pwmEnableChannel:
 263               	.LFB173:
 150:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 151:../../../os/hal/src/hal_pwm.c **** }
 152:../../../os/hal/src/hal_pwm.c **** 
 153:../../../os/hal/src/hal_pwm.c **** /**
 154:../../../os/hal/src/hal_pwm.c ****  * @brief   Enables a PWM channel.
 155:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 156:../../../os/hal/src/hal_pwm.c ****  * @post    The channel is active using the specified configuration.
 157:../../../os/hal/src/hal_pwm.c ****  * @note    Depending on the hardware implementation this function has
 158:../../../os/hal/src/hal_pwm.c ****  *          effect starting on the next cycle (recommended implementation)
 159:../../../os/hal/src/hal_pwm.c ****  *          or immediately (fallback implementation).
 160:../../../os/hal/src/hal_pwm.c ****  *
 161:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 162:../../../os/hal/src/hal_pwm.c ****  * @param[in] channel   PWM channel identifier (0...channels-1)
 163:../../../os/hal/src/hal_pwm.c ****  * @param[in] width     PWM pulse width as clock pulses number
 164:../../../os/hal/src/hal_pwm.c ****  *
 165:../../../os/hal/src/hal_pwm.c ****  * @api
 166:../../../os/hal/src/hal_pwm.c ****  */
 167:../../../os/hal/src/hal_pwm.c **** void pwmEnableChannel(PWMDriver *pwmp,
 168:../../../os/hal/src/hal_pwm.c ****                       pwmchannel_t channel,
 169:../../../os/hal/src/hal_pwm.c ****                       pwmcnt_t width) {
 264               		.loc 1 169 0
 265               		.cfi_startproc
 266               	.LVL12:
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
 271               	.LBB140:
 272               	.LBB141:
 273               	.LBB142:
 274               	.LBB143:
 437:../../../os/common/ports/AVR/chcore.h **** }
 275               		.loc 2 437 0
 276               	/* #APP */
 277               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 278 0000 F894      		cli
 279               	 ;  0 "" 2
 280               	/* #NOAPP */
 281               	.LBE143:
 282               	.LBE142:
 283               	.LBE141:
 284               	.LBE140:
 170:../../../os/hal/src/hal_pwm.c **** 
 171:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 172:../../../os/hal/src/hal_pwm.c **** 
 173:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 174:../../../os/hal/src/hal_pwm.c **** 
 175:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 176:../../../os/hal/src/hal_pwm.c **** 
 177:../../../os/hal/src/hal_pwm.c ****   pwmEnableChannelI(pwmp, channel, width);
 285               		.loc 1 177 0
 286 0002 21E0      		ldi r18,lo8(1)
 287 0004 30E0      		ldi r19,0
 288 0006 062E      		mov r0,r22
 289 0008 00C0      		rjmp 2f
 290               		1:
 291 000a 220F      		lsl r18
 292               		2:
 293 000c 0A94      		dec r0
 294 000e 02F4      		brpl 1b
 295 0010 FC01      		movw r30,r24
 296 0012 3581      		ldd r19,Z+5
 297 0014 232B      		or r18,r19
 298 0016 2583      		std Z+5,r18
 299 0018 0E94 0000 		call pwm_lld_enable_channel
 300               	.LVL13:
 301               	.LBB144:
 302               	.LBB145:
 303               	.LBB146:
 304               	.LBB147:
 305               	.LBB148:
 306               		.loc 2 447 0
 307               	/* #APP */
 308               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 309 001c 7894      		sei
 310               	 ;  0 "" 2
 311               	/* #NOAPP */
 312 001e 0895      		ret
 313               	.LBE148:
 314               	.LBE147:
 315               	.LBE146:
 316               	.LBE145:
 317               	.LBE144:
 318               		.cfi_endproc
 319               	.LFE173:
 321               		.section	.text.pwmDisableChannel,"ax",@progbits
 322               	.global	pwmDisableChannel
 324               	pwmDisableChannel:
 325               	.LFB174:
 178:../../../os/hal/src/hal_pwm.c **** 
 179:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 180:../../../os/hal/src/hal_pwm.c **** }
 181:../../../os/hal/src/hal_pwm.c **** 
 182:../../../os/hal/src/hal_pwm.c **** /**
 183:../../../os/hal/src/hal_pwm.c ****  * @brief   Disables a PWM channel and its notification.
 184:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 185:../../../os/hal/src/hal_pwm.c ****  * @post    The channel is disabled and its output line returned to the
 186:../../../os/hal/src/hal_pwm.c ****  *          idle state.
 187:../../../os/hal/src/hal_pwm.c ****  * @note    Depending on the hardware implementation this function has
 188:../../../os/hal/src/hal_pwm.c ****  *          effect starting on the next cycle (recommended implementation)
 189:../../../os/hal/src/hal_pwm.c ****  *          or immediately (fallback implementation).
 190:../../../os/hal/src/hal_pwm.c ****  *
 191:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 192:../../../os/hal/src/hal_pwm.c ****  * @param[in] channel   PWM channel identifier (0...channels-1)
 193:../../../os/hal/src/hal_pwm.c ****  *
 194:../../../os/hal/src/hal_pwm.c ****  * @api
 195:../../../os/hal/src/hal_pwm.c ****  */
 196:../../../os/hal/src/hal_pwm.c **** void pwmDisableChannel(PWMDriver *pwmp, pwmchannel_t channel) {
 326               		.loc 1 196 0
 327               		.cfi_startproc
 328               	.LVL14:
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 0 */
 332               	.L__stack_usage = 0
 333               	.LBB149:
 334               	.LBB150:
 335               	.LBB151:
 336               	.LBB152:
 437:../../../os/common/ports/AVR/chcore.h **** }
 337               		.loc 2 437 0
 338               	/* #APP */
 339               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 340 0000 F894      		cli
 341               	 ;  0 "" 2
 342               	/* #NOAPP */
 343               	.LBE152:
 344               	.LBE151:
 345               	.LBE150:
 346               	.LBE149:
 197:../../../os/hal/src/hal_pwm.c **** 
 198:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 199:../../../os/hal/src/hal_pwm.c **** 
 200:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 201:../../../os/hal/src/hal_pwm.c **** 
 202:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 203:../../../os/hal/src/hal_pwm.c **** 
 204:../../../os/hal/src/hal_pwm.c ****   pwmDisableChannelI(pwmp, channel);
 347               		.loc 1 204 0
 348 0002 21E0      		ldi r18,lo8(1)
 349 0004 30E0      		ldi r19,0
 350 0006 062E      		mov r0,r22
 351 0008 00C0      		rjmp 2f
 352               		1:
 353 000a 220F      		lsl r18
 354               		2:
 355 000c 0A94      		dec r0
 356 000e 02F4      		brpl 1b
 357 0010 2095      		com r18
 358 0012 FC01      		movw r30,r24
 359 0014 3581      		ldd r19,Z+5
 360 0016 2323      		and r18,r19
 361 0018 2583      		std Z+5,r18
 362 001a 0E94 0000 		call pwm_lld_disable_channel
 363               	.LVL15:
 364               	.LBB153:
 365               	.LBB154:
 366               	.LBB155:
 367               	.LBB156:
 368               	.LBB157:
 369               		.loc 2 447 0
 370               	/* #APP */
 371               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 372 001e 7894      		sei
 373               	 ;  0 "" 2
 374               	/* #NOAPP */
 375 0020 0895      		ret
 376               	.LBE157:
 377               	.LBE156:
 378               	.LBE155:
 379               	.LBE154:
 380               	.LBE153:
 381               		.cfi_endproc
 382               	.LFE174:
 384               		.section	.text.pwmEnablePeriodicNotification,"ax",@progbits
 385               	.global	pwmEnablePeriodicNotification
 387               	pwmEnablePeriodicNotification:
 388               	.LFB175:
 205:../../../os/hal/src/hal_pwm.c **** 
 206:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 207:../../../os/hal/src/hal_pwm.c **** }
 208:../../../os/hal/src/hal_pwm.c **** 
 209:../../../os/hal/src/hal_pwm.c **** /**
 210:../../../os/hal/src/hal_pwm.c ****  * @brief   Enables the periodic activation edge notification.
 211:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 212:../../../os/hal/src/hal_pwm.c ****  * @note    If the notification is already enabled then the call has no effect.
 213:../../../os/hal/src/hal_pwm.c ****  *
 214:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 215:../../../os/hal/src/hal_pwm.c ****  *
 216:../../../os/hal/src/hal_pwm.c ****  * @api
 217:../../../os/hal/src/hal_pwm.c ****  */
 218:../../../os/hal/src/hal_pwm.c **** void pwmEnablePeriodicNotification(PWMDriver *pwmp) {
 389               		.loc 1 218 0
 390               		.cfi_startproc
 391               	.LVL16:
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 0 */
 395               	.L__stack_usage = 0
 396               	.LBB158:
 397               	.LBB159:
 398               	.LBB160:
 399               	.LBB161:
 437:../../../os/common/ports/AVR/chcore.h **** }
 400               		.loc 2 437 0
 401               	/* #APP */
 402               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 403 0000 F894      		cli
 404               	 ;  0 "" 2
 405               	/* #NOAPP */
 406               	.LBE161:
 407               	.LBE160:
 408               	.LBE159:
 409               	.LBE158:
 219:../../../os/hal/src/hal_pwm.c **** 
 220:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck(pwmp != NULL);
 221:../../../os/hal/src/hal_pwm.c **** 
 222:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 223:../../../os/hal/src/hal_pwm.c **** 
 224:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 225:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->config->callback != NULL, "undefined periodic callback");
 226:../../../os/hal/src/hal_pwm.c **** 
 227:../../../os/hal/src/hal_pwm.c ****   pwmEnablePeriodicNotificationI(pwmp);
 410               		.loc 1 227 0
 411 0002 0E94 0000 		call pwm_lld_enable_periodic_notification
 412               	.LVL17:
 413               	.LBB162:
 414               	.LBB163:
 415               	.LBB164:
 416               	.LBB165:
 417               	.LBB166:
 418               		.loc 2 447 0
 419               	/* #APP */
 420               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 421 0006 7894      		sei
 422               	 ;  0 "" 2
 423               	/* #NOAPP */
 424 0008 0895      		ret
 425               	.LBE166:
 426               	.LBE165:
 427               	.LBE164:
 428               	.LBE163:
 429               	.LBE162:
 430               		.cfi_endproc
 431               	.LFE175:
 433               		.section	.text.pwmDisablePeriodicNotification,"ax",@progbits
 434               	.global	pwmDisablePeriodicNotification
 436               	pwmDisablePeriodicNotification:
 437               	.LFB176:
 228:../../../os/hal/src/hal_pwm.c **** 
 229:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 230:../../../os/hal/src/hal_pwm.c **** }
 231:../../../os/hal/src/hal_pwm.c **** 
 232:../../../os/hal/src/hal_pwm.c **** /**
 233:../../../os/hal/src/hal_pwm.c ****  * @brief   Disables the periodic activation edge notification.
 234:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 235:../../../os/hal/src/hal_pwm.c ****  * @note    If the notification is already disabled then the call has no effect.
 236:../../../os/hal/src/hal_pwm.c ****  *
 237:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 238:../../../os/hal/src/hal_pwm.c ****  *
 239:../../../os/hal/src/hal_pwm.c ****  * @api
 240:../../../os/hal/src/hal_pwm.c ****  */
 241:../../../os/hal/src/hal_pwm.c **** void pwmDisablePeriodicNotification(PWMDriver *pwmp) {
 438               		.loc 1 241 0
 439               		.cfi_startproc
 440               	.LVL18:
 441               	/* prologue: function */
 442               	/* frame size = 0 */
 443               	/* stack size = 0 */
 444               	.L__stack_usage = 0
 445               	.LBB167:
 446               	.LBB168:
 447               	.LBB169:
 448               	.LBB170:
 437:../../../os/common/ports/AVR/chcore.h **** }
 449               		.loc 2 437 0
 450               	/* #APP */
 451               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 452 0000 F894      		cli
 453               	 ;  0 "" 2
 454               	/* #NOAPP */
 455               	.LBE170:
 456               	.LBE169:
 457               	.LBE168:
 458               	.LBE167:
 242:../../../os/hal/src/hal_pwm.c **** 
 243:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck(pwmp != NULL);
 244:../../../os/hal/src/hal_pwm.c **** 
 245:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 246:../../../os/hal/src/hal_pwm.c **** 
 247:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 248:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->config->callback != NULL, "undefined periodic callback");
 249:../../../os/hal/src/hal_pwm.c **** 
 250:../../../os/hal/src/hal_pwm.c ****   pwmDisablePeriodicNotificationI(pwmp);
 459               		.loc 1 250 0
 460 0002 0E94 0000 		call pwm_lld_disable_periodic_notification
 461               	.LVL19:
 462               	.LBB171:
 463               	.LBB172:
 464               	.LBB173:
 465               	.LBB174:
 466               	.LBB175:
 467               		.loc 2 447 0
 468               	/* #APP */
 469               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 470 0006 7894      		sei
 471               	 ;  0 "" 2
 472               	/* #NOAPP */
 473 0008 0895      		ret
 474               	.LBE175:
 475               	.LBE174:
 476               	.LBE173:
 477               	.LBE172:
 478               	.LBE171:
 479               		.cfi_endproc
 480               	.LFE176:
 482               		.section	.text.pwmEnableChannelNotification,"ax",@progbits
 483               	.global	pwmEnableChannelNotification
 485               	pwmEnableChannelNotification:
 486               	.LFB177:
 251:../../../os/hal/src/hal_pwm.c **** 
 252:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 253:../../../os/hal/src/hal_pwm.c **** }
 254:../../../os/hal/src/hal_pwm.c **** 
 255:../../../os/hal/src/hal_pwm.c **** /**
 256:../../../os/hal/src/hal_pwm.c ****  * @brief   Enables a channel de-activation edge notification.
 257:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 258:../../../os/hal/src/hal_pwm.c ****  * @pre     The channel must have been activated using @p pwmEnableChannel().
 259:../../../os/hal/src/hal_pwm.c ****  * @note    If the notification is already enabled then the call has no effect.
 260:../../../os/hal/src/hal_pwm.c ****  *
 261:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 262:../../../os/hal/src/hal_pwm.c ****  * @param[in] channel   PWM channel identifier (0...channels-1)
 263:../../../os/hal/src/hal_pwm.c ****  *
 264:../../../os/hal/src/hal_pwm.c ****  * @api
 265:../../../os/hal/src/hal_pwm.c ****  */
 266:../../../os/hal/src/hal_pwm.c **** void pwmEnableChannelNotification(PWMDriver *pwmp, pwmchannel_t channel) {
 487               		.loc 1 266 0
 488               		.cfi_startproc
 489               	.LVL20:
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 492               	/* stack size = 0 */
 493               	.L__stack_usage = 0
 494               	.LBB176:
 495               	.LBB177:
 496               	.LBB178:
 497               	.LBB179:
 437:../../../os/common/ports/AVR/chcore.h **** }
 498               		.loc 2 437 0
 499               	/* #APP */
 500               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 501 0000 F894      		cli
 502               	 ;  0 "" 2
 503               	/* #NOAPP */
 504               	.LBE179:
 505               	.LBE178:
 506               	.LBE177:
 507               	.LBE176:
 267:../../../os/hal/src/hal_pwm.c **** 
 268:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 269:../../../os/hal/src/hal_pwm.c **** 
 270:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 271:../../../os/hal/src/hal_pwm.c **** 
 272:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 273:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert((pwmp->enabled & ((pwmchnmsk_t)1U << (pwmchnmsk_t)channel)) != 0U,
 274:../../../os/hal/src/hal_pwm.c ****                 "channel not enabled");
 275:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->config->channels[channel].callback != NULL,
 276:../../../os/hal/src/hal_pwm.c ****                 "undefined channel callback");
 277:../../../os/hal/src/hal_pwm.c **** 
 278:../../../os/hal/src/hal_pwm.c ****   pwmEnableChannelNotificationI(pwmp, channel);
 508               		.loc 1 278 0
 509 0002 0E94 0000 		call pwm_lld_enable_channel_notification
 510               	.LVL21:
 511               	.LBB180:
 512               	.LBB181:
 513               	.LBB182:
 514               	.LBB183:
 515               	.LBB184:
 516               		.loc 2 447 0
 517               	/* #APP */
 518               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 519 0006 7894      		sei
 520               	 ;  0 "" 2
 521               	/* #NOAPP */
 522 0008 0895      		ret
 523               	.LBE184:
 524               	.LBE183:
 525               	.LBE182:
 526               	.LBE181:
 527               	.LBE180:
 528               		.cfi_endproc
 529               	.LFE177:
 531               		.section	.text.pwmDisableChannelNotification,"ax",@progbits
 532               	.global	pwmDisableChannelNotification
 534               	pwmDisableChannelNotification:
 535               	.LFB178:
 279:../../../os/hal/src/hal_pwm.c **** 
 280:../../../os/hal/src/hal_pwm.c ****   osalSysUnlock();
 281:../../../os/hal/src/hal_pwm.c **** }
 282:../../../os/hal/src/hal_pwm.c **** 
 283:../../../os/hal/src/hal_pwm.c **** /**
 284:../../../os/hal/src/hal_pwm.c ****  * @brief   Disables a channel de-activation edge notification.
 285:../../../os/hal/src/hal_pwm.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 286:../../../os/hal/src/hal_pwm.c ****  * @pre     The channel must have been activated using @p pwmEnableChannel().
 287:../../../os/hal/src/hal_pwm.c ****  * @note    If the notification is already disabled then the call has no effect.
 288:../../../os/hal/src/hal_pwm.c ****  *
 289:../../../os/hal/src/hal_pwm.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 290:../../../os/hal/src/hal_pwm.c ****  * @param[in] channel   PWM channel identifier (0...channels-1)
 291:../../../os/hal/src/hal_pwm.c ****  *
 292:../../../os/hal/src/hal_pwm.c ****  * @api
 293:../../../os/hal/src/hal_pwm.c ****  */
 294:../../../os/hal/src/hal_pwm.c **** void pwmDisableChannelNotification(PWMDriver *pwmp, pwmchannel_t channel) {
 536               		.loc 1 294 0
 537               		.cfi_startproc
 538               	.LVL22:
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 0 */
 542               	.L__stack_usage = 0
 543               	.LBB185:
 544               	.LBB186:
 545               	.LBB187:
 546               	.LBB188:
 437:../../../os/common/ports/AVR/chcore.h **** }
 547               		.loc 2 437 0
 548               	/* #APP */
 549               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 550 0000 F894      		cli
 551               	 ;  0 "" 2
 552               	/* #NOAPP */
 553               	.LBE188:
 554               	.LBE187:
 555               	.LBE186:
 556               	.LBE185:
 295:../../../os/hal/src/hal_pwm.c **** 
 296:../../../os/hal/src/hal_pwm.c ****   osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 297:../../../os/hal/src/hal_pwm.c **** 
 298:../../../os/hal/src/hal_pwm.c ****   osalSysLock();
 299:../../../os/hal/src/hal_pwm.c **** 
 300:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 301:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert((pwmp->enabled & ((pwmchnmsk_t)1U << (pwmchnmsk_t)channel)) != 0U,
 302:../../../os/hal/src/hal_pwm.c ****                 "channel not enabled");
 303:../../../os/hal/src/hal_pwm.c ****   osalDbgAssert(pwmp->config->channels[channel].callback != NULL,
 304:../../../os/hal/src/hal_pwm.c ****                 "undefined channel callback");
 305:../../../os/hal/src/hal_pwm.c **** 
 306:../../../os/hal/src/hal_pwm.c ****   pwmDisableChannelNotificationI(pwmp, channel);
 557               		.loc 1 306 0
 558 0002 0E94 0000 		call pwm_lld_disable_channel_notification
 559               	.LVL23:
 560               	.LBB189:
 561               	.LBB190:
 562               	.LBB191:
 563               	.LBB192:
 564               	.LBB193:
 565               		.loc 2 447 0
 566               	/* #APP */
 567               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 568 0006 7894      		sei
 569               	 ;  0 "" 2
 570               	/* #NOAPP */
 571 0008 0895      		ret
 572               	.LBE193:
 573               	.LBE192:
 574               	.LBE191:
 575               	.LBE190:
 576               	.LBE189:
 577               		.cfi_endproc
 578               	.LFE178:
 580               		.text
 581               	.Letext0:
 582               		.file 3 "/usr/lib/avr/include/stdint.h"
 583               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 584               		.file 5 "../../../os/rt/include/chsystypes.h"
 585               		.file 6 "../../../os/rt/include/chschd.h"
 586               		.file 7 "../../../os/rt/include/chtime.h"
 587               		.file 8 "../../../os/rt/include/chsem.h"
 588               		.file 9 "../../../os/rt/include/chmtx.h"
 589               		.file 10 "../../../os/hal/include/hal_pwm.h"
 590               		.file 11 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_pwm_lld.h"
 591               		.file 12 "../../../os/rt/include/chsys.h"
 592               		.file 13 "../../../os/hal/osal/rt/osal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_pwm.c
     /tmp/ccMAJ2Zj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMAJ2Zj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMAJ2Zj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMAJ2Zj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMAJ2Zj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMAJ2Zj.s:13     .text.pwmInit:0000000000000000 pwmInit
     /tmp/ccMAJ2Zj.s:31     .text.pwmObjectInit:0000000000000000 pwmObjectInit
     /tmp/ccMAJ2Zj.s:59     .text.pwmStart:0000000000000000 pwmStart
     /tmp/ccMAJ2Zj.s:139    .text.pwmStop:0000000000000000 pwmStop
     /tmp/ccMAJ2Zj.s:210    .text.pwmChangePeriod:0000000000000000 pwmChangePeriod
     /tmp/ccMAJ2Zj.s:262    .text.pwmEnableChannel:0000000000000000 pwmEnableChannel
     /tmp/ccMAJ2Zj.s:324    .text.pwmDisableChannel:0000000000000000 pwmDisableChannel
     /tmp/ccMAJ2Zj.s:387    .text.pwmEnablePeriodicNotification:0000000000000000 pwmEnablePeriodicNotification
     /tmp/ccMAJ2Zj.s:436    .text.pwmDisablePeriodicNotification:0000000000000000 pwmDisablePeriodicNotification
     /tmp/ccMAJ2Zj.s:485    .text.pwmEnableChannelNotification:0000000000000000 pwmEnableChannelNotification
     /tmp/ccMAJ2Zj.s:534    .text.pwmDisableChannelNotification:0000000000000000 pwmDisableChannelNotification

UNDEFINED SYMBOLS
pwm_lld_init
pwm_lld_start
pwm_lld_stop
pwm_lld_change_period
pwm_lld_enable_channel
pwm_lld_disable_channel
pwm_lld_enable_periodic_notification
pwm_lld_disable_periodic_notification
pwm_lld_enable_channel_notification
pwm_lld_disable_channel_notification
