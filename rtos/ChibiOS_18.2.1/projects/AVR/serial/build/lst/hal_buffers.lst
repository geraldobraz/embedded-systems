   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB168:
  15               		.file 1 "../../../os/hal/src/hal_buffers.c"
   1:../../../os/hal/src/hal_buffers.c **** /*
   2:../../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_buffers.c **** 
   4:../../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_buffers.c **** 
   8:../../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_buffers.c **** 
  10:../../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../../os/hal/src/hal_buffers.c **** */
  16:../../../os/hal/src/hal_buffers.c **** 
  17:../../../os/hal/src/hal_buffers.c **** /**
  18:../../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../../os/hal/src/hal_buffers.c ****  *
  21:../../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:../../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../../os/hal/src/hal_buffers.c ****  *          .
  36:../../../os/hal/src/hal_buffers.c ****  * @{
  37:../../../os/hal/src/hal_buffers.c ****  */
  38:../../../os/hal/src/hal_buffers.c **** 
  39:../../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../../os/hal/src/hal_buffers.c **** 
  41:../../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../../os/hal/src/hal_buffers.c **** 
  43:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_buffers.c **** 
  47:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../../os/hal/src/hal_buffers.c **** 
  51:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../../os/hal/src/hal_buffers.c **** 
  55:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../../os/hal/src/hal_buffers.c **** 
  59:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../../os/hal/src/hal_buffers.c **** 
  63:../../../os/hal/src/hal_buffers.c **** /**
  64:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../../os/hal/src/hal_buffers.c ****  *
  66:../../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../../os/hal/src/hal_buffers.c ****  *
  74:../../../os/hal/src/hal_buffers.c ****  * @init
  75:../../../os/hal/src/hal_buffers.c ****  */
  76:../../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c FC01      		movw r30,r24
  48               	.LVL1:
  49               	.LBB240:
  50               	.LBB241:
  51               	.LBB242:
  52               	.LBB243:
  53               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  54               		.loc 2 539 0
  55 000e 9183      		std Z+1,r25
  56 0010 8083      		st Z,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  57               		.loc 2 540 0
  58 0012 9383      		std Z+3,r25
  59 0014 8283      		std Z+2,r24
  60               	.LBE243:
  61               	.LBE242:
  62               	.LBE241:
  63               	.LBE240:
  78:../../../os/hal/src/hal_buffers.c **** 
  79:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../../os/hal/src/hal_buffers.c **** 
  81:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  64               		.loc 1 82 0
  65 0016 6483      		std Z+4,r22
  83:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  66               		.loc 1 83 0
  67 0018 1682      		std Z+6,__zero_reg__
  68 001a 1582      		std Z+5,__zero_reg__
  84:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  69               		.loc 1 84 0
  70 001c 5287      		std Z+10,r21
  71 001e 4187      		std Z+9,r20
  85:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  72               		.loc 1 85 0
  73 0020 5087      		std Z+8,r21
  74 0022 4783      		std Z+7,r20
  86:../../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  75               		.loc 1 86 0
  76 0024 2E5F      		subi r18,-2
  77 0026 3F4F      		sbci r19,-1
  78               	.LVL2:
  79 0028 209F      		mul r18,r16
  80 002a C001      		movw r24,r0
  81 002c 219F      		mul r18,r17
  82 002e 900D      		add r25,r0
  83 0030 309F      		mul r19,r16
  84 0032 900D      		add r25,r0
  85 0034 1124      		clr r1
  86               	.LVL3:
  87 0036 840F      		add r24,r20
  88 0038 951F      		adc r25,r21
  89 003a 9487      		std Z+12,r25
  90 003c 8387      		std Z+11,r24
  87:../../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  91               		.loc 1 87 0
  92 003e 3687      		std Z+14,r19
  93 0040 2587      		std Z+13,r18
  88:../../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  94               		.loc 1 88 0
  95 0042 108B      		std Z+16,r17
  96 0044 0787      		std Z+15,r16
  89:../../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
  97               		.loc 1 89 0
  98 0046 528B      		std Z+18,r21
  99 0048 418B      		std Z+17,r20
  90:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 100               		.loc 1 90 0
 101 004a 148A      		std Z+20,__zero_reg__
 102 004c 138A      		std Z+19,__zero_reg__
  91:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 103               		.loc 1 91 0
 104 004e 168A      		std Z+22,__zero_reg__
 105 0050 158A      		std Z+21,__zero_reg__
  92:../../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 106               		.loc 1 92 0
 107 0052 F08E      		std Z+24,r15
 108 0054 E78A      		std Z+23,r14
  93:../../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 109               		.loc 1 93 0
 110 0056 D28E      		std Z+26,r13
 111 0058 C18E      		std Z+25,r12
 112               	/* epilogue start */
  94:../../../os/hal/src/hal_buffers.c **** }
 113               		.loc 1 94 0
 114 005a 1F91      		pop r17
 115 005c 0F91      		pop r16
 116               	.LVL4:
 117 005e FF90      		pop r15
 118 0060 EF90      		pop r14
 119               	.LVL5:
 120 0062 DF90      		pop r13
 121 0064 CF90      		pop r12
 122               	.LVL6:
 123 0066 0895      		ret
 124               		.cfi_endproc
 125               	.LFE168:
 127               		.section	.text.ibqResetI,"ax",@progbits
 128               	.global	ibqResetI
 130               	ibqResetI:
 131               	.LFB169:
  95:../../../os/hal/src/hal_buffers.c **** 
  96:../../../os/hal/src/hal_buffers.c **** /**
  97:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../../os/hal/src/hal_buffers.c ****  *
 103:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../../os/hal/src/hal_buffers.c ****  *
 105:../../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../../os/hal/src/hal_buffers.c ****  */
 107:../../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 132               		.loc 1 107 0
 133               		.cfi_startproc
 134               	.LVL7:
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
 139 0000 FC01      		movw r30,r24
 108:../../../os/hal/src/hal_buffers.c **** 
 109:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../../os/hal/src/hal_buffers.c **** 
 111:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 140               		.loc 1 111 0
 141 0002 1682      		std Z+6,__zero_reg__
 142 0004 1582      		std Z+5,__zero_reg__
 112:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 143               		.loc 1 112 0
 144 0006 8189      		ldd r24,Z+17
 145 0008 9289      		ldd r25,Z+18
 146               	.LVL8:
 147 000a 9287      		std Z+10,r25
 148 000c 8187      		std Z+9,r24
 113:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 149               		.loc 1 113 0
 150 000e 9087      		std Z+8,r25
 151 0010 8783      		std Z+7,r24
 114:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 152               		.loc 1 114 0
 153 0012 148A      		std Z+20,__zero_reg__
 154 0014 138A      		std Z+19,__zero_reg__
 115:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 155               		.loc 1 115 0
 156 0016 168A      		std Z+22,__zero_reg__
 157 0018 158A      		std Z+21,__zero_reg__
 158               	.LVL9:
 159               	.LBB244:
 160               	.LBB245:
 161               		.file 3 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 776:../../../os/hal/osal/rt/osal.h **** }
 777:../../../os/hal/osal/rt/osal.h **** 
 778:../../../os/hal/osal/rt/osal.h **** /**
 779:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 780:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 781:../../../os/hal/osal/rt/osal.h ****  *          context.
 782:../../../os/hal/osal/rt/osal.h ****  *
 783:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 784:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 785:../../../os/hal/osal/rt/osal.h ****  *
 786:../../../os/hal/osal/rt/osal.h ****  * @iclass
 787:../../../os/hal/osal/rt/osal.h ****  */
 788:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 789:../../../os/hal/osal/rt/osal.h **** 
 790:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 791:../../../os/hal/osal/rt/osal.h **** }
 792:../../../os/hal/osal/rt/osal.h **** 
 793:../../../os/hal/osal/rt/osal.h **** /**
 794:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 795:../../../os/hal/osal/rt/osal.h ****  *
 796:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 797:../../../os/hal/osal/rt/osal.h ****  *
 798:../../../os/hal/osal/rt/osal.h ****  * @init
 799:../../../os/hal/osal/rt/osal.h ****  */
 800:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 801:../../../os/hal/osal/rt/osal.h **** 
 802:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 803:../../../os/hal/osal/rt/osal.h **** }
 804:../../../os/hal/osal/rt/osal.h **** 
 805:../../../os/hal/osal/rt/osal.h **** /**
 806:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 807:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 808:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 809:../../../os/hal/osal/rt/osal.h ****  *
 810:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 811:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 812:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 813:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 814:../../../os/hal/osal/rt/osal.h ****  *                        state.
 815:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 816:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 817:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 818:../../../os/hal/osal/rt/osal.h ****  *                      .
 819:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 820:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 821:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 822:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 823:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 824:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 825:../../../os/hal/osal/rt/osal.h ****  *
 826:../../../os/hal/osal/rt/osal.h ****  * @sclass
 827:../../../os/hal/osal/rt/osal.h ****  */
 828:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 829:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 830:../../../os/hal/osal/rt/osal.h **** 
 831:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 832:../../../os/hal/osal/rt/osal.h **** }
 833:../../../os/hal/osal/rt/osal.h **** 
 834:../../../os/hal/osal/rt/osal.h **** /**
 835:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 836:../../../os/hal/osal/rt/osal.h ****  *
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 838:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 839:../../../os/hal/osal/rt/osal.h ****  *
 840:../../../os/hal/osal/rt/osal.h ****  * @iclass
 841:../../../os/hal/osal/rt/osal.h ****  */
 842:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 845:../../../os/hal/osal/rt/osal.h **** }
 846:../../../os/hal/osal/rt/osal.h **** 
 847:../../../os/hal/osal/rt/osal.h **** /**
 848:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 849:../../../os/hal/osal/rt/osal.h ****  *
 850:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 851:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 852:../../../os/hal/osal/rt/osal.h ****  *
 853:../../../os/hal/osal/rt/osal.h ****  * @iclass
 854:../../../os/hal/osal/rt/osal.h ****  */
 855:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 856:../../../os/hal/osal/rt/osal.h **** 
 857:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 162               		.loc 3 857 0
 163 001a 6EEF      		ldi r22,lo8(-2)
 164 001c 7FEF      		ldi r23,lo8(-1)
 165 001e CF01      		movw r24,r30
 166 0020 0C94 0000 		jmp chThdDequeueAllI
 167               	.LVL10:
 168               	.LBE245:
 169               	.LBE244:
 170               		.cfi_endproc
 171               	.LFE169:
 173               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 174               	.global	ibqGetEmptyBufferI
 176               	ibqGetEmptyBufferI:
 177               	.LFB170:
 116:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../../os/hal/src/hal_buffers.c **** }
 118:../../../os/hal/src/hal_buffers.c **** 
 119:../../../os/hal/src/hal_buffers.c **** /**
 120:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../../os/hal/src/hal_buffers.c ****  *
 123:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../../os/hal/src/hal_buffers.c ****  *
 127:../../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../../os/hal/src/hal_buffers.c ****  */
 129:../../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 178               		.loc 1 129 0
 179               		.cfi_startproc
 180               	.LVL11:
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 185 0000 FC01      		movw r30,r24
 130:../../../os/hal/src/hal_buffers.c **** 
 131:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../../os/hal/src/hal_buffers.c **** 
 133:../../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 186               		.loc 1 133 0
 187 0002 2781      		ldd r18,Z+7
 188 0004 3085      		ldd r19,Z+8
 189 0006 8185      		ldd r24,Z+9
 190 0008 9285      		ldd r25,Z+10
 191               	.LVL12:
 192 000a 2817      		cp r18,r24
 193 000c 3907      		cpc r19,r25
 194 000e 01F0      		breq .L11
 195               	.L4:
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../../os/hal/src/hal_buffers.c ****   }
 136:../../../os/hal/src/hal_buffers.c **** 
 137:../../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 196               		.loc 1 137 0
 197 0010 C901      		movw r24,r18
 198 0012 0296      		adiw r24,2
 138:../../../os/hal/src/hal_buffers.c **** }
 199               		.loc 1 138 0
 200 0014 0895      		ret
 201               	.L11:
 133:../../../os/hal/src/hal_buffers.c ****     return NULL;
 202               		.loc 1 133 0 discriminator 1
 203 0016 8581      		ldd r24,Z+5
 204 0018 9681      		ldd r25,Z+6
 205 001a 892B      		or r24,r25
 206 001c 01F0      		breq .L4
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 207               		.loc 1 134 0
 208 001e 80E0      		ldi r24,0
 209 0020 90E0      		ldi r25,0
 210 0022 0895      		ret
 211               		.cfi_endproc
 212               	.LFE170:
 214               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 215               	.global	ibqPostFullBufferI
 217               	ibqPostFullBufferI:
 218               	.LFB171:
 139:../../../os/hal/src/hal_buffers.c **** 
 140:../../../os/hal/src/hal_buffers.c **** /**
 141:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../../os/hal/src/hal_buffers.c ****  *
 143:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../../os/hal/src/hal_buffers.c ****  *
 146:../../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../../os/hal/src/hal_buffers.c ****  */
 148:../../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 219               		.loc 1 148 0
 220               		.cfi_startproc
 221               	.LVL13:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
 226 0000 FC01      		movw r30,r24
 149:../../../os/hal/src/hal_buffers.c **** 
 150:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../../os/hal/src/hal_buffers.c **** 
 152:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../../os/hal/src/hal_buffers.c **** 
 155:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../../os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 227               		.loc 1 156 0
 228 0002 A781      		ldd r26,Z+7
 229 0004 B085      		ldd r27,Z+8
 230 0006 1196      		adiw r26,1
 231 0008 7C93      		st X,r23
 232 000a 6E93      		st -X,r22
 157:../../../os/hal/src/hal_buffers.c **** 
 158:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 233               		.loc 1 159 0
 234 000c 2581      		ldd r18,Z+5
 235 000e 3681      		ldd r19,Z+6
 236 0010 2F5F      		subi r18,-1
 237 0012 3F4F      		sbci r19,-1
 238 0014 3683      		std Z+6,r19
 239 0016 2583      		std Z+5,r18
 160:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 240               		.loc 1 160 0
 241 0018 8585      		ldd r24,Z+13
 242 001a 9685      		ldd r25,Z+14
 243               	.LVL14:
 244 001c 8A0F      		add r24,r26
 245 001e 9B1F      		adc r25,r27
 246 0020 9087      		std Z+8,r25
 247 0022 8783      		std Z+7,r24
 161:../../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 248               		.loc 1 161 0
 249 0024 2385      		ldd r18,Z+11
 250 0026 3485      		ldd r19,Z+12
 251 0028 8217      		cp r24,r18
 252 002a 9307      		cpc r25,r19
 253 002c 00F0      		brlo .L13
 162:../../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 254               		.loc 1 162 0
 255 002e 8189      		ldd r24,Z+17
 256 0030 9289      		ldd r25,Z+18
 257 0032 9087      		std Z+8,r25
 258 0034 8783      		std Z+7,r24
 259               	.L13:
 260               	.LVL15:
 261               	.LBB246:
 262               	.LBB247:
 844:../../../os/hal/osal/rt/osal.h **** }
 263               		.loc 3 844 0
 264 0036 60E0      		ldi r22,0
 265 0038 70E0      		ldi r23,0
 266               	.LVL16:
 267 003a CF01      		movw r24,r30
 268 003c 0C94 0000 		jmp chThdDequeueNextI
 269               	.LVL17:
 270               	.LBE247:
 271               	.LBE246:
 272               		.cfi_endproc
 273               	.LFE171:
 275               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 276               	.global	ibqGetFullBufferTimeoutS
 278               	ibqGetFullBufferTimeoutS:
 279               	.LFB173:
 163:../../../os/hal/src/hal_buffers.c ****   }
 164:../../../os/hal/src/hal_buffers.c **** 
 165:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../../os/hal/src/hal_buffers.c **** }
 168:../../../os/hal/src/hal_buffers.c **** 
 169:../../../os/hal/src/hal_buffers.c **** /**
 170:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../../os/hal/src/hal_buffers.c ****  *
 176:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../../os/hal/src/hal_buffers.c ****  *
 188:../../../os/hal/src/hal_buffers.c ****  * @api
 189:../../../os/hal/src/hal_buffers.c ****  */
 190:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 192:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../../os/hal/src/hal_buffers.c **** 
 194:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../../os/hal/src/hal_buffers.c **** 
 198:../../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../../os/hal/src/hal_buffers.c **** }
 200:../../../os/hal/src/hal_buffers.c **** 
 201:../../../os/hal/src/hal_buffers.c ****   /**
 202:../../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../../os/hal/src/hal_buffers.c ****    *
 208:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../../os/hal/src/hal_buffers.c ****    *
 220:../../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../../os/hal/src/hal_buffers.c ****    */
 222:../../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 280               		.loc 1 223 0
 281               		.cfi_startproc
 282               	.LVL18:
 283 0000 0F93      		push r16
 284               	.LCFI6:
 285               		.cfi_def_cfa_offset 3
 286               		.cfi_offset 16, -2
 287 0002 1F93      		push r17
 288               	.LCFI7:
 289               		.cfi_def_cfa_offset 4
 290               		.cfi_offset 17, -3
 291 0004 CF93      		push r28
 292               	.LCFI8:
 293               		.cfi_def_cfa_offset 5
 294               		.cfi_offset 28, -4
 295 0006 DF93      		push r29
 296               	.LCFI9:
 297               		.cfi_def_cfa_offset 6
 298               		.cfi_offset 29, -5
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 4 */
 302               	.L__stack_usage = 4
 303 0008 EC01      		movw r28,r24
 304 000a 8B01      		movw r16,r22
 224:../../../os/hal/src/hal_buffers.c **** 
 225:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../../os/hal/src/hal_buffers.c **** 
 227:../../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 305               		.loc 1 227 0
 306 000c 00C0      		rjmp .L15
 307               	.LVL19:
 308               	.L17:
 309               	.LBB256:
 228:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 310               		.loc 1 228 0
 311 000e 8C81      		ldd r24,Y+4
 312 0010 8111      		cpse r24,__zero_reg__
 313 0012 00C0      		rjmp .L18
 314               	.LVL20:
 315               	.LBB257:
 316               	.LBB258:
 831:../../../os/hal/osal/rt/osal.h **** }
 317               		.loc 3 831 0
 318 0014 B801      		movw r22,r16
 319 0016 CE01      		movw r24,r28
 320 0018 0E94 0000 		call chThdEnqueueTimeoutS
 321               	.LVL21:
 322               	.LBE258:
 323               	.LBE257:
 229:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../../os/hal/src/hal_buffers.c ****     }
 231:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 324               		.loc 1 232 0
 325 001c 97FD      		sbrc r25,7
 326 001e 00C0      		rjmp .L16
 327               	.LVL22:
 328               	.L15:
 329               	.LBE256:
 227:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 330               		.loc 1 227 0
 331 0020 8D81      		ldd r24,Y+5
 332 0022 9E81      		ldd r25,Y+6
 333 0024 892B      		or r24,r25
 334 0026 01F0      		breq .L17
 335               	.LVL23:
 336               	.LBB259:
 337               	.LBB260:
 233:../../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../../os/hal/src/hal_buffers.c ****     }
 235:../../../os/hal/src/hal_buffers.c ****   }
 236:../../../os/hal/src/hal_buffers.c **** 
 237:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../../os/hal/src/hal_buffers.c **** 
 239:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 338               		.loc 1 240 0
 339 0028 E985      		ldd r30,Y+9
 340 002a FA85      		ldd r31,Y+10
 341 002c 9F01      		movw r18,r30
 342 002e 2E5F      		subi r18,-2
 343 0030 3F4F      		sbci r19,-1
 344 0032 3C8B      		std Y+20,r19
 345 0034 2B8B      		std Y+19,r18
 241:../../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 346               		.loc 1 241 0
 347 0036 8081      		ld r24,Z
 348 0038 9181      		ldd r25,Z+1
 349 003a 820F      		add r24,r18
 350 003c 931F      		adc r25,r19
 351 003e 9E8B      		std Y+22,r25
 352 0040 8D8B      		std Y+21,r24
 353 0042 80E0      		ldi r24,0
 354 0044 90E0      		ldi r25,0
 355               	.LVL24:
 356               	.L16:
 357               	/* epilogue start */
 358               	.LBE260:
 359               	.LBE259:
 242:../../../os/hal/src/hal_buffers.c **** 
 243:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../../os/hal/src/hal_buffers.c **** }
 360               		.loc 1 244 0
 361 0046 DF91      		pop r29
 362 0048 CF91      		pop r28
 363               	.LVL25:
 364 004a 1F91      		pop r17
 365 004c 0F91      		pop r16
 366               	.LVL26:
 367 004e 0895      		ret
 368               	.LVL27:
 369               	.L18:
 370               	.LBB261:
 229:../../../os/hal/src/hal_buffers.c ****     }
 371               		.loc 1 229 0
 372 0050 8EEF      		ldi r24,lo8(-2)
 373 0052 9FEF      		ldi r25,lo8(-1)
 374               	/* epilogue start */
 375               	.LBE261:
 376               		.loc 1 244 0
 377 0054 DF91      		pop r29
 378 0056 CF91      		pop r28
 379               	.LVL28:
 380 0058 1F91      		pop r17
 381 005a 0F91      		pop r16
 382               	.LVL29:
 383 005c 0895      		ret
 384               		.cfi_endproc
 385               	.LFE173:
 387               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 388               	.global	ibqGetFullBufferTimeout
 390               	ibqGetFullBufferTimeout:
 391               	.LFB172:
 191:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 392               		.loc 1 191 0
 393               		.cfi_startproc
 394               	.LVL30:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399               	.LBB262:
 400               	.LBB263:
 401               	.LBB264:
 402               	.LBB265:
 403               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 404               		.loc 4 437 0
 405               	/* #APP */
 406               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 407 0000 F894      		cli
 408               	 ;  0 "" 2
 409               	/* #NOAPP */
 410               	.LBE265:
 411               	.LBE264:
 412               	.LBE263:
 413               	.LBE262:
 195:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 414               		.loc 1 195 0
 415 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 416               	.LVL31:
 417               	.LBB266:
 418               	.LBB267:
 419               	.LBB268:
 420               	.LBB269:
 421               	.LBB270:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 422               		.loc 4 447 0
 423               	/* #APP */
 424               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 425 0006 7894      		sei
 426               	 ;  0 "" 2
 427               	/* #NOAPP */
 428               	.LBE270:
 429               	.LBE269:
 430               	.LBE268:
 431               	.LBE267:
 432               	.LBE266:
 199:../../../os/hal/src/hal_buffers.c **** 
 433               		.loc 1 199 0
 434 0008 0895      		ret
 435               		.cfi_endproc
 436               	.LFE172:
 438               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 439               	.global	ibqReleaseEmptyBufferS
 441               	ibqReleaseEmptyBufferS:
 442               	.LFB175:
 245:../../../os/hal/src/hal_buffers.c **** 
 246:../../../os/hal/src/hal_buffers.c **** /**
 247:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../../os/hal/src/hal_buffers.c ****  *
 250:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../../os/hal/src/hal_buffers.c ****  *
 252:../../../os/hal/src/hal_buffers.c ****  * @api
 253:../../../os/hal/src/hal_buffers.c ****  */
 254:../../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 255:../../../os/hal/src/hal_buffers.c **** 
 256:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../../os/hal/src/hal_buffers.c **** }
 260:../../../os/hal/src/hal_buffers.c **** 
 261:../../../os/hal/src/hal_buffers.c ****   /**
 262:../../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../../os/hal/src/hal_buffers.c ****    *
 265:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../../os/hal/src/hal_buffers.c ****    *
 267:../../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../../os/hal/src/hal_buffers.c ****    */
 269:../../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 443               		.loc 1 269 0
 444               		.cfi_startproc
 445               	.LVL32:
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 0 */
 449               	.L__stack_usage = 0
 450 0000 DC01      		movw r26,r24
 270:../../../os/hal/src/hal_buffers.c **** 
 271:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../../os/hal/src/hal_buffers.c **** 
 274:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 451               		.loc 1 275 0
 452 0002 1596      		adiw r26,5
 453 0004 8D91      		ld r24,X+
 454 0006 9C91      		ld r25,X
 455 0008 1697      		sbiw r26,5+1
 456               	.LVL33:
 457 000a 0197      		sbiw r24,1
 458 000c 1696      		adiw r26,5+1
 459 000e 9C93      		st X,r25
 460 0010 8E93      		st -X,r24
 461 0012 1597      		sbiw r26,5
 276:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 462               		.loc 1 276 0
 463 0014 1996      		adiw r26,9
 464 0016 2D91      		ld r18,X+
 465 0018 3C91      		ld r19,X
 466 001a 1A97      		sbiw r26,9+1
 467 001c 1D96      		adiw r26,13
 468 001e 8D91      		ld r24,X+
 469 0020 9C91      		ld r25,X
 470 0022 1E97      		sbiw r26,13+1
 471 0024 820F      		add r24,r18
 472 0026 931F      		adc r25,r19
 473 0028 1A96      		adiw r26,9+1
 474 002a 9C93      		st X,r25
 475 002c 8E93      		st -X,r24
 476 002e 1997      		sbiw r26,9
 277:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 477               		.loc 1 277 0
 478 0030 1B96      		adiw r26,11
 479 0032 2D91      		ld r18,X+
 480 0034 3C91      		ld r19,X
 481 0036 1C97      		sbiw r26,11+1
 482 0038 8217      		cp r24,r18
 483 003a 9307      		cpc r25,r19
 484 003c 00F0      		brlo .L22
 278:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 485               		.loc 1 278 0
 486 003e 5196      		adiw r26,17
 487 0040 8D91      		ld r24,X+
 488 0042 9C91      		ld r25,X
 489 0044 5297      		sbiw r26,17+1
 490 0046 1A96      		adiw r26,9+1
 491 0048 9C93      		st X,r25
 492 004a 8E93      		st -X,r24
 493 004c 1997      		sbiw r26,9
 494               	.L22:
 279:../../../os/hal/src/hal_buffers.c ****   }
 280:../../../os/hal/src/hal_buffers.c **** 
 281:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 495               		.loc 1 282 0
 496 004e 5496      		adiw r26,19+1
 497 0050 1C92      		st X,__zero_reg__
 498 0052 1E92      		st -X,__zero_reg__
 499 0054 5397      		sbiw r26,19
 283:../../../os/hal/src/hal_buffers.c **** 
 284:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 500               		.loc 1 285 0
 501 0056 5796      		adiw r26,23
 502 0058 ED91      		ld r30,X+
 503 005a FC91      		ld r31,X
 504 005c 5897      		sbiw r26,23+1
 505 005e 3097      		sbiw r30,0
 506 0060 01F0      		breq .L21
 286:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 507               		.loc 1 286 0
 508 0062 CD01      		movw r24,r26
 509 0064 0994      		ijmp
 510               	.LVL34:
 511               	.L21:
 512 0066 0895      		ret
 513               		.cfi_endproc
 514               	.LFE175:
 516               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 517               	.global	ibqReleaseEmptyBuffer
 519               	ibqReleaseEmptyBuffer:
 520               	.LFB174:
 254:../../../os/hal/src/hal_buffers.c **** 
 521               		.loc 1 254 0
 522               		.cfi_startproc
 523               	.LVL35:
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 0 */
 527               	.L__stack_usage = 0
 528               	.LBB271:
 529               	.LBB272:
 530               	.LBB273:
 531               	.LBB274:
 437:../../../os/common/ports/AVR/chcore.h **** }
 532               		.loc 4 437 0
 533               	/* #APP */
 534               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 535 0000 F894      		cli
 536               	 ;  0 "" 2
 537               	/* #NOAPP */
 538               	.LBE274:
 539               	.LBE273:
 540               	.LBE272:
 541               	.LBE271:
 257:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 542               		.loc 1 257 0
 543 0002 0E94 0000 		call ibqReleaseEmptyBufferS
 544               	.LVL36:
 545               	.LBB275:
 546               	.LBB276:
 547               	.LBB277:
 548               	.LBB278:
 549               	.LBB279:
 550               		.loc 4 447 0
 551               	/* #APP */
 552               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 553 0006 7894      		sei
 554               	 ;  0 "" 2
 555               	/* #NOAPP */
 556 0008 0895      		ret
 557               	.LBE279:
 558               	.LBE278:
 559               	.LBE277:
 560               	.LBE276:
 561               	.LBE275:
 562               		.cfi_endproc
 563               	.LFE174:
 565               		.section	.text.ibqGetTimeout,"ax",@progbits
 566               	.global	ibqGetTimeout
 568               	ibqGetTimeout:
 569               	.LFB176:
 287:../../../os/hal/src/hal_buffers.c ****   }
 288:../../../os/hal/src/hal_buffers.c **** }
 289:../../../os/hal/src/hal_buffers.c **** 
 290:../../../os/hal/src/hal_buffers.c **** /**
 291:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../../os/hal/src/hal_buffers.c ****  *
 296:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../../os/hal/src/hal_buffers.c ****  *
 307:../../../os/hal/src/hal_buffers.c ****  * @api
 308:../../../os/hal/src/hal_buffers.c ****  */
 309:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 570               		.loc 1 309 0
 571               		.cfi_startproc
 572               	.LVL37:
 573 0000 0F93      		push r16
 574               	.LCFI10:
 575               		.cfi_def_cfa_offset 3
 576               		.cfi_offset 16, -2
 577 0002 1F93      		push r17
 578               	.LCFI11:
 579               		.cfi_def_cfa_offset 4
 580               		.cfi_offset 17, -3
 581 0004 CF93      		push r28
 582               	.LCFI12:
 583               		.cfi_def_cfa_offset 5
 584               		.cfi_offset 28, -4
 585 0006 DF93      		push r29
 586               	.LCFI13:
 587               		.cfi_def_cfa_offset 6
 588               		.cfi_offset 29, -5
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 4 */
 592               	.L__stack_usage = 4
 593 0008 8C01      		movw r16,r24
 594               	.LBB280:
 595               	.LBB281:
 596               	.LBB282:
 597               	.LBB283:
 437:../../../os/common/ports/AVR/chcore.h **** }
 598               		.loc 4 437 0
 599               	/* #APP */
 600               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 601 000a F894      		cli
 602               	 ;  0 "" 2
 603               	/* #NOAPP */
 604               	.LBE283:
 605               	.LBE282:
 606               	.LBE281:
 607               	.LBE280:
 310:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../../os/hal/src/hal_buffers.c **** 
 312:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../../os/hal/src/hal_buffers.c **** 
 314:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 608               		.loc 1 315 0
 609 000c DC01      		movw r26,r24
 610 000e 5396      		adiw r26,19
 611 0010 ED91      		ld r30,X+
 612 0012 FC91      		ld r31,X
 613 0014 5497      		sbiw r26,19+1
 614 0016 3097      		sbiw r30,0
 615 0018 01F0      		breq .L30
 616               	.LVL38:
 617               	.L26:
 316:../../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../../os/hal/src/hal_buffers.c ****     }
 321:../../../os/hal/src/hal_buffers.c ****   }
 322:../../../os/hal/src/hal_buffers.c **** 
 323:../../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 618               		.loc 1 324 0
 619 001a C191      		ld r28,Z+
 620 001c D0E0      		ldi r29,0
 621               	.LVL39:
 325:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 622               		.loc 1 325 0
 623 001e D801      		movw r26,r16
 624 0020 5496      		adiw r26,19+1
 625 0022 FC93      		st X,r31
 626 0024 EE93      		st -X,r30
 627 0026 5397      		sbiw r26,19
 326:../../../os/hal/src/hal_buffers.c **** 
 327:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 628               		.loc 1 329 0
 629 0028 5596      		adiw r26,21
 630 002a 8D91      		ld r24,X+
 631 002c 9C91      		ld r25,X
 632 002e 5697      		sbiw r26,21+1
 633 0030 E817      		cp r30,r24
 634 0032 F907      		cpc r31,r25
 635 0034 00F4      		brsh .L31
 636               	.L29:
 637               	.LBB284:
 638               	.LBB285:
 639               	.LBB286:
 640               	.LBB287:
 641               	.LBB288:
 642               		.loc 4 447 0
 643               	/* #APP */
 644               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 645 0036 7894      		sei
 646               	 ;  0 "" 2
 647               	/* #NOAPP */
 648               	.LBE288:
 649               	.LBE287:
 650               	.LBE286:
 651               	.LBE285:
 652               	.LBE284:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../../os/hal/src/hal_buffers.c ****   }
 332:../../../os/hal/src/hal_buffers.c **** 
 333:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../../os/hal/src/hal_buffers.c ****   return msg;
 653               		.loc 1 334 0
 654 0038 CE01      		movw r24,r28
 655               	.LVL40:
 656               	.L28:
 657               	/* epilogue start */
 335:../../../os/hal/src/hal_buffers.c **** }
 658               		.loc 1 335 0
 659 003a DF91      		pop r29
 660 003c CF91      		pop r28
 661 003e 1F91      		pop r17
 662 0040 0F91      		pop r16
 663               	.LVL41:
 664 0042 0895      		ret
 665               	.LVL42:
 666               	.L31:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 667               		.loc 1 330 0
 668 0044 C801      		movw r24,r16
 669 0046 0E94 0000 		call ibqReleaseEmptyBufferS
 670               	.LVL43:
 671 004a 00C0      		rjmp .L29
 672               	.LVL44:
 673               	.L30:
 316:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 674               		.loc 1 316 0
 675 004c 0E94 0000 		call ibqGetFullBufferTimeoutS
 676               	.LVL45:
 317:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 677               		.loc 1 317 0
 678 0050 0097      		sbiw r24,0
 679 0052 01F4      		brne .L27
 680 0054 D801      		movw r26,r16
 681 0056 5396      		adiw r26,19
 682 0058 ED91      		ld r30,X+
 683 005a FC91      		ld r31,X
 684 005c 5497      		sbiw r26,19+1
 685 005e 00C0      		rjmp .L26
 686               	.L27:
 687               	.LBB289:
 688               	.LBB290:
 689               	.LBB291:
 690               	.LBB292:
 691               	.LBB293:
 692               		.loc 4 447 0
 693               	/* #APP */
 694               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 695 0060 7894      		sei
 696               	 ;  0 "" 2
 697               	/* #NOAPP */
 698               	.LBE293:
 699               	.LBE292:
 700               	.LBE291:
 701               	.LBE290:
 702               	.LBE289:
 319:../../../os/hal/src/hal_buffers.c ****     }
 703               		.loc 1 319 0
 704 0062 00C0      		rjmp .L28
 705               		.cfi_endproc
 706               	.LFE176:
 708               		.section	.text.ibqReadTimeout,"ax",@progbits
 709               	.global	ibqReadTimeout
 711               	ibqReadTimeout:
 712               	.LFB177:
 336:../../../os/hal/src/hal_buffers.c **** 
 337:../../../os/hal/src/hal_buffers.c **** /**
 338:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../../os/hal/src/hal_buffers.c ****  *
 344:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../../os/hal/src/hal_buffers.c ****  *
 356:../../../os/hal/src/hal_buffers.c ****  * @api
 357:../../../os/hal/src/hal_buffers.c ****  */
 358:../../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 713               		.loc 1 359 0
 714               		.cfi_startproc
 715               	.LVL46:
 716 0000 3F92      		push r3
 717               	.LCFI14:
 718               		.cfi_def_cfa_offset 3
 719               		.cfi_offset 3, -2
 720 0002 4F92      		push r4
 721               	.LCFI15:
 722               		.cfi_def_cfa_offset 4
 723               		.cfi_offset 4, -3
 724 0004 5F92      		push r5
 725               	.LCFI16:
 726               		.cfi_def_cfa_offset 5
 727               		.cfi_offset 5, -4
 728 0006 6F92      		push r6
 729               	.LCFI17:
 730               		.cfi_def_cfa_offset 6
 731               		.cfi_offset 6, -5
 732 0008 7F92      		push r7
 733               	.LCFI18:
 734               		.cfi_def_cfa_offset 7
 735               		.cfi_offset 7, -6
 736 000a 8F92      		push r8
 737               	.LCFI19:
 738               		.cfi_def_cfa_offset 8
 739               		.cfi_offset 8, -7
 740 000c 9F92      		push r9
 741               	.LCFI20:
 742               		.cfi_def_cfa_offset 9
 743               		.cfi_offset 9, -8
 744 000e AF92      		push r10
 745               	.LCFI21:
 746               		.cfi_def_cfa_offset 10
 747               		.cfi_offset 10, -9
 748 0010 BF92      		push r11
 749               	.LCFI22:
 750               		.cfi_def_cfa_offset 11
 751               		.cfi_offset 11, -10
 752 0012 CF92      		push r12
 753               	.LCFI23:
 754               		.cfi_def_cfa_offset 12
 755               		.cfi_offset 12, -11
 756 0014 DF92      		push r13
 757               	.LCFI24:
 758               		.cfi_def_cfa_offset 13
 759               		.cfi_offset 13, -12
 760 0016 EF92      		push r14
 761               	.LCFI25:
 762               		.cfi_def_cfa_offset 14
 763               		.cfi_offset 14, -13
 764 0018 FF92      		push r15
 765               	.LCFI26:
 766               		.cfi_def_cfa_offset 15
 767               		.cfi_offset 15, -14
 768 001a 0F93      		push r16
 769               	.LCFI27:
 770               		.cfi_def_cfa_offset 16
 771               		.cfi_offset 16, -15
 772 001c 1F93      		push r17
 773               	.LCFI28:
 774               		.cfi_def_cfa_offset 17
 775               		.cfi_offset 17, -16
 776 001e CF93      		push r28
 777               	.LCFI29:
 778               		.cfi_def_cfa_offset 18
 779               		.cfi_offset 28, -17
 780 0020 DF93      		push r29
 781               	.LCFI30:
 782               		.cfi_def_cfa_offset 19
 783               		.cfi_offset 29, -18
 784               	/* prologue: function */
 785               	/* frame size = 0 */
 786               	/* stack size = 17 */
 787               	.L__stack_usage = 17
 788 0022 8C01      		movw r16,r24
 789 0024 7B01      		movw r14,r22
 790 0026 6A01      		movw r12,r20
 791 0028 5901      		movw r10,r18
 792               	.LVL47:
 793               	.LBB294:
 794               	.LBB295:
 795               	.LBB296:
 796               	.LBB297:
 437:../../../os/common/ports/AVR/chcore.h **** }
 797               		.loc 4 437 0
 798               	/* #APP */
 799               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 800 002a F894      		cli
 801               	 ;  0 "" 2
 802               	/* #NOAPP */
 803               	.LBE297:
 804               	.LBE296:
 805               	.LBE295:
 806               	.LBE294:
 807               	.LBB298:
 808               	.LBB299:
 809               	.LBB300:
 810               		.file 5 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 811               		.loc 5 118 0
 812 002c 4090 0000 		lds r4,ch+19
 813 0030 5090 0000 		lds r5,ch+19+1
 814               	.LVL48:
 815               	.LBE300:
 816               	.LBE299:
 817               	.LBE298:
 818               	.LBB301:
 819               	.LBB302:
 820               	.LBB303:
 821               		.file 6 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chtime.h **** 
   4:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chtime.h **** 
   6:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chtime.h ****     (at your option) any later version.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @{
  26:../../../os/rt/include/chtime.h ****  */
  27:../../../os/rt/include/chtime.h **** 
  28:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  29:../../../os/rt/include/chtime.h **** #define CHTIME_H
  30:../../../os/rt/include/chtime.h **** 
  31:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  32:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** 
  35:../../../os/rt/include/chtime.h **** /**
  36:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  37:../../../os/rt/include/chtime.h ****  * @{
  38:../../../os/rt/include/chtime.h ****  */
  39:../../../os/rt/include/chtime.h **** /**
  40:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  41:../../../os/rt/include/chtime.h ****  *          specification.
  42:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chtime.h ****  */
  45:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  46:../../../os/rt/include/chtime.h **** 
  47:../../../os/rt/include/chtime.h **** /**
  48:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  49:../../../os/rt/include/chtime.h ****  *          specification.
  50:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chtime.h ****  */
  53:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  54:../../../os/rt/include/chtime.h **** 
  55:../../../os/rt/include/chtime.h **** /**
  56:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  57:../../../os/rt/include/chtime.h ****  */
  58:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  59:../../../os/rt/include/chtime.h **** 
  60:../../../os/rt/include/chtime.h **** /**
  61:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  62:../../../os/rt/include/chtime.h ****  */
  63:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  64:../../../os/rt/include/chtime.h **** /** @} */
  65:../../../os/rt/include/chtime.h **** 
  66:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  67:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** 
  70:../../../os/rt/include/chtime.h **** /**
  71:../../../os/rt/include/chtime.h ****  * @brief   System time counter resolution.
  72:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  73:../../../os/rt/include/chtime.h ****  */
  74:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_RESOLUTION) || defined(__DOXYGEN__)
  75:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_RESOLUTION                32
  76:../../../os/rt/include/chtime.h **** #endif
  77:../../../os/rt/include/chtime.h **** 
  78:../../../os/rt/include/chtime.h **** /**
  79:../../../os/rt/include/chtime.h ****  * @brief   System tick frequency.
  80:../../../os/rt/include/chtime.h ****  * @details Frequency of the system timer that drives the system ticks. This
  81:../../../os/rt/include/chtime.h ****  *          setting also defines the system tick time unit.
  82:../../../os/rt/include/chtime.h ****  */
  83:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_FREQUENCY) || defined(__DOXYGEN__)
  84:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_FREQUENCY                 1000
  85:../../../os/rt/include/chtime.h **** #endif
  86:../../../os/rt/include/chtime.h **** 
  87:../../../os/rt/include/chtime.h **** /**
  88:../../../os/rt/include/chtime.h ****  * @brief   Time intervals data size.
  89:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  90:../../../os/rt/include/chtime.h ****  */
  91:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_INTERVALS_SIZE) || defined(__DOXYGEN__)
  92:../../../os/rt/include/chtime.h **** #define CH_CFG_INTERVALS_SIZE               32
  93:../../../os/rt/include/chtime.h **** #endif
  94:../../../os/rt/include/chtime.h **** 
  95:../../../os/rt/include/chtime.h **** /**
  96:../../../os/rt/include/chtime.h ****  * @brief   Time types data size.
  97:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16 or 32 bits.
  98:../../../os/rt/include/chtime.h ****  */
  99:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_TIME_TYPES_SIZE) || defined(__DOXYGEN__)
 100:../../../os/rt/include/chtime.h **** #define CH_CFG_TIME_TYPES_SIZE              32
 101:../../../os/rt/include/chtime.h **** #endif
 102:../../../os/rt/include/chtime.h **** 
 103:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 104:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
 105:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 106:../../../os/rt/include/chtime.h **** 
 107:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
 108:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
 109:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
 110:../../../os/rt/include/chtime.h **** #endif
 111:../../../os/rt/include/chtime.h **** 
 112:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
 113:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
 114:../../../os/rt/include/chtime.h **** #endif
 115:../../../os/rt/include/chtime.h **** 
 116:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
 117:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
 118:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
 119:../../../os/rt/include/chtime.h **** #endif
 120:../../../os/rt/include/chtime.h **** 
 121:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
 122:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
 123:../../../os/rt/include/chtime.h **** #endif
 124:../../../os/rt/include/chtime.h **** 
 125:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
 126:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
 127:../../../os/rt/include/chtime.h **** #endif
 128:../../../os/rt/include/chtime.h **** 
 129:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 130:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 132:../../../os/rt/include/chtime.h **** 
 133:../../../os/rt/include/chtime.h **** /**
 134:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 135:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 136:../../../os/rt/include/chtime.h ****  */
 137:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 138:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 139:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 140:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 141:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 142:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 143:../../../os/rt/include/chtime.h **** #endif
 144:../../../os/rt/include/chtime.h **** 
 145:../../../os/rt/include/chtime.h **** /**
 146:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 147:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 148:../../../os/rt/include/chtime.h ****  */
 149:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 150:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 151:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 152:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 153:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 154:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 155:../../../os/rt/include/chtime.h **** #endif
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 158:../../../os/rt/include/chtime.h **** /**
 159:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 160:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 161:../../../os/rt/include/chtime.h ****  */
 162:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /**
 165:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 166:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 167:../../../os/rt/include/chtime.h ****  */
 168:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 169:../../../os/rt/include/chtime.h **** 
 170:../../../os/rt/include/chtime.h **** /**
 171:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 172:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 173:../../../os/rt/include/chtime.h ****  */
 174:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 175:../../../os/rt/include/chtime.h **** 
 176:../../../os/rt/include/chtime.h **** /**
 177:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 178:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 179:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 180:../../../os/rt/include/chtime.h ****  */
 181:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 182:../../../os/rt/include/chtime.h **** 
 183:../../../os/rt/include/chtime.h **** #else
 184:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 185:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 186:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 187:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 188:../../../os/rt/include/chtime.h **** #endif
 189:../../../os/rt/include/chtime.h **** 
 190:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 191:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 192:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 193:../../../os/rt/include/chtime.h **** 
 194:../../../os/rt/include/chtime.h **** 
 195:../../../os/rt/include/chtime.h **** /**
 196:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 197:../../../os/rt/include/chtime.h ****  * @{
 198:../../../os/rt/include/chtime.h ****  */
 199:../../../os/rt/include/chtime.h **** /**
 200:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 201:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 202:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 203:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 204:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 205:../../../os/rt/include/chtime.h ****  *          converted.
 206:../../../os/rt/include/chtime.h ****  *
 207:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 208:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 209:../../../os/rt/include/chtime.h ****  *
 210:../../../os/rt/include/chtime.h ****  * @api
 211:../../../os/rt/include/chtime.h ****  */
 212:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 213:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 214:../../../os/rt/include/chtime.h **** 
 215:../../../os/rt/include/chtime.h **** /**
 216:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 217:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 218:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 219:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 220:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 221:../../../os/rt/include/chtime.h ****  *          converted.
 222:../../../os/rt/include/chtime.h ****  *
 223:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 224:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 225:../../../os/rt/include/chtime.h ****  *
 226:../../../os/rt/include/chtime.h ****  * @api
 227:../../../os/rt/include/chtime.h ****  */
 228:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 229:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 230:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 231:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 232:../../../os/rt/include/chtime.h **** 
 233:../../../os/rt/include/chtime.h **** /**
 234:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 235:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 236:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 237:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 238:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 239:../../../os/rt/include/chtime.h ****  *          converted.
 240:../../../os/rt/include/chtime.h ****  *
 241:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 242:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 243:../../../os/rt/include/chtime.h ****  *
 244:../../../os/rt/include/chtime.h ****  * @api
 245:../../../os/rt/include/chtime.h ****  */
 246:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 247:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 248:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 249:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 250:../../../os/rt/include/chtime.h **** 
 251:../../../os/rt/include/chtime.h **** /**
 252:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 253:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 254:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 255:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 256:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 257:../../../os/rt/include/chtime.h ****  *          converted.
 258:../../../os/rt/include/chtime.h ****  *
 259:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 260:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 261:../../../os/rt/include/chtime.h ****  *
 262:../../../os/rt/include/chtime.h ****  * @api
 263:../../../os/rt/include/chtime.h ****  */
 264:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 265:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 266:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 267:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 268:../../../os/rt/include/chtime.h **** 
 269:../../../os/rt/include/chtime.h **** /**
 270:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 271:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 272:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 273:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 274:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 275:../../../os/rt/include/chtime.h ****  *          converted.
 276:../../../os/rt/include/chtime.h ****  *
 277:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 278:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 279:../../../os/rt/include/chtime.h ****  *
 280:../../../os/rt/include/chtime.h ****  * @api
 281:../../../os/rt/include/chtime.h ****  */
 282:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 283:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 284:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 285:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** /**
 288:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 289:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 290:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 291:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 292:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 293:../../../os/rt/include/chtime.h ****  *          converted.
 294:../../../os/rt/include/chtime.h ****  *
 295:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 296:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 297:../../../os/rt/include/chtime.h ****  *
 298:../../../os/rt/include/chtime.h ****  * @api
 299:../../../os/rt/include/chtime.h ****  */
 300:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 301:../../../os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 302:../../../os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 303:../../../os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 304:../../../os/rt/include/chtime.h **** /** @} */
 305:../../../os/rt/include/chtime.h **** 
 306:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 307:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 308:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 309:../../../os/rt/include/chtime.h **** 
 310:../../../os/rt/include/chtime.h **** /*
 311:../../../os/rt/include/chtime.h ****  * Virtual Timers APIs.
 312:../../../os/rt/include/chtime.h ****  */
 313:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 314:../../../os/rt/include/chtime.h **** extern "C" {
 315:../../../os/rt/include/chtime.h **** #endif
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** #endif
 320:../../../os/rt/include/chtime.h **** 
 321:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 322:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 323:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 324:../../../os/rt/include/chtime.h **** 
 325:../../../os/rt/include/chtime.h **** /**
 326:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 327:../../../os/rt/include/chtime.h ****  * @{
 328:../../../os/rt/include/chtime.h ****  */
 329:../../../os/rt/include/chtime.h **** /**
 330:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 331:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 332:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 333:../../../os/rt/include/chtime.h ****  *
 334:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 335:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 336:../../../os/rt/include/chtime.h ****  *
 337:../../../os/rt/include/chtime.h ****  * @special
 338:../../../os/rt/include/chtime.h ****  */
 339:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 340:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 343:../../../os/rt/include/chtime.h **** 
 344:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 345:../../../os/rt/include/chtime.h ****               "conversion overflow");
 346:../../../os/rt/include/chtime.h **** 
 347:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 348:../../../os/rt/include/chtime.h **** }
 349:../../../os/rt/include/chtime.h **** 
 350:../../../os/rt/include/chtime.h **** /**
 351:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 352:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 353:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 354:../../../os/rt/include/chtime.h ****  *
 355:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 356:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 357:../../../os/rt/include/chtime.h ****  *
 358:../../../os/rt/include/chtime.h ****  * @special
 359:../../../os/rt/include/chtime.h ****  */
 360:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 361:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 362:../../../os/rt/include/chtime.h **** 
 363:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 364:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 365:../../../os/rt/include/chtime.h **** 
 366:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 367:../../../os/rt/include/chtime.h ****               "conversion overflow");
 368:../../../os/rt/include/chtime.h **** 
 369:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 370:../../../os/rt/include/chtime.h **** }
 371:../../../os/rt/include/chtime.h **** 
 372:../../../os/rt/include/chtime.h **** /**
 373:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 374:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 375:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 376:../../../os/rt/include/chtime.h ****  *
 377:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 378:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 379:../../../os/rt/include/chtime.h ****  *
 380:../../../os/rt/include/chtime.h ****  * @special
 381:../../../os/rt/include/chtime.h ****  */
 382:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 383:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 384:../../../os/rt/include/chtime.h **** 
 385:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 386:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 387:../../../os/rt/include/chtime.h **** 
 388:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 389:../../../os/rt/include/chtime.h ****               "conversion overflow");
 390:../../../os/rt/include/chtime.h **** 
 391:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 392:../../../os/rt/include/chtime.h **** }
 393:../../../os/rt/include/chtime.h **** 
 394:../../../os/rt/include/chtime.h **** /**
 395:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 396:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 397:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 398:../../../os/rt/include/chtime.h ****  *
 399:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 400:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 401:../../../os/rt/include/chtime.h ****  *
 402:../../../os/rt/include/chtime.h ****  * @special
 403:../../../os/rt/include/chtime.h ****  */
 404:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 405:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 408:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 409:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 410:../../../os/rt/include/chtime.h **** 
 411:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 412:../../../os/rt/include/chtime.h ****               "conversion overflow");
 413:../../../os/rt/include/chtime.h **** 
 414:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 415:../../../os/rt/include/chtime.h **** }
 416:../../../os/rt/include/chtime.h **** 
 417:../../../os/rt/include/chtime.h **** /**
 418:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 419:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 420:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 421:../../../os/rt/include/chtime.h ****  *
 422:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 423:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 424:../../../os/rt/include/chtime.h ****  *
 425:../../../os/rt/include/chtime.h ****  * @special
 426:../../../os/rt/include/chtime.h ****  */
 427:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 428:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 431:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 432:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 433:../../../os/rt/include/chtime.h **** 
 434:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 435:../../../os/rt/include/chtime.h ****               "conversion overflow");
 436:../../../os/rt/include/chtime.h **** 
 437:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 438:../../../os/rt/include/chtime.h **** }
 439:../../../os/rt/include/chtime.h **** 
 440:../../../os/rt/include/chtime.h **** /**
 441:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 442:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 443:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 444:../../../os/rt/include/chtime.h ****  *
 445:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 446:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 447:../../../os/rt/include/chtime.h ****  *
 448:../../../os/rt/include/chtime.h ****  * @special
 449:../../../os/rt/include/chtime.h ****  */
 450:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 451:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 452:../../../os/rt/include/chtime.h **** 
 453:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 454:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 455:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 456:../../../os/rt/include/chtime.h **** 
 457:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 458:../../../os/rt/include/chtime.h ****               "conversion overflow");
 459:../../../os/rt/include/chtime.h **** 
 460:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 461:../../../os/rt/include/chtime.h **** }
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h **** /**
 464:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 465:../../../os/rt/include/chtime.h ****  *
 466:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 467:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 468:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 469:../../../os/rt/include/chtime.h ****  *
 470:../../../os/rt/include/chtime.h ****  * @xclass
 471:../../../os/rt/include/chtime.h ****  */
 472:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 473:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 474:../../../os/rt/include/chtime.h **** 
 475:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 476:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
 477:../../../os/rt/include/chtime.h **** #endif
 478:../../../os/rt/include/chtime.h **** 
 479:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 822               		.loc 6 479 0
 823 0034 420E      		add r4,r18
 824 0036 531E      		adc r5,r19
 825               	.LVL49:
 826               	.LBE303:
 827               	.LBE302:
 828               	.LBE301:
 360:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 829               		.loc 1 360 0
 830 0038 612C      		mov r6,__zero_reg__
 831 003a 712C      		mov r7,__zero_reg__
 832               	.LBB304:
 833               	.LBB305:
 361:../../../os/hal/src/hal_buffers.c ****   systime_t deadline;
 362:../../../os/hal/src/hal_buffers.c **** 
 363:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 364:../../../os/hal/src/hal_buffers.c **** 
 365:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 366:../../../os/hal/src/hal_buffers.c **** 
 367:../../../os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 368:../../../os/hal/src/hal_buffers.c ****   deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 369:../../../os/hal/src/hal_buffers.c **** 
 370:../../../os/hal/src/hal_buffers.c ****   while (true) {
 371:../../../os/hal/src/hal_buffers.c ****     size_t size;
 372:../../../os/hal/src/hal_buffers.c **** 
 373:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 374:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 375:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 376:../../../os/hal/src/hal_buffers.c **** 
 377:../../../os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 378:../../../os/hal/src/hal_buffers.c ****          deadline.*/
 379:../../../os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 834               		.loc 1 379 0
 835 003c 4901      		movw r8,r18
 836 003e 21E0      		ldi r18,1
 837 0040 821A      		sub r8,r18
 838 0042 9108      		sbc r9,__zero_reg__
 839               	.LVL50:
 840               	.LBE305:
 380:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 381:../../../os/hal/src/hal_buffers.c ****       }
 382:../../../os/hal/src/hal_buffers.c ****       else {
 383:../../../os/hal/src/hal_buffers.c ****         sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 384:../../../os/hal/src/hal_buffers.c ****                                                    deadline);
 385:../../../os/hal/src/hal_buffers.c **** 
 386:../../../os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 387:../../../os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 388:../../../os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 389:../../../os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 390:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 391:../../../os/hal/src/hal_buffers.c ****           return r;
 392:../../../os/hal/src/hal_buffers.c ****         }
 393:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 394:../../../os/hal/src/hal_buffers.c ****       }
 395:../../../os/hal/src/hal_buffers.c **** 
 396:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 397:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 398:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 399:../../../os/hal/src/hal_buffers.c ****         return r;
 400:../../../os/hal/src/hal_buffers.c ****       }
 401:../../../os/hal/src/hal_buffers.c ****     }
 402:../../../os/hal/src/hal_buffers.c **** 
 403:../../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 404:../../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 405:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 406:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 407:../../../os/hal/src/hal_buffers.c ****     }
 408:../../../os/hal/src/hal_buffers.c **** 
 409:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 410:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 411:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 412:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 413:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 841               		.loc 1 413 0
 842 0044 80E4      		ldi r24,lo8(64)
 843 0046 382E      		mov r3,r24
 844               	.LVL51:
 845 0048 00C0      		rjmp .L43
 846               	.LVL52:
 847               	.L46:
 848 004a FB01      		movw r30,r22
 849 004c D701      		movw r26,r14
 850 004e 832D      		mov r24,r3
 851               		0:
 852 0050 0190      		ld r0,Z+
 853 0052 0D92      		st X+,r0
 854 0054 8A95      		dec r24
 855 0056 01F4      		brne 0b
 414:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 856               		.loc 1 414 0
 857 0058 F0E4      		ldi r31,64
 858 005a EF0E      		add r14,r31
 859 005c F11C      		adc r15,__zero_reg__
 860               	.LVL53:
 415:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 861               		.loc 1 415 0
 862 005e F801      		movw r30,r16
 863 0060 8389      		ldd r24,Z+19
 864 0062 9489      		ldd r25,Z+20
 865 0064 805C      		subi r24,-64
 866 0066 9F4F      		sbci r25,-1
 867 0068 948B      		std Z+20,r25
 868 006a 838B      		std Z+19,r24
 416:../../../os/hal/src/hal_buffers.c ****       r         += 64U;
 869               		.loc 1 416 0
 870 006c F0E4      		ldi r31,64
 871 006e 6F0E      		add r6,r31
 872 0070 711C      		adc r7,__zero_reg__
 873               	.LVL54:
 417:../../../os/hal/src/hal_buffers.c ****     }
 418:../../../os/hal/src/hal_buffers.c ****     else {
 419:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 420:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 421:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 422:../../../os/hal/src/hal_buffers.c ****       r         += size;
 423:../../../os/hal/src/hal_buffers.c ****     }
 424:../../../os/hal/src/hal_buffers.c **** 
 425:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 426:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 874               		.loc 1 426 0
 875 0072 F801      		movw r30,r16
 876 0074 2589      		ldd r18,Z+21
 877 0076 3689      		ldd r19,Z+22
 878 0078 8217      		cp r24,r18
 879 007a 9307      		cpc r25,r19
 880 007c 00F4      		brsh .L44
 881               	.L42:
 882               	.LBB318:
 883               	.LBB319:
 884               	.LBB320:
 885               	.LBB321:
 886               	.LBB322:
 887               		.loc 4 447 0
 888               	/* #APP */
 889               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 890 007e 7894      		sei
 891               	 ;  0 "" 2
 892               	/* #NOAPP */
 893               	.LBE322:
 894               	.LBE321:
 895               	.LBE320:
 896               	.LBE319:
 897               	.LBE318:
 427:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 428:../../../os/hal/src/hal_buffers.c ****     }
 429:../../../os/hal/src/hal_buffers.c **** 
 430:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 431:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 432:../../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 898               		.loc 1 432 0
 899 0080 6C14      		cp r6,r12
 900 0082 7D04      		cpc r7,r13
 901 0084 00F4      		brsh .L37
 902               	.L47:
 903               	.LBB327:
 904               	.LBB328:
 905               	.LBB329:
 906               	.LBB330:
 437:../../../os/common/ports/AVR/chcore.h **** }
 907               		.loc 4 437 0
 908               	/* #APP */
 909               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 910 0086 F894      		cli
 911               	 ;  0 "" 2
 912               	.LVL55:
 913               	/* #NOAPP */
 914               	.L43:
 915               	.LBE330:
 916               	.LBE329:
 917               	.LBE328:
 918               	.LBE327:
 374:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 919               		.loc 1 374 0
 920 0088 F801      		movw r30,r16
 921 008a 6389      		ldd r22,Z+19
 922 008c 7489      		ldd r23,Z+20
 923 008e 6115      		cp r22,__zero_reg__
 924 0090 7105      		cpc r23,__zero_reg__
 925 0092 01F4      		brne .+2
 926 0094 00C0      		rjmp .L45
 927               	.L33:
 404:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 928               		.loc 1 404 0
 929 0096 F801      		movw r30,r16
 930 0098 C589      		ldd r28,Z+21
 931 009a D689      		ldd r29,Z+22
 932               	.LVL56:
 405:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 933               		.loc 1 405 0
 934 009c C601      		movw r24,r12
 935 009e 8619      		sub r24,r6
 936 00a0 9709      		sbc r25,r7
 937 00a2 C61B      		sub r28,r22
 938 00a4 D70B      		sbc r29,r23
 939               	.LVL57:
 940 00a6 8C17      		cp r24,r28
 941 00a8 9D07      		cpc r25,r29
 942 00aa 00F4      		brsh .L39
 943 00ac EC01      		movw r28,r24
 944               	.LVL58:
 945               	.L39:
 411:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 946               		.loc 1 411 0
 947 00ae C134      		cpi r28,65
 948 00b0 D105      		cpc r29,__zero_reg__
 949 00b2 00F4      		brsh .L46
 419:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 950               		.loc 1 419 0
 951 00b4 AE01      		movw r20,r28
 952 00b6 C701      		movw r24,r14
 953 00b8 0E94 0000 		call memcpy
 954               	.LVL59:
 420:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 955               		.loc 1 420 0
 956 00bc EC0E      		add r14,r28
 957 00be FD1E      		adc r15,r29
 958               	.LVL60:
 421:../../../os/hal/src/hal_buffers.c ****       r         += size;
 959               		.loc 1 421 0
 960 00c0 F801      		movw r30,r16
 961 00c2 8389      		ldd r24,Z+19
 962 00c4 9489      		ldd r25,Z+20
 963 00c6 8C0F      		add r24,r28
 964 00c8 9D1F      		adc r25,r29
 965 00ca 948B      		std Z+20,r25
 966 00cc 838B      		std Z+19,r24
 422:../../../os/hal/src/hal_buffers.c ****     }
 967               		.loc 1 422 0
 968 00ce 6C0E      		add r6,r28
 969 00d0 7D1E      		adc r7,r29
 970               	.LVL61:
 426:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 971               		.loc 1 426 0
 972 00d2 F801      		movw r30,r16
 973 00d4 2589      		ldd r18,Z+21
 974 00d6 3689      		ldd r19,Z+22
 975 00d8 8217      		cp r24,r18
 976 00da 9307      		cpc r25,r19
 977 00dc 00F0      		brlo .L42
 978               	.L44:
 427:../../../os/hal/src/hal_buffers.c ****     }
 979               		.loc 1 427 0
 980 00de C801      		movw r24,r16
 981 00e0 0E94 0000 		call ibqReleaseEmptyBufferS
 982               	.LVL62:
 983               	.LBB331:
 984               	.LBB326:
 985               	.LBB325:
 986               	.LBB324:
 987               	.LBB323:
 988               		.loc 4 447 0
 989               	/* #APP */
 990               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 991 00e4 7894      		sei
 992               	 ;  0 "" 2
 993               	/* #NOAPP */
 994               	.LBE323:
 995               	.LBE324:
 996               	.LBE325:
 997               	.LBE326:
 998               	.LBE331:
 999               		.loc 1 432 0
 1000 00e6 6C14      		cp r6,r12
 1001 00e8 7D04      		cpc r7,r13
 1002 00ea 00F0      		brlo .L47
 1003               	.LVL63:
 1004               	.L37:
 1005               	.LBE304:
 433:../../../os/hal/src/hal_buffers.c ****       return r;
 434:../../../os/hal/src/hal_buffers.c ****     }
 435:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 436:../../../os/hal/src/hal_buffers.c ****   }
 437:../../../os/hal/src/hal_buffers.c **** }
 1006               		.loc 1 437 0
 1007 00ec C301      		movw r24,r6
 1008               	/* epilogue start */
 1009 00ee DF91      		pop r29
 1010 00f0 CF91      		pop r28
 1011 00f2 1F91      		pop r17
 1012 00f4 0F91      		pop r16
 1013               	.LVL64:
 1014 00f6 FF90      		pop r15
 1015 00f8 EF90      		pop r14
 1016               	.LVL65:
 1017 00fa DF90      		pop r13
 1018 00fc CF90      		pop r12
 1019               	.LVL66:
 1020 00fe BF90      		pop r11
 1021 0100 AF90      		pop r10
 1022               	.LVL67:
 1023 0102 9F90      		pop r9
 1024 0104 8F90      		pop r8
 1025               	.LVL68:
 1026 0106 7F90      		pop r7
 1027 0108 6F90      		pop r6
 1028               	.LVL69:
 1029 010a 5F90      		pop r5
 1030 010c 4F90      		pop r4
 1031 010e 3F90      		pop r3
 1032 0110 0895      		ret
 1033               	.LVL70:
 1034               	.L45:
 1035               	.LBB333:
 1036               	.LBB332:
 379:../../../os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 1037               		.loc 1 379 0
 1038 0112 FEEF      		ldi r31,-2
 1039 0114 8F16      		cp r8,r31
 1040 0116 FFEF      		ldi r31,-1
 1041 0118 9F06      		cpc r9,r31
 1042 011a 00F4      		brsh .L48
 1043               	.LBB306:
 1044               	.LBB307:
 1045               	.LBB308:
 1046               	.LBB309:
 1047               		.loc 5 118 0
 1048 011c 8091 0000 		lds r24,ch+19
 1049 0120 9091 0000 		lds r25,ch+19+1
 1050               	.LVL71:
 1051               	.LBE309:
 1052               	.LBE308:
 1053               	.LBE307:
 1054               	.LBB310:
 1055               	.LBB311:
 1056               	.LBB312:
 480:../../../os/rt/include/chtime.h **** }
 481:../../../os/rt/include/chtime.h **** 
 482:../../../os/rt/include/chtime.h **** /**
 483:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 484:../../../os/rt/include/chtime.h ****  *
 485:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 486:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 487:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 488:../../../os/rt/include/chtime.h ****  *
 489:../../../os/rt/include/chtime.h ****  * @xclass
 490:../../../os/rt/include/chtime.h ****  */
 491:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 492:../../../os/rt/include/chtime.h **** 
 493:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 494:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 495:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1057               		.loc 6 495 0
 1058 0124 B201      		movw r22,r4
 1059 0126 681B      		sub r22,r24
 1060 0128 790B      		sbc r23,r25
 1061               	.LBE312:
 1062               	.LBE311:
 1063               	.LBE310:
 389:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 1064               		.loc 1 389 0
 1065 012a A616      		cp r10,r22
 1066 012c B706      		cpc r11,r23
 1067 012e 00F0      		brlo .L38
 393:../../../os/hal/src/hal_buffers.c ****       }
 1068               		.loc 1 393 0
 1069 0130 C801      		movw r24,r16
 1070               	.LVL72:
 1071 0132 0E94 0000 		call ibqGetFullBufferTimeoutS
 1072               	.LVL73:
 1073               	.LBE306:
 397:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1074               		.loc 1 397 0
 1075 0136 892B      		or r24,r25
 1076 0138 01F4      		brne .L38
 1077               	.LVL74:
 1078               	.L49:
 1079 013a F801      		movw r30,r16
 1080 013c 6389      		ldd r22,Z+19
 1081 013e 7489      		ldd r23,Z+20
 1082 0140 00C0      		rjmp .L33
 1083               	.LVL75:
 1084               	.L48:
 380:../../../os/hal/src/hal_buffers.c ****       }
 1085               		.loc 1 380 0
 1086 0142 B501      		movw r22,r10
 1087 0144 C801      		movw r24,r16
 1088 0146 0E94 0000 		call ibqGetFullBufferTimeoutS
 1089               	.LVL76:
 397:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1090               		.loc 1 397 0
 1091 014a 892B      		or r24,r25
 1092 014c 01F0      		breq .L49
 1093               	.LVL77:
 1094               	.L38:
 1095               	.LBB313:
 1096               	.LBB314:
 1097               	.LBB315:
 1098               	.LBB316:
 1099               	.LBB317:
 1100               		.loc 4 447 0
 1101               	/* #APP */
 1102               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1103 014e 7894      		sei
 1104               	 ;  0 "" 2
 1105               	/* #NOAPP */
 1106               	.LBE317:
 1107               	.LBE316:
 1108               	.LBE315:
 1109               	.LBE314:
 1110               	.LBE313:
 399:../../../os/hal/src/hal_buffers.c ****       }
 1111               		.loc 1 399 0
 1112 0150 00C0      		rjmp .L37
 1113               	.LBE332:
 1114               	.LBE333:
 1115               		.cfi_endproc
 1116               	.LFE177:
 1118               		.section	.text.obqObjectInit,"ax",@progbits
 1119               	.global	obqObjectInit
 1121               	obqObjectInit:
 1122               	.LFB178:
 438:../../../os/hal/src/hal_buffers.c **** 
 439:../../../os/hal/src/hal_buffers.c **** /**
 440:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 441:../../../os/hal/src/hal_buffers.c ****  *
 442:../../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 443:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 444:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 445:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 446:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 447:../../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 448:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 449:../../../os/hal/src/hal_buffers.c ****  *
 450:../../../os/hal/src/hal_buffers.c ****  * @init
 451:../../../os/hal/src/hal_buffers.c ****  */
 452:../../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 453:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1123               		.loc 1 453 0
 1124               		.cfi_startproc
 1125               	.LVL78:
 1126 0000 CF92      		push r12
 1127               	.LCFI31:
 1128               		.cfi_def_cfa_offset 3
 1129               		.cfi_offset 12, -2
 1130 0002 DF92      		push r13
 1131               	.LCFI32:
 1132               		.cfi_def_cfa_offset 4
 1133               		.cfi_offset 13, -3
 1134 0004 EF92      		push r14
 1135               	.LCFI33:
 1136               		.cfi_def_cfa_offset 5
 1137               		.cfi_offset 14, -4
 1138 0006 FF92      		push r15
 1139               	.LCFI34:
 1140               		.cfi_def_cfa_offset 6
 1141               		.cfi_offset 15, -5
 1142 0008 0F93      		push r16
 1143               	.LCFI35:
 1144               		.cfi_def_cfa_offset 7
 1145               		.cfi_offset 16, -6
 1146 000a 1F93      		push r17
 1147               	.LCFI36:
 1148               		.cfi_def_cfa_offset 8
 1149               		.cfi_offset 17, -7
 1150               	/* prologue: function */
 1151               	/* frame size = 0 */
 1152               	/* stack size = 6 */
 1153               	.L__stack_usage = 6
 1154 000c FC01      		movw r30,r24
 1155               	.LVL79:
 1156               	.LBB334:
 1157               	.LBB335:
 1158               	.LBB336:
 1159               	.LBB337:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 1160               		.loc 2 539 0
 1161 000e 9183      		std Z+1,r25
 1162 0010 8083      		st Z,r24
 1163               		.loc 2 540 0
 1164 0012 9383      		std Z+3,r25
 1165 0014 8283      		std Z+2,r24
 1166               	.LBE337:
 1167               	.LBE336:
 1168               	.LBE335:
 1169               	.LBE334:
 454:../../../os/hal/src/hal_buffers.c **** 
 455:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 456:../../../os/hal/src/hal_buffers.c **** 
 457:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 458:../../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1170               		.loc 1 458 0
 1171 0016 6483      		std Z+4,r22
 459:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1172               		.loc 1 459 0
 1173 0018 1683      		std Z+6,r17
 1174 001a 0583      		std Z+5,r16
 460:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1175               		.loc 1 460 0
 1176 001c 5287      		std Z+10,r21
 1177 001e 4187      		std Z+9,r20
 461:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1178               		.loc 1 461 0
 1179 0020 5087      		std Z+8,r21
 1180 0022 4783      		std Z+7,r20
 462:../../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1181               		.loc 1 462 0
 1182 0024 2E5F      		subi r18,-2
 1183 0026 3F4F      		sbci r19,-1
 1184               	.LVL80:
 1185 0028 029F      		mul r16,r18
 1186 002a C001      		movw r24,r0
 1187 002c 039F      		mul r16,r19
 1188 002e 900D      		add r25,r0
 1189 0030 129F      		mul r17,r18
 1190 0032 900D      		add r25,r0
 1191 0034 1124      		clr r1
 1192               	.LVL81:
 1193 0036 840F      		add r24,r20
 1194 0038 951F      		adc r25,r21
 1195 003a 9487      		std Z+12,r25
 1196 003c 8387      		std Z+11,r24
 463:../../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1197               		.loc 1 463 0
 1198 003e 3687      		std Z+14,r19
 1199 0040 2587      		std Z+13,r18
 464:../../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1200               		.loc 1 464 0
 1201 0042 108B      		std Z+16,r17
 1202 0044 0787      		std Z+15,r16
 465:../../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1203               		.loc 1 465 0
 1204 0046 528B      		std Z+18,r21
 1205 0048 418B      		std Z+17,r20
 466:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1206               		.loc 1 466 0
 1207 004a 148A      		std Z+20,__zero_reg__
 1208 004c 138A      		std Z+19,__zero_reg__
 467:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1209               		.loc 1 467 0
 1210 004e 168A      		std Z+22,__zero_reg__
 1211 0050 158A      		std Z+21,__zero_reg__
 468:../../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1212               		.loc 1 468 0
 1213 0052 F08E      		std Z+24,r15
 1214 0054 E78A      		std Z+23,r14
 469:../../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1215               		.loc 1 469 0
 1216 0056 D28E      		std Z+26,r13
 1217 0058 C18E      		std Z+25,r12
 1218               	/* epilogue start */
 470:../../../os/hal/src/hal_buffers.c **** }
 1219               		.loc 1 470 0
 1220 005a 1F91      		pop r17
 1221 005c 0F91      		pop r16
 1222               	.LVL82:
 1223 005e FF90      		pop r15
 1224 0060 EF90      		pop r14
 1225               	.LVL83:
 1226 0062 DF90      		pop r13
 1227 0064 CF90      		pop r12
 1228               	.LVL84:
 1229 0066 0895      		ret
 1230               		.cfi_endproc
 1231               	.LFE178:
 1233               		.section	.text.obqResetI,"ax",@progbits
 1234               	.global	obqResetI
 1236               	obqResetI:
 1237               	.LFB179:
 471:../../../os/hal/src/hal_buffers.c **** 
 472:../../../os/hal/src/hal_buffers.c **** /**
 473:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 474:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 475:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 476:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 477:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 478:../../../os/hal/src/hal_buffers.c ****  *
 479:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 480:../../../os/hal/src/hal_buffers.c ****  *
 481:../../../os/hal/src/hal_buffers.c ****  * @iclass
 482:../../../os/hal/src/hal_buffers.c ****  */
 483:../../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1238               		.loc 1 483 0
 1239               		.cfi_startproc
 1240               	.LVL85:
 1241               	/* prologue: function */
 1242               	/* frame size = 0 */
 1243               	/* stack size = 0 */
 1244               	.L__stack_usage = 0
 1245 0000 FC01      		movw r30,r24
 484:../../../os/hal/src/hal_buffers.c **** 
 485:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 486:../../../os/hal/src/hal_buffers.c **** 
 487:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1246               		.loc 1 487 0
 1247 0002 8785      		ldd r24,Z+15
 1248 0004 9089      		ldd r25,Z+16
 1249               	.LVL86:
 1250 0006 9683      		std Z+6,r25
 1251 0008 8583      		std Z+5,r24
 488:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1252               		.loc 1 488 0
 1253 000a 8189      		ldd r24,Z+17
 1254 000c 9289      		ldd r25,Z+18
 1255 000e 9287      		std Z+10,r25
 1256 0010 8187      		std Z+9,r24
 489:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1257               		.loc 1 489 0
 1258 0012 9087      		std Z+8,r25
 1259 0014 8783      		std Z+7,r24
 490:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1260               		.loc 1 490 0
 1261 0016 148A      		std Z+20,__zero_reg__
 1262 0018 138A      		std Z+19,__zero_reg__
 491:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1263               		.loc 1 491 0
 1264 001a 168A      		std Z+22,__zero_reg__
 1265 001c 158A      		std Z+21,__zero_reg__
 1266               	.LVL87:
 1267               	.LBB338:
 1268               	.LBB339:
 1269               		.loc 3 857 0
 1270 001e 6EEF      		ldi r22,lo8(-2)
 1271 0020 7FEF      		ldi r23,lo8(-1)
 1272 0022 CF01      		movw r24,r30
 1273 0024 0C94 0000 		jmp chThdDequeueAllI
 1274               	.LVL88:
 1275               	.LBE339:
 1276               	.LBE338:
 1277               		.cfi_endproc
 1278               	.LFE179:
 1280               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1281               	.global	obqGetFullBufferI
 1283               	obqGetFullBufferI:
 1284               	.LFB180:
 492:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 493:../../../os/hal/src/hal_buffers.c **** }
 494:../../../os/hal/src/hal_buffers.c **** 
 495:../../../os/hal/src/hal_buffers.c **** /**
 496:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 497:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 498:../../../os/hal/src/hal_buffers.c ****  *
 499:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 500:../../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 501:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 502:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 503:../../../os/hal/src/hal_buffers.c ****  *
 504:../../../os/hal/src/hal_buffers.c ****  * @iclass
 505:../../../os/hal/src/hal_buffers.c ****  */
 506:../../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 507:../../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1285               		.loc 1 507 0
 1286               		.cfi_startproc
 1287               	.LVL89:
 1288               	/* prologue: function */
 1289               	/* frame size = 0 */
 1290               	/* stack size = 0 */
 1291               	.L__stack_usage = 0
 1292 0000 FC01      		movw r30,r24
 508:../../../os/hal/src/hal_buffers.c **** 
 509:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 510:../../../os/hal/src/hal_buffers.c **** 
 511:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1293               		.loc 1 511 0
 1294 0002 2185      		ldd r18,Z+9
 1295 0004 3285      		ldd r19,Z+10
 1296 0006 8781      		ldd r24,Z+7
 1297 0008 9085      		ldd r25,Z+8
 1298               	.LVL90:
 1299 000a 8217      		cp r24,r18
 1300 000c 9307      		cpc r25,r19
 1301 000e 01F0      		breq .L59
 1302               	.L53:
 512:../../../os/hal/src/hal_buffers.c ****     return NULL;
 513:../../../os/hal/src/hal_buffers.c ****   }
 514:../../../os/hal/src/hal_buffers.c **** 
 515:../../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 516:../../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1303               		.loc 1 516 0
 1304 0010 F901      		movw r30,r18
 1305               	.LVL91:
 1306 0012 2191      		ld r18,Z+
 1307 0014 3191      		ld r19,Z+
 1308 0016 CF01      		movw r24,r30
 1309 0018 FB01      		movw r30,r22
 1310 001a 3183      		std Z+1,r19
 1311 001c 2083      		st Z,r18
 517:../../../os/hal/src/hal_buffers.c **** 
 518:../../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 519:../../../os/hal/src/hal_buffers.c **** }
 1312               		.loc 1 519 0
 1313 001e 0895      		ret
 1314               	.LVL92:
 1315               	.L59:
 511:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1316               		.loc 1 511 0 discriminator 1
 1317 0020 8581      		ldd r24,Z+5
 1318 0022 9681      		ldd r25,Z+6
 1319 0024 892B      		or r24,r25
 1320 0026 01F0      		breq .L53
 512:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1321               		.loc 1 512 0
 1322 0028 80E0      		ldi r24,0
 1323 002a 90E0      		ldi r25,0
 1324 002c 0895      		ret
 1325               		.cfi_endproc
 1326               	.LFE180:
 1328               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1329               	.global	obqReleaseEmptyBufferI
 1331               	obqReleaseEmptyBufferI:
 1332               	.LFB181:
 520:../../../os/hal/src/hal_buffers.c **** 
 521:../../../os/hal/src/hal_buffers.c **** /**
 522:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 523:../../../os/hal/src/hal_buffers.c ****  *
 524:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 525:../../../os/hal/src/hal_buffers.c ****  *
 526:../../../os/hal/src/hal_buffers.c ****  * @iclass
 527:../../../os/hal/src/hal_buffers.c ****  */
 528:../../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1333               		.loc 1 528 0
 1334               		.cfi_startproc
 1335               	.LVL93:
 1336               	/* prologue: function */
 1337               	/* frame size = 0 */
 1338               	/* stack size = 0 */
 1339               	.L__stack_usage = 0
 1340 0000 FC01      		movw r30,r24
 529:../../../os/hal/src/hal_buffers.c **** 
 530:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 531:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 532:../../../os/hal/src/hal_buffers.c **** 
 533:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 534:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1341               		.loc 1 534 0
 1342 0002 8581      		ldd r24,Z+5
 1343 0004 9681      		ldd r25,Z+6
 1344               	.LVL94:
 1345 0006 0196      		adiw r24,1
 1346 0008 9683      		std Z+6,r25
 1347 000a 8583      		std Z+5,r24
 535:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1348               		.loc 1 535 0
 1349 000c 2185      		ldd r18,Z+9
 1350 000e 3285      		ldd r19,Z+10
 1351 0010 8585      		ldd r24,Z+13
 1352 0012 9685      		ldd r25,Z+14
 1353 0014 820F      		add r24,r18
 1354 0016 931F      		adc r25,r19
 1355 0018 9287      		std Z+10,r25
 1356 001a 8187      		std Z+9,r24
 536:../../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1357               		.loc 1 536 0
 1358 001c 2385      		ldd r18,Z+11
 1359 001e 3485      		ldd r19,Z+12
 1360 0020 8217      		cp r24,r18
 1361 0022 9307      		cpc r25,r19
 1362 0024 00F0      		brlo .L61
 537:../../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1363               		.loc 1 537 0
 1364 0026 8189      		ldd r24,Z+17
 1365 0028 9289      		ldd r25,Z+18
 1366 002a 9287      		std Z+10,r25
 1367 002c 8187      		std Z+9,r24
 1368               	.L61:
 1369               	.LVL95:
 1370               	.LBB340:
 1371               	.LBB341:
 844:../../../os/hal/osal/rt/osal.h **** }
 1372               		.loc 3 844 0
 1373 002e 60E0      		ldi r22,0
 1374 0030 70E0      		ldi r23,0
 1375 0032 CF01      		movw r24,r30
 1376 0034 0C94 0000 		jmp chThdDequeueNextI
 1377               	.LVL96:
 1378               	.LBE341:
 1379               	.LBE340:
 1380               		.cfi_endproc
 1381               	.LFE181:
 1383               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1384               	.global	obqGetEmptyBufferTimeoutS
 1386               	obqGetEmptyBufferTimeoutS:
 1387               	.LFB183:
 538:../../../os/hal/src/hal_buffers.c ****   }
 539:../../../os/hal/src/hal_buffers.c **** 
 540:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 541:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 542:../../../os/hal/src/hal_buffers.c **** }
 543:../../../os/hal/src/hal_buffers.c **** 
 544:../../../os/hal/src/hal_buffers.c **** /**
 545:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 546:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 547:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 548:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 549:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 550:../../../os/hal/src/hal_buffers.c ****  *
 551:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 552:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 553:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 554:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 555:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 556:../../../os/hal/src/hal_buffers.c ****  *                      .
 557:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 558:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 559:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 560:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 561:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 562:../../../os/hal/src/hal_buffers.c ****  *
 563:../../../os/hal/src/hal_buffers.c ****  * @api
 564:../../../os/hal/src/hal_buffers.c ****  */
 565:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 566:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 567:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 568:../../../os/hal/src/hal_buffers.c **** 
 569:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 570:../../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 571:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 572:../../../os/hal/src/hal_buffers.c **** 
 573:../../../os/hal/src/hal_buffers.c ****   return msg;
 574:../../../os/hal/src/hal_buffers.c **** }
 575:../../../os/hal/src/hal_buffers.c **** 
 576:../../../os/hal/src/hal_buffers.c **** /**
 577:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 578:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 579:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 580:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 581:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 582:../../../os/hal/src/hal_buffers.c ****  *
 583:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 584:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 585:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 586:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 587:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 588:../../../os/hal/src/hal_buffers.c ****  *                      .
 589:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 590:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 591:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 592:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 593:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 594:../../../os/hal/src/hal_buffers.c ****  *
 595:../../../os/hal/src/hal_buffers.c ****  * @sclass
 596:../../../os/hal/src/hal_buffers.c ****  */
 597:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 598:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1388               		.loc 1 598 0
 1389               		.cfi_startproc
 1390               	.LVL97:
 1391 0000 0F93      		push r16
 1392               	.LCFI37:
 1393               		.cfi_def_cfa_offset 3
 1394               		.cfi_offset 16, -2
 1395 0002 1F93      		push r17
 1396               	.LCFI38:
 1397               		.cfi_def_cfa_offset 4
 1398               		.cfi_offset 17, -3
 1399 0004 CF93      		push r28
 1400               	.LCFI39:
 1401               		.cfi_def_cfa_offset 5
 1402               		.cfi_offset 28, -4
 1403 0006 DF93      		push r29
 1404               	.LCFI40:
 1405               		.cfi_def_cfa_offset 6
 1406               		.cfi_offset 29, -5
 1407               	/* prologue: function */
 1408               	/* frame size = 0 */
 1409               	/* stack size = 4 */
 1410               	.L__stack_usage = 4
 1411 0008 EC01      		movw r28,r24
 1412 000a 8B01      		movw r16,r22
 599:../../../os/hal/src/hal_buffers.c **** 
 600:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 601:../../../os/hal/src/hal_buffers.c **** 
 602:../../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1413               		.loc 1 602 0
 1414 000c 00C0      		rjmp .L63
 1415               	.LVL98:
 1416               	.L65:
 1417               	.LBB350:
 603:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1418               		.loc 1 603 0
 1419 000e 8C81      		ldd r24,Y+4
 1420 0010 8111      		cpse r24,__zero_reg__
 1421 0012 00C0      		rjmp .L66
 1422               	.LVL99:
 1423               	.LBB351:
 1424               	.LBB352:
 831:../../../os/hal/osal/rt/osal.h **** }
 1425               		.loc 3 831 0
 1426 0014 B801      		movw r22,r16
 1427 0016 CE01      		movw r24,r28
 1428 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1429               	.LVL100:
 1430               	.LBE352:
 1431               	.LBE351:
 604:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 605:../../../os/hal/src/hal_buffers.c ****     }
 606:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 607:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1432               		.loc 1 607 0
 1433 001c 97FD      		sbrc r25,7
 1434 001e 00C0      		rjmp .L64
 1435               	.LVL101:
 1436               	.L63:
 1437               	.LBE350:
 602:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1438               		.loc 1 602 0
 1439 0020 8D81      		ldd r24,Y+5
 1440 0022 9E81      		ldd r25,Y+6
 1441 0024 892B      		or r24,r25
 1442 0026 01F0      		breq .L65
 1443               	.LVL102:
 1444               	.LBB353:
 1445               	.LBB354:
 608:../../../os/hal/src/hal_buffers.c ****       return msg;
 609:../../../os/hal/src/hal_buffers.c ****     }
 610:../../../os/hal/src/hal_buffers.c ****   }
 611:../../../os/hal/src/hal_buffers.c **** 
 612:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 613:../../../os/hal/src/hal_buffers.c **** 
 614:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 615:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1446               		.loc 1 615 0
 1447 0028 2F81      		ldd r18,Y+7
 1448 002a 3885      		ldd r19,Y+8
 1449 002c C901      		movw r24,r18
 1450 002e 0296      		adiw r24,2
 1451 0030 9C8B      		std Y+20,r25
 1452 0032 8B8B      		std Y+19,r24
 616:../../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1453               		.loc 1 616 0
 1454 0034 8D85      		ldd r24,Y+13
 1455 0036 9E85      		ldd r25,Y+14
 1456 0038 820F      		add r24,r18
 1457 003a 931F      		adc r25,r19
 1458 003c 9E8B      		std Y+22,r25
 1459 003e 8D8B      		std Y+21,r24
 1460 0040 80E0      		ldi r24,0
 1461 0042 90E0      		ldi r25,0
 1462               	.LVL103:
 1463               	.L64:
 1464               	/* epilogue start */
 1465               	.LBE354:
 1466               	.LBE353:
 617:../../../os/hal/src/hal_buffers.c **** 
 618:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 619:../../../os/hal/src/hal_buffers.c **** }
 1467               		.loc 1 619 0
 1468 0044 DF91      		pop r29
 1469 0046 CF91      		pop r28
 1470               	.LVL104:
 1471 0048 1F91      		pop r17
 1472 004a 0F91      		pop r16
 1473               	.LVL105:
 1474 004c 0895      		ret
 1475               	.LVL106:
 1476               	.L66:
 1477               	.LBB355:
 604:../../../os/hal/src/hal_buffers.c ****     }
 1478               		.loc 1 604 0
 1479 004e 8EEF      		ldi r24,lo8(-2)
 1480 0050 9FEF      		ldi r25,lo8(-1)
 1481               	/* epilogue start */
 1482               	.LBE355:
 1483               		.loc 1 619 0
 1484 0052 DF91      		pop r29
 1485 0054 CF91      		pop r28
 1486               	.LVL107:
 1487 0056 1F91      		pop r17
 1488 0058 0F91      		pop r16
 1489               	.LVL108:
 1490 005a 0895      		ret
 1491               		.cfi_endproc
 1492               	.LFE183:
 1494               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1495               	.global	obqGetEmptyBufferTimeout
 1497               	obqGetEmptyBufferTimeout:
 1498               	.LFB182:
 566:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1499               		.loc 1 566 0
 1500               		.cfi_startproc
 1501               	.LVL109:
 1502               	/* prologue: function */
 1503               	/* frame size = 0 */
 1504               	/* stack size = 0 */
 1505               	.L__stack_usage = 0
 1506               	.LBB356:
 1507               	.LBB357:
 1508               	.LBB358:
 1509               	.LBB359:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1510               		.loc 4 437 0
 1511               	/* #APP */
 1512               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1513 0000 F894      		cli
 1514               	 ;  0 "" 2
 1515               	/* #NOAPP */
 1516               	.LBE359:
 1517               	.LBE358:
 1518               	.LBE357:
 1519               	.LBE356:
 570:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1520               		.loc 1 570 0
 1521 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1522               	.LVL110:
 1523               	.LBB360:
 1524               	.LBB361:
 1525               	.LBB362:
 1526               	.LBB363:
 1527               	.LBB364:
 1528               		.loc 4 447 0
 1529               	/* #APP */
 1530               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1531 0006 7894      		sei
 1532               	 ;  0 "" 2
 1533               	/* #NOAPP */
 1534               	.LBE364:
 1535               	.LBE363:
 1536               	.LBE362:
 1537               	.LBE361:
 1538               	.LBE360:
 574:../../../os/hal/src/hal_buffers.c **** 
 1539               		.loc 1 574 0
 1540 0008 0895      		ret
 1541               		.cfi_endproc
 1542               	.LFE182:
 1544               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1545               	.global	obqPostFullBufferS
 1547               	obqPostFullBufferS:
 1548               	.LFB185:
 620:../../../os/hal/src/hal_buffers.c **** 
 621:../../../os/hal/src/hal_buffers.c **** /**
 622:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 623:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 624:../../../os/hal/src/hal_buffers.c ****  *
 625:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 626:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 627:../../../os/hal/src/hal_buffers.c ****  *
 628:../../../os/hal/src/hal_buffers.c ****  * @api
 629:../../../os/hal/src/hal_buffers.c ****  */
 630:../../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 631:../../../os/hal/src/hal_buffers.c **** 
 632:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 633:../../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 634:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 635:../../../os/hal/src/hal_buffers.c **** }
 636:../../../os/hal/src/hal_buffers.c **** 
 637:../../../os/hal/src/hal_buffers.c **** /**
 638:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 639:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 640:../../../os/hal/src/hal_buffers.c ****  *
 641:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 642:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 643:../../../os/hal/src/hal_buffers.c ****  *
 644:../../../os/hal/src/hal_buffers.c ****  * @sclass
 645:../../../os/hal/src/hal_buffers.c ****  */
 646:../../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 1549               		.loc 1 646 0
 1550               		.cfi_startproc
 1551               	.LVL111:
 1552               	/* prologue: function */
 1553               	/* frame size = 0 */
 1554               	/* stack size = 0 */
 1555               	.L__stack_usage = 0
 1556 0000 DC01      		movw r26,r24
 647:../../../os/hal/src/hal_buffers.c **** 
 648:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 649:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 650:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 651:../../../os/hal/src/hal_buffers.c **** 
 652:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 653:../../../os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1557               		.loc 1 653 0
 1558 0002 1796      		adiw r26,7
 1559 0004 ED91      		ld r30,X+
 1560 0006 FC91      		ld r31,X
 1561 0008 1897      		sbiw r26,7+1
 1562 000a 7183      		std Z+1,r23
 1563 000c 6083      		st Z,r22
 654:../../../os/hal/src/hal_buffers.c **** 
 655:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 656:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1564               		.loc 1 656 0
 1565 000e 1596      		adiw r26,5
 1566 0010 2D91      		ld r18,X+
 1567 0012 3C91      		ld r19,X
 1568 0014 1697      		sbiw r26,5+1
 1569 0016 2150      		subi r18,1
 1570 0018 3109      		sbc r19,__zero_reg__
 1571 001a 1696      		adiw r26,5+1
 1572 001c 3C93      		st X,r19
 1573 001e 2E93      		st -X,r18
 1574 0020 1597      		sbiw r26,5
 657:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1575               		.loc 1 657 0
 1576 0022 1D96      		adiw r26,13
 1577 0024 8D91      		ld r24,X+
 1578 0026 9C91      		ld r25,X
 1579 0028 1E97      		sbiw r26,13+1
 1580               	.LVL112:
 1581 002a 8E0F      		add r24,r30
 1582 002c 9F1F      		adc r25,r31
 1583 002e 1896      		adiw r26,7+1
 1584 0030 9C93      		st X,r25
 1585 0032 8E93      		st -X,r24
 1586 0034 1797      		sbiw r26,7
 658:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1587               		.loc 1 658 0
 1588 0036 1B96      		adiw r26,11
 1589 0038 2D91      		ld r18,X+
 1590 003a 3C91      		ld r19,X
 1591 003c 1C97      		sbiw r26,11+1
 1592 003e 8217      		cp r24,r18
 1593 0040 9307      		cpc r25,r19
 1594 0042 00F0      		brlo .L70
 659:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1595               		.loc 1 659 0
 1596 0044 5196      		adiw r26,17
 1597 0046 8D91      		ld r24,X+
 1598 0048 9C91      		ld r25,X
 1599 004a 5297      		sbiw r26,17+1
 1600 004c 1896      		adiw r26,7+1
 1601 004e 9C93      		st X,r25
 1602 0050 8E93      		st -X,r24
 1603 0052 1797      		sbiw r26,7
 1604               	.L70:
 660:../../../os/hal/src/hal_buffers.c ****   }
 661:../../../os/hal/src/hal_buffers.c **** 
 662:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 663:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1605               		.loc 1 663 0
 1606 0054 5496      		adiw r26,19+1
 1607 0056 1C92      		st X,__zero_reg__
 1608 0058 1E92      		st -X,__zero_reg__
 1609 005a 5397      		sbiw r26,19
 664:../../../os/hal/src/hal_buffers.c **** 
 665:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 666:../../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1610               		.loc 1 666 0
 1611 005c 5796      		adiw r26,23
 1612 005e ED91      		ld r30,X+
 1613 0060 FC91      		ld r31,X
 1614 0062 5897      		sbiw r26,23+1
 1615 0064 3097      		sbiw r30,0
 1616 0066 01F0      		breq .L69
 667:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1617               		.loc 1 667 0
 1618 0068 CD01      		movw r24,r26
 1619 006a 0994      		ijmp
 1620               	.LVL113:
 1621               	.L69:
 1622 006c 0895      		ret
 1623               		.cfi_endproc
 1624               	.LFE185:
 1626               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1627               	.global	obqPostFullBuffer
 1629               	obqPostFullBuffer:
 1630               	.LFB184:
 630:../../../os/hal/src/hal_buffers.c **** 
 1631               		.loc 1 630 0
 1632               		.cfi_startproc
 1633               	.LVL114:
 1634               	/* prologue: function */
 1635               	/* frame size = 0 */
 1636               	/* stack size = 0 */
 1637               	.L__stack_usage = 0
 1638               	.LBB365:
 1639               	.LBB366:
 1640               	.LBB367:
 1641               	.LBB368:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1642               		.loc 4 437 0
 1643               	/* #APP */
 1644               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1645 0000 F894      		cli
 1646               	 ;  0 "" 2
 1647               	/* #NOAPP */
 1648               	.LBE368:
 1649               	.LBE367:
 1650               	.LBE366:
 1651               	.LBE365:
 633:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1652               		.loc 1 633 0
 1653 0002 0E94 0000 		call obqPostFullBufferS
 1654               	.LVL115:
 1655               	.LBB369:
 1656               	.LBB370:
 1657               	.LBB371:
 1658               	.LBB372:
 1659               	.LBB373:
 1660               		.loc 4 447 0
 1661               	/* #APP */
 1662               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1663 0006 7894      		sei
 1664               	 ;  0 "" 2
 1665               	/* #NOAPP */
 1666 0008 0895      		ret
 1667               	.LBE373:
 1668               	.LBE372:
 1669               	.LBE371:
 1670               	.LBE370:
 1671               	.LBE369:
 1672               		.cfi_endproc
 1673               	.LFE184:
 1675               		.section	.text.obqPutTimeout,"ax",@progbits
 1676               	.global	obqPutTimeout
 1678               	obqPutTimeout:
 1679               	.LFB186:
 668:../../../os/hal/src/hal_buffers.c ****   }
 669:../../../os/hal/src/hal_buffers.c **** }
 670:../../../os/hal/src/hal_buffers.c **** 
 671:../../../os/hal/src/hal_buffers.c **** /**
 672:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 673:../../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 674:../../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 675:../../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 676:../../../os/hal/src/hal_buffers.c ****  *
 677:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 678:../../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 679:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 680:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 681:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 682:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 683:../../../os/hal/src/hal_buffers.c ****  *                      .
 684:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 685:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 686:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 687:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 688:../../../os/hal/src/hal_buffers.c ****  *
 689:../../../os/hal/src/hal_buffers.c ****  * @api
 690:../../../os/hal/src/hal_buffers.c ****  */
 691:../../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 692:../../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1680               		.loc 1 692 0
 1681               		.cfi_startproc
 1682               	.LVL116:
 1683 0000 1F93      		push r17
 1684               	.LCFI41:
 1685               		.cfi_def_cfa_offset 3
 1686               		.cfi_offset 17, -2
 1687 0002 CF93      		push r28
 1688               	.LCFI42:
 1689               		.cfi_def_cfa_offset 4
 1690               		.cfi_offset 28, -3
 1691 0004 DF93      		push r29
 1692               	.LCFI43:
 1693               		.cfi_def_cfa_offset 5
 1694               		.cfi_offset 29, -4
 1695               	/* prologue: function */
 1696               	/* frame size = 0 */
 1697               	/* stack size = 3 */
 1698               	.L__stack_usage = 3
 1699 0006 EC01      		movw r28,r24
 1700 0008 162F      		mov r17,r22
 1701               	.LBB374:
 1702               	.LBB375:
 1703               	.LBB376:
 1704               	.LBB377:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1705               		.loc 4 437 0
 1706               	/* #APP */
 1707               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1708 000a F894      		cli
 1709               	 ;  0 "" 2
 1710               	/* #NOAPP */
 1711               	.LBE377:
 1712               	.LBE376:
 1713               	.LBE375:
 1714               	.LBE374:
 693:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 694:../../../os/hal/src/hal_buffers.c **** 
 695:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 696:../../../os/hal/src/hal_buffers.c **** 
 697:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 698:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1715               		.loc 1 698 0
 1716 000c EB89      		ldd r30,Y+19
 1717 000e FC89      		ldd r31,Y+20
 1718 0010 3097      		sbiw r30,0
 1719 0012 01F0      		breq .L78
 1720               	.LVL117:
 1721               	.L74:
 699:../../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 700:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 701:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 702:../../../os/hal/src/hal_buffers.c ****       return msg;
 703:../../../os/hal/src/hal_buffers.c ****     }
 704:../../../os/hal/src/hal_buffers.c ****   }
 705:../../../os/hal/src/hal_buffers.c **** 
 706:../../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 707:../../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1722               		.loc 1 707 0
 1723 0014 1083      		st Z,r17
 708:../../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1724               		.loc 1 708 0
 1725 0016 8B89      		ldd r24,Y+19
 1726 0018 9C89      		ldd r25,Y+20
 1727 001a 0196      		adiw r24,1
 1728 001c 9C8B      		std Y+20,r25
 1729 001e 8B8B      		std Y+19,r24
 709:../../../os/hal/src/hal_buffers.c **** 
 710:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 711:../../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 712:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1730               		.loc 1 712 0
 1731 0020 2D89      		ldd r18,Y+21
 1732 0022 3E89      		ldd r19,Y+22
 1733 0024 8217      		cp r24,r18
 1734 0026 9307      		cpc r25,r19
 1735 0028 00F4      		brsh .L79
 1736               	.L77:
 1737               	.LBB378:
 1738               	.LBB379:
 1739               	.LBB380:
 1740               	.LBB381:
 1741               	.LBB382:
 1742               		.loc 4 447 0
 1743               	/* #APP */
 1744               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1745 002a 7894      		sei
 1746               	 ;  0 "" 2
 1747               	/* #NOAPP */
 1748               	.LBE382:
 1749               	.LBE381:
 1750               	.LBE380:
 1751               	.LBE379:
 1752               	.LBE378:
 713:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 714:../../../os/hal/src/hal_buffers.c ****   }
 715:../../../os/hal/src/hal_buffers.c **** 
 716:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 717:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1753               		.loc 1 717 0
 1754 002c 80E0      		ldi r24,0
 1755 002e 90E0      		ldi r25,0
 1756               	.L76:
 1757               	/* epilogue start */
 718:../../../os/hal/src/hal_buffers.c **** }
 1758               		.loc 1 718 0
 1759 0030 DF91      		pop r29
 1760 0032 CF91      		pop r28
 1761               	.LVL118:
 1762 0034 1F91      		pop r17
 1763               	.LVL119:
 1764 0036 0895      		ret
 1765               	.LVL120:
 1766               	.L79:
 713:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1767               		.loc 1 713 0
 1768 0038 6D85      		ldd r22,Y+13
 1769 003a 7E85      		ldd r23,Y+14
 1770 003c 6250      		subi r22,2
 1771 003e 7109      		sbc r23,__zero_reg__
 1772 0040 CE01      		movw r24,r28
 1773 0042 0E94 0000 		call obqPostFullBufferS
 1774               	.LVL121:
 1775 0046 00C0      		rjmp .L77
 1776               	.LVL122:
 1777               	.L78:
 699:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1778               		.loc 1 699 0
 1779 0048 BA01      		movw r22,r20
 1780 004a 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1781               	.LVL123:
 700:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1782               		.loc 1 700 0
 1783 004e 0097      		sbiw r24,0
 1784 0050 01F4      		brne .L75
 1785 0052 EB89      		ldd r30,Y+19
 1786 0054 FC89      		ldd r31,Y+20
 1787 0056 00C0      		rjmp .L74
 1788               	.L75:
 1789               	.LBB383:
 1790               	.LBB384:
 1791               	.LBB385:
 1792               	.LBB386:
 1793               	.LBB387:
 1794               		.loc 4 447 0
 1795               	/* #APP */
 1796               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1797 0058 7894      		sei
 1798               	 ;  0 "" 2
 1799               	/* #NOAPP */
 1800               	.LBE387:
 1801               	.LBE386:
 1802               	.LBE385:
 1803               	.LBE384:
 1804               	.LBE383:
 702:../../../os/hal/src/hal_buffers.c ****     }
 1805               		.loc 1 702 0
 1806 005a 00C0      		rjmp .L76
 1807               		.cfi_endproc
 1808               	.LFE186:
 1810               		.section	.text.obqWriteTimeout,"ax",@progbits
 1811               	.global	obqWriteTimeout
 1813               	obqWriteTimeout:
 1814               	.LFB187:
 719:../../../os/hal/src/hal_buffers.c **** 
 720:../../../os/hal/src/hal_buffers.c **** /**
 721:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 722:../../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 723:../../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 724:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 725:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 726:../../../os/hal/src/hal_buffers.c ****  *
 727:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 728:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 729:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 730:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 731:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 732:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 733:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 734:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 735:../../../os/hal/src/hal_buffers.c ****  *                      .
 736:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 737:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 738:../../../os/hal/src/hal_buffers.c ****  *
 739:../../../os/hal/src/hal_buffers.c ****  * @api
 740:../../../os/hal/src/hal_buffers.c ****  */
 741:../../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 742:../../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1815               		.loc 1 742 0
 1816               		.cfi_startproc
 1817               	.LVL124:
 1818 0000 3F92      		push r3
 1819               	.LCFI44:
 1820               		.cfi_def_cfa_offset 3
 1821               		.cfi_offset 3, -2
 1822 0002 4F92      		push r4
 1823               	.LCFI45:
 1824               		.cfi_def_cfa_offset 4
 1825               		.cfi_offset 4, -3
 1826 0004 5F92      		push r5
 1827               	.LCFI46:
 1828               		.cfi_def_cfa_offset 5
 1829               		.cfi_offset 5, -4
 1830 0006 6F92      		push r6
 1831               	.LCFI47:
 1832               		.cfi_def_cfa_offset 6
 1833               		.cfi_offset 6, -5
 1834 0008 7F92      		push r7
 1835               	.LCFI48:
 1836               		.cfi_def_cfa_offset 7
 1837               		.cfi_offset 7, -6
 1838 000a 8F92      		push r8
 1839               	.LCFI49:
 1840               		.cfi_def_cfa_offset 8
 1841               		.cfi_offset 8, -7
 1842 000c 9F92      		push r9
 1843               	.LCFI50:
 1844               		.cfi_def_cfa_offset 9
 1845               		.cfi_offset 9, -8
 1846 000e AF92      		push r10
 1847               	.LCFI51:
 1848               		.cfi_def_cfa_offset 10
 1849               		.cfi_offset 10, -9
 1850 0010 BF92      		push r11
 1851               	.LCFI52:
 1852               		.cfi_def_cfa_offset 11
 1853               		.cfi_offset 11, -10
 1854 0012 CF92      		push r12
 1855               	.LCFI53:
 1856               		.cfi_def_cfa_offset 12
 1857               		.cfi_offset 12, -11
 1858 0014 DF92      		push r13
 1859               	.LCFI54:
 1860               		.cfi_def_cfa_offset 13
 1861               		.cfi_offset 13, -12
 1862 0016 EF92      		push r14
 1863               	.LCFI55:
 1864               		.cfi_def_cfa_offset 14
 1865               		.cfi_offset 14, -13
 1866 0018 FF92      		push r15
 1867               	.LCFI56:
 1868               		.cfi_def_cfa_offset 15
 1869               		.cfi_offset 15, -14
 1870 001a 0F93      		push r16
 1871               	.LCFI57:
 1872               		.cfi_def_cfa_offset 16
 1873               		.cfi_offset 16, -15
 1874 001c 1F93      		push r17
 1875               	.LCFI58:
 1876               		.cfi_def_cfa_offset 17
 1877               		.cfi_offset 17, -16
 1878 001e CF93      		push r28
 1879               	.LCFI59:
 1880               		.cfi_def_cfa_offset 18
 1881               		.cfi_offset 28, -17
 1882 0020 DF93      		push r29
 1883               	.LCFI60:
 1884               		.cfi_def_cfa_offset 19
 1885               		.cfi_offset 29, -18
 1886               	/* prologue: function */
 1887               	/* frame size = 0 */
 1888               	/* stack size = 17 */
 1889               	.L__stack_usage = 17
 1890 0022 8C01      		movw r16,r24
 1891 0024 7B01      		movw r14,r22
 1892 0026 6A01      		movw r12,r20
 1893 0028 5901      		movw r10,r18
 1894               	.LVL125:
 1895               	.LBB388:
 1896               	.LBB389:
 1897               	.LBB390:
 1898               	.LBB391:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1899               		.loc 4 437 0
 1900               	/* #APP */
 1901               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1902 002a F894      		cli
 1903               	 ;  0 "" 2
 1904               	/* #NOAPP */
 1905               	.LBE391:
 1906               	.LBE390:
 1907               	.LBE389:
 1908               	.LBE388:
 1909               	.LBB392:
 1910               	.LBB393:
 1911               	.LBB394:
 1912               		.loc 5 118 0
 1913 002c 4090 0000 		lds r4,ch+19
 1914 0030 5090 0000 		lds r5,ch+19+1
 1915               	.LVL126:
 1916               	.LBE394:
 1917               	.LBE393:
 1918               	.LBE392:
 1919               	.LBB395:
 1920               	.LBB396:
 1921               	.LBB397:
 479:../../../os/rt/include/chtime.h **** }
 1922               		.loc 6 479 0
 1923 0034 420E      		add r4,r18
 1924 0036 531E      		adc r5,r19
 1925               	.LVL127:
 1926               	.LBE397:
 1927               	.LBE396:
 1928               	.LBE395:
 743:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 1929               		.loc 1 743 0
 1930 0038 612C      		mov r6,__zero_reg__
 1931 003a 712C      		mov r7,__zero_reg__
 1932               	.LBB398:
 1933               	.LBB399:
 744:../../../os/hal/src/hal_buffers.c ****   systime_t deadline;
 745:../../../os/hal/src/hal_buffers.c **** 
 746:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 747:../../../os/hal/src/hal_buffers.c **** 
 748:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 749:../../../os/hal/src/hal_buffers.c **** 
 750:../../../os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 751:../../../os/hal/src/hal_buffers.c ****   deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 752:../../../os/hal/src/hal_buffers.c **** 
 753:../../../os/hal/src/hal_buffers.c ****   while (true) {
 754:../../../os/hal/src/hal_buffers.c ****     size_t size;
 755:../../../os/hal/src/hal_buffers.c **** 
 756:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 757:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 758:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 759:../../../os/hal/src/hal_buffers.c **** 
 760:../../../os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 761:../../../os/hal/src/hal_buffers.c ****          deadline.*/
 762:../../../os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1934               		.loc 1 762 0
 1935 003c 4901      		movw r8,r18
 1936 003e 21E0      		ldi r18,1
 1937 0040 821A      		sub r8,r18
 1938 0042 9108      		sbc r9,__zero_reg__
 1939               	.LVL128:
 1940               	.LBE399:
 763:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 764:../../../os/hal/src/hal_buffers.c ****       }
 765:../../../os/hal/src/hal_buffers.c ****       else {
 766:../../../os/hal/src/hal_buffers.c ****         sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 767:../../../os/hal/src/hal_buffers.c ****                                                    deadline);
 768:../../../os/hal/src/hal_buffers.c **** 
 769:../../../os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 770:../../../os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 771:../../../os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 772:../../../os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 773:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 774:../../../os/hal/src/hal_buffers.c ****           return w;
 775:../../../os/hal/src/hal_buffers.c ****         }
 776:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 777:../../../os/hal/src/hal_buffers.c ****       }
 778:../../../os/hal/src/hal_buffers.c **** 
 779:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 780:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 781:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 782:../../../os/hal/src/hal_buffers.c ****         return w;
 783:../../../os/hal/src/hal_buffers.c ****       }
 784:../../../os/hal/src/hal_buffers.c ****     }
 785:../../../os/hal/src/hal_buffers.c **** 
 786:../../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 787:../../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 788:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 789:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 790:../../../os/hal/src/hal_buffers.c ****     }
 791:../../../os/hal/src/hal_buffers.c **** 
 792:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 793:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 794:../../../os/hal/src/hal_buffers.c ****     if (size > 64U) {
 795:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 796:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 1941               		.loc 1 796 0
 1942 0044 80E4      		ldi r24,lo8(64)
 1943 0046 382E      		mov r3,r24
 1944               	.LVL129:
 1945 0048 00C0      		rjmp .L91
 1946               	.LVL130:
 1947               	.L94:
 1948 004a F701      		movw r30,r14
 1949 004c DC01      		movw r26,r24
 1950 004e 832D      		mov r24,r3
 1951               		0:
 1952 0050 0190      		ld r0,Z+
 1953 0052 0D92      		st X+,r0
 1954 0054 8A95      		dec r24
 1955 0056 01F4      		brne 0b
 797:../../../os/hal/src/hal_buffers.c ****       bp        += 64U;
 1956               		.loc 1 797 0
 1957 0058 F0E4      		ldi r31,64
 1958 005a EF0E      		add r14,r31
 1959 005c F11C      		adc r15,__zero_reg__
 1960               	.LVL131:
 798:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 1961               		.loc 1 798 0
 1962 005e F801      		movw r30,r16
 1963 0060 8389      		ldd r24,Z+19
 1964 0062 9489      		ldd r25,Z+20
 1965 0064 805C      		subi r24,-64
 1966 0066 9F4F      		sbci r25,-1
 1967 0068 948B      		std Z+20,r25
 1968 006a 838B      		std Z+19,r24
 799:../../../os/hal/src/hal_buffers.c ****       w         += 64U;
 1969               		.loc 1 799 0
 1970 006c F0E4      		ldi r31,64
 1971 006e 6F0E      		add r6,r31
 1972 0070 711C      		adc r7,__zero_reg__
 1973               	.LVL132:
 800:../../../os/hal/src/hal_buffers.c ****     }
 801:../../../os/hal/src/hal_buffers.c ****     else {
 802:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 803:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 804:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 805:../../../os/hal/src/hal_buffers.c ****       w         += size;
 806:../../../os/hal/src/hal_buffers.c ****     }
 807:../../../os/hal/src/hal_buffers.c **** 
 808:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 809:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 1974               		.loc 1 809 0
 1975 0072 F801      		movw r30,r16
 1976 0074 2589      		ldd r18,Z+21
 1977 0076 3689      		ldd r19,Z+22
 1978 0078 8217      		cp r24,r18
 1979 007a 9307      		cpc r25,r19
 1980 007c 00F4      		brsh .L92
 1981               	.L90:
 1982               	.LBB412:
 1983               	.LBB413:
 1984               	.LBB414:
 1985               	.LBB415:
 1986               	.LBB416:
 1987               		.loc 4 447 0
 1988               	/* #APP */
 1989               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1990 007e 7894      		sei
 1991               	 ;  0 "" 2
 1992               	/* #NOAPP */
 1993               	.LBE416:
 1994               	.LBE415:
 1995               	.LBE414:
 1996               	.LBE413:
 1997               	.LBE412:
 810:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 811:../../../os/hal/src/hal_buffers.c ****     }
 812:../../../os/hal/src/hal_buffers.c **** 
 813:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 814:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 815:../../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 1998               		.loc 1 815 0
 1999 0080 6C14      		cp r6,r12
 2000 0082 7D04      		cpc r7,r13
 2001 0084 00F4      		brsh .L85
 2002               	.L95:
 2003               	.LBB421:
 2004               	.LBB422:
 2005               	.LBB423:
 2006               	.LBB424:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2007               		.loc 4 437 0
 2008               	/* #APP */
 2009               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2010 0086 F894      		cli
 2011               	 ;  0 "" 2
 2012               	.LVL133:
 2013               	/* #NOAPP */
 2014               	.L91:
 2015               	.LBE424:
 2016               	.LBE423:
 2017               	.LBE422:
 2018               	.LBE421:
 757:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2019               		.loc 1 757 0
 2020 0088 F801      		movw r30,r16
 2021 008a 8389      		ldd r24,Z+19
 2022 008c 9489      		ldd r25,Z+20
 2023 008e 0097      		sbiw r24,0
 2024 0090 01F4      		brne .+2
 2025 0092 00C0      		rjmp .L93
 2026               	.L81:
 787:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2027               		.loc 1 787 0
 2028 0094 F801      		movw r30,r16
 2029 0096 C589      		ldd r28,Z+21
 2030 0098 D689      		ldd r29,Z+22
 2031               	.LVL134:
 788:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 2032               		.loc 1 788 0
 2033 009a 9601      		movw r18,r12
 2034 009c 2619      		sub r18,r6
 2035 009e 3709      		sbc r19,r7
 2036 00a0 C81B      		sub r28,r24
 2037 00a2 D90B      		sbc r29,r25
 2038               	.LVL135:
 2039 00a4 2C17      		cp r18,r28
 2040 00a6 3D07      		cpc r19,r29
 2041 00a8 00F4      		brsh .L87
 2042 00aa E901      		movw r28,r18
 2043               	.LVL136:
 2044               	.L87:
 794:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2045               		.loc 1 794 0
 2046 00ac C134      		cpi r28,65
 2047 00ae D105      		cpc r29,__zero_reg__
 2048 00b0 00F4      		brsh .L94
 802:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 2049               		.loc 1 802 0
 2050 00b2 AE01      		movw r20,r28
 2051 00b4 B701      		movw r22,r14
 2052 00b6 0E94 0000 		call memcpy
 2053               	.LVL137:
 803:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2054               		.loc 1 803 0
 2055 00ba EC0E      		add r14,r28
 2056 00bc FD1E      		adc r15,r29
 2057               	.LVL138:
 804:../../../os/hal/src/hal_buffers.c ****       w         += size;
 2058               		.loc 1 804 0
 2059 00be F801      		movw r30,r16
 2060 00c0 8389      		ldd r24,Z+19
 2061 00c2 9489      		ldd r25,Z+20
 2062 00c4 8C0F      		add r24,r28
 2063 00c6 9D1F      		adc r25,r29
 2064 00c8 948B      		std Z+20,r25
 2065 00ca 838B      		std Z+19,r24
 805:../../../os/hal/src/hal_buffers.c ****     }
 2066               		.loc 1 805 0
 2067 00cc 6C0E      		add r6,r28
 2068 00ce 7D1E      		adc r7,r29
 2069               	.LVL139:
 809:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 2070               		.loc 1 809 0
 2071 00d0 F801      		movw r30,r16
 2072 00d2 2589      		ldd r18,Z+21
 2073 00d4 3689      		ldd r19,Z+22
 2074 00d6 8217      		cp r24,r18
 2075 00d8 9307      		cpc r25,r19
 2076 00da 00F0      		brlo .L90
 2077               	.L92:
 810:../../../os/hal/src/hal_buffers.c ****     }
 2078               		.loc 1 810 0
 2079 00dc 6585      		ldd r22,Z+13
 2080 00de 7685      		ldd r23,Z+14
 2081 00e0 6250      		subi r22,2
 2082 00e2 7109      		sbc r23,__zero_reg__
 2083 00e4 C801      		movw r24,r16
 2084 00e6 0E94 0000 		call obqPostFullBufferS
 2085               	.LVL140:
 2086               	.LBB425:
 2087               	.LBB420:
 2088               	.LBB419:
 2089               	.LBB418:
 2090               	.LBB417:
 2091               		.loc 4 447 0
 2092               	/* #APP */
 2093               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2094 00ea 7894      		sei
 2095               	 ;  0 "" 2
 2096               	/* #NOAPP */
 2097               	.LBE417:
 2098               	.LBE418:
 2099               	.LBE419:
 2100               	.LBE420:
 2101               	.LBE425:
 2102               		.loc 1 815 0
 2103 00ec 6C14      		cp r6,r12
 2104 00ee 7D04      		cpc r7,r13
 2105 00f0 00F0      		brlo .L95
 2106               	.LVL141:
 2107               	.L85:
 2108               	.LBE398:
 816:../../../os/hal/src/hal_buffers.c ****       return w;
 817:../../../os/hal/src/hal_buffers.c ****     }
 818:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 819:../../../os/hal/src/hal_buffers.c ****   }
 820:../../../os/hal/src/hal_buffers.c **** }
 2109               		.loc 1 820 0
 2110 00f2 C301      		movw r24,r6
 2111               	/* epilogue start */
 2112 00f4 DF91      		pop r29
 2113 00f6 CF91      		pop r28
 2114 00f8 1F91      		pop r17
 2115 00fa 0F91      		pop r16
 2116               	.LVL142:
 2117 00fc FF90      		pop r15
 2118 00fe EF90      		pop r14
 2119               	.LVL143:
 2120 0100 DF90      		pop r13
 2121 0102 CF90      		pop r12
 2122               	.LVL144:
 2123 0104 BF90      		pop r11
 2124 0106 AF90      		pop r10
 2125               	.LVL145:
 2126 0108 9F90      		pop r9
 2127 010a 8F90      		pop r8
 2128               	.LVL146:
 2129 010c 7F90      		pop r7
 2130 010e 6F90      		pop r6
 2131               	.LVL147:
 2132 0110 5F90      		pop r5
 2133 0112 4F90      		pop r4
 2134 0114 3F90      		pop r3
 2135 0116 0895      		ret
 2136               	.LVL148:
 2137               	.L93:
 2138               	.LBB427:
 2139               	.LBB426:
 762:../../../os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 2140               		.loc 1 762 0
 2141 0118 FEEF      		ldi r31,-2
 2142 011a 8F16      		cp r8,r31
 2143 011c FFEF      		ldi r31,-1
 2144 011e 9F06      		cpc r9,r31
 2145 0120 00F4      		brsh .L96
 2146               	.LBB400:
 2147               	.LBB401:
 2148               	.LBB402:
 2149               	.LBB403:
 2150               		.loc 5 118 0
 2151 0122 8091 0000 		lds r24,ch+19
 2152 0126 9091 0000 		lds r25,ch+19+1
 2153               	.LVL149:
 2154               	.LBE403:
 2155               	.LBE402:
 2156               	.LBE401:
 2157               	.LBB404:
 2158               	.LBB405:
 2159               	.LBB406:
 2160               		.loc 6 495 0
 2161 012a B201      		movw r22,r4
 2162 012c 681B      		sub r22,r24
 2163 012e 790B      		sbc r23,r25
 2164               	.LBE406:
 2165               	.LBE405:
 2166               	.LBE404:
 772:../../../os/hal/src/hal_buffers.c ****           osalSysUnlock();
 2167               		.loc 1 772 0
 2168 0130 A616      		cp r10,r22
 2169 0132 B706      		cpc r11,r23
 2170 0134 00F0      		brlo .L86
 776:../../../os/hal/src/hal_buffers.c ****       }
 2171               		.loc 1 776 0
 2172 0136 C801      		movw r24,r16
 2173               	.LVL150:
 2174 0138 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2175               	.LVL151:
 2176               	.LBE400:
 780:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2177               		.loc 1 780 0
 2178 013c 892B      		or r24,r25
 2179 013e 01F4      		brne .L86
 2180               	.LVL152:
 2181               	.L97:
 2182 0140 F801      		movw r30,r16
 2183 0142 8389      		ldd r24,Z+19
 2184 0144 9489      		ldd r25,Z+20
 2185               	.LVL153:
 2186 0146 00C0      		rjmp .L81
 2187               	.L96:
 763:../../../os/hal/src/hal_buffers.c ****       }
 2188               		.loc 1 763 0
 2189 0148 B501      		movw r22,r10
 2190 014a C801      		movw r24,r16
 2191 014c 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2192               	.LVL154:
 780:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2193               		.loc 1 780 0
 2194 0150 892B      		or r24,r25
 2195 0152 01F0      		breq .L97
 2196               	.LVL155:
 2197               	.L86:
 2198               	.LBB407:
 2199               	.LBB408:
 2200               	.LBB409:
 2201               	.LBB410:
 2202               	.LBB411:
 2203               		.loc 4 447 0
 2204               	/* #APP */
 2205               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2206 0154 7894      		sei
 2207               	 ;  0 "" 2
 2208               	/* #NOAPP */
 2209               	.LBE411:
 2210               	.LBE410:
 2211               	.LBE409:
 2212               	.LBE408:
 2213               	.LBE407:
 782:../../../os/hal/src/hal_buffers.c ****       }
 2214               		.loc 1 782 0
 2215 0156 00C0      		rjmp .L85
 2216               	.LBE426:
 2217               	.LBE427:
 2218               		.cfi_endproc
 2219               	.LFE187:
 2221               		.section	.text.obqTryFlushI,"ax",@progbits
 2222               	.global	obqTryFlushI
 2224               	obqTryFlushI:
 2225               	.LFB188:
 821:../../../os/hal/src/hal_buffers.c **** 
 822:../../../os/hal/src/hal_buffers.c **** /**
 823:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 824:../../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 825:../../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 826:../../../os/hal/src/hal_buffers.c ****  *          returned instead.
 827:../../../os/hal/src/hal_buffers.c ****  *
 828:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 829:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 830:../../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 831:../../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 832:../../../os/hal/src/hal_buffers.c ****  *
 833:../../../os/hal/src/hal_buffers.c ****  * @iclass
 834:../../../os/hal/src/hal_buffers.c ****  */
 835:../../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2226               		.loc 1 835 0
 2227               		.cfi_startproc
 2228               	.LVL156:
 2229               	/* prologue: function */
 2230               	/* frame size = 0 */
 2231               	/* stack size = 0 */
 2232               	.L__stack_usage = 0
 2233 0000 FC01      		movw r30,r24
 836:../../../os/hal/src/hal_buffers.c **** 
 837:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 838:../../../os/hal/src/hal_buffers.c **** 
 839:../../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 840:../../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 841:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2234               		.loc 1 841 0
 2235 0002 A781      		ldd r26,Z+7
 2236 0004 B085      		ldd r27,Z+8
 2237 0006 8185      		ldd r24,Z+9
 2238 0008 9285      		ldd r25,Z+10
 2239               	.LVL157:
 2240 000a A817      		cp r26,r24
 2241 000c B907      		cpc r27,r25
 2242 000e 01F0      		breq .L107
 2243               	.L106:
 842:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 843:../../../os/hal/src/hal_buffers.c **** 
 844:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 845:../../../os/hal/src/hal_buffers.c **** 
 846:../../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 847:../../../os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 848:../../../os/hal/src/hal_buffers.c **** 
 849:../../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 850:../../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 851:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 852:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 853:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 854:../../../os/hal/src/hal_buffers.c ****       }
 855:../../../os/hal/src/hal_buffers.c **** 
 856:../../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 857:../../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 858:../../../os/hal/src/hal_buffers.c **** 
 859:../../../os/hal/src/hal_buffers.c ****       return true;
 860:../../../os/hal/src/hal_buffers.c ****     }
 861:../../../os/hal/src/hal_buffers.c ****   }
 862:../../../os/hal/src/hal_buffers.c ****   return false;
 2244               		.loc 1 862 0
 2245 0010 80E0      		ldi r24,0
 863:../../../os/hal/src/hal_buffers.c **** }
 2246               		.loc 1 863 0
 2247 0012 0895      		ret
 2248               	.L107:
 841:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2249               		.loc 1 841 0 discriminator 1
 2250 0014 8581      		ldd r24,Z+5
 2251 0016 9681      		ldd r25,Z+6
 2252 0018 892B      		or r24,r25
 2253 001a 01F0      		breq .L106
 841:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2254               		.loc 1 841 0 is_stmt 0
 2255 001c 8389      		ldd r24,Z+19
 2256 001e 9489      		ldd r25,Z+20
 2257 0020 0097      		sbiw r24,0
 2258 0022 01F0      		breq .L106
 2259 0024 0297      		sbiw r24,2
 2260               	.LBB428:
 842:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2261               		.loc 1 842 0 is_stmt 1
 2262 0026 8A1B      		sub r24,r26
 2263 0028 9B0B      		sbc r25,r27
 2264               	.LVL158:
 844:../../../os/hal/src/hal_buffers.c **** 
 2265               		.loc 1 844 0
 2266 002a 01F0      		breq .L106
 847:../../../os/hal/src/hal_buffers.c **** 
 2267               		.loc 1 847 0
 2268 002c 1196      		adiw r26,1
 2269 002e 9C93      		st X,r25
 2270 0030 8E93      		st -X,r24
 850:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2271               		.loc 1 850 0
 2272 0032 8581      		ldd r24,Z+5
 2273 0034 9681      		ldd r25,Z+6
 2274               	.LVL159:
 2275 0036 0197      		sbiw r24,1
 2276 0038 9683      		std Z+6,r25
 2277 003a 8583      		std Z+5,r24
 2278               	.LVL160:
 851:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2279               		.loc 1 851 0
 2280 003c 8585      		ldd r24,Z+13
 2281 003e 9685      		ldd r25,Z+14
 2282 0040 A80F      		add r26,r24
 2283 0042 B91F      		adc r27,r25
 2284               	.LVL161:
 2285 0044 B087      		std Z+8,r27
 2286 0046 A783      		std Z+7,r26
 2287               	.LVL162:
 852:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2288               		.loc 1 852 0
 2289 0048 8385      		ldd r24,Z+11
 2290 004a 9485      		ldd r25,Z+12
 2291 004c A817      		cp r26,r24
 2292 004e B907      		cpc r27,r25
 2293 0050 00F0      		brlo .L101
 853:../../../os/hal/src/hal_buffers.c ****       }
 2294               		.loc 1 853 0
 2295 0052 8189      		ldd r24,Z+17
 2296 0054 9289      		ldd r25,Z+18
 2297 0056 9087      		std Z+8,r25
 2298 0058 8783      		std Z+7,r24
 2299               	.L101:
 857:../../../os/hal/src/hal_buffers.c **** 
 2300               		.loc 1 857 0
 2301 005a 148A      		std Z+20,__zero_reg__
 2302 005c 138A      		std Z+19,__zero_reg__
 859:../../../os/hal/src/hal_buffers.c ****     }
 2303               		.loc 1 859 0
 2304 005e 81E0      		ldi r24,lo8(1)
 2305 0060 0895      		ret
 2306               	.LBE428:
 2307               		.cfi_endproc
 2308               	.LFE188:
 2310               		.section	.text.obqFlush,"ax",@progbits
 2311               	.global	obqFlush
 2313               	obqFlush:
 2314               	.LFB189:
 864:../../../os/hal/src/hal_buffers.c **** 
 865:../../../os/hal/src/hal_buffers.c **** /**
 866:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 867:../../../os/hal/src/hal_buffers.c ****  *
 868:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 869:../../../os/hal/src/hal_buffers.c ****  *
 870:../../../os/hal/src/hal_buffers.c ****  * @api
 871:../../../os/hal/src/hal_buffers.c ****  */
 872:../../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2315               		.loc 1 872 0
 2316               		.cfi_startproc
 2317               	.LVL163:
 2318               	/* prologue: function */
 2319               	/* frame size = 0 */
 2320               	/* stack size = 0 */
 2321               	.L__stack_usage = 0
 2322               	.LBB429:
 2323               	.LBB430:
 2324               	.LBB431:
 2325               	.LBB432:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2326               		.loc 4 437 0
 2327               	/* #APP */
 2328               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2329 0000 F894      		cli
 2330               	 ;  0 "" 2
 2331               	/* #NOAPP */
 2332               	.LBE432:
 2333               	.LBE431:
 2334               	.LBE430:
 2335               	.LBE429:
 873:../../../os/hal/src/hal_buffers.c **** 
 874:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 875:../../../os/hal/src/hal_buffers.c **** 
 876:../../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 877:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2336               		.loc 1 877 0
 2337 0002 FC01      		movw r30,r24
 2338 0004 6389      		ldd r22,Z+19
 2339 0006 7489      		ldd r23,Z+20
 2340 0008 6115      		cp r22,__zero_reg__
 2341 000a 7105      		cpc r23,__zero_reg__
 2342 000c 01F0      		breq .L109
 2343 000e 6250      		subi r22,2
 2344 0010 7109      		sbc r23,__zero_reg__
 2345               	.LBB433:
 878:../../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2346               		.loc 1 878 0
 2347 0012 2781      		ldd r18,Z+7
 2348 0014 3085      		ldd r19,Z+8
 2349 0016 621B      		sub r22,r18
 2350 0018 730B      		sbc r23,r19
 2351               	.LVL164:
 879:../../../os/hal/src/hal_buffers.c **** 
 880:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2352               		.loc 1 880 0
 2353 001a 01F0      		breq .L109
 881:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 2354               		.loc 1 881 0
 2355 001c 0E94 0000 		call obqPostFullBufferS
 2356               	.LVL165:
 2357               	.L109:
 2358               	.LBE433:
 2359               	.LBB434:
 2360               	.LBB435:
 2361               	.LBB436:
 2362               	.LBB437:
 2363               	.LBB438:
 2364               		.loc 4 447 0
 2365               	/* #APP */
 2366               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2367 0020 7894      		sei
 2368               	 ;  0 "" 2
 2369               	/* #NOAPP */
 2370 0022 0895      		ret
 2371               	.LBE438:
 2372               	.LBE437:
 2373               	.LBE436:
 2374               	.LBE435:
 2375               	.LBE434:
 2376               		.cfi_endproc
 2377               	.LFE189:
 2379               		.text
 2380               	.Letext0:
 2381               		.file 7 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 2382               		.file 8 "/usr/lib/avr/include/stdint.h"
 2383               		.file 9 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2384               		.file 10 "../../../os/rt/include/chsystypes.h"
 2385               		.file 11 "../../../os/rt/include/chsem.h"
 2386               		.file 12 "../../../os/rt/include/chmtx.h"
 2387               		.file 13 "../../../os/hal/include/hal_buffers.h"
 2388               		.file 14 "../../../os/rt/include/chsys.h"
 2389               		.file 15 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cctoL872.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctoL872.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctoL872.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctoL872.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctoL872.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctoL872.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cctoL872.s:130    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cctoL872.s:176    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cctoL872.s:217    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cctoL872.s:278    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cctoL872.s:390    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cctoL872.s:441    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cctoL872.s:519    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cctoL872.s:568    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cctoL872.s:711    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cctoL872.s:1121   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cctoL872.s:1236   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cctoL872.s:1283   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cctoL872.s:1331   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cctoL872.s:1386   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cctoL872.s:1497   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cctoL872.s:1547   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cctoL872.s:1629   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cctoL872.s:1678   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cctoL872.s:1813   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cctoL872.s:2224   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cctoL872.s:2313   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
ch
memcpy
