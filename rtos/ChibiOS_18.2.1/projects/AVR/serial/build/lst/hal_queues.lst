   1               		.file	"hal_queues.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.iq_read,"ax",@progbits
  12               	iq_read:
  13               	.LFB168:
  14               		.file 1 "../../../os/hal/src/hal_queues.c"
   1:../../../os/hal/src/hal_queues.c **** /*
   2:../../../os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_queues.c **** 
   4:../../../os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_queues.c **** 
   8:../../../os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_queues.c **** 
  10:../../../os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_queues.c ****     limitations under the License.
  15:../../../os/hal/src/hal_queues.c **** */
  16:../../../os/hal/src/hal_queues.c **** 
  17:../../../os/hal/src/hal_queues.c **** /**
  18:../../../os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:../../../os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:../../../os/hal/src/hal_queues.c ****  *
  21:../../../os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:../../../os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:../../../os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:../../../os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:../../../os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:../../../os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:../../../os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:../../../os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:../../../os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:../../../os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:../../../os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:../../../os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:../../../os/hal/src/hal_queues.c ****  *            together.
  34:../../../os/hal/src/hal_queues.c ****  *          .
  35:../../../os/hal/src/hal_queues.c ****  * @{
  36:../../../os/hal/src/hal_queues.c ****  */
  37:../../../os/hal/src/hal_queues.c **** 
  38:../../../os/hal/src/hal_queues.c **** #include <string.h>
  39:../../../os/hal/src/hal_queues.c **** 
  40:../../../os/hal/src/hal_queues.c **** #include "hal.h"
  41:../../../os/hal/src/hal_queues.c **** 
  42:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  43:../../../os/hal/src/hal_queues.c **** /* Driver local definitions.                                                 */
  44:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  45:../../../os/hal/src/hal_queues.c **** 
  46:../../../os/hal/src/hal_queues.c **** /**
  47:../../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking input queue read.
  48:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
  49:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  50:../../../os/hal/src/hal_queues.c ****  *          transferred or when the input queue has been emptied.
  51:../../../os/hal/src/hal_queues.c ****  *
  52:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  53:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
  54:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
  55:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
  56:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
  57:../../../os/hal/src/hal_queues.c ****  *
  58:../../../os/hal/src/hal_queues.c ****  * @notapi
  59:../../../os/hal/src/hal_queues.c ****  */
  60:../../../os/hal/src/hal_queues.c **** static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
  15               		.loc 1 60 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54 0012 DF93      		push r29
  55               	.LCFI9:
  56               		.cfi_def_cfa_offset 12
  57               		.cfi_offset 29, -11
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 10 */
  61               	.L__stack_usage = 10
  62 0014 EC01      		movw r28,r24
  63 0016 6B01      		movw r12,r22
  64 0018 8A01      		movw r16,r20
  61:../../../os/hal/src/hal_queues.c ****   size_t s1, s2;
  62:../../../os/hal/src/hal_queues.c **** 
  63:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
  64:../../../os/hal/src/hal_queues.c **** 
  65:../../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be read in a single atomic operation.*/
  66:../../../os/hal/src/hal_queues.c ****   if (n > iqGetFullI(iqp)) {
  65               		.loc 1 66 0
  66 001a 8C81      		ldd r24,Y+4
  67 001c 9D81      		ldd r25,Y+5
  68               	.LVL1:
  69 001e 8417      		cp r24,r20
  70 0020 9507      		cpc r25,r21
  71 0022 00F4      		brsh .L2
  67:../../../os/hal/src/hal_queues.c ****     n = iqGetFullI(iqp);
  72               		.loc 1 67 0
  73 0024 0C81      		ldd r16,Y+4
  74 0026 1D81      		ldd r17,Y+5
  75               	.LVL2:
  76               	.L2:
  68:../../../os/hal/src/hal_queues.c ****   }
  69:../../../os/hal/src/hal_queues.c **** 
  70:../../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
  71:../../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
  72:../../../os/hal/src/hal_queues.c ****   s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  77               		.loc 1 72 0
  78 0028 6C85      		ldd r22,Y+12
  79 002a 7D85      		ldd r23,Y+13
  80               	.LVL3:
  81 002c E884      		ldd r14,Y+8
  82 002e F984      		ldd r15,Y+9
  83 0030 E61A      		sub r14,r22
  84 0032 F70A      		sbc r15,r23
  85               	.LVL4:
  73:../../../os/hal/src/hal_queues.c ****   /*lint -restore*/
  74:../../../os/hal/src/hal_queues.c ****   if (n < s1) {
  86               		.loc 1 74 0
  87 0034 0E15      		cp r16,r14
  88 0036 1F05      		cpc r17,r15
  89 0038 00F0      		brlo .L7
  75:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  76:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
  77:../../../os/hal/src/hal_queues.c ****   }
  78:../../../os/hal/src/hal_queues.c ****   else if (n > s1) {
  90               		.loc 1 78 0
  91 003a E016      		cp r14,r16
  92 003c F106      		cpc r15,r17
  93 003e 00F0      		brlo .L8
  79:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  80:../../../os/hal/src/hal_queues.c ****     bp += s1;
  81:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
  82:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  83:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
  84:../../../os/hal/src/hal_queues.c ****   }
  85:../../../os/hal/src/hal_queues.c ****   else { /* n == s1 */
  86:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  94               		.loc 1 86 0
  95 0040 A801      		movw r20,r16
  96 0042 C601      		movw r24,r12
  97 0044 0E94 0000 		call memcpy
  98               	.LVL5:
  87:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
  99               		.loc 1 87 0
 100 0048 8E81      		ldd r24,Y+6
 101 004a 9F81      		ldd r25,Y+7
 102 004c 9D87      		std Y+13,r25
 103 004e 8C87      		std Y+12,r24
 104               	.LVL6:
 105               	.L4:
  88:../../../os/hal/src/hal_queues.c ****   }
  89:../../../os/hal/src/hal_queues.c **** 
  90:../../../os/hal/src/hal_queues.c ****   iqp->q_counter -= n;
 106               		.loc 1 90 0
 107 0050 8C81      		ldd r24,Y+4
 108 0052 9D81      		ldd r25,Y+5
 109 0054 801B      		sub r24,r16
 110 0056 910B      		sbc r25,r17
 111 0058 9D83      		std Y+5,r25
 112 005a 8C83      		std Y+4,r24
  91:../../../os/hal/src/hal_queues.c ****   return n;
  92:../../../os/hal/src/hal_queues.c **** }
 113               		.loc 1 92 0
 114 005c C801      		movw r24,r16
 115               	/* epilogue start */
 116 005e DF91      		pop r29
 117 0060 CF91      		pop r28
 118               	.LVL7:
 119 0062 1F91      		pop r17
 120 0064 0F91      		pop r16
 121               	.LVL8:
 122 0066 FF90      		pop r15
 123 0068 EF90      		pop r14
 124               	.LVL9:
 125 006a DF90      		pop r13
 126 006c CF90      		pop r12
 127 006e BF90      		pop r11
 128 0070 AF90      		pop r10
 129 0072 0895      		ret
 130               	.LVL10:
 131               	.L8:
  79:../../../os/hal/src/hal_queues.c ****     bp += s1;
 132               		.loc 1 79 0
 133 0074 A701      		movw r20,r14
 134 0076 C601      		movw r24,r12
 135 0078 0E94 0000 		call memcpy
 136               	.LVL11:
  81:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 137               		.loc 1 81 0
 138 007c 5801      		movw r10,r16
 139 007e AE18      		sub r10,r14
 140 0080 BF08      		sbc r11,r15
 141               	.LVL12:
  82:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
 142               		.loc 1 82 0
 143 0082 6E81      		ldd r22,Y+6
 144 0084 7F81      		ldd r23,Y+7
 145 0086 A501      		movw r20,r10
 146 0088 C601      		movw r24,r12
 147 008a 8E0D      		add r24,r14
 148 008c 9F1D      		adc r25,r15
 149               	.LVL13:
 150 008e 0E94 0000 		call memcpy
 151               	.LVL14:
  83:../../../os/hal/src/hal_queues.c ****   }
 152               		.loc 1 83 0
 153 0092 8E81      		ldd r24,Y+6
 154 0094 9F81      		ldd r25,Y+7
 155 0096 A80E      		add r10,r24
 156 0098 B91E      		adc r11,r25
 157               	.LVL15:
 158 009a BD86      		std Y+13,r11
 159 009c AC86      		std Y+12,r10
 160 009e 00C0      		rjmp .L4
 161               	.LVL16:
 162               	.L7:
  75:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
 163               		.loc 1 75 0
 164 00a0 A801      		movw r20,r16
 165 00a2 C601      		movw r24,r12
 166 00a4 0E94 0000 		call memcpy
 167               	.LVL17:
  76:../../../os/hal/src/hal_queues.c ****   }
 168               		.loc 1 76 0
 169 00a8 8C85      		ldd r24,Y+12
 170 00aa 9D85      		ldd r25,Y+13
 171 00ac 800F      		add r24,r16
 172 00ae 911F      		adc r25,r17
 173 00b0 9D87      		std Y+13,r25
 174 00b2 8C87      		std Y+12,r24
 175 00b4 00C0      		rjmp .L4
 176               		.cfi_endproc
 177               	.LFE168:
 179               		.section	.text.oq_write,"ax",@progbits
 181               	oq_write:
 182               	.LFB169:
  93:../../../os/hal/src/hal_queues.c **** 
  94:../../../os/hal/src/hal_queues.c **** /**
  95:../../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking output queue write.
  96:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
  97:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  98:../../../os/hal/src/hal_queues.c ****  *          transferred or when the output queue has been filled.
  99:../../../os/hal/src/hal_queues.c ****  *
 100:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 101:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 102:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 103:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 104:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 105:../../../os/hal/src/hal_queues.c ****  *
 106:../../../os/hal/src/hal_queues.c ****  * @notapi
 107:../../../os/hal/src/hal_queues.c ****  */
 108:../../../os/hal/src/hal_queues.c **** static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 183               		.loc 1 108 0
 184               		.cfi_startproc
 185               	.LVL18:
 186 0000 AF92      		push r10
 187               	.LCFI10:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 10, -2
 190 0002 BF92      		push r11
 191               	.LCFI11:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 11, -3
 194 0004 CF92      		push r12
 195               	.LCFI12:
 196               		.cfi_def_cfa_offset 5
 197               		.cfi_offset 12, -4
 198 0006 DF92      		push r13
 199               	.LCFI13:
 200               		.cfi_def_cfa_offset 6
 201               		.cfi_offset 13, -5
 202 0008 EF92      		push r14
 203               	.LCFI14:
 204               		.cfi_def_cfa_offset 7
 205               		.cfi_offset 14, -6
 206 000a FF92      		push r15
 207               	.LCFI15:
 208               		.cfi_def_cfa_offset 8
 209               		.cfi_offset 15, -7
 210 000c 0F93      		push r16
 211               	.LCFI16:
 212               		.cfi_def_cfa_offset 9
 213               		.cfi_offset 16, -8
 214 000e 1F93      		push r17
 215               	.LCFI17:
 216               		.cfi_def_cfa_offset 10
 217               		.cfi_offset 17, -9
 218 0010 CF93      		push r28
 219               	.LCFI18:
 220               		.cfi_def_cfa_offset 11
 221               		.cfi_offset 28, -10
 222 0012 DF93      		push r29
 223               	.LCFI19:
 224               		.cfi_def_cfa_offset 12
 225               		.cfi_offset 29, -11
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 10 */
 229               	.L__stack_usage = 10
 230 0014 EC01      		movw r28,r24
 231 0016 6B01      		movw r12,r22
 232 0018 8A01      		movw r16,r20
 109:../../../os/hal/src/hal_queues.c ****   size_t s1, s2;
 110:../../../os/hal/src/hal_queues.c **** 
 111:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 112:../../../os/hal/src/hal_queues.c **** 
 113:../../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be written in a single atomic operation.*/
 114:../../../os/hal/src/hal_queues.c ****   if (n > oqGetEmptyI(oqp)) {
 233               		.loc 1 114 0
 234 001a 8C81      		ldd r24,Y+4
 235 001c 9D81      		ldd r25,Y+5
 236               	.LVL19:
 237 001e 8417      		cp r24,r20
 238 0020 9507      		cpc r25,r21
 239 0022 00F4      		brsh .L10
 115:../../../os/hal/src/hal_queues.c ****     n = oqGetEmptyI(oqp);
 240               		.loc 1 115 0
 241 0024 0C81      		ldd r16,Y+4
 242 0026 1D81      		ldd r17,Y+5
 243               	.LVL20:
 244               	.L10:
 116:../../../os/hal/src/hal_queues.c ****   }
 117:../../../os/hal/src/hal_queues.c **** 
 118:../../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
 119:../../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
 120:../../../os/hal/src/hal_queues.c ****   s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 245               		.loc 1 120 0
 246 0028 8A85      		ldd r24,Y+10
 247 002a 9B85      		ldd r25,Y+11
 248 002c E884      		ldd r14,Y+8
 249 002e F984      		ldd r15,Y+9
 250 0030 E81A      		sub r14,r24
 251 0032 F90A      		sbc r15,r25
 252               	.LVL21:
 121:../../../os/hal/src/hal_queues.c ****   /*lint -restore*/
 122:../../../os/hal/src/hal_queues.c ****   if (n < s1) {
 253               		.loc 1 122 0
 254 0034 0E15      		cp r16,r14
 255 0036 1F05      		cpc r17,r15
 256 0038 00F0      		brlo .L14
 123:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 124:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 125:../../../os/hal/src/hal_queues.c ****   }
 126:../../../os/hal/src/hal_queues.c ****   else if (n > s1) {
 257               		.loc 1 126 0
 258 003a E016      		cp r14,r16
 259 003c F106      		cpc r15,r17
 260 003e 00F0      		brlo .L15
 127:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 128:../../../os/hal/src/hal_queues.c ****     bp += s1;
 129:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
 130:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 131:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 132:../../../os/hal/src/hal_queues.c ****   }
 133:../../../os/hal/src/hal_queues.c ****   else { /* n == s1 */
 134:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 261               		.loc 1 134 0
 262 0040 A801      		movw r20,r16
 263 0042 B601      		movw r22,r12
 264               	.LVL22:
 265 0044 0E94 0000 		call memcpy
 266               	.LVL23:
 135:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 267               		.loc 1 135 0
 268 0048 8E81      		ldd r24,Y+6
 269 004a 9F81      		ldd r25,Y+7
 270 004c 9B87      		std Y+11,r25
 271 004e 8A87      		std Y+10,r24
 272               	.LVL24:
 273               	.L12:
 136:../../../os/hal/src/hal_queues.c ****   }
 137:../../../os/hal/src/hal_queues.c **** 
 138:../../../os/hal/src/hal_queues.c ****   oqp->q_counter -= n;
 274               		.loc 1 138 0
 275 0050 8C81      		ldd r24,Y+4
 276 0052 9D81      		ldd r25,Y+5
 277 0054 801B      		sub r24,r16
 278 0056 910B      		sbc r25,r17
 279 0058 9D83      		std Y+5,r25
 280 005a 8C83      		std Y+4,r24
 139:../../../os/hal/src/hal_queues.c ****   return n;
 140:../../../os/hal/src/hal_queues.c **** }
 281               		.loc 1 140 0
 282 005c C801      		movw r24,r16
 283               	/* epilogue start */
 284 005e DF91      		pop r29
 285 0060 CF91      		pop r28
 286               	.LVL25:
 287 0062 1F91      		pop r17
 288 0064 0F91      		pop r16
 289               	.LVL26:
 290 0066 FF90      		pop r15
 291 0068 EF90      		pop r14
 292               	.LVL27:
 293 006a DF90      		pop r13
 294 006c CF90      		pop r12
 295 006e BF90      		pop r11
 296 0070 AF90      		pop r10
 297 0072 0895      		ret
 298               	.LVL28:
 299               	.L15:
 127:../../../os/hal/src/hal_queues.c ****     bp += s1;
 300               		.loc 1 127 0
 301 0074 A701      		movw r20,r14
 302 0076 B601      		movw r22,r12
 303 0078 0E94 0000 		call memcpy
 304               	.LVL29:
 129:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 305               		.loc 1 129 0
 306 007c 5801      		movw r10,r16
 307 007e AE18      		sub r10,r14
 308 0080 BF08      		sbc r11,r15
 309               	.LVL30:
 128:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
 310               		.loc 1 128 0
 311 0082 B601      		movw r22,r12
 312 0084 6E0D      		add r22,r14
 313 0086 7F1D      		adc r23,r15
 314               	.LVL31:
 130:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 315               		.loc 1 130 0
 316 0088 A501      		movw r20,r10
 317 008a 8E81      		ldd r24,Y+6
 318 008c 9F81      		ldd r25,Y+7
 319 008e 0E94 0000 		call memcpy
 320               	.LVL32:
 131:../../../os/hal/src/hal_queues.c ****   }
 321               		.loc 1 131 0
 322 0092 8E81      		ldd r24,Y+6
 323 0094 9F81      		ldd r25,Y+7
 324 0096 A80E      		add r10,r24
 325 0098 B91E      		adc r11,r25
 326               	.LVL33:
 327 009a BB86      		std Y+11,r11
 328 009c AA86      		std Y+10,r10
 329 009e 00C0      		rjmp .L12
 330               	.LVL34:
 331               	.L14:
 123:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 332               		.loc 1 123 0
 333 00a0 A801      		movw r20,r16
 334 00a2 B601      		movw r22,r12
 335 00a4 0E94 0000 		call memcpy
 336               	.LVL35:
 124:../../../os/hal/src/hal_queues.c ****   }
 337               		.loc 1 124 0
 338 00a8 8A85      		ldd r24,Y+10
 339 00aa 9B85      		ldd r25,Y+11
 340 00ac 800F      		add r24,r16
 341 00ae 911F      		adc r25,r17
 342 00b0 9B87      		std Y+11,r25
 343 00b2 8A87      		std Y+10,r24
 344 00b4 00C0      		rjmp .L12
 345               		.cfi_endproc
 346               	.LFE169:
 348               		.section	.text.iqObjectInit,"ax",@progbits
 349               	.global	iqObjectInit
 351               	iqObjectInit:
 352               	.LFB170:
 141:../../../os/hal/src/hal_queues.c **** 
 142:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 143:../../../os/hal/src/hal_queues.c **** /* Driver exported variables.                                                */
 144:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 145:../../../os/hal/src/hal_queues.c **** 
 146:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 147:../../../os/hal/src/hal_queues.c **** /* Driver local variables and types.                                         */
 148:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 149:../../../os/hal/src/hal_queues.c **** 
 150:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 151:../../../os/hal/src/hal_queues.c **** /* Driver local functions.                                                   */
 152:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 153:../../../os/hal/src/hal_queues.c **** 
 154:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 155:../../../os/hal/src/hal_queues.c **** /* Driver interrupt handlers.                                                */
 156:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 157:../../../os/hal/src/hal_queues.c **** 
 158:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 159:../../../os/hal/src/hal_queues.c **** /* Driver exported functions.                                                */
 160:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 161:../../../os/hal/src/hal_queues.c **** 
 162:../../../os/hal/src/hal_queues.c **** /**
 163:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
 164:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 165:../../../os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
 166:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 167:../../../os/hal/src/hal_queues.c ****  *
 168:../../../os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
 169:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 170:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 171:../../../os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
 172:../../../os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
 173:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 174:../../../os/hal/src/hal_queues.c ****  *
 175:../../../os/hal/src/hal_queues.c ****  * @init
 176:../../../os/hal/src/hal_queues.c ****  */
 177:../../../os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
 178:../../../os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
 353               		.loc 1 178 0
 354               		.cfi_startproc
 355               	.LVL36:
 356 0000 0F93      		push r16
 357               	.LCFI20:
 358               		.cfi_def_cfa_offset 3
 359               		.cfi_offset 16, -2
 360 0002 1F93      		push r17
 361               	.LCFI21:
 362               		.cfi_def_cfa_offset 4
 363               		.cfi_offset 17, -3
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 2 */
 367               	.L__stack_usage = 2
 368 0004 FC01      		movw r30,r24
 369               	.LVL37:
 370               	.LBB131:
 371               	.LBB132:
 372               	.LBB133:
 373               	.LBB134:
 374               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 375               		.loc 2 539 0
 376 0006 9183      		std Z+1,r25
 377 0008 8083      		st Z,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 378               		.loc 2 540 0
 379 000a 9383      		std Z+3,r25
 380 000c 8283      		std Z+2,r24
 381               	.LBE134:
 382               	.LBE133:
 383               	.LBE132:
 384               	.LBE131:
 179:../../../os/hal/src/hal_queues.c **** 
 180:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
 181:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 385               		.loc 1 181 0
 386 000e 1582      		std Z+5,__zero_reg__
 387 0010 1482      		std Z+4,__zero_reg__
 182:../../../os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
 388               		.loc 1 182 0
 389 0012 7783      		std Z+7,r23
 390 0014 6683      		std Z+6,r22
 183:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
 391               		.loc 1 183 0
 392 0016 7587      		std Z+13,r23
 393 0018 6487      		std Z+12,r22
 184:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
 394               		.loc 1 184 0
 395 001a 7387      		std Z+11,r23
 396 001c 6287      		std Z+10,r22
 185:../../../os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
 397               		.loc 1 185 0
 398 001e 640F      		add r22,r20
 399 0020 751F      		adc r23,r21
 400               	.LVL38:
 401 0022 7187      		std Z+9,r23
 402 0024 6087      		std Z+8,r22
 186:../../../os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
 403               		.loc 1 186 0
 404 0026 3787      		std Z+15,r19
 405 0028 2687      		std Z+14,r18
 187:../../../os/hal/src/hal_queues.c ****   iqp->q_link    = link;
 406               		.loc 1 187 0
 407 002a 118B      		std Z+17,r17
 408 002c 008B      		std Z+16,r16
 409               	/* epilogue start */
 188:../../../os/hal/src/hal_queues.c **** }
 410               		.loc 1 188 0
 411 002e 1F91      		pop r17
 412 0030 0F91      		pop r16
 413               	.LVL39:
 414 0032 0895      		ret
 415               		.cfi_endproc
 416               	.LFE170:
 418               		.section	.text.iqResetI,"ax",@progbits
 419               	.global	iqResetI
 421               	iqResetI:
 422               	.LFB171:
 189:../../../os/hal/src/hal_queues.c **** 
 190:../../../os/hal/src/hal_queues.c **** /**
 191:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
 192:../../../os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
 193:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 194:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 195:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 196:../../../os/hal/src/hal_queues.c ****  *
 197:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 198:../../../os/hal/src/hal_queues.c ****  *
 199:../../../os/hal/src/hal_queues.c ****  * @iclass
 200:../../../os/hal/src/hal_queues.c ****  */
 201:../../../os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
 423               		.loc 1 201 0
 424               		.cfi_startproc
 425               	.LVL40:
 426               	/* prologue: function */
 427               	/* frame size = 0 */
 428               	/* stack size = 0 */
 429               	.L__stack_usage = 0
 202:../../../os/hal/src/hal_queues.c **** 
 203:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 204:../../../os/hal/src/hal_queues.c **** 
 205:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
 430               		.loc 1 205 0
 431 0000 FC01      		movw r30,r24
 432 0002 2681      		ldd r18,Z+6
 433 0004 3781      		ldd r19,Z+7
 434 0006 3587      		std Z+13,r19
 435 0008 2487      		std Z+12,r18
 206:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
 436               		.loc 1 206 0
 437 000a 3387      		std Z+11,r19
 438 000c 2287      		std Z+10,r18
 207:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 439               		.loc 1 207 0
 440 000e 1582      		std Z+5,__zero_reg__
 441 0010 1482      		std Z+4,__zero_reg__
 442               	.LVL41:
 443               	.LBB135:
 444               	.LBB136:
 445               		.file 3 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 776:../../../os/hal/osal/rt/osal.h **** }
 777:../../../os/hal/osal/rt/osal.h **** 
 778:../../../os/hal/osal/rt/osal.h **** /**
 779:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 780:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 781:../../../os/hal/osal/rt/osal.h ****  *          context.
 782:../../../os/hal/osal/rt/osal.h ****  *
 783:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 784:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 785:../../../os/hal/osal/rt/osal.h ****  *
 786:../../../os/hal/osal/rt/osal.h ****  * @iclass
 787:../../../os/hal/osal/rt/osal.h ****  */
 788:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 789:../../../os/hal/osal/rt/osal.h **** 
 790:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 791:../../../os/hal/osal/rt/osal.h **** }
 792:../../../os/hal/osal/rt/osal.h **** 
 793:../../../os/hal/osal/rt/osal.h **** /**
 794:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 795:../../../os/hal/osal/rt/osal.h ****  *
 796:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 797:../../../os/hal/osal/rt/osal.h ****  *
 798:../../../os/hal/osal/rt/osal.h ****  * @init
 799:../../../os/hal/osal/rt/osal.h ****  */
 800:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 801:../../../os/hal/osal/rt/osal.h **** 
 802:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 803:../../../os/hal/osal/rt/osal.h **** }
 804:../../../os/hal/osal/rt/osal.h **** 
 805:../../../os/hal/osal/rt/osal.h **** /**
 806:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 807:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 808:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 809:../../../os/hal/osal/rt/osal.h ****  *
 810:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 811:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 812:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 813:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 814:../../../os/hal/osal/rt/osal.h ****  *                        state.
 815:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 816:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 817:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 818:../../../os/hal/osal/rt/osal.h ****  *                      .
 819:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 820:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 821:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 822:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 823:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 824:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 825:../../../os/hal/osal/rt/osal.h ****  *
 826:../../../os/hal/osal/rt/osal.h ****  * @sclass
 827:../../../os/hal/osal/rt/osal.h ****  */
 828:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 829:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 830:../../../os/hal/osal/rt/osal.h **** 
 831:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 832:../../../os/hal/osal/rt/osal.h **** }
 833:../../../os/hal/osal/rt/osal.h **** 
 834:../../../os/hal/osal/rt/osal.h **** /**
 835:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 836:../../../os/hal/osal/rt/osal.h ****  *
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 838:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 839:../../../os/hal/osal/rt/osal.h ****  *
 840:../../../os/hal/osal/rt/osal.h ****  * @iclass
 841:../../../os/hal/osal/rt/osal.h ****  */
 842:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 845:../../../os/hal/osal/rt/osal.h **** }
 846:../../../os/hal/osal/rt/osal.h **** 
 847:../../../os/hal/osal/rt/osal.h **** /**
 848:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 849:../../../os/hal/osal/rt/osal.h ****  *
 850:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 851:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 852:../../../os/hal/osal/rt/osal.h ****  *
 853:../../../os/hal/osal/rt/osal.h ****  * @iclass
 854:../../../os/hal/osal/rt/osal.h ****  */
 855:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 856:../../../os/hal/osal/rt/osal.h **** 
 857:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 446               		.loc 3 857 0
 447 0012 6EEF      		ldi r22,lo8(-2)
 448 0014 7FEF      		ldi r23,lo8(-1)
 449 0016 0C94 0000 		jmp chThdDequeueAllI
 450               	.LVL42:
 451               	.LBE136:
 452               	.LBE135:
 453               		.cfi_endproc
 454               	.LFE171:
 456               		.section	.text.iqPutI,"ax",@progbits
 457               	.global	iqPutI
 459               	iqPutI:
 460               	.LFB172:
 208:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
 209:../../../os/hal/src/hal_queues.c **** }
 210:../../../os/hal/src/hal_queues.c **** 
 211:../../../os/hal/src/hal_queues.c **** /**
 212:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue write.
 213:../../../os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue. The
 214:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 215:../../../os/hal/src/hal_queues.c ****  *
 216:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 217:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 218:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 219:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation has been completed with success.
 220:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 221:../../../os/hal/src/hal_queues.c ****  *
 222:../../../os/hal/src/hal_queues.c ****  * @iclass
 223:../../../os/hal/src/hal_queues.c ****  */
 224:../../../os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 461               		.loc 1 224 0
 462               		.cfi_startproc
 463               	.LVL43:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468 0000 FC01      		movw r30,r24
 225:../../../os/hal/src/hal_queues.c **** 
 226:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 227:../../../os/hal/src/hal_queues.c **** 
 228:../../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 229:../../../os/hal/src/hal_queues.c ****   if (!iqIsFullI(iqp)) {
 469               		.loc 1 229 0
 470 0002 A285      		ldd r26,Z+10
 471 0004 B385      		ldd r27,Z+11
 472 0006 8485      		ldd r24,Z+12
 473 0008 9585      		ldd r25,Z+13
 474               	.LVL44:
 475 000a A817      		cp r26,r24
 476 000c B907      		cpc r27,r25
 477 000e 01F0      		breq .L25
 478               	.L19:
 230:../../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 479               		.loc 1 230 0
 480 0010 8481      		ldd r24,Z+4
 481 0012 9581      		ldd r25,Z+5
 482 0014 0196      		adiw r24,1
 483 0016 9583      		std Z+5,r25
 484 0018 8483      		std Z+4,r24
 231:../../../os/hal/src/hal_queues.c ****     *iqp->q_wrptr++ = b;
 485               		.loc 1 231 0
 486 001a CD01      		movw r24,r26
 487 001c 0196      		adiw r24,1
 488 001e 9387      		std Z+11,r25
 489 0020 8287      		std Z+10,r24
 490 0022 6C93      		st X,r22
 232:../../../os/hal/src/hal_queues.c ****     if (iqp->q_wrptr >= iqp->q_top) {
 491               		.loc 1 232 0
 492 0024 2285      		ldd r18,Z+10
 493 0026 3385      		ldd r19,Z+11
 494 0028 8085      		ldd r24,Z+8
 495 002a 9185      		ldd r25,Z+9
 496 002c 2817      		cp r18,r24
 497 002e 3907      		cpc r19,r25
 498 0030 00F0      		brlo .L22
 233:../../../os/hal/src/hal_queues.c ****       iqp->q_wrptr = iqp->q_buffer;
 499               		.loc 1 233 0
 500 0032 8681      		ldd r24,Z+6
 501 0034 9781      		ldd r25,Z+7
 502 0036 9387      		std Z+11,r25
 503 0038 8287      		std Z+10,r24
 504               	.L22:
 505 003a CF01      		movw r24,r30
 506               	.LVL45:
 507               	.LBB137:
 508               	.LBB138:
 844:../../../os/hal/osal/rt/osal.h **** }
 509               		.loc 3 844 0
 510 003c 60E0      		ldi r22,0
 511 003e 70E0      		ldi r23,0
 512               	.LVL46:
 513 0040 0E94 0000 		call chThdDequeueNextI
 514               	.LVL47:
 515               	.LBE138:
 516               	.LBE137:
 234:../../../os/hal/src/hal_queues.c ****     }
 235:../../../os/hal/src/hal_queues.c **** 
 236:../../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 237:../../../os/hal/src/hal_queues.c **** 
 238:../../../os/hal/src/hal_queues.c ****     return MSG_OK;
 517               		.loc 1 238 0
 518 0044 80E0      		ldi r24,0
 519 0046 90E0      		ldi r25,0
 520 0048 0895      		ret
 521               	.LVL48:
 522               	.L25:
 229:../../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 523               		.loc 1 229 0 discriminator 1
 524 004a 8481      		ldd r24,Z+4
 525 004c 9581      		ldd r25,Z+5
 526 004e 892B      		or r24,r25
 527 0050 01F0      		breq .L19
 239:../../../os/hal/src/hal_queues.c ****   }
 240:../../../os/hal/src/hal_queues.c **** 
 241:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 528               		.loc 1 241 0
 529 0052 8FEF      		ldi r24,lo8(-1)
 530 0054 9FEF      		ldi r25,lo8(-1)
 531 0056 0895      		ret
 532               		.cfi_endproc
 533               	.LFE172:
 535               		.section	.text.iqGetI,"ax",@progbits
 536               	.global	iqGetI
 538               	iqGetI:
 539               	.LFB173:
 242:../../../os/hal/src/hal_queues.c **** }
 243:../../../os/hal/src/hal_queues.c **** 
 244:../../../os/hal/src/hal_queues.c **** /**
 245:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 246:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. The
 247:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 248:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 249:../../../os/hal/src/hal_queues.c ****  *          queue.
 250:../../../os/hal/src/hal_queues.c ****  *
 251:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 252:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 253:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 254:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 255:../../../os/hal/src/hal_queues.c ****  *
 256:../../../os/hal/src/hal_queues.c ****  * @iclass
 257:../../../os/hal/src/hal_queues.c ****  */
 258:../../../os/hal/src/hal_queues.c **** msg_t iqGetI(input_queue_t *iqp) {
 540               		.loc 1 258 0
 541               		.cfi_startproc
 542               	.LVL49:
 543 0000 CF93      		push r28
 544               	.LCFI22:
 545               		.cfi_def_cfa_offset 3
 546               		.cfi_offset 28, -2
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 1 */
 550               	.L__stack_usage = 1
 551 0002 DC01      		movw r26,r24
 259:../../../os/hal/src/hal_queues.c **** 
 260:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 261:../../../os/hal/src/hal_queues.c **** 
 262:../../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 263:../../../os/hal/src/hal_queues.c ****   if (!iqIsEmptyI(iqp)) {
 552               		.loc 1 263 0
 553 0004 1496      		adiw r26,4
 554 0006 8D91      		ld r24,X+
 555 0008 9C91      		ld r25,X
 556 000a 1597      		sbiw r26,4+1
 557               	.LVL50:
 558 000c 892B      		or r24,r25
 559 000e 01F0      		breq .L30
 560               	.LBB139:
 264:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 265:../../../os/hal/src/hal_queues.c **** 
 266:../../../os/hal/src/hal_queues.c ****     /* Getting the character from the queue.*/
 267:../../../os/hal/src/hal_queues.c ****     iqp->q_counter--;
 561               		.loc 1 267 0
 562 0010 1496      		adiw r26,4
 563 0012 8D91      		ld r24,X+
 564 0014 9C91      		ld r25,X
 565 0016 1597      		sbiw r26,4+1
 566 0018 0197      		sbiw r24,1
 567 001a 1596      		adiw r26,4+1
 568 001c 9C93      		st X,r25
 569 001e 8E93      		st -X,r24
 570 0020 1497      		sbiw r26,4
 268:../../../os/hal/src/hal_queues.c ****     b = *iqp->q_rdptr++;
 571               		.loc 1 268 0
 572 0022 1C96      		adiw r26,12
 573 0024 ED91      		ld r30,X+
 574 0026 FC91      		ld r31,X
 575 0028 1D97      		sbiw r26,12+1
 576 002a CF01      		movw r24,r30
 577 002c 0196      		adiw r24,1
 578 002e 1D96      		adiw r26,12+1
 579 0030 9C93      		st X,r25
 580 0032 8E93      		st -X,r24
 581 0034 1C97      		sbiw r26,12
 582 0036 C081      		ld r28,Z
 583               	.LVL51:
 269:../../../os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 584               		.loc 1 269 0
 585 0038 1896      		adiw r26,8
 586 003a 2D91      		ld r18,X+
 587 003c 3C91      		ld r19,X
 588 003e 1997      		sbiw r26,8+1
 589 0040 8217      		cp r24,r18
 590 0042 9307      		cpc r25,r19
 591 0044 00F4      		brsh .L34
 592               	.L28:
 270:../../../os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 271:../../../os/hal/src/hal_queues.c ****     }
 272:../../../os/hal/src/hal_queues.c **** 
 273:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one slot available.*/
 274:../../../os/hal/src/hal_queues.c ****     if (iqp->q_notify != NULL) {
 593               		.loc 1 274 0
 594 0046 1E96      		adiw r26,14
 595 0048 ED91      		ld r30,X+
 596 004a FC91      		ld r31,X
 597 004c 1F97      		sbiw r26,14+1
 598 004e 3097      		sbiw r30,0
 599 0050 01F0      		breq .L29
 600 0052 CD01      		movw r24,r26
 275:../../../os/hal/src/hal_queues.c ****       iqp->q_notify(iqp);
 601               		.loc 1 275 0
 602 0054 0995      		icall
 603               	.LVL52:
 604               	.L29:
 276:../../../os/hal/src/hal_queues.c ****     }
 277:../../../os/hal/src/hal_queues.c **** 
 278:../../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 605               		.loc 1 278 0
 606 0056 8C2F      		mov r24,r28
 607 0058 90E0      		ldi r25,0
 608               	.LVL53:
 609               	.L27:
 610               	/* epilogue start */
 611               	.LBE139:
 279:../../../os/hal/src/hal_queues.c ****   }
 280:../../../os/hal/src/hal_queues.c **** 
 281:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 282:../../../os/hal/src/hal_queues.c **** }
 612               		.loc 1 282 0
 613 005a CF91      		pop r28
 614 005c 0895      		ret
 615               	.LVL54:
 616               	.L34:
 617               	.LBB140:
 270:../../../os/hal/src/hal_queues.c ****     }
 618               		.loc 1 270 0
 619 005e 1696      		adiw r26,6
 620 0060 8D91      		ld r24,X+
 621 0062 9C91      		ld r25,X
 622 0064 1797      		sbiw r26,6+1
 623 0066 1D96      		adiw r26,12+1
 624 0068 9C93      		st X,r25
 625 006a 8E93      		st -X,r24
 626 006c 1C97      		sbiw r26,12
 627 006e 00C0      		rjmp .L28
 628               	.LVL55:
 629               	.L30:
 630               	.LBE140:
 281:../../../os/hal/src/hal_queues.c **** }
 631               		.loc 1 281 0
 632 0070 8FEF      		ldi r24,lo8(-1)
 633 0072 9FEF      		ldi r25,lo8(-1)
 634 0074 00C0      		rjmp .L27
 635               		.cfi_endproc
 636               	.LFE173:
 638               		.section	.text.iqGetTimeout,"ax",@progbits
 639               	.global	iqGetTimeout
 641               	iqGetTimeout:
 642               	.LFB174:
 283:../../../os/hal/src/hal_queues.c **** 
 284:../../../os/hal/src/hal_queues.c **** /**
 285:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 286:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 287:../../../os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 288:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 289:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 290:../../../os/hal/src/hal_queues.c ****  *          queue.
 291:../../../os/hal/src/hal_queues.c ****  *
 292:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 293:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 294:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 295:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 296:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 297:../../../os/hal/src/hal_queues.c ****  *                      .
 298:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 299:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 300:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 301:../../../os/hal/src/hal_queues.c ****  *
 302:../../../os/hal/src/hal_queues.c ****  * @api
 303:../../../os/hal/src/hal_queues.c ****  */
 304:../../../os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 643               		.loc 1 304 0
 644               		.cfi_startproc
 645               	.LVL56:
 646 0000 0F93      		push r16
 647               	.LCFI23:
 648               		.cfi_def_cfa_offset 3
 649               		.cfi_offset 16, -2
 650 0002 1F93      		push r17
 651               	.LCFI24:
 652               		.cfi_def_cfa_offset 4
 653               		.cfi_offset 17, -3
 654 0004 CF93      		push r28
 655               	.LCFI25:
 656               		.cfi_def_cfa_offset 5
 657               		.cfi_offset 28, -4
 658 0006 DF93      		push r29
 659               	.LCFI26:
 660               		.cfi_def_cfa_offset 6
 661               		.cfi_offset 29, -5
 662               	/* prologue: function */
 663               	/* frame size = 0 */
 664               	/* stack size = 4 */
 665               	.L__stack_usage = 4
 666 0008 EC01      		movw r28,r24
 667 000a 8B01      		movw r16,r22
 668               	.LBB141:
 669               	.LBB142:
 670               	.LBB143:
 671               	.LBB144:
 672               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 673               		.loc 4 437 0
 674               	/* #APP */
 675               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 676 000c F894      		cli
 677               	 ;  0 "" 2
 678               	/* #NOAPP */
 679 000e 00C0      		rjmp .L36
 680               	.LVL57:
 681               	.L38:
 682               	.LBE144:
 683               	.LBE143:
 684               	.LBE142:
 685               	.LBE141:
 686               	.LBB145:
 687               	.LBB146:
 688               	.LBB147:
 831:../../../os/hal/osal/rt/osal.h **** }
 689               		.loc 3 831 0
 690 0010 B801      		movw r22,r16
 691 0012 CE01      		movw r24,r28
 692 0014 0E94 0000 		call chThdEnqueueTimeoutS
 693               	.LVL58:
 694               	.LBE147:
 695               	.LBE146:
 305:../../../os/hal/src/hal_queues.c ****   uint8_t b;
 306:../../../os/hal/src/hal_queues.c **** 
 307:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 308:../../../os/hal/src/hal_queues.c **** 
 309:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a character available or a timeout occurs.*/
 310:../../../os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 311:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 312:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 696               		.loc 1 312 0
 697 0018 97FD      		sbrc r25,7
 698 001a 00C0      		rjmp .L45
 699               	.LVL59:
 700               	.L36:
 701               	.LBE145:
 310:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 702               		.loc 1 310 0
 703 001c 8C81      		ldd r24,Y+4
 704 001e 9D81      		ldd r25,Y+5
 705 0020 892B      		or r24,r25
 706 0022 01F0      		breq .L38
 313:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 314:../../../os/hal/src/hal_queues.c ****       return msg;
 315:../../../os/hal/src/hal_queues.c ****     }
 316:../../../os/hal/src/hal_queues.c ****   }
 317:../../../os/hal/src/hal_queues.c **** 
 318:../../../os/hal/src/hal_queues.c ****   /* Getting the character from the queue.*/
 319:../../../os/hal/src/hal_queues.c ****   iqp->q_counter--;
 707               		.loc 1 319 0
 708 0024 8C81      		ldd r24,Y+4
 709 0026 9D81      		ldd r25,Y+5
 710 0028 0197      		sbiw r24,1
 711 002a 9D83      		std Y+5,r25
 712 002c 8C83      		std Y+4,r24
 320:../../../os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 713               		.loc 1 320 0
 714 002e EC85      		ldd r30,Y+12
 715 0030 FD85      		ldd r31,Y+13
 716 0032 CF01      		movw r24,r30
 717 0034 0196      		adiw r24,1
 718 0036 9D87      		std Y+13,r25
 719 0038 8C87      		std Y+12,r24
 720 003a 1081      		ld r17,Z
 721               	.LVL60:
 321:../../../os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 722               		.loc 1 321 0
 723 003c 2885      		ldd r18,Y+8
 724 003e 3985      		ldd r19,Y+9
 725 0040 8217      		cp r24,r18
 726 0042 9307      		cpc r25,r19
 727 0044 00F0      		brlo .L39
 322:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 728               		.loc 1 322 0
 729 0046 8E81      		ldd r24,Y+6
 730 0048 9F81      		ldd r25,Y+7
 731 004a 9D87      		std Y+13,r25
 732 004c 8C87      		std Y+12,r24
 733               	.L39:
 323:../../../os/hal/src/hal_queues.c ****   }
 324:../../../os/hal/src/hal_queues.c **** 
 325:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one slot available.*/
 326:../../../os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 734               		.loc 1 326 0
 735 004e EE85      		ldd r30,Y+14
 736 0050 FF85      		ldd r31,Y+15
 737 0052 3097      		sbiw r30,0
 738 0054 01F0      		breq .L40
 327:../../../os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 739               		.loc 1 327 0
 740 0056 CE01      		movw r24,r28
 741 0058 0995      		icall
 742               	.LVL61:
 743               	.L40:
 744               	.LBB153:
 745               	.LBB154:
 746               	.LBB155:
 747               	.LBB156:
 748               	.LBB157:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 749               		.loc 4 447 0
 750               	/* #APP */
 751               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 752 005a 7894      		sei
 753               	 ;  0 "" 2
 754               	/* #NOAPP */
 755               	.LBE157:
 756               	.LBE156:
 757               	.LBE155:
 758               	.LBE154:
 759               	.LBE153:
 328:../../../os/hal/src/hal_queues.c ****   }
 329:../../../os/hal/src/hal_queues.c **** 
 330:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 331:../../../os/hal/src/hal_queues.c **** 
 332:../../../os/hal/src/hal_queues.c ****   return (msg_t)b;
 760               		.loc 1 332 0
 761 005c 812F      		mov r24,r17
 762 005e 90E0      		ldi r25,0
 763               	/* epilogue start */
 333:../../../os/hal/src/hal_queues.c **** }
 764               		.loc 1 333 0
 765 0060 DF91      		pop r29
 766 0062 CF91      		pop r28
 767               	.LVL62:
 768 0064 1F91      		pop r17
 769               	.LVL63:
 770 0066 0F91      		pop r16
 771               	.LVL64:
 772 0068 0895      		ret
 773               	.LVL65:
 774               	.L45:
 775               	.LBB158:
 776               	.LBB148:
 777               	.LBB149:
 778               	.LBB150:
 779               	.LBB151:
 780               	.LBB152:
 781               		.loc 4 447 0
 782               	/* #APP */
 783               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 784 006a 7894      		sei
 785               	 ;  0 "" 2
 786               	/* epilogue start */
 787               	/* #NOAPP */
 788               	.LBE152:
 789               	.LBE151:
 790               	.LBE150:
 791               	.LBE149:
 792               	.LBE148:
 793               	.LBE158:
 794               		.loc 1 333 0
 795 006c DF91      		pop r29
 796 006e CF91      		pop r28
 797               	.LVL66:
 798 0070 1F91      		pop r17
 799 0072 0F91      		pop r16
 800               	.LVL67:
 801 0074 0895      		ret
 802               		.cfi_endproc
 803               	.LFE174:
 805               		.section	.text.iqReadI,"ax",@progbits
 806               	.global	iqReadI
 808               	iqReadI:
 809               	.LFB175:
 334:../../../os/hal/src/hal_queues.c **** 
 335:../../../os/hal/src/hal_queues.c **** /**
 336:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 337:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 338:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 339:../../../os/hal/src/hal_queues.c ****  *
 340:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 341:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 342:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 343:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 344:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 345:../../../os/hal/src/hal_queues.c ****  *
 346:../../../os/hal/src/hal_queues.c ****  * @iclass
 347:../../../os/hal/src/hal_queues.c ****  */
 348:../../../os/hal/src/hal_queues.c **** size_t iqReadI(input_queue_t *iqp, uint8_t *bp, size_t n) {
 810               		.loc 1 348 0
 811               		.cfi_startproc
 812               	.LVL68:
 813 0000 EF92      		push r14
 814               	.LCFI27:
 815               		.cfi_def_cfa_offset 3
 816               		.cfi_offset 14, -2
 817 0002 FF92      		push r15
 818               	.LCFI28:
 819               		.cfi_def_cfa_offset 4
 820               		.cfi_offset 15, -3
 821 0004 0F93      		push r16
 822               	.LCFI29:
 823               		.cfi_def_cfa_offset 5
 824               		.cfi_offset 16, -4
 825 0006 1F93      		push r17
 826               	.LCFI30:
 827               		.cfi_def_cfa_offset 6
 828               		.cfi_offset 17, -5
 829 0008 CF93      		push r28
 830               	.LCFI31:
 831               		.cfi_def_cfa_offset 7
 832               		.cfi_offset 28, -6
 833 000a DF93      		push r29
 834               	.LCFI32:
 835               		.cfi_def_cfa_offset 8
 836               		.cfi_offset 29, -7
 837               	/* prologue: function */
 838               	/* frame size = 0 */
 839               	/* stack size = 6 */
 840               	.L__stack_usage = 6
 841 000c EC01      		movw r28,r24
 349:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 842               		.loc 1 349 0
 843 000e EE84      		ldd r14,Y+14
 844 0010 FF84      		ldd r15,Y+15
 845               	.LVL69:
 350:../../../os/hal/src/hal_queues.c ****   size_t rd;
 351:../../../os/hal/src/hal_queues.c **** 
 352:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 353:../../../os/hal/src/hal_queues.c **** 
 354:../../../os/hal/src/hal_queues.c ****   rd = iq_read(iqp, bp, n);
 846               		.loc 1 354 0
 847 0012 0E94 0000 		call iq_read
 848               	.LVL70:
 849 0016 8C01      		movw r16,r24
 850               	.LVL71:
 355:../../../os/hal/src/hal_queues.c **** 
 356:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 357:../../../os/hal/src/hal_queues.c ****      available.*/
 358:../../../os/hal/src/hal_queues.c ****   if ((rd > (size_t)0) && (nfy != NULL)) {
 851               		.loc 1 358 0
 852 0018 892B      		or r24,r25
 853 001a 01F0      		breq .L47
 854               		.loc 1 358 0 is_stmt 0 discriminator 1
 855 001c E114      		cp r14,__zero_reg__
 856 001e F104      		cpc r15,__zero_reg__
 857 0020 01F0      		breq .L47
 359:../../../os/hal/src/hal_queues.c ****     nfy(iqp);
 858               		.loc 1 359 0 is_stmt 1
 859 0022 CE01      		movw r24,r28
 860 0024 F701      		movw r30,r14
 861 0026 0995      		icall
 862               	.LVL72:
 863               	.L47:
 360:../../../os/hal/src/hal_queues.c ****   }
 361:../../../os/hal/src/hal_queues.c **** 
 362:../../../os/hal/src/hal_queues.c ****   return rd;
 363:../../../os/hal/src/hal_queues.c **** }
 864               		.loc 1 363 0
 865 0028 C801      		movw r24,r16
 866               	/* epilogue start */
 867 002a DF91      		pop r29
 868 002c CF91      		pop r28
 869               	.LVL73:
 870 002e 1F91      		pop r17
 871 0030 0F91      		pop r16
 872               	.LVL74:
 873 0032 FF90      		pop r15
 874 0034 EF90      		pop r14
 875               	.LVL75:
 876 0036 0895      		ret
 877               		.cfi_endproc
 878               	.LFE175:
 880               		.section	.text.iqReadTimeout,"ax",@progbits
 881               	.global	iqReadTimeout
 883               	iqReadTimeout:
 884               	.LFB176:
 364:../../../os/hal/src/hal_queues.c **** 
 365:../../../os/hal/src/hal_queues.c **** /**
 366:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 367:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 368:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 369:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 370:../../../os/hal/src/hal_queues.c ****  *          been reset.
 371:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 372:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 373:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing each character from the
 374:../../../os/hal/src/hal_queues.c ****  *          queue.
 375:../../../os/hal/src/hal_queues.c ****  *
 376:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 377:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 378:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 379:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 380:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 381:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 382:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 383:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 384:../../../os/hal/src/hal_queues.c ****  *                      .
 385:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 386:../../../os/hal/src/hal_queues.c ****  *
 387:../../../os/hal/src/hal_queues.c ****  * @api
 388:../../../os/hal/src/hal_queues.c ****  */
 389:../../../os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 390:../../../os/hal/src/hal_queues.c ****                      size_t n, sysinterval_t timeout) {
 885               		.loc 1 390 0
 886               		.cfi_startproc
 887               	.LVL76:
 888 0000 6F92      		push r6
 889               	.LCFI33:
 890               		.cfi_def_cfa_offset 3
 891               		.cfi_offset 6, -2
 892 0002 7F92      		push r7
 893               	.LCFI34:
 894               		.cfi_def_cfa_offset 4
 895               		.cfi_offset 7, -3
 896 0004 8F92      		push r8
 897               	.LCFI35:
 898               		.cfi_def_cfa_offset 5
 899               		.cfi_offset 8, -4
 900 0006 9F92      		push r9
 901               	.LCFI36:
 902               		.cfi_def_cfa_offset 6
 903               		.cfi_offset 9, -5
 904 0008 AF92      		push r10
 905               	.LCFI37:
 906               		.cfi_def_cfa_offset 7
 907               		.cfi_offset 10, -6
 908 000a BF92      		push r11
 909               	.LCFI38:
 910               		.cfi_def_cfa_offset 8
 911               		.cfi_offset 11, -7
 912 000c CF92      		push r12
 913               	.LCFI39:
 914               		.cfi_def_cfa_offset 9
 915               		.cfi_offset 12, -8
 916 000e DF92      		push r13
 917               	.LCFI40:
 918               		.cfi_def_cfa_offset 10
 919               		.cfi_offset 13, -9
 920 0010 EF92      		push r14
 921               	.LCFI41:
 922               		.cfi_def_cfa_offset 11
 923               		.cfi_offset 14, -10
 924 0012 FF92      		push r15
 925               	.LCFI42:
 926               		.cfi_def_cfa_offset 12
 927               		.cfi_offset 15, -11
 928 0014 0F93      		push r16
 929               	.LCFI43:
 930               		.cfi_def_cfa_offset 13
 931               		.cfi_offset 16, -12
 932 0016 1F93      		push r17
 933               	.LCFI44:
 934               		.cfi_def_cfa_offset 14
 935               		.cfi_offset 17, -13
 936 0018 CF93      		push r28
 937               	.LCFI45:
 938               		.cfi_def_cfa_offset 15
 939               		.cfi_offset 28, -14
 940 001a DF93      		push r29
 941               	.LCFI46:
 942               		.cfi_def_cfa_offset 16
 943               		.cfi_offset 29, -15
 944               	/* prologue: function */
 945               	/* frame size = 0 */
 946               	/* stack size = 14 */
 947               	.L__stack_usage = 14
 948 001c 6C01      		movw r12,r24
 949 001e 8B01      		movw r16,r22
 950 0020 7A01      		movw r14,r20
 951 0022 4901      		movw r8,r18
 391:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 952               		.loc 1 391 0
 953 0024 FC01      		movw r30,r24
 954 0026 A684      		ldd r10,Z+14
 955 0028 B784      		ldd r11,Z+15
 956               	.LVL77:
 957               	.LBB159:
 958               	.LBB160:
 959               	.LBB161:
 960               	.LBB162:
 437:../../../os/common/ports/AVR/chcore.h **** }
 961               		.loc 4 437 0
 962               	/* #APP */
 963               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 964 002a F894      		cli
 965               	 ;  0 "" 2
 966               	/* #NOAPP */
 967               	.LBE162:
 968               	.LBE161:
 969               	.LBE160:
 970               	.LBE159:
 392:../../../os/hal/src/hal_queues.c ****   size_t rd = 0;
 393:../../../os/hal/src/hal_queues.c **** 
 394:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 395:../../../os/hal/src/hal_queues.c **** 
 396:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 397:../../../os/hal/src/hal_queues.c **** 
 398:../../../os/hal/src/hal_queues.c ****   while (rd < n) {
 971               		.loc 1 398 0
 972 002c C0E0      		ldi r28,0
 973 002e D0E0      		ldi r29,0
 974 0030 452B      		or r20,r21
 975 0032 01F4      		brne .L59
 976 0034 00C0      		rjmp .L55
 977               	.LVL78:
 978               	.L56:
 979               	.LBB163:
 399:../../../os/hal/src/hal_queues.c ****     size_t done;
 400:../../../os/hal/src/hal_queues.c **** 
 401:../../../os/hal/src/hal_queues.c ****     done = iq_read(iqp, bp, n);
 402:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 403:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 404:../../../os/hal/src/hal_queues.c **** 
 405:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 406:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 407:../../../os/hal/src/hal_queues.c ****         break;
 408:../../../os/hal/src/hal_queues.c ****       }
 409:../../../os/hal/src/hal_queues.c ****     }
 410:../../../os/hal/src/hal_queues.c ****     else {
 411:../../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one empty slot
 412:../../../os/hal/src/hal_queues.c ****          available.*/
 413:../../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 980               		.loc 1 413 0
 981 0036 A114      		cp r10,__zero_reg__
 982 0038 B104      		cpc r11,__zero_reg__
 983 003a 01F0      		breq .L58
 414:../../../os/hal/src/hal_queues.c ****         nfy(iqp);
 984               		.loc 1 414 0
 985 003c C601      		movw r24,r12
 986 003e F501      		movw r30,r10
 987 0040 0995      		icall
 988               	.LVL79:
 989               	.L58:
 990               	.LBB164:
 991               	.LBB165:
 992               	.LBB166:
 993               	.LBB167:
 994               	.LBB168:
 995               		.loc 4 447 0
 996               	/* #APP */
 997               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 998 0042 7894      		sei
 999               	 ;  0 "" 2
 1000               	/* #NOAPP */
 1001               	.LBE168:
 1002               	.LBE167:
 1003               	.LBE166:
 1004               	.LBE165:
 1005               	.LBE164:
 415:../../../os/hal/src/hal_queues.c ****       }
 416:../../../os/hal/src/hal_queues.c **** 
 417:../../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 418:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 419:../../../os/hal/src/hal_queues.c **** 
 420:../../../os/hal/src/hal_queues.c ****       rd += done;
 1006               		.loc 1 420 0
 1007 0044 C60D      		add r28,r6
 1008 0046 D71D      		adc r29,r7
 1009               	.LVL80:
 421:../../../os/hal/src/hal_queues.c ****       bp += done;
 1010               		.loc 1 421 0
 1011 0048 060D      		add r16,r6
 1012 004a 171D      		adc r17,r7
 1013               	.LVL81:
 1014               	.LBB169:
 1015               	.LBB170:
 1016               	.LBB171:
 1017               	.LBB172:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1018               		.loc 4 437 0
 1019               	/* #APP */
 1020               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1021 004c F894      		cli
 1022               	 ;  0 "" 2
 1023               	/* #NOAPP */
 1024               	.L57:
 1025               	.LBE172:
 1026               	.LBE171:
 1027               	.LBE170:
 1028               	.LBE169:
 1029               	.LBE163:
 398:../../../os/hal/src/hal_queues.c ****     size_t done;
 1030               		.loc 1 398 0
 1031 004e CE15      		cp r28,r14
 1032 0050 DF05      		cpc r29,r15
 1033 0052 00F4      		brsh .L55
 1034               	.LVL82:
 1035               	.L59:
 1036               	.LBB176:
 401:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1037               		.loc 1 401 0
 1038 0054 A701      		movw r20,r14
 1039 0056 B801      		movw r22,r16
 1040 0058 C601      		movw r24,r12
 1041 005a 0E94 0000 		call iq_read
 1042               	.LVL83:
 1043 005e 3C01      		movw r6,r24
 1044               	.LVL84:
 402:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 1045               		.loc 1 402 0
 1046 0060 892B      		or r24,r25
 1047 0062 01F4      		brne .L56
 1048               	.LVL85:
 1049               	.LBB173:
 1050               	.LBB174:
 1051               	.LBB175:
 831:../../../os/hal/osal/rt/osal.h **** }
 1052               		.loc 3 831 0
 1053 0064 B401      		movw r22,r8
 1054 0066 C601      		movw r24,r12
 1055 0068 0E94 0000 		call chThdEnqueueTimeoutS
 1056               	.LVL86:
 1057               	.LBE175:
 1058               	.LBE174:
 406:../../../os/hal/src/hal_queues.c ****         break;
 1059               		.loc 1 406 0
 1060 006c 892B      		or r24,r25
 1061 006e 01F0      		breq .L57
 1062               	.LVL87:
 1063               	.L55:
 1064               	.LBE173:
 1065               	.LBE176:
 1066               	.LBB177:
 1067               	.LBB178:
 1068               	.LBB179:
 1069               	.LBB180:
 1070               	.LBB181:
 1071               		.loc 4 447 0
 1072               	/* #APP */
 1073               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1074 0070 7894      		sei
 1075               	 ;  0 "" 2
 1076               	/* #NOAPP */
 1077               	.LBE181:
 1078               	.LBE180:
 1079               	.LBE179:
 1080               	.LBE178:
 1081               	.LBE177:
 422:../../../os/hal/src/hal_queues.c **** 
 423:../../../os/hal/src/hal_queues.c ****       osalSysLock();
 424:../../../os/hal/src/hal_queues.c ****     }
 425:../../../os/hal/src/hal_queues.c ****   }
 426:../../../os/hal/src/hal_queues.c **** 
 427:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 428:../../../os/hal/src/hal_queues.c ****   return rd;
 429:../../../os/hal/src/hal_queues.c **** }
 1082               		.loc 1 429 0
 1083 0072 CE01      		movw r24,r28
 1084               	/* epilogue start */
 1085 0074 DF91      		pop r29
 1086 0076 CF91      		pop r28
 1087 0078 1F91      		pop r17
 1088 007a 0F91      		pop r16
 1089               	.LVL88:
 1090 007c FF90      		pop r15
 1091 007e EF90      		pop r14
 1092               	.LVL89:
 1093 0080 DF90      		pop r13
 1094 0082 CF90      		pop r12
 1095               	.LVL90:
 1096 0084 BF90      		pop r11
 1097 0086 AF90      		pop r10
 1098               	.LVL91:
 1099 0088 9F90      		pop r9
 1100 008a 8F90      		pop r8
 1101               	.LVL92:
 1102 008c 7F90      		pop r7
 1103 008e 6F90      		pop r6
 1104 0090 0895      		ret
 1105               		.cfi_endproc
 1106               	.LFE176:
 1108               		.section	.text.oqObjectInit,"ax",@progbits
 1109               	.global	oqObjectInit
 1111               	oqObjectInit:
 1112               	.LFB177:
 430:../../../os/hal/src/hal_queues.c **** 
 431:../../../os/hal/src/hal_queues.c **** /**
 432:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 433:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 434:../../../os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 435:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 436:../../../os/hal/src/hal_queues.c ****  *
 437:../../../os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 438:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 439:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 440:../../../os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 441:../../../os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 442:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 443:../../../os/hal/src/hal_queues.c ****  *
 444:../../../os/hal/src/hal_queues.c ****  * @init
 445:../../../os/hal/src/hal_queues.c ****  */
 446:../../../os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 447:../../../os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 1113               		.loc 1 447 0
 1114               		.cfi_startproc
 1115               	.LVL93:
 1116 0000 0F93      		push r16
 1117               	.LCFI47:
 1118               		.cfi_def_cfa_offset 3
 1119               		.cfi_offset 16, -2
 1120 0002 1F93      		push r17
 1121               	.LCFI48:
 1122               		.cfi_def_cfa_offset 4
 1123               		.cfi_offset 17, -3
 1124               	/* prologue: function */
 1125               	/* frame size = 0 */
 1126               	/* stack size = 2 */
 1127               	.L__stack_usage = 2
 1128 0004 FC01      		movw r30,r24
 1129               	.LVL94:
 1130               	.LBB182:
 1131               	.LBB183:
 1132               	.LBB184:
 1133               	.LBB185:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 1134               		.loc 2 539 0
 1135 0006 9183      		std Z+1,r25
 1136 0008 8083      		st Z,r24
 1137               		.loc 2 540 0
 1138 000a 9383      		std Z+3,r25
 1139 000c 8283      		std Z+2,r24
 1140               	.LBE185:
 1141               	.LBE184:
 1142               	.LBE183:
 1143               	.LBE182:
 448:../../../os/hal/src/hal_queues.c **** 
 449:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 450:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 1144               		.loc 1 450 0
 1145 000e 5583      		std Z+5,r21
 1146 0010 4483      		std Z+4,r20
 451:../../../os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 1147               		.loc 1 451 0
 1148 0012 7783      		std Z+7,r23
 1149 0014 6683      		std Z+6,r22
 452:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 1150               		.loc 1 452 0
 1151 0016 7587      		std Z+13,r23
 1152 0018 6487      		std Z+12,r22
 453:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 1153               		.loc 1 453 0
 1154 001a 7387      		std Z+11,r23
 1155 001c 6287      		std Z+10,r22
 454:../../../os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 1156               		.loc 1 454 0
 1157 001e 460F      		add r20,r22
 1158 0020 571F      		adc r21,r23
 1159               	.LVL95:
 1160 0022 5187      		std Z+9,r21
 1161 0024 4087      		std Z+8,r20
 455:../../../os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 1162               		.loc 1 455 0
 1163 0026 3787      		std Z+15,r19
 1164 0028 2687      		std Z+14,r18
 456:../../../os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 1165               		.loc 1 456 0
 1166 002a 118B      		std Z+17,r17
 1167 002c 008B      		std Z+16,r16
 1168               	/* epilogue start */
 457:../../../os/hal/src/hal_queues.c **** }
 1169               		.loc 1 457 0
 1170 002e 1F91      		pop r17
 1171 0030 0F91      		pop r16
 1172               	.LVL96:
 1173 0032 0895      		ret
 1174               		.cfi_endproc
 1175               	.LFE177:
 1177               		.section	.text.oqResetI,"ax",@progbits
 1178               	.global	oqResetI
 1180               	oqResetI:
 1181               	.LFB178:
 458:../../../os/hal/src/hal_queues.c **** 
 459:../../../os/hal/src/hal_queues.c **** /**
 460:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 461:../../../os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 462:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 463:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 464:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 465:../../../os/hal/src/hal_queues.c ****  *
 466:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 467:../../../os/hal/src/hal_queues.c ****  *
 468:../../../os/hal/src/hal_queues.c ****  * @iclass
 469:../../../os/hal/src/hal_queues.c ****  */
 470:../../../os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 1182               		.loc 1 470 0
 1183               		.cfi_startproc
 1184               	.LVL97:
 1185               	/* prologue: function */
 1186               	/* frame size = 0 */
 1187               	/* stack size = 0 */
 1188               	.L__stack_usage = 0
 1189 0000 FC01      		movw r30,r24
 471:../../../os/hal/src/hal_queues.c **** 
 472:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 473:../../../os/hal/src/hal_queues.c **** 
 474:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 1190               		.loc 1 474 0
 1191 0002 2681      		ldd r18,Z+6
 1192 0004 3781      		ldd r19,Z+7
 1193 0006 3587      		std Z+13,r19
 1194 0008 2487      		std Z+12,r18
 475:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 1195               		.loc 1 475 0
 1196 000a 3387      		std Z+11,r19
 1197 000c 2287      		std Z+10,r18
 476:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 1198               		.loc 1 476 0
 1199 000e 8085      		ldd r24,Z+8
 1200 0010 9185      		ldd r25,Z+9
 1201               	.LVL98:
 1202 0012 821B      		sub r24,r18
 1203 0014 930B      		sbc r25,r19
 1204 0016 9583      		std Z+5,r25
 1205 0018 8483      		std Z+4,r24
 1206               	.LVL99:
 1207               	.LBB186:
 1208               	.LBB187:
 1209               		.loc 3 857 0
 1210 001a 6EEF      		ldi r22,lo8(-2)
 1211 001c 7FEF      		ldi r23,lo8(-1)
 1212 001e CF01      		movw r24,r30
 1213 0020 0C94 0000 		jmp chThdDequeueAllI
 1214               	.LVL100:
 1215               	.LBE187:
 1216               	.LBE186:
 1217               		.cfi_endproc
 1218               	.LFE178:
 1220               		.section	.text.oqPutI,"ax",@progbits
 1221               	.global	oqPutI
 1223               	oqPutI:
 1224               	.LFB179:
 477:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
 478:../../../os/hal/src/hal_queues.c **** }
 479:../../../os/hal/src/hal_queues.c **** 
 480:../../../os/hal/src/hal_queues.c **** /**
 481:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 482:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. The
 483:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 484:../../../os/hal/src/hal_queues.c ****  *
 485:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 486:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 487:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 488:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 489:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 490:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 491:../../../os/hal/src/hal_queues.c ****  *
 492:../../../os/hal/src/hal_queues.c ****  * @iclass
 493:../../../os/hal/src/hal_queues.c ****  */
 494:../../../os/hal/src/hal_queues.c **** msg_t oqPutI(output_queue_t *oqp, uint8_t b) {
 1225               		.loc 1 494 0
 1226               		.cfi_startproc
 1227               	.LVL101:
 1228               	/* prologue: function */
 1229               	/* frame size = 0 */
 1230               	/* stack size = 0 */
 1231               	.L__stack_usage = 0
 1232 0000 DC01      		movw r26,r24
 495:../../../os/hal/src/hal_queues.c **** 
 496:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 497:../../../os/hal/src/hal_queues.c **** 
 498:../../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 499:../../../os/hal/src/hal_queues.c ****   while (!oqIsFullI(oqp)) {
 1233               		.loc 1 499 0
 1234 0002 1496      		adiw r26,4
 1235 0004 8D91      		ld r24,X+
 1236 0006 9C91      		ld r25,X
 1237 0008 1597      		sbiw r26,4+1
 1238               	.LVL102:
 1239 000a 892B      		or r24,r25
 1240 000c 01F0      		breq .L70
 500:../../../os/hal/src/hal_queues.c ****     /* Putting the character into the queue.*/
 501:../../../os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1241               		.loc 1 501 0
 1242 000e 1496      		adiw r26,4
 1243 0010 8D91      		ld r24,X+
 1244 0012 9C91      		ld r25,X
 1245 0014 1597      		sbiw r26,4+1
 1246 0016 0197      		sbiw r24,1
 1247 0018 1596      		adiw r26,4+1
 1248 001a 9C93      		st X,r25
 1249 001c 8E93      		st -X,r24
 1250 001e 1497      		sbiw r26,4
 502:../../../os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = b;
 1251               		.loc 1 502 0
 1252 0020 1A96      		adiw r26,10
 1253 0022 ED91      		ld r30,X+
 1254 0024 FC91      		ld r31,X
 1255 0026 1B97      		sbiw r26,10+1
 1256 0028 CF01      		movw r24,r30
 1257 002a 0196      		adiw r24,1
 1258 002c 1B96      		adiw r26,10+1
 1259 002e 9C93      		st X,r25
 1260 0030 8E93      		st -X,r24
 1261 0032 1A97      		sbiw r26,10
 1262 0034 6083      		st Z,r22
 503:../../../os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1263               		.loc 1 503 0
 1264 0036 1A96      		adiw r26,10
 1265 0038 2D91      		ld r18,X+
 1266 003a 3C91      		ld r19,X
 1267 003c 1B97      		sbiw r26,10+1
 1268 003e 1896      		adiw r26,8
 1269 0040 8D91      		ld r24,X+
 1270 0042 9C91      		ld r25,X
 1271 0044 1997      		sbiw r26,8+1
 1272 0046 2817      		cp r18,r24
 1273 0048 3907      		cpc r19,r25
 1274 004a 00F4      		brsh .L72
 504:../../../os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 505:../../../os/hal/src/hal_queues.c ****     }
 506:../../../os/hal/src/hal_queues.c **** 
 507:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one character available.*/
 508:../../../os/hal/src/hal_queues.c ****     if (oqp->q_notify != NULL) {
 1275               		.loc 1 508 0
 1276 004c 1E96      		adiw r26,14
 1277 004e ED91      		ld r30,X+
 1278 0050 FC91      		ld r31,X
 1279 0052 1F97      		sbiw r26,14+1
 1280 0054 3097      		sbiw r30,0
 1281 0056 01F0      		breq .L71
 1282               	.L73:
 1283 0058 CD01      		movw r24,r26
 509:../../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1284               		.loc 1 509 0
 1285 005a 0995      		icall
 1286               	.LVL103:
 510:../../../os/hal/src/hal_queues.c ****     }
 511:../../../os/hal/src/hal_queues.c **** 
 512:../../../os/hal/src/hal_queues.c ****     return MSG_OK;
 1287               		.loc 1 512 0
 1288 005c 80E0      		ldi r24,0
 1289 005e 90E0      		ldi r25,0
 1290 0060 0895      		ret
 1291               	.LVL104:
 1292               	.L72:
 504:../../../os/hal/src/hal_queues.c ****     }
 1293               		.loc 1 504 0
 1294 0062 1696      		adiw r26,6
 1295 0064 8D91      		ld r24,X+
 1296 0066 9C91      		ld r25,X
 1297 0068 1797      		sbiw r26,6+1
 1298 006a 1B96      		adiw r26,10+1
 1299 006c 9C93      		st X,r25
 1300 006e 8E93      		st -X,r24
 1301 0070 1A97      		sbiw r26,10
 508:../../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1302               		.loc 1 508 0
 1303 0072 1E96      		adiw r26,14
 1304 0074 ED91      		ld r30,X+
 1305 0076 FC91      		ld r31,X
 1306 0078 1F97      		sbiw r26,14+1
 1307 007a 3097      		sbiw r30,0
 1308 007c 01F4      		brne .L73
 1309               	.L71:
 1310               		.loc 1 512 0
 1311 007e 80E0      		ldi r24,0
 1312 0080 90E0      		ldi r25,0
 513:../../../os/hal/src/hal_queues.c ****   }
 514:../../../os/hal/src/hal_queues.c **** 
 515:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 516:../../../os/hal/src/hal_queues.c **** }
 1313               		.loc 1 516 0
 1314 0082 0895      		ret
 1315               	.L70:
 515:../../../os/hal/src/hal_queues.c **** }
 1316               		.loc 1 515 0
 1317 0084 8FEF      		ldi r24,lo8(-1)
 1318 0086 9FEF      		ldi r25,lo8(-1)
 1319 0088 0895      		ret
 1320               		.cfi_endproc
 1321               	.LFE179:
 1323               		.section	.text.oqPutTimeout,"ax",@progbits
 1324               	.global	oqPutTimeout
 1326               	oqPutTimeout:
 1327               	.LFB180:
 517:../../../os/hal/src/hal_queues.c **** 
 518:../../../os/hal/src/hal_queues.c **** /**
 519:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 520:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 521:../../../os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 522:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 523:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting the character into the
 524:../../../os/hal/src/hal_queues.c ****  *          queue.
 525:../../../os/hal/src/hal_queues.c ****  *
 526:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 527:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 528:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 529:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 530:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 531:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 532:../../../os/hal/src/hal_queues.c ****  *                      .
 533:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 534:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 535:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 536:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 537:../../../os/hal/src/hal_queues.c ****  *
 538:../../../os/hal/src/hal_queues.c ****  * @api
 539:../../../os/hal/src/hal_queues.c ****  */
 540:../../../os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 1328               		.loc 1 540 0
 1329               		.cfi_startproc
 1330               	.LVL105:
 1331 0000 FF92      		push r15
 1332               	.LCFI49:
 1333               		.cfi_def_cfa_offset 3
 1334               		.cfi_offset 15, -2
 1335 0002 0F93      		push r16
 1336               	.LCFI50:
 1337               		.cfi_def_cfa_offset 4
 1338               		.cfi_offset 16, -3
 1339 0004 1F93      		push r17
 1340               	.LCFI51:
 1341               		.cfi_def_cfa_offset 5
 1342               		.cfi_offset 17, -4
 1343 0006 CF93      		push r28
 1344               	.LCFI52:
 1345               		.cfi_def_cfa_offset 6
 1346               		.cfi_offset 28, -5
 1347 0008 DF93      		push r29
 1348               	.LCFI53:
 1349               		.cfi_def_cfa_offset 7
 1350               		.cfi_offset 29, -6
 1351               	/* prologue: function */
 1352               	/* frame size = 0 */
 1353               	/* stack size = 5 */
 1354               	.L__stack_usage = 5
 1355 000a EC01      		movw r28,r24
 1356 000c F62E      		mov r15,r22
 1357 000e 8A01      		movw r16,r20
 1358               	.LBB188:
 1359               	.LBB189:
 1360               	.LBB190:
 1361               	.LBB191:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1362               		.loc 4 437 0
 1363               	/* #APP */
 1364               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1365 0010 F894      		cli
 1366               	 ;  0 "" 2
 1367               	/* #NOAPP */
 1368 0012 00C0      		rjmp .L75
 1369               	.LVL106:
 1370               	.L77:
 1371               	.LBE191:
 1372               	.LBE190:
 1373               	.LBE189:
 1374               	.LBE188:
 1375               	.LBB192:
 1376               	.LBB193:
 1377               	.LBB194:
 831:../../../os/hal/osal/rt/osal.h **** }
 1378               		.loc 3 831 0
 1379 0014 B801      		movw r22,r16
 1380 0016 CE01      		movw r24,r28
 1381 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1382               	.LVL107:
 1383               	.LBE194:
 1384               	.LBE193:
 541:../../../os/hal/src/hal_queues.c **** 
 542:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 543:../../../os/hal/src/hal_queues.c **** 
 544:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a slot available or a timeout occurs.*/
 545:../../../os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 546:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 547:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 1385               		.loc 1 547 0
 1386 001c 97FD      		sbrc r25,7
 1387 001e 00C0      		rjmp .L84
 1388               	.LVL108:
 1389               	.L75:
 1390               	.LBE192:
 545:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1391               		.loc 1 545 0
 1392 0020 8C81      		ldd r24,Y+4
 1393 0022 9D81      		ldd r25,Y+5
 1394 0024 892B      		or r24,r25
 1395 0026 01F0      		breq .L77
 548:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 549:../../../os/hal/src/hal_queues.c ****       return msg;
 550:../../../os/hal/src/hal_queues.c ****     }
 551:../../../os/hal/src/hal_queues.c ****   }
 552:../../../os/hal/src/hal_queues.c **** 
 553:../../../os/hal/src/hal_queues.c ****   /* Putting the character into the queue.*/
 554:../../../os/hal/src/hal_queues.c ****   oqp->q_counter--;
 1396               		.loc 1 554 0
 1397 0028 8C81      		ldd r24,Y+4
 1398 002a 9D81      		ldd r25,Y+5
 1399 002c 0197      		sbiw r24,1
 1400 002e 9D83      		std Y+5,r25
 1401 0030 8C83      		std Y+4,r24
 555:../../../os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 1402               		.loc 1 555 0
 1403 0032 EA85      		ldd r30,Y+10
 1404 0034 FB85      		ldd r31,Y+11
 1405 0036 CF01      		movw r24,r30
 1406 0038 0196      		adiw r24,1
 1407 003a 9B87      		std Y+11,r25
 1408 003c 8A87      		std Y+10,r24
 1409 003e F082      		st Z,r15
 556:../../../os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 1410               		.loc 1 556 0
 1411 0040 2A85      		ldd r18,Y+10
 1412 0042 3B85      		ldd r19,Y+11
 1413 0044 8885      		ldd r24,Y+8
 1414 0046 9985      		ldd r25,Y+9
 1415 0048 2817      		cp r18,r24
 1416 004a 3907      		cpc r19,r25
 1417 004c 00F0      		brlo .L78
 557:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 1418               		.loc 1 557 0
 1419 004e 8E81      		ldd r24,Y+6
 1420 0050 9F81      		ldd r25,Y+7
 1421 0052 9B87      		std Y+11,r25
 1422 0054 8A87      		std Y+10,r24
 1423               	.L78:
 558:../../../os/hal/src/hal_queues.c ****   }
 559:../../../os/hal/src/hal_queues.c **** 
 560:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character available.*/
 561:../../../os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 1424               		.loc 1 561 0
 1425 0056 EE85      		ldd r30,Y+14
 1426 0058 FF85      		ldd r31,Y+15
 1427 005a 3097      		sbiw r30,0
 1428 005c 01F0      		breq .L79
 562:../../../os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 1429               		.loc 1 562 0
 1430 005e CE01      		movw r24,r28
 1431 0060 0995      		icall
 1432               	.LVL109:
 1433               	.L79:
 1434               	.LBB200:
 1435               	.LBB201:
 1436               	.LBB202:
 1437               	.LBB203:
 1438               	.LBB204:
 1439               		.loc 4 447 0
 1440               	/* #APP */
 1441               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1442 0062 7894      		sei
 1443               	 ;  0 "" 2
 1444               	/* #NOAPP */
 1445               	.LBE204:
 1446               	.LBE203:
 1447               	.LBE202:
 1448               	.LBE201:
 1449               	.LBE200:
 563:../../../os/hal/src/hal_queues.c ****   }
 564:../../../os/hal/src/hal_queues.c **** 
 565:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 566:../../../os/hal/src/hal_queues.c **** 
 567:../../../os/hal/src/hal_queues.c ****   return MSG_OK;
 1450               		.loc 1 567 0
 1451 0064 80E0      		ldi r24,0
 1452 0066 90E0      		ldi r25,0
 1453               	/* epilogue start */
 568:../../../os/hal/src/hal_queues.c **** }
 1454               		.loc 1 568 0
 1455 0068 DF91      		pop r29
 1456 006a CF91      		pop r28
 1457               	.LVL110:
 1458 006c 1F91      		pop r17
 1459 006e 0F91      		pop r16
 1460               	.LVL111:
 1461 0070 FF90      		pop r15
 1462               	.LVL112:
 1463 0072 0895      		ret
 1464               	.LVL113:
 1465               	.L84:
 1466               	.LBB205:
 1467               	.LBB195:
 1468               	.LBB196:
 1469               	.LBB197:
 1470               	.LBB198:
 1471               	.LBB199:
 1472               		.loc 4 447 0
 1473               	/* #APP */
 1474               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1475 0074 7894      		sei
 1476               	 ;  0 "" 2
 1477               	/* epilogue start */
 1478               	/* #NOAPP */
 1479               	.LBE199:
 1480               	.LBE198:
 1481               	.LBE197:
 1482               	.LBE196:
 1483               	.LBE195:
 1484               	.LBE205:
 1485               		.loc 1 568 0
 1486 0076 DF91      		pop r29
 1487 0078 CF91      		pop r28
 1488               	.LVL114:
 1489 007a 1F91      		pop r17
 1490 007c 0F91      		pop r16
 1491               	.LVL115:
 1492 007e FF90      		pop r15
 1493               	.LVL116:
 1494 0080 0895      		ret
 1495               		.cfi_endproc
 1496               	.LFE180:
 1498               		.section	.text.oqGetI,"ax",@progbits
 1499               	.global	oqGetI
 1501               	oqGetI:
 1502               	.LFB181:
 569:../../../os/hal/src/hal_queues.c **** 
 570:../../../os/hal/src/hal_queues.c **** /**
 571:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 572:../../../os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue. The
 573:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 574:../../../os/hal/src/hal_queues.c ****  *
 575:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 576:../../../os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 577:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 578:../../../os/hal/src/hal_queues.c ****  *
 579:../../../os/hal/src/hal_queues.c ****  * @iclass
 580:../../../os/hal/src/hal_queues.c ****  */
 581:../../../os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 1503               		.loc 1 581 0
 1504               		.cfi_startproc
 1505               	.LVL117:
 1506 0000 CF93      		push r28
 1507               	.LCFI54:
 1508               		.cfi_def_cfa_offset 3
 1509               		.cfi_offset 28, -2
 1510               	/* prologue: function */
 1511               	/* frame size = 0 */
 1512               	/* stack size = 1 */
 1513               	.L__stack_usage = 1
 1514 0002 FC01      		movw r30,r24
 582:../../../os/hal/src/hal_queues.c **** 
 583:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 584:../../../os/hal/src/hal_queues.c **** 
 585:../../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 586:../../../os/hal/src/hal_queues.c ****   if (!oqIsEmptyI(oqp)) {
 1515               		.loc 1 586 0
 1516 0004 A485      		ldd r26,Z+12
 1517 0006 B585      		ldd r27,Z+13
 1518 0008 8285      		ldd r24,Z+10
 1519 000a 9385      		ldd r25,Z+11
 1520               	.LVL118:
 1521 000c 8A17      		cp r24,r26
 1522 000e 9B07      		cpc r25,r27
 1523 0010 01F0      		breq .L92
 1524               	.L86:
 1525               	.LBB206:
 587:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 588:../../../os/hal/src/hal_queues.c **** 
 589:../../../os/hal/src/hal_queues.c ****     oqp->q_counter++;
 1526               		.loc 1 589 0
 1527 0012 8481      		ldd r24,Z+4
 1528 0014 9581      		ldd r25,Z+5
 1529 0016 0196      		adiw r24,1
 1530 0018 9583      		std Z+5,r25
 1531 001a 8483      		std Z+4,r24
 590:../../../os/hal/src/hal_queues.c ****     b = *oqp->q_rdptr++;
 1532               		.loc 1 590 0
 1533 001c CD01      		movw r24,r26
 1534 001e 0196      		adiw r24,1
 1535 0020 9587      		std Z+13,r25
 1536 0022 8487      		std Z+12,r24
 1537 0024 CC91      		ld r28,X
 1538               	.LVL119:
 591:../../../os/hal/src/hal_queues.c ****     if (oqp->q_rdptr >= oqp->q_top) {
 1539               		.loc 1 591 0
 1540 0026 2085      		ldd r18,Z+8
 1541 0028 3185      		ldd r19,Z+9
 1542 002a 8217      		cp r24,r18
 1543 002c 9307      		cpc r25,r19
 1544 002e 00F4      		brsh .L88
 1545               	.L89:
 1546 0030 CF01      		movw r24,r30
 1547               	.LVL120:
 1548               	.LBB207:
 1549               	.LBB208:
 844:../../../os/hal/osal/rt/osal.h **** }
 1550               		.loc 3 844 0
 1551 0032 60E0      		ldi r22,0
 1552 0034 70E0      		ldi r23,0
 1553 0036 0E94 0000 		call chThdDequeueNextI
 1554               	.LVL121:
 1555               	.LBE208:
 1556               	.LBE207:
 592:../../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 593:../../../os/hal/src/hal_queues.c ****     }
 594:../../../os/hal/src/hal_queues.c **** 
 595:../../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 596:../../../os/hal/src/hal_queues.c **** 
 597:../../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 1557               		.loc 1 597 0
 1558 003a 8C2F      		mov r24,r28
 1559 003c 90E0      		ldi r25,0
 1560               	.LVL122:
 1561               	.L91:
 1562               	/* epilogue start */
 1563               	.LBE206:
 598:../../../os/hal/src/hal_queues.c ****   }
 599:../../../os/hal/src/hal_queues.c **** 
 600:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 601:../../../os/hal/src/hal_queues.c **** }
 1564               		.loc 1 601 0
 1565 003e CF91      		pop r28
 1566 0040 0895      		ret
 1567               	.LVL123:
 1568               	.L88:
 1569               	.LBB209:
 592:../../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 1570               		.loc 1 592 0
 1571 0042 8681      		ldd r24,Z+6
 1572 0044 9781      		ldd r25,Z+7
 1573 0046 9587      		std Z+13,r25
 1574 0048 8487      		std Z+12,r24
 1575 004a 00C0      		rjmp .L89
 1576               	.LVL124:
 1577               	.L92:
 1578               	.LBE209:
 586:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 1579               		.loc 1 586 0 discriminator 1
 1580 004c 8481      		ldd r24,Z+4
 1581 004e 9581      		ldd r25,Z+5
 1582 0050 892B      		or r24,r25
 1583 0052 01F0      		breq .L86
 600:../../../os/hal/src/hal_queues.c **** }
 1584               		.loc 1 600 0
 1585 0054 8FEF      		ldi r24,lo8(-1)
 1586 0056 9FEF      		ldi r25,lo8(-1)
 1587 0058 00C0      		rjmp .L91
 1588               		.cfi_endproc
 1589               	.LFE181:
 1591               		.section	.text.oqWriteI,"ax",@progbits
 1592               	.global	oqWriteI
 1594               	oqWriteI:
 1595               	.LFB182:
 602:../../../os/hal/src/hal_queues.c **** 
 603:../../../os/hal/src/hal_queues.c **** 
 604:../../../os/hal/src/hal_queues.c **** /**
 605:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 606:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 607:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 608:../../../os/hal/src/hal_queues.c ****  *
 609:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 610:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 611:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 612:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 613:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 614:../../../os/hal/src/hal_queues.c ****  *
 615:../../../os/hal/src/hal_queues.c ****  * @iclass
 616:../../../os/hal/src/hal_queues.c ****  */
 617:../../../os/hal/src/hal_queues.c **** size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 1596               		.loc 1 617 0
 1597               		.cfi_startproc
 1598               	.LVL125:
 1599 0000 EF92      		push r14
 1600               	.LCFI55:
 1601               		.cfi_def_cfa_offset 3
 1602               		.cfi_offset 14, -2
 1603 0002 FF92      		push r15
 1604               	.LCFI56:
 1605               		.cfi_def_cfa_offset 4
 1606               		.cfi_offset 15, -3
 1607 0004 0F93      		push r16
 1608               	.LCFI57:
 1609               		.cfi_def_cfa_offset 5
 1610               		.cfi_offset 16, -4
 1611 0006 1F93      		push r17
 1612               	.LCFI58:
 1613               		.cfi_def_cfa_offset 6
 1614               		.cfi_offset 17, -5
 1615 0008 CF93      		push r28
 1616               	.LCFI59:
 1617               		.cfi_def_cfa_offset 7
 1618               		.cfi_offset 28, -6
 1619 000a DF93      		push r29
 1620               	.LCFI60:
 1621               		.cfi_def_cfa_offset 8
 1622               		.cfi_offset 29, -7
 1623               	/* prologue: function */
 1624               	/* frame size = 0 */
 1625               	/* stack size = 6 */
 1626               	.L__stack_usage = 6
 1627 000c EC01      		movw r28,r24
 618:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1628               		.loc 1 618 0
 1629 000e EE84      		ldd r14,Y+14
 1630 0010 FF84      		ldd r15,Y+15
 1631               	.LVL126:
 619:../../../os/hal/src/hal_queues.c ****   size_t wr;
 620:../../../os/hal/src/hal_queues.c **** 
 621:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 622:../../../os/hal/src/hal_queues.c **** 
 623:../../../os/hal/src/hal_queues.c ****   wr = oq_write(oqp, bp, n);
 1632               		.loc 1 623 0
 1633 0012 0E94 0000 		call oq_write
 1634               	.LVL127:
 1635 0016 8C01      		movw r16,r24
 1636               	.LVL128:
 624:../../../os/hal/src/hal_queues.c **** 
 625:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 626:../../../os/hal/src/hal_queues.c ****      available.*/
 627:../../../os/hal/src/hal_queues.c ****   if ((wr > (size_t)0) && (nfy != NULL)) {
 1637               		.loc 1 627 0
 1638 0018 892B      		or r24,r25
 1639 001a 01F0      		breq .L94
 1640               		.loc 1 627 0 is_stmt 0 discriminator 1
 1641 001c E114      		cp r14,__zero_reg__
 1642 001e F104      		cpc r15,__zero_reg__
 1643 0020 01F0      		breq .L94
 628:../../../os/hal/src/hal_queues.c ****     nfy(oqp);
 1644               		.loc 1 628 0 is_stmt 1
 1645 0022 CE01      		movw r24,r28
 1646 0024 F701      		movw r30,r14
 1647 0026 0995      		icall
 1648               	.LVL129:
 1649               	.L94:
 629:../../../os/hal/src/hal_queues.c ****   }
 630:../../../os/hal/src/hal_queues.c **** 
 631:../../../os/hal/src/hal_queues.c ****   return wr;
 632:../../../os/hal/src/hal_queues.c **** }
 1650               		.loc 1 632 0
 1651 0028 C801      		movw r24,r16
 1652               	/* epilogue start */
 1653 002a DF91      		pop r29
 1654 002c CF91      		pop r28
 1655               	.LVL130:
 1656 002e 1F91      		pop r17
 1657 0030 0F91      		pop r16
 1658               	.LVL131:
 1659 0032 FF90      		pop r15
 1660 0034 EF90      		pop r14
 1661               	.LVL132:
 1662 0036 0895      		ret
 1663               		.cfi_endproc
 1664               	.LFE182:
 1666               		.section	.text.oqWriteTimeout,"ax",@progbits
 1667               	.global	oqWriteTimeout
 1669               	oqWriteTimeout:
 1670               	.LFB183:
 633:../../../os/hal/src/hal_queues.c **** 
 634:../../../os/hal/src/hal_queues.c **** /**
 635:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 636:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 637:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 638:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 639:../../../os/hal/src/hal_queues.c ****  *          been reset.
 640:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 641:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 642:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting each character into the
 643:../../../os/hal/src/hal_queues.c ****  *          queue.
 644:../../../os/hal/src/hal_queues.c ****  *
 645:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 646:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 647:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 648:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 649:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 650:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 651:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 652:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 653:../../../os/hal/src/hal_queues.c ****  *                      .
 654:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 655:../../../os/hal/src/hal_queues.c ****  *
 656:../../../os/hal/src/hal_queues.c ****  * @api
 657:../../../os/hal/src/hal_queues.c ****  */
 658:../../../os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 659:../../../os/hal/src/hal_queues.c ****                       size_t n, sysinterval_t timeout) {
 1671               		.loc 1 659 0
 1672               		.cfi_startproc
 1673               	.LVL133:
 1674 0000 6F92      		push r6
 1675               	.LCFI61:
 1676               		.cfi_def_cfa_offset 3
 1677               		.cfi_offset 6, -2
 1678 0002 7F92      		push r7
 1679               	.LCFI62:
 1680               		.cfi_def_cfa_offset 4
 1681               		.cfi_offset 7, -3
 1682 0004 8F92      		push r8
 1683               	.LCFI63:
 1684               		.cfi_def_cfa_offset 5
 1685               		.cfi_offset 8, -4
 1686 0006 9F92      		push r9
 1687               	.LCFI64:
 1688               		.cfi_def_cfa_offset 6
 1689               		.cfi_offset 9, -5
 1690 0008 AF92      		push r10
 1691               	.LCFI65:
 1692               		.cfi_def_cfa_offset 7
 1693               		.cfi_offset 10, -6
 1694 000a BF92      		push r11
 1695               	.LCFI66:
 1696               		.cfi_def_cfa_offset 8
 1697               		.cfi_offset 11, -7
 1698 000c CF92      		push r12
 1699               	.LCFI67:
 1700               		.cfi_def_cfa_offset 9
 1701               		.cfi_offset 12, -8
 1702 000e DF92      		push r13
 1703               	.LCFI68:
 1704               		.cfi_def_cfa_offset 10
 1705               		.cfi_offset 13, -9
 1706 0010 EF92      		push r14
 1707               	.LCFI69:
 1708               		.cfi_def_cfa_offset 11
 1709               		.cfi_offset 14, -10
 1710 0012 FF92      		push r15
 1711               	.LCFI70:
 1712               		.cfi_def_cfa_offset 12
 1713               		.cfi_offset 15, -11
 1714 0014 0F93      		push r16
 1715               	.LCFI71:
 1716               		.cfi_def_cfa_offset 13
 1717               		.cfi_offset 16, -12
 1718 0016 1F93      		push r17
 1719               	.LCFI72:
 1720               		.cfi_def_cfa_offset 14
 1721               		.cfi_offset 17, -13
 1722 0018 CF93      		push r28
 1723               	.LCFI73:
 1724               		.cfi_def_cfa_offset 15
 1725               		.cfi_offset 28, -14
 1726 001a DF93      		push r29
 1727               	.LCFI74:
 1728               		.cfi_def_cfa_offset 16
 1729               		.cfi_offset 29, -15
 1730               	/* prologue: function */
 1731               	/* frame size = 0 */
 1732               	/* stack size = 14 */
 1733               	.L__stack_usage = 14
 1734 001c 6C01      		movw r12,r24
 1735 001e 8B01      		movw r16,r22
 1736 0020 7A01      		movw r14,r20
 1737 0022 4901      		movw r8,r18
 660:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1738               		.loc 1 660 0
 1739 0024 FC01      		movw r30,r24
 1740 0026 A684      		ldd r10,Z+14
 1741 0028 B784      		ldd r11,Z+15
 1742               	.LVL134:
 1743               	.LBB210:
 1744               	.LBB211:
 1745               	.LBB212:
 1746               	.LBB213:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1747               		.loc 4 437 0
 1748               	/* #APP */
 1749               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1750 002a F894      		cli
 1751               	 ;  0 "" 2
 1752               	/* #NOAPP */
 1753               	.LBE213:
 1754               	.LBE212:
 1755               	.LBE211:
 1756               	.LBE210:
 661:../../../os/hal/src/hal_queues.c ****   size_t wr = 0;
 662:../../../os/hal/src/hal_queues.c **** 
 663:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 664:../../../os/hal/src/hal_queues.c **** 
 665:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 666:../../../os/hal/src/hal_queues.c **** 
 667:../../../os/hal/src/hal_queues.c ****   while (wr < n) {
 1757               		.loc 1 667 0
 1758 002c C0E0      		ldi r28,0
 1759 002e D0E0      		ldi r29,0
 1760 0030 452B      		or r20,r21
 1761 0032 01F4      		brne .L106
 1762 0034 00C0      		rjmp .L102
 1763               	.LVL135:
 1764               	.L103:
 1765               	.LBB214:
 668:../../../os/hal/src/hal_queues.c ****     size_t done;
 669:../../../os/hal/src/hal_queues.c **** 
 670:../../../os/hal/src/hal_queues.c ****     done = oq_write(oqp, bp, n);
 671:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 672:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 673:../../../os/hal/src/hal_queues.c **** 
 674:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 675:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 676:../../../os/hal/src/hal_queues.c ****         break;
 677:../../../os/hal/src/hal_queues.c ****       }
 678:../../../os/hal/src/hal_queues.c ****     }
 679:../../../os/hal/src/hal_queues.c ****     else {
 680:../../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one character
 681:../../../os/hal/src/hal_queues.c ****          available.*/
 682:../../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 1766               		.loc 1 682 0
 1767 0036 A114      		cp r10,__zero_reg__
 1768 0038 B104      		cpc r11,__zero_reg__
 1769 003a 01F0      		breq .L105
 683:../../../os/hal/src/hal_queues.c ****         nfy(oqp);
 1770               		.loc 1 683 0
 1771 003c C601      		movw r24,r12
 1772 003e F501      		movw r30,r10
 1773 0040 0995      		icall
 1774               	.LVL136:
 1775               	.L105:
 1776               	.LBB215:
 1777               	.LBB216:
 1778               	.LBB217:
 1779               	.LBB218:
 1780               	.LBB219:
 1781               		.loc 4 447 0
 1782               	/* #APP */
 1783               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1784 0042 7894      		sei
 1785               	 ;  0 "" 2
 1786               	/* #NOAPP */
 1787               	.LBE219:
 1788               	.LBE218:
 1789               	.LBE217:
 1790               	.LBE216:
 1791               	.LBE215:
 684:../../../os/hal/src/hal_queues.c ****       }
 685:../../../os/hal/src/hal_queues.c **** 
 686:../../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 687:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 688:../../../os/hal/src/hal_queues.c **** 
 689:../../../os/hal/src/hal_queues.c ****       wr += done;
 1792               		.loc 1 689 0
 1793 0044 C60D      		add r28,r6
 1794 0046 D71D      		adc r29,r7
 1795               	.LVL137:
 690:../../../os/hal/src/hal_queues.c ****       bp += done;
 1796               		.loc 1 690 0
 1797 0048 060D      		add r16,r6
 1798 004a 171D      		adc r17,r7
 1799               	.LVL138:
 1800               	.LBB220:
 1801               	.LBB221:
 1802               	.LBB222:
 1803               	.LBB223:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1804               		.loc 4 437 0
 1805               	/* #APP */
 1806               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1807 004c F894      		cli
 1808               	 ;  0 "" 2
 1809               	/* #NOAPP */
 1810               	.L104:
 1811               	.LBE223:
 1812               	.LBE222:
 1813               	.LBE221:
 1814               	.LBE220:
 1815               	.LBE214:
 667:../../../os/hal/src/hal_queues.c ****     size_t done;
 1816               		.loc 1 667 0
 1817 004e CE15      		cp r28,r14
 1818 0050 DF05      		cpc r29,r15
 1819 0052 00F4      		brsh .L102
 1820               	.LVL139:
 1821               	.L106:
 1822               	.LBB227:
 670:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1823               		.loc 1 670 0
 1824 0054 A701      		movw r20,r14
 1825 0056 B801      		movw r22,r16
 1826 0058 C601      		movw r24,r12
 1827 005a 0E94 0000 		call oq_write
 1828               	.LVL140:
 1829 005e 3C01      		movw r6,r24
 1830               	.LVL141:
 671:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1831               		.loc 1 671 0
 1832 0060 892B      		or r24,r25
 1833 0062 01F4      		brne .L103
 1834               	.LVL142:
 1835               	.LBB224:
 1836               	.LBB225:
 1837               	.LBB226:
 831:../../../os/hal/osal/rt/osal.h **** }
 1838               		.loc 3 831 0
 1839 0064 B401      		movw r22,r8
 1840 0066 C601      		movw r24,r12
 1841 0068 0E94 0000 		call chThdEnqueueTimeoutS
 1842               	.LVL143:
 1843               	.LBE226:
 1844               	.LBE225:
 675:../../../os/hal/src/hal_queues.c ****         break;
 1845               		.loc 1 675 0
 1846 006c 892B      		or r24,r25
 1847 006e 01F0      		breq .L104
 1848               	.LVL144:
 1849               	.L102:
 1850               	.LBE224:
 1851               	.LBE227:
 1852               	.LBB228:
 1853               	.LBB229:
 1854               	.LBB230:
 1855               	.LBB231:
 1856               	.LBB232:
 1857               		.loc 4 447 0
 1858               	/* #APP */
 1859               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1860 0070 7894      		sei
 1861               	 ;  0 "" 2
 1862               	/* #NOAPP */
 1863               	.LBE232:
 1864               	.LBE231:
 1865               	.LBE230:
 1866               	.LBE229:
 1867               	.LBE228:
 691:../../../os/hal/src/hal_queues.c **** 
 692:../../../os/hal/src/hal_queues.c ****       osalSysLock();
 693:../../../os/hal/src/hal_queues.c ****     }
 694:../../../os/hal/src/hal_queues.c ****   }
 695:../../../os/hal/src/hal_queues.c **** 
 696:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 697:../../../os/hal/src/hal_queues.c ****   return wr;
 698:../../../os/hal/src/hal_queues.c **** }
 1868               		.loc 1 698 0
 1869 0072 CE01      		movw r24,r28
 1870               	/* epilogue start */
 1871 0074 DF91      		pop r29
 1872 0076 CF91      		pop r28
 1873 0078 1F91      		pop r17
 1874 007a 0F91      		pop r16
 1875               	.LVL145:
 1876 007c FF90      		pop r15
 1877 007e EF90      		pop r14
 1878               	.LVL146:
 1879 0080 DF90      		pop r13
 1880 0082 CF90      		pop r12
 1881               	.LVL147:
 1882 0084 BF90      		pop r11
 1883 0086 AF90      		pop r10
 1884               	.LVL148:
 1885 0088 9F90      		pop r9
 1886 008a 8F90      		pop r8
 1887               	.LVL149:
 1888 008c 7F90      		pop r7
 1889 008e 6F90      		pop r6
 1890 0090 0895      		ret
 1891               		.cfi_endproc
 1892               	.LFE183:
 1894               		.text
 1895               	.Letext0:
 1896               		.file 5 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 1897               		.file 6 "/usr/lib/avr/include/stdint.h"
 1898               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1899               		.file 8 "../../../os/rt/include/chsystypes.h"
 1900               		.file 9 "../../../os/rt/include/chtime.h"
 1901               		.file 10 "../../../os/rt/include/chsem.h"
 1902               		.file 11 "../../../os/rt/include/chmtx.h"
 1903               		.file 12 "../../../os/hal/include/hal_queues.h"
 1904               		.file 13 "../../../os/rt/include/chsys.h"
 1905               		.file 14 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_queues.c
     /tmp/cck58Qnf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cck58Qnf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cck58Qnf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cck58Qnf.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cck58Qnf.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cck58Qnf.s:12     .text.iq_read:0000000000000000 iq_read
     /tmp/cck58Qnf.s:181    .text.oq_write:0000000000000000 oq_write
     /tmp/cck58Qnf.s:351    .text.iqObjectInit:0000000000000000 iqObjectInit
     /tmp/cck58Qnf.s:421    .text.iqResetI:0000000000000000 iqResetI
     /tmp/cck58Qnf.s:459    .text.iqPutI:0000000000000000 iqPutI
     /tmp/cck58Qnf.s:538    .text.iqGetI:0000000000000000 iqGetI
     /tmp/cck58Qnf.s:641    .text.iqGetTimeout:0000000000000000 iqGetTimeout
     /tmp/cck58Qnf.s:808    .text.iqReadI:0000000000000000 iqReadI
     /tmp/cck58Qnf.s:883    .text.iqReadTimeout:0000000000000000 iqReadTimeout
     /tmp/cck58Qnf.s:1111   .text.oqObjectInit:0000000000000000 oqObjectInit
     /tmp/cck58Qnf.s:1180   .text.oqResetI:0000000000000000 oqResetI
     /tmp/cck58Qnf.s:1223   .text.oqPutI:0000000000000000 oqPutI
     /tmp/cck58Qnf.s:1326   .text.oqPutTimeout:0000000000000000 oqPutTimeout
     /tmp/cck58Qnf.s:1501   .text.oqGetI:0000000000000000 oqGetI
     /tmp/cck58Qnf.s:1594   .text.oqWriteI:0000000000000000 oqWriteI
     /tmp/cck58Qnf.s:1669   .text.oqWriteTimeout:0000000000000000 oqWriteTimeout

UNDEFINED SYMBOLS
memcpy
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
