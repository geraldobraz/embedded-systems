   1               		.file	"chvt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._vt_init,"ax",@progbits
  11               	.global	_vt_init
  13               	_vt_init:
  14               	.LFB141:
  15               		.file 1 "../../../os/rt/src/chvt.c"
   1:../../../os/rt/src/chvt.c **** /*
   2:../../../os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chvt.c **** 
   4:../../../os/rt/src/chvt.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chvt.c **** 
   6:../../../os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chvt.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chvt.c ****     (at your option) any later version.
  10:../../../os/rt/src/chvt.c **** 
  11:../../../os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chvt.c **** 
  16:../../../os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chvt.c **** */
  19:../../../os/rt/src/chvt.c **** 
  20:../../../os/rt/src/chvt.c **** /**
  21:../../../os/rt/src/chvt.c ****  * @file    chvt.c
  22:../../../os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:../../../os/rt/src/chvt.c ****  *
  24:../../../os/rt/src/chvt.c ****  * @addtogroup time
  25:../../../os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:../../../os/rt/src/chvt.c ****  * @{
  27:../../../os/rt/src/chvt.c ****  */
  28:../../../os/rt/src/chvt.c **** 
  29:../../../os/rt/src/chvt.c **** #include "ch.h"
  30:../../../os/rt/src/chvt.c **** 
  31:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  32:../../../os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  33:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  34:../../../os/rt/src/chvt.c **** 
  35:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  36:../../../os/rt/src/chvt.c **** /* Module exported variables.                                                */
  37:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  38:../../../os/rt/src/chvt.c **** 
  39:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  40:../../../os/rt/src/chvt.c **** /* Module local types.                                                       */
  41:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  42:../../../os/rt/src/chvt.c **** 
  43:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  44:../../../os/rt/src/chvt.c **** /* Module local variables.                                                   */
  45:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  46:../../../os/rt/src/chvt.c **** 
  47:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  48:../../../os/rt/src/chvt.c **** /* Module local functions.                                                   */
  49:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  50:../../../os/rt/src/chvt.c **** 
  51:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  52:../../../os/rt/src/chvt.c **** /* Module exported functions.                                                */
  53:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  54:../../../os/rt/src/chvt.c **** 
  55:../../../os/rt/src/chvt.c **** /**
  56:../../../os/rt/src/chvt.c ****  * @brief   Virtual Timers initialization.
  57:../../../os/rt/src/chvt.c ****  * @note    Internal use only.
  58:../../../os/rt/src/chvt.c ****  *
  59:../../../os/rt/src/chvt.c ****  * @notapi
  60:../../../os/rt/src/chvt.c ****  */
  61:../../../os/rt/src/chvt.c **** void _vt_init(void) {
  16               		.loc 1 61 21 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  62:../../../os/rt/src/chvt.c **** 
  63:../../../os/rt/src/chvt.c ****   ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  22               		.loc 1 63 3 view .LVU1
  23               		.loc 1 63 18 is_stmt 0 view .LVU2
  24 0000 E0E0      		ldi r30,lo8(ch)
  25 0002 F0E0      		ldi r31,hi8(ch)
  26 0004 80E0      		ldi r24,lo8(ch+13)
  27 0006 90E0      		ldi r25,hi8(ch+13)
  28 0008 9687      		std Z+14,r25
  29 000a 8587      		std Z+13,r24
  64:../../../os/rt/src/chvt.c ****   ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  30               		.loc 1 64 3 is_stmt 1 view .LVU3
  31               		.loc 1 64 18 is_stmt 0 view .LVU4
  32 000c 908B      		std Z+16,r25
  33 000e 8787      		std Z+15,r24
  65:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (sysinterval_t)-1;
  34               		.loc 1 65 3 is_stmt 1 view .LVU5
  35               		.loc 1 65 19 is_stmt 0 view .LVU6
  36 0010 8FEF      		ldi r24,lo8(-1)
  37 0012 9FEF      		ldi r25,lo8(-1)
  38 0014 928B      		std Z+18,r25
  39 0016 818B      		std Z+17,r24
  66:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
  67:../../../os/rt/src/chvt.c ****   ch.vtlist.systime = (systime_t)0;
  68:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
  69:../../../os/rt/src/chvt.c ****   ch.vtlist.lasttime = (systime_t)0;
  40               		.loc 1 69 3 is_stmt 1 view .LVU7
  41               		.loc 1 69 22 is_stmt 0 view .LVU8
  42 0018 148A      		std Z+20,__zero_reg__
  43 001a 138A      		std Z+19,__zero_reg__
  44               	/* epilogue start */
  70:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
  71:../../../os/rt/src/chvt.c **** }
  45               		.loc 1 71 1 view .LVU9
  46 001c 0895      		ret
  47               		.cfi_endproc
  48               	.LFE141:
  50               		.section	.text.chVTDoSetI,"ax",@progbits
  51               	.global	chVTDoSetI
  53               	chVTDoSetI:
  54               	.LVL0:
  55               	.LFB142:
  72:../../../os/rt/src/chvt.c **** 
  73:../../../os/rt/src/chvt.c **** /**
  74:../../../os/rt/src/chvt.c ****  * @brief   Enables a virtual timer.
  75:../../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
  76:../../../os/rt/src/chvt.c ****  *          specified as parameter.
  77:../../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
  78:../../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
  79:../../../os/rt/src/chvt.c ****  *
  80:../../../os/rt/src/chvt.c ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  81:../../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
  82:../../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
  83:../../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
  84:../../../os/rt/src/chvt.c ****  *                        normal time specification.
  85:../../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
  86:../../../os/rt/src/chvt.c ****  *                      .
  87:../../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
  88:../../../os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
  89:../../../os/rt/src/chvt.c ****  *                      be disposed or reused.
  90:../../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
  91:../../../os/rt/src/chvt.c ****  *                      function
  92:../../../os/rt/src/chvt.c ****  *
  93:../../../os/rt/src/chvt.c ****  * @iclass
  94:../../../os/rt/src/chvt.c ****  */
  95:../../../os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  96:../../../os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
  56               		.loc 1 96 45 is_stmt 1 view -0
  57               		.cfi_startproc
  58               		.loc 1 96 45 is_stmt 0 view .LVU11
  59 0000 EF92      		push r14
  60               	.LCFI0:
  61               		.cfi_def_cfa_offset 3
  62               		.cfi_offset 14, -2
  63 0002 FF92      		push r15
  64               	.LCFI1:
  65               		.cfi_def_cfa_offset 4
  66               		.cfi_offset 15, -3
  67 0004 0F93      		push r16
  68               	.LCFI2:
  69               		.cfi_def_cfa_offset 5
  70               		.cfi_offset 16, -4
  71 0006 1F93      		push r17
  72               	.LCFI3:
  73               		.cfi_def_cfa_offset 6
  74               		.cfi_offset 17, -5
  75 0008 CF93      		push r28
  76               	.LCFI4:
  77               		.cfi_def_cfa_offset 7
  78               		.cfi_offset 28, -6
  79 000a DF93      		push r29
  80               	.LCFI5:
  81               		.cfi_def_cfa_offset 8
  82               		.cfi_offset 29, -7
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 6 */
  86               	.L__stack_usage = 6
  87 000c 7C01      		movw r14,r24
  97:../../../os/rt/src/chvt.c ****   virtual_timer_t *p;
  88               		.loc 1 97 3 is_stmt 1 view .LVU12
  98:../../../os/rt/src/chvt.c ****   sysinterval_t delta;
  89               		.loc 1 98 3 view .LVU13
  99:../../../os/rt/src/chvt.c **** 
 100:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
  90               		.loc 1 100 21 view .LVU14
 101:../../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
  91               		.loc 1 101 3 view .LVU15
  92               		.loc 1 101 3 view .LVU16
 102:../../../os/rt/src/chvt.c **** 
 103:../../../os/rt/src/chvt.c ****   vtp->par = par;
  93               		.loc 1 103 3 view .LVU17
  94               		.loc 1 103 12 is_stmt 0 view .LVU18
  95 000e DC01      		movw r26,r24
  96 0010 1996      		adiw r26,8+1
  97 0012 3C93      		st X,r19
  98 0014 2E93      		st -X,r18
  99 0016 1897      		sbiw r26,8
 104:../../../os/rt/src/chvt.c ****   vtp->func = vtfunc;
 100               		.loc 1 104 3 is_stmt 1 view .LVU19
 101               		.loc 1 104 13 is_stmt 0 view .LVU20
 102 0018 1796      		adiw r26,6+1
 103 001a 5C93      		st X,r21
 104 001c 4E93      		st -X,r20
 105 001e 1697      		sbiw r26,6
 106               	.LBB40:
 105:../../../os/rt/src/chvt.c **** 
 106:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 107:../../../os/rt/src/chvt.c ****   {
 108:../../../os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
 107               		.loc 1 108 5 is_stmt 1 view .LVU21
 108               	.LBB41:
 109               	.LBI41:
 110               		.file 2 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 111               		.loc 2 115 25 view .LVU22
 112               	.LBE41:
 113               	.LBE40:
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 119:../../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 120:../../../os/rt/include/chvt.h ****   return port_timer_get_time();
 114               		.loc 2 120 3 view .LVU23
 115               	.LBB61:
 116               	.LBB46:
 117               	.LBB42:
 118               	.LBI42:
 119               		.file 3 "../../../os/common/ports/AVR/chcore_timer.h"
   1:../../../os/common/ports/AVR/chcore_timer.h **** /*
   2:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore_timer.h **** 
   4:../../../os/common/ports/AVR/chcore_timer.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore_timer.h **** 
   6:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore_timer.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore_timer.h **** 
  11:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore_timer.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore_timer.h **** 
  16:../../../os/common/ports/AVR/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore_timer.h **** */
  19:../../../os/common/ports/AVR/chcore_timer.h **** 
  20:../../../os/common/ports/AVR/chcore_timer.h **** /**
  21:../../../os/common/ports/AVR/chcore_timer.h ****  * @file    AVR/chcore_timer.h
  22:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   System timer header file.
  23:../../../os/common/ports/AVR/chcore_timer.h ****  *
  24:../../../os/common/ports/AVR/chcore_timer.h ****  * @addtogroup AVR_TIMER
  25:../../../os/common/ports/AVR/chcore_timer.h ****  * @{
  26:../../../os/common/ports/AVR/chcore_timer.h ****  */
  27:../../../os/common/ports/AVR/chcore_timer.h **** 
  28:../../../os/common/ports/AVR/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:../../../os/common/ports/AVR/chcore_timer.h **** #define CHCORE_TIMER_H
  30:../../../os/common/ports/AVR/chcore_timer.h **** 
  31:../../../os/common/ports/AVR/chcore_timer.h **** /* This is the only header in the HAL designed to be include-able alone.*/
  32:../../../os/common/ports/AVR/chcore_timer.h **** #include "hal_st.h"
  33:../../../os/common/ports/AVR/chcore_timer.h **** 
  34:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/common/ports/AVR/chcore_timer.h **** /* Module constants.                                                         */
  36:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore_timer.h **** 
  38:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  40:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore_timer.h **** 
  42:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/common/ports/AVR/chcore_timer.h **** /* Derived constants and error checks.                                       */
  44:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/common/ports/AVR/chcore_timer.h **** 
  46:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/common/ports/AVR/chcore_timer.h **** /* Module data structures and types.                                         */
  48:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/common/ports/AVR/chcore_timer.h **** 
  50:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/common/ports/AVR/chcore_timer.h **** /* Module macros.                                                            */
  52:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  53:../../../os/common/ports/AVR/chcore_timer.h **** 
  54:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  55:../../../os/common/ports/AVR/chcore_timer.h **** /* External declarations.                                                    */
  56:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  57:../../../os/common/ports/AVR/chcore_timer.h **** 
  58:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  59:../../../os/common/ports/AVR/chcore_timer.h **** /* Module inline functions.                                                  */
  60:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  61:../../../os/common/ports/AVR/chcore_timer.h **** 
  62:../../../os/common/ports/AVR/chcore_timer.h **** /**
  63:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Starts the alarm.
  64:../../../os/common/ports/AVR/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  65:../../../os/common/ports/AVR/chcore_timer.h ****  *          this call.
  66:../../../os/common/ports/AVR/chcore_timer.h ****  *
  67:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  68:../../../os/common/ports/AVR/chcore_timer.h ****  *
  69:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  70:../../../os/common/ports/AVR/chcore_timer.h ****  */
  71:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  72:../../../os/common/ports/AVR/chcore_timer.h **** 
  73:../../../os/common/ports/AVR/chcore_timer.h ****   stStartAlarm(time);
  74:../../../os/common/ports/AVR/chcore_timer.h **** }
  75:../../../os/common/ports/AVR/chcore_timer.h **** 
  76:../../../os/common/ports/AVR/chcore_timer.h **** /**
  77:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  78:../../../os/common/ports/AVR/chcore_timer.h ****  *
  79:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  80:../../../os/common/ports/AVR/chcore_timer.h ****  */
  81:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  82:../../../os/common/ports/AVR/chcore_timer.h **** 
  83:../../../os/common/ports/AVR/chcore_timer.h ****   stStopAlarm();
  84:../../../os/common/ports/AVR/chcore_timer.h **** }
  85:../../../os/common/ports/AVR/chcore_timer.h **** 
  86:../../../os/common/ports/AVR/chcore_timer.h **** /**
  87:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Sets the alarm time.
  88:../../../os/common/ports/AVR/chcore_timer.h ****  *
  89:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  90:../../../os/common/ports/AVR/chcore_timer.h ****  *
  91:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  92:../../../os/common/ports/AVR/chcore_timer.h ****  */
  93:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
  94:../../../os/common/ports/AVR/chcore_timer.h **** 
  95:../../../os/common/ports/AVR/chcore_timer.h ****   stSetAlarm(time);
  96:../../../os/common/ports/AVR/chcore_timer.h **** }
  97:../../../os/common/ports/AVR/chcore_timer.h **** 
  98:../../../os/common/ports/AVR/chcore_timer.h **** /**
  99:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Returns the system time.
 100:../../../os/common/ports/AVR/chcore_timer.h ****  *
 101:../../../os/common/ports/AVR/chcore_timer.h ****  * @return              The system time.
 102:../../../os/common/ports/AVR/chcore_timer.h ****  *
 103:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
 104:../../../os/common/ports/AVR/chcore_timer.h ****  */
 105:../../../os/common/ports/AVR/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 120               		.loc 3 105 25 view .LVU24
 121               	.LBE42:
 122               	.LBE46:
 123               	.LBE61:
 106:../../../os/common/ports/AVR/chcore_timer.h **** 
 107:../../../os/common/ports/AVR/chcore_timer.h ****   return stGetCounter();
 124               		.loc 3 107 3 view .LVU25
 125               	.LBB62:
 126               	.LBB47:
 127               	.LBB45:
 128               	.LBB43:
 129               	.LBI43:
 130               		.file 4 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   AVR/MEGA ST subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                        */
  34:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                        */
  38:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: for models that have many timers, could add AVR_ST_USE_TIMER.      */
  41:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  42:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  43:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                      */
  44:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  45:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  46:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: error checks for valid timer selected.                             */
  47:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  48:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  49:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                        */
  50:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  51:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  52:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  53:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                           */
  54:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  55:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  56:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  57:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                   */
  58:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  59:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  60:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  61:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** extern "C" {
  62:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  63:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  64:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  65:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** }
  66:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  67:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  68:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  69:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  70:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  71:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #else
  72:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  73:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  74:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  75:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  76:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  77:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                 */
  78:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  79:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  80:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  81:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  82:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  83:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  84:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  85:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @notapi
  86:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 131               		.loc 4 87 25 view .LVU26
 132               	.LBB44:
  88:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  89:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 133               		.loc 4 89 3 view .LVU27
 134               		.loc 4 89 10 is_stmt 0 view .LVU28
 135 0020 8091 8400 		lds r24,132
 136 0024 9091 8500 		lds r25,132+1
 137               	.LVL1:
 138               		.loc 4 89 10 view .LVU29
 139               	.LBE44:
 140               	.LBE43:
 141               	.LBE45:
 142               	.LBE47:
 109:../../../os/rt/src/chvt.c **** 
 110:../../../os/rt/src/chvt.c ****     /* If the requested delay is lower than the minimum safe delta then it
 111:../../../os/rt/src/chvt.c ****        is raised to the minimum safe value.*/
 112:../../../os/rt/src/chvt.c ****     if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 143               		.loc 1 112 5 is_stmt 1 view .LVU30
 144 0028 EB01      		movw r28,r22
 145 002a 6230      		cpi r22,2
 146 002c 7105      		cpc r23,__zero_reg__
 147 002e 00F4      		brsh .L4
 148 0030 C2E0      		ldi r28,lo8(2)
 149 0032 D0E0      		ldi r29,0
 150               	.L4:
 151               	.LVL2:
 113:../../../os/rt/src/chvt.c ****       delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 114:../../../os/rt/src/chvt.c ****     }
 115:../../../os/rt/src/chvt.c **** 
 116:../../../os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 117:../../../os/rt/src/chvt.c ****     if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 152               		.loc 1 117 5 view .LVU31
 153               		.loc 1 117 57 is_stmt 0 view .LVU32
 154 0034 0091 0000 		lds r16,ch+13
 155 0038 1091 0000 		lds r17,ch+13+1
 156               		.loc 1 117 8 view .LVU33
 157 003c B0E0      		ldi r27,hi8(ch+13)
 158 003e 0030      		cpi r16,lo8(ch+13)
 159 0040 1B07      		cpc r17,r27
 160 0042 01F4      		brne .+2
 161 0044 00C0      		rjmp .L12
 118:../../../os/rt/src/chvt.c **** 
 119:../../../os/rt/src/chvt.c ****       /* The delta list is empty, the current time becomes the new
 120:../../../os/rt/src/chvt.c ****          delta list base time, the timer is inserted.*/
 121:../../../os/rt/src/chvt.c ****       ch.vtlist.lasttime = now;
 122:../../../os/rt/src/chvt.c ****       ch.vtlist.next = vtp;
 123:../../../os/rt/src/chvt.c ****       ch.vtlist.prev = vtp;
 124:../../../os/rt/src/chvt.c ****       vtp->next = (virtual_timer_t *)&ch.vtlist;
 125:../../../os/rt/src/chvt.c ****       vtp->prev = (virtual_timer_t *)&ch.vtlist;
 126:../../../os/rt/src/chvt.c ****       vtp->delta = delay;
 127:../../../os/rt/src/chvt.c **** 
 128:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 129:../../../os/rt/src/chvt.c ****       /* The delta could be too large for the physical timer to handle.*/
 130:../../../os/rt/src/chvt.c ****       if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 131:../../../os/rt/src/chvt.c ****         delay = (sysinterval_t)TIME_MAX_SYSTIME;
 132:../../../os/rt/src/chvt.c ****       }
 133:../../../os/rt/src/chvt.c **** #endif
 134:../../../os/rt/src/chvt.c **** 
 135:../../../os/rt/src/chvt.c ****       /* Being the first element in the list the alarm timer is started.*/
 136:../../../os/rt/src/chvt.c ****       port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 137:../../../os/rt/src/chvt.c **** 
 138:../../../os/rt/src/chvt.c ****       return;
 139:../../../os/rt/src/chvt.c ****     }
 140:../../../os/rt/src/chvt.c **** 
 141:../../../os/rt/src/chvt.c ****     /* Pointer to the first element in the delta list, which is non-empty.*/
 142:../../../os/rt/src/chvt.c ****     p = ch.vtlist.next;
 162               		.loc 1 142 5 is_stmt 1 view .LVU34
 163               	.LVL3:
 143:../../../os/rt/src/chvt.c **** 
 144:../../../os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 145:../../../os/rt/src/chvt.c ****        becomes lower than 'now'.*/
 146:../../../os/rt/src/chvt.c ****     delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 164               		.loc 1 146 5 view .LVU35
 165               		.loc 1 146 13 is_stmt 0 view .LVU36
 166 0046 4091 0000 		lds r20,ch+19
 167 004a 5091 0000 		lds r21,ch+19+1
 168               	.LVL4:
 169               	.LBB48:
 170               	.LBI48:
 171               		.file 5 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chtime.h **** 
   4:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chtime.h **** 
   6:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chtime.h ****     (at your option) any later version.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @{
  26:../../../os/rt/include/chtime.h ****  */
  27:../../../os/rt/include/chtime.h **** 
  28:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  29:../../../os/rt/include/chtime.h **** #define CHTIME_H
  30:../../../os/rt/include/chtime.h **** 
  31:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  32:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** 
  35:../../../os/rt/include/chtime.h **** /**
  36:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  37:../../../os/rt/include/chtime.h ****  * @{
  38:../../../os/rt/include/chtime.h ****  */
  39:../../../os/rt/include/chtime.h **** /**
  40:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  41:../../../os/rt/include/chtime.h ****  *          specification.
  42:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chtime.h ****  */
  45:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  46:../../../os/rt/include/chtime.h **** 
  47:../../../os/rt/include/chtime.h **** /**
  48:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  49:../../../os/rt/include/chtime.h ****  *          specification.
  50:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chtime.h ****  */
  53:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  54:../../../os/rt/include/chtime.h **** 
  55:../../../os/rt/include/chtime.h **** /**
  56:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  57:../../../os/rt/include/chtime.h ****  */
  58:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  59:../../../os/rt/include/chtime.h **** 
  60:../../../os/rt/include/chtime.h **** /**
  61:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  62:../../../os/rt/include/chtime.h ****  */
  63:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  64:../../../os/rt/include/chtime.h **** /** @} */
  65:../../../os/rt/include/chtime.h **** 
  66:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  67:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** 
  70:../../../os/rt/include/chtime.h **** /**
  71:../../../os/rt/include/chtime.h ****  * @brief   System time counter resolution.
  72:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  73:../../../os/rt/include/chtime.h ****  */
  74:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_RESOLUTION) || defined(__DOXYGEN__)
  75:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_RESOLUTION                32
  76:../../../os/rt/include/chtime.h **** #endif
  77:../../../os/rt/include/chtime.h **** 
  78:../../../os/rt/include/chtime.h **** /**
  79:../../../os/rt/include/chtime.h ****  * @brief   System tick frequency.
  80:../../../os/rt/include/chtime.h ****  * @details Frequency of the system timer that drives the system ticks. This
  81:../../../os/rt/include/chtime.h ****  *          setting also defines the system tick time unit.
  82:../../../os/rt/include/chtime.h ****  */
  83:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_FREQUENCY) || defined(__DOXYGEN__)
  84:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_FREQUENCY                 1000
  85:../../../os/rt/include/chtime.h **** #endif
  86:../../../os/rt/include/chtime.h **** 
  87:../../../os/rt/include/chtime.h **** /**
  88:../../../os/rt/include/chtime.h ****  * @brief   Time intervals data size.
  89:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  90:../../../os/rt/include/chtime.h ****  */
  91:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_INTERVALS_SIZE) || defined(__DOXYGEN__)
  92:../../../os/rt/include/chtime.h **** #define CH_CFG_INTERVALS_SIZE               32
  93:../../../os/rt/include/chtime.h **** #endif
  94:../../../os/rt/include/chtime.h **** 
  95:../../../os/rt/include/chtime.h **** /**
  96:../../../os/rt/include/chtime.h ****  * @brief   Time types data size.
  97:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16 or 32 bits.
  98:../../../os/rt/include/chtime.h ****  */
  99:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_TIME_TYPES_SIZE) || defined(__DOXYGEN__)
 100:../../../os/rt/include/chtime.h **** #define CH_CFG_TIME_TYPES_SIZE              32
 101:../../../os/rt/include/chtime.h **** #endif
 102:../../../os/rt/include/chtime.h **** 
 103:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 104:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
 105:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 106:../../../os/rt/include/chtime.h **** 
 107:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
 108:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
 109:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
 110:../../../os/rt/include/chtime.h **** #endif
 111:../../../os/rt/include/chtime.h **** 
 112:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
 113:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
 114:../../../os/rt/include/chtime.h **** #endif
 115:../../../os/rt/include/chtime.h **** 
 116:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
 117:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
 118:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
 119:../../../os/rt/include/chtime.h **** #endif
 120:../../../os/rt/include/chtime.h **** 
 121:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
 122:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
 123:../../../os/rt/include/chtime.h **** #endif
 124:../../../os/rt/include/chtime.h **** 
 125:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
 126:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
 127:../../../os/rt/include/chtime.h **** #endif
 128:../../../os/rt/include/chtime.h **** 
 129:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 130:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 132:../../../os/rt/include/chtime.h **** 
 133:../../../os/rt/include/chtime.h **** /**
 134:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 135:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 136:../../../os/rt/include/chtime.h ****  */
 137:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 138:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 139:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 140:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 141:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 142:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 143:../../../os/rt/include/chtime.h **** #endif
 144:../../../os/rt/include/chtime.h **** 
 145:../../../os/rt/include/chtime.h **** /**
 146:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 147:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 148:../../../os/rt/include/chtime.h ****  */
 149:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 150:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 151:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 152:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 153:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 154:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 155:../../../os/rt/include/chtime.h **** #endif
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 158:../../../os/rt/include/chtime.h **** /**
 159:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 160:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 161:../../../os/rt/include/chtime.h ****  */
 162:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /**
 165:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 166:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 167:../../../os/rt/include/chtime.h ****  */
 168:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 169:../../../os/rt/include/chtime.h **** 
 170:../../../os/rt/include/chtime.h **** /**
 171:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 172:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 173:../../../os/rt/include/chtime.h ****  */
 174:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 175:../../../os/rt/include/chtime.h **** 
 176:../../../os/rt/include/chtime.h **** /**
 177:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 178:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 179:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 180:../../../os/rt/include/chtime.h ****  */
 181:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 182:../../../os/rt/include/chtime.h **** 
 183:../../../os/rt/include/chtime.h **** #else
 184:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 185:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 186:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 187:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 188:../../../os/rt/include/chtime.h **** #endif
 189:../../../os/rt/include/chtime.h **** 
 190:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 191:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 192:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 193:../../../os/rt/include/chtime.h **** 
 194:../../../os/rt/include/chtime.h **** 
 195:../../../os/rt/include/chtime.h **** /**
 196:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 197:../../../os/rt/include/chtime.h ****  * @{
 198:../../../os/rt/include/chtime.h ****  */
 199:../../../os/rt/include/chtime.h **** /**
 200:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 201:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 202:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 203:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 204:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 205:../../../os/rt/include/chtime.h ****  *          converted.
 206:../../../os/rt/include/chtime.h ****  *
 207:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 208:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 209:../../../os/rt/include/chtime.h ****  *
 210:../../../os/rt/include/chtime.h ****  * @api
 211:../../../os/rt/include/chtime.h ****  */
 212:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 213:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 214:../../../os/rt/include/chtime.h **** 
 215:../../../os/rt/include/chtime.h **** /**
 216:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 217:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 218:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 219:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 220:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 221:../../../os/rt/include/chtime.h ****  *          converted.
 222:../../../os/rt/include/chtime.h ****  *
 223:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 224:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 225:../../../os/rt/include/chtime.h ****  *
 226:../../../os/rt/include/chtime.h ****  * @api
 227:../../../os/rt/include/chtime.h ****  */
 228:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 229:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 230:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 231:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 232:../../../os/rt/include/chtime.h **** 
 233:../../../os/rt/include/chtime.h **** /**
 234:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 235:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 236:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 237:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 238:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 239:../../../os/rt/include/chtime.h ****  *          converted.
 240:../../../os/rt/include/chtime.h ****  *
 241:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 242:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 243:../../../os/rt/include/chtime.h ****  *
 244:../../../os/rt/include/chtime.h ****  * @api
 245:../../../os/rt/include/chtime.h ****  */
 246:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 247:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 248:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 249:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 250:../../../os/rt/include/chtime.h **** 
 251:../../../os/rt/include/chtime.h **** /**
 252:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 253:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 254:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 255:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 256:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 257:../../../os/rt/include/chtime.h ****  *          converted.
 258:../../../os/rt/include/chtime.h ****  *
 259:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 260:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 261:../../../os/rt/include/chtime.h ****  *
 262:../../../os/rt/include/chtime.h ****  * @api
 263:../../../os/rt/include/chtime.h ****  */
 264:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 265:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 266:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 267:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 268:../../../os/rt/include/chtime.h **** 
 269:../../../os/rt/include/chtime.h **** /**
 270:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 271:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 272:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 273:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 274:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 275:../../../os/rt/include/chtime.h ****  *          converted.
 276:../../../os/rt/include/chtime.h ****  *
 277:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 278:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 279:../../../os/rt/include/chtime.h ****  *
 280:../../../os/rt/include/chtime.h ****  * @api
 281:../../../os/rt/include/chtime.h ****  */
 282:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 283:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 284:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 285:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** /**
 288:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 289:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 290:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 291:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 292:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 293:../../../os/rt/include/chtime.h ****  *          converted.
 294:../../../os/rt/include/chtime.h ****  *
 295:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 296:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 297:../../../os/rt/include/chtime.h ****  *
 298:../../../os/rt/include/chtime.h ****  * @api
 299:../../../os/rt/include/chtime.h ****  */
 300:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 301:../../../os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 302:../../../os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 303:../../../os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 304:../../../os/rt/include/chtime.h **** /** @} */
 305:../../../os/rt/include/chtime.h **** 
 306:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 307:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 308:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 309:../../../os/rt/include/chtime.h **** 
 310:../../../os/rt/include/chtime.h **** /*
 311:../../../os/rt/include/chtime.h ****  * Virtual Timers APIs.
 312:../../../os/rt/include/chtime.h ****  */
 313:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 314:../../../os/rt/include/chtime.h **** extern "C" {
 315:../../../os/rt/include/chtime.h **** #endif
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** #endif
 320:../../../os/rt/include/chtime.h **** 
 321:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 322:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 323:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 324:../../../os/rt/include/chtime.h **** 
 325:../../../os/rt/include/chtime.h **** /**
 326:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 327:../../../os/rt/include/chtime.h ****  * @{
 328:../../../os/rt/include/chtime.h ****  */
 329:../../../os/rt/include/chtime.h **** /**
 330:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 331:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 332:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 333:../../../os/rt/include/chtime.h ****  *
 334:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 335:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 336:../../../os/rt/include/chtime.h ****  *
 337:../../../os/rt/include/chtime.h ****  * @special
 338:../../../os/rt/include/chtime.h ****  */
 339:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 340:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 343:../../../os/rt/include/chtime.h **** 
 344:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 345:../../../os/rt/include/chtime.h ****               "conversion overflow");
 346:../../../os/rt/include/chtime.h **** 
 347:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 348:../../../os/rt/include/chtime.h **** }
 349:../../../os/rt/include/chtime.h **** 
 350:../../../os/rt/include/chtime.h **** /**
 351:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 352:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 353:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 354:../../../os/rt/include/chtime.h ****  *
 355:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 356:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 357:../../../os/rt/include/chtime.h ****  *
 358:../../../os/rt/include/chtime.h ****  * @special
 359:../../../os/rt/include/chtime.h ****  */
 360:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 361:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 362:../../../os/rt/include/chtime.h **** 
 363:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 364:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 365:../../../os/rt/include/chtime.h **** 
 366:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 367:../../../os/rt/include/chtime.h ****               "conversion overflow");
 368:../../../os/rt/include/chtime.h **** 
 369:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 370:../../../os/rt/include/chtime.h **** }
 371:../../../os/rt/include/chtime.h **** 
 372:../../../os/rt/include/chtime.h **** /**
 373:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 374:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 375:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 376:../../../os/rt/include/chtime.h ****  *
 377:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 378:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 379:../../../os/rt/include/chtime.h ****  *
 380:../../../os/rt/include/chtime.h ****  * @special
 381:../../../os/rt/include/chtime.h ****  */
 382:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 383:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 384:../../../os/rt/include/chtime.h **** 
 385:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 386:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 387:../../../os/rt/include/chtime.h **** 
 388:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 389:../../../os/rt/include/chtime.h ****               "conversion overflow");
 390:../../../os/rt/include/chtime.h **** 
 391:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 392:../../../os/rt/include/chtime.h **** }
 393:../../../os/rt/include/chtime.h **** 
 394:../../../os/rt/include/chtime.h **** /**
 395:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 396:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 397:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 398:../../../os/rt/include/chtime.h ****  *
 399:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 400:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 401:../../../os/rt/include/chtime.h ****  *
 402:../../../os/rt/include/chtime.h ****  * @special
 403:../../../os/rt/include/chtime.h ****  */
 404:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 405:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 408:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 409:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 410:../../../os/rt/include/chtime.h **** 
 411:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 412:../../../os/rt/include/chtime.h ****               "conversion overflow");
 413:../../../os/rt/include/chtime.h **** 
 414:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 415:../../../os/rt/include/chtime.h **** }
 416:../../../os/rt/include/chtime.h **** 
 417:../../../os/rt/include/chtime.h **** /**
 418:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 419:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 420:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 421:../../../os/rt/include/chtime.h ****  *
 422:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 423:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 424:../../../os/rt/include/chtime.h ****  *
 425:../../../os/rt/include/chtime.h ****  * @special
 426:../../../os/rt/include/chtime.h ****  */
 427:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 428:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 431:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 432:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 433:../../../os/rt/include/chtime.h **** 
 434:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 435:../../../os/rt/include/chtime.h ****               "conversion overflow");
 436:../../../os/rt/include/chtime.h **** 
 437:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 438:../../../os/rt/include/chtime.h **** }
 439:../../../os/rt/include/chtime.h **** 
 440:../../../os/rt/include/chtime.h **** /**
 441:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 442:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 443:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 444:../../../os/rt/include/chtime.h ****  *
 445:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 446:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 447:../../../os/rt/include/chtime.h ****  *
 448:../../../os/rt/include/chtime.h ****  * @special
 449:../../../os/rt/include/chtime.h ****  */
 450:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 451:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 452:../../../os/rt/include/chtime.h **** 
 453:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 454:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 455:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 456:../../../os/rt/include/chtime.h **** 
 457:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 458:../../../os/rt/include/chtime.h ****               "conversion overflow");
 459:../../../os/rt/include/chtime.h **** 
 460:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 461:../../../os/rt/include/chtime.h **** }
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h **** /**
 464:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 465:../../../os/rt/include/chtime.h ****  *
 466:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 467:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 468:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 469:../../../os/rt/include/chtime.h ****  *
 470:../../../os/rt/include/chtime.h ****  * @xclass
 471:../../../os/rt/include/chtime.h ****  */
 472:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 473:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 474:../../../os/rt/include/chtime.h **** 
 475:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 476:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
 477:../../../os/rt/include/chtime.h **** #endif
 478:../../../os/rt/include/chtime.h **** 
 479:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 480:../../../os/rt/include/chtime.h **** }
 481:../../../os/rt/include/chtime.h **** 
 482:../../../os/rt/include/chtime.h **** /**
 483:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 484:../../../os/rt/include/chtime.h ****  *
 485:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 486:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 487:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 488:../../../os/rt/include/chtime.h ****  *
 489:../../../os/rt/include/chtime.h ****  * @xclass
 490:../../../os/rt/include/chtime.h ****  */
 491:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 172               		.loc 5 491 29 is_stmt 1 view .LVU37
 173               	.LBB49:
 492:../../../os/rt/include/chtime.h **** 
 493:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 494:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 495:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 174               		.loc 5 495 3 view .LVU38
 175               		.loc 5 495 10 is_stmt 0 view .LVU39
 176 004e 841B      		sub r24,r20
 177 0050 950B      		sbc r25,r21
 178               	.LVL5:
 179               		.loc 5 495 10 view .LVU40
 180               	.LBE49:
 181               	.LBE48:
 182               		.loc 1 146 11 view .LVU41
 183 0052 C80F      		add r28,r24
 184 0054 D91F      		adc r29,r25
 185               	.LVL6:
 147:../../../os/rt/src/chvt.c **** 
 148:../../../os/rt/src/chvt.c ****     if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 186               		.loc 1 148 5 is_stmt 1 view .LVU42
 187               		.loc 1 148 5 is_stmt 0 view .LVU43
 188               	.LBE62:
 189               		.loc 5 495 3 is_stmt 1 view .LVU44
 190               		.loc 5 495 3 is_stmt 0 view .LVU45
 191 0056 D801      		movw r26,r16
 192 0058 1496      		adiw r26,4
 193 005a 2D91      		ld r18,X+
 194 005c 3C91      		ld r19,X
 195 005e 1597      		sbiw r26,4+1
 196               	.LVL7:
 197               	.LBB63:
 198               		.loc 1 148 8 view .LVU46
 199 0060 C817      		cp r28,r24
 200 0062 D907      		cpc r29,r25
 201 0064 00F0      		brlo .L13
 149:../../../os/rt/src/chvt.c ****       /* Scenario where a very large delay excedeed the numeric range, it
 150:../../../os/rt/src/chvt.c ****          requires a special handling. We need to skip the first element and
 151:../../../os/rt/src/chvt.c ****          adjust the delta to wrap back in the previous numeric range.*/
 152:../../../os/rt/src/chvt.c ****       delta -= p->delta;
 153:../../../os/rt/src/chvt.c ****       p = p->next;
 154:../../../os/rt/src/chvt.c ****     }
 155:../../../os/rt/src/chvt.c ****     else if (delta < p->delta) {
 202               		.loc 1 155 10 is_stmt 1 view .LVU47
 203               		.loc 1 155 13 is_stmt 0 view .LVU48
 204 0066 C217      		cp r28,r18
 205 0068 D307      		cpc r29,r19
 206 006a 00F4      		brsh .+2
 207 006c 00C0      		rjmp .L14
 208               	.LVL8:
 209               	.L7:
 210               		.loc 1 155 13 view .LVU49
 211               	.LBE63:
 156:../../../os/rt/src/chvt.c ****       sysinterval_t deadline_delta;
 157:../../../os/rt/src/chvt.c **** 
 158:../../../os/rt/src/chvt.c ****       /* A small delay that will become the first element in the delta list
 159:../../../os/rt/src/chvt.c ****          and next deadline.*/
 160:../../../os/rt/src/chvt.c ****       deadline_delta = delta;
 161:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 162:../../../os/rt/src/chvt.c ****       /* The delta could be too large for the physical timer to handle.*/
 163:../../../os/rt/src/chvt.c ****       if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 164:../../../os/rt/src/chvt.c ****         deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 165:../../../os/rt/src/chvt.c ****       }
 166:../../../os/rt/src/chvt.c **** #endif
 167:../../../os/rt/src/chvt.c ****       port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 168:../../../os/rt/src/chvt.c ****     }
 169:../../../os/rt/src/chvt.c ****   }
 170:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 171:../../../os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 172:../../../os/rt/src/chvt.c ****   delta = delay;
 173:../../../os/rt/src/chvt.c **** 
 174:../../../os/rt/src/chvt.c ****   /* Pointer to the first element in the delta list.*/
 175:../../../os/rt/src/chvt.c ****   p = ch.vtlist.next;
 176:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 177:../../../os/rt/src/chvt.c **** 
 178:../../../os/rt/src/chvt.c ****   /* The delta list is scanned in order to find the correct position for
 179:../../../os/rt/src/chvt.c ****      this timer. */
 180:../../../os/rt/src/chvt.c ****   while (p->delta < delta) {
 212               		.loc 1 180 9 view .LVU50
 213 006e 2C17      		cp r18,r28
 214 0070 3D07      		cpc r19,r29
 215 0072 00F4      		brsh .L9
 216               	.L8:
 181:../../../os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 182:../../../os/rt/src/chvt.c ****     chDbgAssert(p != vtp, "timer already armed");
 217               		.loc 1 182 5 is_stmt 1 view .LVU51
 218               		.loc 1 182 5 view .LVU52
 183:../../../os/rt/src/chvt.c **** 
 184:../../../os/rt/src/chvt.c ****     delta -= p->delta;
 219               		.loc 1 184 5 view .LVU53
 220               		.loc 1 184 11 is_stmt 0 view .LVU54
 221 0074 C21B      		sub r28,r18
 222 0076 D30B      		sbc r29,r19
 223               	.LVL9:
 185:../../../os/rt/src/chvt.c ****     p = p->next;
 224               		.loc 1 185 5 is_stmt 1 view .LVU55
 225               		.loc 1 185 7 is_stmt 0 view .LVU56
 226 0078 F801      		movw r30,r16
 227 007a 0081      		ld r16,Z
 228 007c 1181      		ldd r17,Z+1
 229               	.LVL10:
 180:../../../os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 230               		.loc 1 180 11 view .LVU57
 231 007e D801      		movw r26,r16
 232 0080 1496      		adiw r26,4
 233 0082 2D91      		ld r18,X+
 234 0084 3C91      		ld r19,X
 180:../../../os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 235               		.loc 1 180 9 view .LVU58
 236 0086 2C17      		cp r18,r28
 237 0088 3D07      		cpc r19,r29
 238 008a 00F0      		brlo .L8
 239               	.L9:
 186:../../../os/rt/src/chvt.c ****   }
 187:../../../os/rt/src/chvt.c **** 
 188:../../../os/rt/src/chvt.c ****   /* The timer is inserted in the delta list.*/
 189:../../../os/rt/src/chvt.c ****   vtp->next = p;
 240               		.loc 1 189 3 is_stmt 1 view .LVU59
 241               		.loc 1 189 13 is_stmt 0 view .LVU60
 242 008c F701      		movw r30,r14
 243 008e 1183      		std Z+1,r17
 244 0090 0083      		st Z,r16
 190:../../../os/rt/src/chvt.c ****   vtp->prev = vtp->next->prev;
 245               		.loc 1 190 3 is_stmt 1 view .LVU61
 246               		.loc 1 190 24 is_stmt 0 view .LVU62
 247 0092 D801      		movw r26,r16
 248 0094 1296      		adiw r26,2
 249 0096 ED91      		ld r30,X+
 250 0098 FC91      		ld r31,X
 251               		.loc 1 190 13 view .LVU63
 252 009a D701      		movw r26,r14
 253 009c 1396      		adiw r26,2+1
 254 009e FC93      		st X,r31
 255 00a0 EE93      		st -X,r30
 256 00a2 1297      		sbiw r26,2
 191:../../../os/rt/src/chvt.c ****   vtp->prev->next = vtp;
 257               		.loc 1 191 3 is_stmt 1 view .LVU64
 258               		.loc 1 191 19 is_stmt 0 view .LVU65
 259 00a4 F182      		std Z+1,r15
 260 00a6 E082      		st Z,r14
 192:../../../os/rt/src/chvt.c ****   p->prev = vtp;
 261               		.loc 1 192 3 is_stmt 1 view .LVU66
 262               		.loc 1 192 11 is_stmt 0 view .LVU67
 263 00a8 F801      		movw r30,r16
 264 00aa F382      		std Z+3,r15
 265 00ac E282      		std Z+2,r14
 193:../../../os/rt/src/chvt.c ****   vtp->delta = delta;
 266               		.loc 1 193 3 is_stmt 1 view .LVU68
 267               		.loc 1 193 14 is_stmt 0 view .LVU69
 268 00ae 1596      		adiw r26,4+1
 269 00b0 DC93      		st X,r29
 270 00b2 CE93      		st -X,r28
 271 00b4 1497      		sbiw r26,4
 194:../../../os/rt/src/chvt.c **** 
 195:../../../os/rt/src/chvt.c ****   /* Calculate new delta for the following entry.*/
 196:../../../os/rt/src/chvt.c ****   p->delta -= delta;
 272               		.loc 1 196 3 is_stmt 1 view .LVU70
 273               		.loc 1 196 12 is_stmt 0 view .LVU71
 274 00b6 8481      		ldd r24,Z+4
 275 00b8 9581      		ldd r25,Z+5
 276 00ba 8C1B      		sub r24,r28
 277 00bc 9D0B      		sbc r25,r29
 278 00be 9583      		std Z+5,r25
 279 00c0 8483      		std Z+4,r24
 197:../../../os/rt/src/chvt.c **** 
 198:../../../os/rt/src/chvt.c ****   /* Special case when the timer is in last position in the list, the
 199:../../../os/rt/src/chvt.c ****      value in the header must be restored.*/
 200:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (sysinterval_t)-1;
 280               		.loc 1 200 3 is_stmt 1 view .LVU72
 281               		.loc 1 200 19 is_stmt 0 view .LVU73
 282 00c2 8FEF      		ldi r24,lo8(-1)
 283 00c4 9FEF      		ldi r25,lo8(-1)
 284 00c6 9093 0000 		sts ch+17+1,r25
 285 00ca 8093 0000 		sts ch+17,r24
 286               	/* epilogue start */
 201:../../../os/rt/src/chvt.c **** }
 287               		.loc 1 201 1 view .LVU74
 288 00ce DF91      		pop r29
 289 00d0 CF91      		pop r28
 290               	.LVL11:
 291               		.loc 1 201 1 view .LVU75
 292 00d2 1F91      		pop r17
 293 00d4 0F91      		pop r16
 294               	.LVL12:
 295               		.loc 1 201 1 view .LVU76
 296 00d6 FF90      		pop r15
 297 00d8 EF90      		pop r14
 298               	.LVL13:
 299               		.loc 1 201 1 view .LVU77
 300 00da 0895      		ret
 301               	.LVL14:
 302               	.L13:
 303               	.LBB64:
 152:../../../os/rt/src/chvt.c ****       p = p->next;
 304               		.loc 1 152 7 is_stmt 1 view .LVU78
 152:../../../os/rt/src/chvt.c ****       p = p->next;
 305               		.loc 1 152 13 is_stmt 0 view .LVU79
 306 00dc C21B      		sub r28,r18
 307 00de D30B      		sbc r29,r19
 308               	.LVL15:
 153:../../../os/rt/src/chvt.c ****     }
 309               		.loc 1 153 7 is_stmt 1 view .LVU80
 153:../../../os/rt/src/chvt.c ****     }
 310               		.loc 1 153 9 is_stmt 0 view .LVU81
 311 00e0 0D91      		ld r16,X+
 312 00e2 1C91      		ld r17,X
 313               	.LVL16:
 153:../../../os/rt/src/chvt.c ****     }
 314               		.loc 1 153 9 view .LVU82
 315 00e4 F801      		movw r30,r16
 316 00e6 2481      		ldd r18,Z+4
 317 00e8 3581      		ldd r19,Z+5
 318 00ea 00C0      		rjmp .L7
 319               	.L14:
 320               	.LBB50:
 156:../../../os/rt/src/chvt.c **** 
 321               		.loc 1 156 7 is_stmt 1 view .LVU83
 160:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 322               		.loc 1 160 7 view .LVU84
 323               	.LVL17:
 167:../../../os/rt/src/chvt.c ****     }
 324               		.loc 1 167 7 view .LVU85
 325               	.LBB51:
 326               	.LBI51:
 472:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 327               		.loc 5 472 25 view .LVU86
 328               	.LBB52:
 479:../../../os/rt/include/chtime.h **** }
 329               		.loc 5 479 3 view .LVU87
 479:../../../os/rt/include/chtime.h **** }
 330               		.loc 5 479 3 is_stmt 0 view .LVU88
 331               	.LBE52:
 332               	.LBE51:
 333               	.LBB53:
 334               	.LBI53:
  93:../../../os/common/ports/AVR/chcore_timer.h **** 
 335               		.loc 3 93 20 is_stmt 1 view .LVU89
 336               	.LBB54:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 337               		.loc 3 95 3 view .LVU90
 338 00ec CA01      		movw r24,r20
 339 00ee 8C0F      		add r24,r28
 340 00f0 9D1F      		adc r25,r29
 341               	.LVL18:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 342               		.loc 3 95 3 is_stmt 0 view .LVU91
 343 00f2 0E94 0000 		call stSetAlarm
 344               	.LVL19:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 345               		.loc 3 95 3 view .LVU92
 346 00f6 D801      		movw r26,r16
 347 00f8 1496      		adiw r26,4
 348 00fa 2D91      		ld r18,X+
 349 00fc 3C91      		ld r19,X
 350 00fe 00C0      		rjmp .L7
 351               	.LVL20:
 352               	.L12:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 353               		.loc 3 95 3 view .LVU93
 354               	.LBE54:
 355               	.LBE53:
 356               	.LBE50:
 121:../../../os/rt/src/chvt.c ****       ch.vtlist.next = vtp;
 357               		.loc 1 121 7 is_stmt 1 view .LVU94
 121:../../../os/rt/src/chvt.c ****       ch.vtlist.next = vtp;
 358               		.loc 1 121 26 is_stmt 0 view .LVU95
 359 0100 9093 0000 		sts ch+19+1,r25
 360 0104 8093 0000 		sts ch+19,r24
 122:../../../os/rt/src/chvt.c ****       ch.vtlist.prev = vtp;
 361               		.loc 1 122 7 is_stmt 1 view .LVU96
 122:../../../os/rt/src/chvt.c ****       ch.vtlist.prev = vtp;
 362               		.loc 1 122 22 is_stmt 0 view .LVU97
 363 0108 F092 0000 		sts ch+13+1,r15
 364 010c E092 0000 		sts ch+13,r14
 123:../../../os/rt/src/chvt.c ****       vtp->next = (virtual_timer_t *)&ch.vtlist;
 365               		.loc 1 123 7 is_stmt 1 view .LVU98
 123:../../../os/rt/src/chvt.c ****       vtp->next = (virtual_timer_t *)&ch.vtlist;
 366               		.loc 1 123 22 is_stmt 0 view .LVU99
 367 0110 F092 0000 		sts ch+15+1,r15
 368 0114 E092 0000 		sts ch+15,r14
 124:../../../os/rt/src/chvt.c ****       vtp->prev = (virtual_timer_t *)&ch.vtlist;
 369               		.loc 1 124 7 is_stmt 1 view .LVU100
 124:../../../os/rt/src/chvt.c ****       vtp->prev = (virtual_timer_t *)&ch.vtlist;
 370               		.loc 1 124 17 is_stmt 0 view .LVU101
 371 0118 F701      		movw r30,r14
 372 011a 1183      		std Z+1,r17
 373 011c 0083      		st Z,r16
 125:../../../os/rt/src/chvt.c ****       vtp->delta = delay;
 374               		.loc 1 125 7 is_stmt 1 view .LVU102
 125:../../../os/rt/src/chvt.c ****       vtp->delta = delay;
 375               		.loc 1 125 17 is_stmt 0 view .LVU103
 376 011e 1383      		std Z+3,r17
 377 0120 0283      		std Z+2,r16
 126:../../../os/rt/src/chvt.c **** 
 378               		.loc 1 126 7 is_stmt 1 view .LVU104
 126:../../../os/rt/src/chvt.c **** 
 379               		.loc 1 126 18 is_stmt 0 view .LVU105
 380 0122 D583      		std Z+5,r29
 381 0124 C483      		std Z+4,r28
 136:../../../os/rt/src/chvt.c **** 
 382               		.loc 1 136 7 is_stmt 1 view .LVU106
 383               	.LVL21:
 384               	.LBB55:
 385               	.LBI55:
 472:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 386               		.loc 5 472 25 view .LVU107
 387               	.LBB56:
 479:../../../os/rt/include/chtime.h **** }
 388               		.loc 5 479 3 view .LVU108
 479:../../../os/rt/include/chtime.h **** }
 389               		.loc 5 479 3 is_stmt 0 view .LVU109
 390               	.LBE56:
 391               	.LBE55:
 392               	.LBB57:
 393               	.LBI57:
  71:../../../os/common/ports/AVR/chcore_timer.h **** 
 394               		.loc 3 71 20 is_stmt 1 view .LVU110
 395               	.LBB58:
  73:../../../os/common/ports/AVR/chcore_timer.h **** }
 396               		.loc 3 73 3 view .LVU111
 397 0126 8C0F      		add r24,r28
 398 0128 9D1F      		adc r25,r29
 399               	/* epilogue start */
 400               	.LBE58:
 401               	.LBE57:
 402               	.LBE64:
 403               		.loc 1 201 1 is_stmt 0 view .LVU112
 404 012a DF91      		pop r29
 405 012c CF91      		pop r28
 406               	.LVL22:
 407               		.loc 1 201 1 view .LVU113
 408 012e 1F91      		pop r17
 409 0130 0F91      		pop r16
 410 0132 FF90      		pop r15
 411 0134 EF90      		pop r14
 412               	.LVL23:
 413               	.LBB65:
 414               	.LBB60:
 415               	.LBB59:
  73:../../../os/common/ports/AVR/chcore_timer.h **** }
 416               		.loc 3 73 3 view .LVU114
 417 0136 0C94 0000 		jmp stStartAlarm
 418               	.LVL24:
  73:../../../os/common/ports/AVR/chcore_timer.h **** }
 419               		.loc 3 73 3 view .LVU115
 420               	.LBE59:
 421               	.LBE60:
 422               	.LBE65:
 423               		.cfi_endproc
 424               	.LFE142:
 426               		.section	.text.chVTDoResetI,"ax",@progbits
 427               	.global	chVTDoResetI
 429               	chVTDoResetI:
 430               	.LVL25:
 431               	.LFB143:
 202:../../../os/rt/src/chvt.c **** 
 203:../../../os/rt/src/chvt.c **** /**
 204:../../../os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 205:../../../os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 206:../../../os/rt/src/chvt.c ****  *
 207:../../../os/rt/src/chvt.c ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 208:../../../os/rt/src/chvt.c ****  *
 209:../../../os/rt/src/chvt.c ****  * @iclass
 210:../../../os/rt/src/chvt.c ****  */
 211:../../../os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 432               		.loc 1 211 41 is_stmt 1 view -0
 433               		.cfi_startproc
 434               		.loc 1 211 41 is_stmt 0 view .LVU117
 435 0000 CF93      		push r28
 436               	.LCFI6:
 437               		.cfi_def_cfa_offset 3
 438               		.cfi_offset 28, -2
 439 0002 DF93      		push r29
 440               	.LCFI7:
 441               		.cfi_def_cfa_offset 4
 442               		.cfi_offset 29, -3
 443               	/* prologue: function */
 444               	/* frame size = 0 */
 445               	/* stack size = 2 */
 446               	.L__stack_usage = 2
 447 0004 FC01      		movw r30,r24
 212:../../../os/rt/src/chvt.c **** 
 213:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 448               		.loc 1 213 21 is_stmt 1 view .LVU118
 214:../../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 449               		.loc 1 214 3 view .LVU119
 450               		.loc 1 214 3 view .LVU120
 215:../../../os/rt/src/chvt.c ****   chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 451               		.loc 1 215 3 view .LVU121
 452               		.loc 1 215 3 view .LVU122
 216:../../../os/rt/src/chvt.c **** 
 217:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 218:../../../os/rt/src/chvt.c **** 
 219:../../../os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 220:../../../os/rt/src/chvt.c ****   vtp->next->delta += vtp->delta;
 221:../../../os/rt/src/chvt.c **** 
 222:../../../os/rt/src/chvt.c ****  /* Removing the element from the delta list.*/
 223:../../../os/rt/src/chvt.c ****   vtp->prev->next = vtp->next;
 224:../../../os/rt/src/chvt.c ****   vtp->next->prev = vtp->prev;
 225:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 226:../../../os/rt/src/chvt.c **** 
 227:../../../os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 228:../../../os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 229:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (sysinterval_t)-1;
 230:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 231:../../../os/rt/src/chvt.c ****   sysinterval_t nowdelta, delta;
 453               		.loc 1 231 3 view .LVU123
 232:../../../os/rt/src/chvt.c **** 
 233:../../../os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 234:../../../os/rt/src/chvt.c ****      else the operation is more complex.*/
 235:../../../os/rt/src/chvt.c ****   if (ch.vtlist.next != vtp) {
 454               		.loc 1 235 3 view .LVU124
 455 0006 A081      		ld r26,Z
 456 0008 B181      		ldd r27,Z+1
 457               		.loc 1 235 6 is_stmt 0 view .LVU125
 458 000a C091 0000 		lds r28,ch+13
 459 000e D091 0000 		lds r29,ch+13+1
 460 0012 C817      		cp r28,r24
 461 0014 D907      		cpc r29,r25
 462 0016 01F0      		breq .L16
 236:../../../os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 237:../../../os/rt/src/chvt.c ****     vtp->prev->next = vtp->next;
 463               		.loc 1 237 5 is_stmt 1 view .LVU126
 464               		.loc 1 237 8 is_stmt 0 view .LVU127
 465 0018 C281      		ldd r28,Z+2
 466 001a D381      		ldd r29,Z+3
 467               		.loc 1 237 21 view .LVU128
 468 001c B983      		std Y+1,r27
 469 001e A883      		st Y,r26
 238:../../../os/rt/src/chvt.c ****     vtp->next->prev = vtp->prev;
 470               		.loc 1 238 5 is_stmt 1 view .LVU129
 471               		.loc 1 238 8 is_stmt 0 view .LVU130
 472 0020 A081      		ld r26,Z
 473 0022 B181      		ldd r27,Z+1
 474               		.loc 1 238 21 view .LVU131
 475 0024 1396      		adiw r26,2+1
 476 0026 DC93      		st X,r29
 477 0028 CE93      		st -X,r28
 478 002a 1297      		sbiw r26,2
 239:../../../os/rt/src/chvt.c ****     vtp->func = NULL;
 479               		.loc 1 239 5 is_stmt 1 view .LVU132
 480               		.loc 1 239 15 is_stmt 0 view .LVU133
 481 002c 1782      		std Z+7,__zero_reg__
 482 002e 1682      		std Z+6,__zero_reg__
 240:../../../os/rt/src/chvt.c **** 
 241:../../../os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 242:../../../os/rt/src/chvt.c ****     if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 483               		.loc 1 242 5 is_stmt 1 view .LVU134
 484               		.loc 1 242 8 is_stmt 0 view .LVU135
 485 0030 80E0      		ldi r24,hi8(ch+13)
 486 0032 A030      		cpi r26,lo8(ch+13)
 487 0034 B807      		cpc r27,r24
 488               	.LVL26:
 489               		.loc 1 242 8 view .LVU136
 490 0036 01F0      		breq .L15
 243:../../../os/rt/src/chvt.c ****       vtp->next->delta += vtp->delta;
 491               		.loc 1 243 7 is_stmt 1 view .LVU137
 492               		.loc 1 243 24 is_stmt 0 view .LVU138
 493 0038 1496      		adiw r26,4
 494 003a 8D91      		ld r24,X+
 495 003c 9C91      		ld r25,X
 496 003e 1597      		sbiw r26,4+1
 497 0040 2481      		ldd r18,Z+4
 498 0042 3581      		ldd r19,Z+5
 499 0044 820F      		add r24,r18
 500 0046 931F      		adc r25,r19
 501 0048 1596      		adiw r26,4+1
 502 004a 9C93      		st X,r25
 503 004c 8E93      		st -X,r24
 504 004e 1497      		sbiw r26,4
 505               	.LVL27:
 506               	.L15:
 507               	/* epilogue start */
 244:../../../os/rt/src/chvt.c **** 
 245:../../../os/rt/src/chvt.c ****     return;
 246:../../../os/rt/src/chvt.c ****   }
 247:../../../os/rt/src/chvt.c **** 
 248:../../../os/rt/src/chvt.c ****   /* Removing the first timer from the list.*/
 249:../../../os/rt/src/chvt.c ****   ch.vtlist.next = vtp->next;
 250:../../../os/rt/src/chvt.c ****   ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 251:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 252:../../../os/rt/src/chvt.c **** 
 253:../../../os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 254:../../../os/rt/src/chvt.c ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 255:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 256:../../../os/rt/src/chvt.c **** 
 257:../../../os/rt/src/chvt.c ****     return;
 258:../../../os/rt/src/chvt.c ****   }
 259:../../../os/rt/src/chvt.c **** 
 260:../../../os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 261:../../../os/rt/src/chvt.c ****   ch.vtlist.next->delta += vtp->delta;
 262:../../../os/rt/src/chvt.c **** 
 263:../../../os/rt/src/chvt.c ****   /* If the new first timer has a delta of zero then the alarm is not
 264:../../../os/rt/src/chvt.c ****      modified, the already programmed alarm will serve it.*/
 265:../../../os/rt/src/chvt.c **** /*  if (ch.vtlist.next->delta == 0) {
 266:../../../os/rt/src/chvt.c ****     return;
 267:../../../os/rt/src/chvt.c ****   }*/
 268:../../../os/rt/src/chvt.c **** 
 269:../../../os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 270:../../../os/rt/src/chvt.c ****   nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 271:../../../os/rt/src/chvt.c **** 
 272:../../../os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 273:../../../os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 274:../../../os/rt/src/chvt.c ****   if (nowdelta >= ch.vtlist.next->delta) {
 275:../../../os/rt/src/chvt.c ****     return;
 276:../../../os/rt/src/chvt.c ****   }
 277:../../../os/rt/src/chvt.c **** 
 278:../../../os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 279:../../../os/rt/src/chvt.c ****   delta = ch.vtlist.next->delta - nowdelta;
 280:../../../os/rt/src/chvt.c **** 
 281:../../../os/rt/src/chvt.c ****   /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
 282:../../../os/rt/src/chvt.c ****      ticks from now.*/
 283:../../../os/rt/src/chvt.c ****   if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 284:../../../os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 285:../../../os/rt/src/chvt.c ****   }
 286:../../../os/rt/src/chvt.c ****   else {
 287:../../../os/rt/src/chvt.c ****     delta = nowdelta + delta;
 288:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 289:../../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle.*/
 290:../../../os/rt/src/chvt.c ****     if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 291:../../../os/rt/src/chvt.c ****       delta = (sysinterval_t)TIME_MAX_SYSTIME;
 292:../../../os/rt/src/chvt.c ****     }
 293:../../../os/rt/src/chvt.c **** #endif
 294:../../../os/rt/src/chvt.c ****   }
 295:../../../os/rt/src/chvt.c ****   port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 296:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 297:../../../os/rt/src/chvt.c **** }
 508               		.loc 1 297 1 view .LVU139
 509 0050 DF91      		pop r29
 510 0052 CF91      		pop r28
 511 0054 0895      		ret
 512               	.LVL28:
 513               	.L16:
 249:../../../os/rt/src/chvt.c ****   ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 514               		.loc 1 249 3 is_stmt 1 view .LVU140
 249:../../../os/rt/src/chvt.c ****   ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 515               		.loc 1 249 18 is_stmt 0 view .LVU141
 516 0056 B093 0000 		sts ch+13+1,r27
 517 005a A093 0000 		sts ch+13,r26
 250:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 518               		.loc 1 250 3 is_stmt 1 view .LVU142
 250:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 519               		.loc 1 250 24 is_stmt 0 view .LVU143
 520 005e 80E0      		ldi r24,lo8(ch+13)
 521 0060 90E0      		ldi r25,hi8(ch+13)
 522               	.LVL29:
 250:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 523               		.loc 1 250 24 view .LVU144
 524 0062 1396      		adiw r26,2+1
 525 0064 9C93      		st X,r25
 526 0066 8E93      		st -X,r24
 527 0068 1297      		sbiw r26,2
 251:../../../os/rt/src/chvt.c **** 
 528               		.loc 1 251 3 is_stmt 1 view .LVU145
 251:../../../os/rt/src/chvt.c **** 
 529               		.loc 1 251 13 is_stmt 0 view .LVU146
 530 006a 1F82      		std Y+7,__zero_reg__
 531 006c 1E82      		std Y+6,__zero_reg__
 254:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 532               		.loc 1 254 3 is_stmt 1 view .LVU147
 254:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 533               		.loc 1 254 6 is_stmt 0 view .LVU148
 534 006e A817      		cp r26,r24
 535 0070 B907      		cpc r27,r25
 536               	.LVL30:
 254:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 537               		.loc 1 254 6 view .LVU149
 538 0072 01F0      		breq .L22
 261:../../../os/rt/src/chvt.c **** 
 539               		.loc 1 261 3 is_stmt 1 view .LVU150
 261:../../../os/rt/src/chvt.c **** 
 540               		.loc 1 261 25 is_stmt 0 view .LVU151
 541 0074 1496      		adiw r26,4
 542 0076 8D91      		ld r24,X+
 543 0078 9C91      		ld r25,X
 544 007a 1597      		sbiw r26,4+1
 545 007c 2C81      		ldd r18,Y+4
 546 007e 3D81      		ldd r19,Y+5
 547 0080 820F      		add r24,r18
 548 0082 931F      		adc r25,r19
 549 0084 1596      		adiw r26,4+1
 550 0086 9C93      		st X,r25
 551 0088 8E93      		st -X,r24
 552 008a 1497      		sbiw r26,4
 270:../../../os/rt/src/chvt.c **** 
 553               		.loc 1 270 3 is_stmt 1 view .LVU152
 554               	.LBB66:
 555               	.LBI66:
 115:../../../os/rt/include/chvt.h **** 
 556               		.loc 2 115 25 view .LVU153
 557               	.LBE66:
 558               		.loc 2 120 3 view .LVU154
 559               	.LBB71:
 560               	.LBB67:
 561               	.LBI67:
 105:../../../os/common/ports/AVR/chcore_timer.h **** 
 562               		.loc 3 105 25 view .LVU155
 563               	.LBE67:
 564               	.LBE71:
 565               		.loc 3 107 3 view .LVU156
 566               	.LBB72:
 567               	.LBB70:
 568               	.LBB68:
 569               	.LBI68:
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
 570               		.loc 4 87 25 view .LVU157
 571               	.LBB69:
 572               		.loc 4 89 3 view .LVU158
 573               		.loc 4 89 10 is_stmt 0 view .LVU159
 574 008c 4091 8400 		lds r20,132
 575 0090 5091 8500 		lds r21,132+1
 576               	.LBE69:
 577               	.LBE68:
 578               	.LBE70:
 579               	.LBE72:
 270:../../../os/rt/src/chvt.c **** 
 580               		.loc 1 270 14 view .LVU160
 581 0094 2091 0000 		lds r18,ch+19
 582 0098 3091 0000 		lds r19,ch+19+1
 583               	.LVL31:
 584               	.LBB73:
 585               	.LBI73:
 491:../../../os/rt/include/chtime.h **** 
 586               		.loc 5 491 29 is_stmt 1 view .LVU161
 587               	.LBB74:
 588               		.loc 5 495 3 view .LVU162
 589               		.loc 5 495 10 is_stmt 0 view .LVU163
 590 009c BA01      		movw r22,r20
 591 009e 621B      		sub r22,r18
 592 00a0 730B      		sbc r23,r19
 593               	.LVL32:
 594               		.loc 5 495 10 view .LVU164
 595               	.LBE74:
 596               	.LBE73:
 274:../../../os/rt/src/chvt.c ****     return;
 597               		.loc 1 274 3 is_stmt 1 view .LVU165
 274:../../../os/rt/src/chvt.c ****     return;
 598               		.loc 1 274 6 is_stmt 0 view .LVU166
 599 00a2 6817      		cp r22,r24
 600 00a4 7907      		cpc r23,r25
 601 00a6 00F4      		brsh .L15
 279:../../../os/rt/src/chvt.c **** 
 602               		.loc 1 279 3 is_stmt 1 view .LVU167
 603               	.LVL33:
 283:../../../os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 604               		.loc 1 283 3 view .LVU168
 279:../../../os/rt/src/chvt.c **** 
 605               		.loc 1 279 9 is_stmt 0 view .LVU169
 606 00a8 F901      		movw r30,r18
 607 00aa E41B      		sub r30,r20
 608 00ac F50B      		sbc r31,r21
 609 00ae AF01      		movw r20,r30
 610               	.LVL34:
 279:../../../os/rt/src/chvt.c **** 
 611               		.loc 1 279 9 view .LVU170
 612 00b0 480F      		add r20,r24
 613 00b2 591F      		adc r21,r25
 614               	.LVL35:
 283:../../../os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 615               		.loc 1 283 6 view .LVU171
 616 00b4 4230      		cpi r20,2
 617 00b6 5105      		cpc r21,__zero_reg__
 618 00b8 00F0      		brlo .L23
 619               	.LVL36:
 295:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 620               		.loc 1 295 3 is_stmt 1 view .LVU172
 621               	.LBB75:
 622               	.LBI75:
 472:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 623               		.loc 5 472 25 view .LVU173
 624               	.LBB76:
 479:../../../os/rt/include/chtime.h **** }
 625               		.loc 5 479 3 view .LVU174
 479:../../../os/rt/include/chtime.h **** }
 626               		.loc 5 479 3 is_stmt 0 view .LVU175
 627               	.LBE76:
 628               	.LBE75:
 629               	.LBB78:
 630               	.LBI78:
  93:../../../os/common/ports/AVR/chcore_timer.h **** 
 631               		.loc 3 93 20 is_stmt 1 view .LVU176
 632               	.LBB79:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 633               		.loc 3 95 3 view .LVU177
 634 00ba 820F      		add r24,r18
 635 00bc 931F      		adc r25,r19
 636               	.LVL37:
 637               	/* epilogue start */
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 638               		.loc 3 95 3 is_stmt 0 view .LVU178
 639               	.LBE79:
 640               	.LBE78:
 641               		.loc 1 297 1 view .LVU179
 642 00be DF91      		pop r29
 643 00c0 CF91      		pop r28
 644               	.LBB83:
 645               	.LBB80:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 646               		.loc 3 95 3 view .LVU180
 647 00c2 0C94 0000 		jmp stSetAlarm
 648               	.LVL38:
 649               	.L23:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 650               		.loc 3 95 3 view .LVU181
 651               	.LBE80:
 652               	.LBE83:
 284:../../../os/rt/src/chvt.c ****   }
 653               		.loc 1 284 5 is_stmt 1 view .LVU182
 284:../../../os/rt/src/chvt.c ****   }
 654               		.loc 1 284 11 is_stmt 0 view .LVU183
 655 00c6 CB01      		movw r24,r22
 656 00c8 0296      		adiw r24,2
 657               	.LVL39:
 295:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 658               		.loc 1 295 3 is_stmt 1 view .LVU184
 659               	.LBB84:
 472:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 660               		.loc 5 472 25 view .LVU185
 661               	.LBB77:
 479:../../../os/rt/include/chtime.h **** }
 662               		.loc 5 479 3 view .LVU186
 479:../../../os/rt/include/chtime.h **** }
 663               		.loc 5 479 3 is_stmt 0 view .LVU187
 664               	.LBE77:
 665               	.LBE84:
 666               	.LBB85:
  93:../../../os/common/ports/AVR/chcore_timer.h **** 
 667               		.loc 3 93 20 is_stmt 1 view .LVU188
 668               	.LBB81:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 669               		.loc 3 95 3 view .LVU189
 670 00ca 820F      		add r24,r18
 671 00cc 931F      		adc r25,r19
 672               	.LVL40:
 673               	/* epilogue start */
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 674               		.loc 3 95 3 is_stmt 0 view .LVU190
 675               	.LBE81:
 676               	.LBE85:
 677               		.loc 1 297 1 view .LVU191
 678 00ce DF91      		pop r29
 679 00d0 CF91      		pop r28
 680               	.LBB86:
 681               	.LBB82:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 682               		.loc 3 95 3 view .LVU192
 683 00d2 0C94 0000 		jmp stSetAlarm
 684               	.LVL41:
 685               	.L22:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 686               		.loc 3 95 3 view .LVU193
 687               	.LBE82:
 688               	.LBE86:
 255:../../../os/rt/src/chvt.c **** 
 689               		.loc 1 255 5 is_stmt 1 view .LVU194
 690               	.LBB87:
 691               	.LBI87:
  81:../../../os/common/ports/AVR/chcore_timer.h **** 
 692               		.loc 3 81 20 view .LVU195
 693               	.LBB88:
  83:../../../os/common/ports/AVR/chcore_timer.h **** }
 694               		.loc 3 83 3 view .LVU196
 695               	/* epilogue start */
 696               	.LBE88:
 697               	.LBE87:
 698               		.loc 1 297 1 is_stmt 0 view .LVU197
 699 00d6 DF91      		pop r29
 700 00d8 CF91      		pop r28
 701               	.LBB90:
 702               	.LBB89:
  83:../../../os/common/ports/AVR/chcore_timer.h **** }
 703               		.loc 3 83 3 view .LVU198
 704 00da 0C94 0000 		jmp stStopAlarm
 705               	.LVL42:
 706               	.LBE89:
 707               	.LBE90:
 708               		.cfi_endproc
 709               	.LFE143:
 711               		.text
 712               	.Letext0:
 713               		.file 6 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 714               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 715               		.file 8 "../../../os/rt/include/chsystypes.h"
 716               		.file 9 "../../../os/rt/include/chschd.h"
 717               		.file 10 "../../../os/common/ports/AVR/chcore.h"
 718               		.file 11 "../../../os/rt/include/chsem.h"
 719               		.file 12 "../../../os/rt/include/chmtx.h"
 720               		.file 13 "../../../os/rt/include/chsys.h"
 721               		.file 14 "../../../os/rt/include/chregistry.h"
 722               		.file 15 "../../../os/common/oslib/include/chmemcore.h"
 723               		.file 16 "../../../os/hal/include/hal_st.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:13     .text._vt_init:0000000000000000 _vt_init
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:53     .text.chVTDoSetI:0000000000000000 chVTDoSetI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc7QTdVU.s:429    .text.chVTDoResetI:0000000000000000 chVTDoResetI

UNDEFINED SYMBOLS
ch
stSetAlarm
stStartAlarm
stStopAlarm
