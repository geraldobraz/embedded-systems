   1               		.file	"hal_adc_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__vector_21,"ax",@progbits
  11               	.global	__vector_21
  13               	__vector_21:
  14               	.LFB181:
  15               		.file 1 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c"
   1:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*
   2:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
   4:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
   8:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  10:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** */
  16:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  17:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
  18:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @file    ADCv1/hal_adc_lld.c
  19:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   AVR/MEGA ADC subsystem low level driver source.
  20:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
  21:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @addtogroup ADC
  22:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @{
  23:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
  24:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  25:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** #include "hal.h"
  26:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  27:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** #if HAL_USE_ADC || defined(__DOXYGEN__)
  28:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  29:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  30:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /* Driver local definitions.                                                */
  31:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  32:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  33:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  34:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /* Driver exported variables.                                               */
  35:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  36:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /** @brief ADC1 driver identifier.*/
  37:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** #if AVR_ADC_USE_ADC1 || defined(__DOXYGEN__)
  38:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** ADCDriver ADCD1;
  39:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** #endif
  40:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  41:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  42:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /* Driver local variables.                                                  */
  43:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  44:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  45:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  46:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /* Driver local functions.                                                  */
  47:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  48:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  49:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
  50:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Get the ADC channel.
  51:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
  52:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] mask            the mask containing the channel number
  53:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] currentChannel  the current channel.
  54:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
  55:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @return                    the channel number.
  56:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @retval                    ADC channel number
  57:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @retval                    -1 in case of error.
  58:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
  59:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** static size_t getAdcChannelNumberFromMask(uint8_t mask,
  60:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****                                           uint8_t currentChannel) {
  61:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   for (uint8_t i = 0; mask > 0; i++) {
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
  64:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
  65:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****         return i;
  66:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       currentChannel--;
  67:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     }
  68:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     mask >>= 1;
  69:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
  70:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  71:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   /* error, should never reach this line */
  72:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   return -1;
  73:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
  74:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  75:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
  76:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Configure the ADC channel.
  77:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
  78:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] channelNum  the channel number to set.
  79:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
  80:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** static void setAdcChannel(uint8_t channelNum) {
  81:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADMUX = (ADMUX & 0xf8) | (channelNum & 0x07);
  83:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
  84:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  85:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  86:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /* Driver interrupt handlers.                                               */
  87:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
  88:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  89:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** #include <util/delay.h>
  90:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  91:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** OSAL_IRQ_HANDLER(ADC_vect) {
  16               		.loc 1 91 28 view -0
  17               		.cfi_startproc
  18 0000 1F92      		push r1
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 1, -2
  22 0002 0F92      		push r0
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 0, -3
  26 0004 0FB6      		in r0,__SREG__
  27 0006 0F92      		push r0
  28 0008 1124      		clr __zero_reg__
  29 000a AF92      		push r10
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 10, -4
  33 000c BF92      		push r11
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 11, -5
  37 000e CF92      		push r12
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 12, -6
  41 0010 DF92      		push r13
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 13, -7
  45 0012 EF92      		push r14
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 14, -8
  49 0014 FF92      		push r15
  50               	.LCFI7:
  51               		.cfi_def_cfa_offset 10
  52               		.cfi_offset 15, -9
  53 0016 0F93      		push r16
  54               	.LCFI8:
  55               		.cfi_def_cfa_offset 11
  56               		.cfi_offset 16, -10
  57 0018 1F93      		push r17
  58               	.LCFI9:
  59               		.cfi_def_cfa_offset 12
  60               		.cfi_offset 17, -11
  61 001a 2F93      		push r18
  62               	.LCFI10:
  63               		.cfi_def_cfa_offset 13
  64               		.cfi_offset 18, -12
  65 001c 3F93      		push r19
  66               	.LCFI11:
  67               		.cfi_def_cfa_offset 14
  68               		.cfi_offset 19, -13
  69 001e 4F93      		push r20
  70               	.LCFI12:
  71               		.cfi_def_cfa_offset 15
  72               		.cfi_offset 20, -14
  73 0020 5F93      		push r21
  74               	.LCFI13:
  75               		.cfi_def_cfa_offset 16
  76               		.cfi_offset 21, -15
  77 0022 6F93      		push r22
  78               	.LCFI14:
  79               		.cfi_def_cfa_offset 17
  80               		.cfi_offset 22, -16
  81 0024 7F93      		push r23
  82               	.LCFI15:
  83               		.cfi_def_cfa_offset 18
  84               		.cfi_offset 23, -17
  85 0026 8F93      		push r24
  86               	.LCFI16:
  87               		.cfi_def_cfa_offset 19
  88               		.cfi_offset 24, -18
  89 0028 9F93      		push r25
  90               	.LCFI17:
  91               		.cfi_def_cfa_offset 20
  92               		.cfi_offset 25, -19
  93 002a AF93      		push r26
  94               	.LCFI18:
  95               		.cfi_def_cfa_offset 21
  96               		.cfi_offset 26, -20
  97 002c BF93      		push r27
  98               	.LCFI19:
  99               		.cfi_def_cfa_offset 22
 100               		.cfi_offset 27, -21
 101 002e CF93      		push r28
 102               	.LCFI20:
 103               		.cfi_def_cfa_offset 23
 104               		.cfi_offset 28, -22
 105 0030 DF93      		push r29
 106               	.LCFI21:
 107               		.cfi_def_cfa_offset 24
 108               		.cfi_offset 29, -23
 109 0032 EF93      		push r30
 110               	.LCFI22:
 111               		.cfi_def_cfa_offset 25
 112               		.cfi_offset 30, -24
 113 0034 FF93      		push r31
 114               	.LCFI23:
 115               		.cfi_def_cfa_offset 26
 116               		.cfi_offset 31, -25
 117               	/* prologue: Signal */
 118               	/* frame size = 0 */
 119               	/* stack size = 25 */
 120               	.L__stack_usage = 25
  92:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  93:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   OSAL_IRQ_PROLOGUE();
 121               		.loc 1 93 3 view .LVU1
 122               		.loc 1 93 3 view .LVU2
 123 0036 81E0      		ldi r24,lo8(1)
 124 0038 8093 0000 		sts __avr_in_isr,r24
 125               		.loc 1 93 3 view .LVU3
 126               		.loc 1 93 3 view .LVU4
 127               		.loc 1 93 3 view .LVU5
 128               		.loc 1 93 3 view .LVU6
 129               		.loc 1 93 3 view .LVU7
 130               		.loc 1 93 22 view .LVU8
  94:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   uint8_t low = ADCL;
 131               		.loc 1 94 3 view .LVU9
 132               		.loc 1 94 11 is_stmt 0 view .LVU10
 133 003c 8091 7800 		lds r24,120
 134               	.LVL0:
  95:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   uint8_t high = ADCH;
 135               		.loc 1 95 3 is_stmt 1 view .LVU11
 136               		.loc 1 95 11 is_stmt 0 view .LVU12
 137 0040 9091 7900 		lds r25,121
 138               	.LVL1:
  96:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   uint16_t result = (high << 8) | low;
 139               		.loc 1 96 3 is_stmt 1 view .LVU13
  97:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
  98:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCD1.samples[ADCD1.currentBufferPosition] = result;
 140               		.loc 1 98 3 view .LVU14
 141               		.loc 1 98 8 is_stmt 0 view .LVU15
 142 0044 0091 0000 		lds r16,ADCD1+3
 143 0048 1091 0000 		lds r17,ADCD1+3+1
 144               		.loc 1 98 16 view .LVU16
 145 004c E091 0000 		lds r30,ADCD1+19
 146 0050 F091 0000 		lds r31,ADCD1+19+1
 147               		.loc 1 98 46 view .LVU17
 148 0054 EE0F      		lsl r30
 149 0056 FF1F      		rol r31
 150 0058 E00F      		add r30,r16
 151 005a F11F      		adc r31,r17
 152 005c 9183      		std Z+1,r25
 153 005e 8083      		st Z,r24
  99:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCD1.currentBufferPosition++;
 154               		.loc 1 99 3 is_stmt 1 view .LVU18
 155               		.loc 1 99 30 is_stmt 0 view .LVU19
 156 0060 2091 0000 		lds r18,ADCD1+19
 157 0064 3091 0000 		lds r19,ADCD1+19+1
 158 0068 2F5F      		subi r18,-1
 159 006a 3F4F      		sbci r19,-1
 160 006c 3093 0000 		sts ADCD1+19+1,r19
 161 0070 2093 0000 		sts ADCD1+19,r18
 100:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 101:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   size_t bufferSize = ADCD1.depth * ADCD1.grpp->num_channels;
 162               		.loc 1 101 3 is_stmt 1 view .LVU20
 163               		.loc 1 101 28 is_stmt 0 view .LVU21
 164 0074 A090 0000 		lds r10,ADCD1+5
 165 0078 B090 0000 		lds r11,ADCD1+5+1
 166               		.loc 1 101 42 view .LVU22
 167 007c E091 0000 		lds r30,ADCD1+7
 168 0080 F091 0000 		lds r31,ADCD1+7+1
 169 0084 6F01      		movw r12,r30
 170               		.loc 1 101 47 view .LVU23
 171 0086 6181      		ldd r22,Z+1
 172 0088 7281      		ldd r23,Z+2
 173               		.loc 1 101 10 view .LVU24
 174 008a A69E      		mul r10,r22
 175 008c 7001      		movw r14,r0
 176 008e A79E      		mul r10,r23
 177 0090 F00C      		add r15,r0
 178 0092 B69E      		mul r11,r22
 179 0094 F00C      		add r15,r0
 180 0096 1124      		clr r1
 181               	.LVL2:
 102:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   size_t currentChannel = ADCD1.currentBufferPosition % ADCD1.grpp->num_channels;
 182               		.loc 1 102 3 is_stmt 1 view .LVU25
 183 0098 C901      		movw r24,r18
 184               	.LVL3:
 185               		.loc 1 102 3 is_stmt 0 view .LVU26
 186 009a 0E94 0000 		call __udivmodhi4
 187 009e EC01      		movw r28,r24
 188               	.LVL4:
 103:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   size_t currentIteration = ADCD1.currentBufferPosition / ADCD1.grpp->num_channels;
 189               		.loc 1 103 3 is_stmt 1 view .LVU27
 104:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   if (ADCD1.grpp->circular && currentChannel == 0 && currentIteration == ADCD1.depth/2) {
 190               		.loc 1 104 3 view .LVU28
 191               		.loc 1 104 6 is_stmt 0 view .LVU29
 192 00a0 8081      		ld r24,Z
 193 00a2 8823      		tst r24
 194 00a4 01F4      		brne .+2
 195 00a6 00C0      		rjmp .L2
 196               		.loc 1 104 28 discriminator 1 view .LVU30
 197 00a8 2097      		sbiw r28,0
 198 00aa 01F4      		brne .L3
 199               		.loc 1 104 85 discriminator 2 view .LVU31
 200 00ac B694      		lsr r11
 201 00ae A794      		ror r10
 202               		.loc 1 104 51 discriminator 2 view .LVU32
 203 00b0 A616      		cp r10,r22
 204 00b2 B706      		cpc r11,r23
 205 00b4 01F4      		brne .+2
 206 00b6 00C0      		rjmp .L36
 207               	.L3:
 105:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_half_code(&ADCD1);
 208               		.loc 1 105 31 is_stmt 1 view .LVU33
 106:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 107:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   if (ADCD1.currentBufferPosition == bufferSize) {
 209               		.loc 1 108 3 view .LVU34
 210               		.loc 1 108 6 is_stmt 0 view .LVU35
 211 00b8 2E15      		cp r18,r14
 212 00ba 3F05      		cpc r19,r15
 213 00bc 01F4      		brne .+2
 214 00be 00C0      		rjmp .L16
 215               	.LVL5:
 216               	.L17:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 110:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 111:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   else {
 112:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     setAdcChannel(getAdcChannelNumberFromMask(ADCD1.grpp->channelsMask,currentChannel));
 217               		.loc 1 112 5 is_stmt 1 view .LVU36
 218               		.loc 1 112 19 is_stmt 0 view .LVU37
 219 00c0 F601      		movw r30,r12
 220 00c2 9581      		ldd r25,Z+5
 221               	.LVL6:
 222               	.LBB29:
 223               	.LBI29:
  59:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****                                           uint8_t currentChannel) {
 224               		.loc 1 59 15 is_stmt 1 view .LVU38
 225               	.LBE29:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 226               		.loc 1 62 3 view .LVU39
 227               	.LBB32:
 228               	.LBB30:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 229               		.loc 1 62 8 view .LVU40
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 230               		.loc 1 62 3 is_stmt 0 view .LVU41
 231 00c4 9923      		tst r25
 232 00c6 01F0      		breq .L18
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 233               		.loc 1 62 16 view .LVU42
 234 00c8 20E0      		ldi r18,0
 235               	.LVL7:
 236               	.L14:
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 237               		.loc 1 63 5 is_stmt 1 view .LVU43
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 238               		.loc 1 63 8 is_stmt 0 view .LVU44
 239 00ca 90FF      		sbrs r25,0
 240 00cc 00C0      		rjmp .L12
  64:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****         return i;
 241               		.loc 1 64 7 is_stmt 1 view .LVU45
  64:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****         return i;
 242               		.loc 1 64 10 is_stmt 0 view .LVU46
 243 00ce CC23      		tst r28
 244 00d0 01F4      		brne .+2
 245 00d2 00C0      		rjmp .L37
  66:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     }
 246               		.loc 1 66 7 is_stmt 1 view .LVU47
  66:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     }
 247               		.loc 1 66 21 is_stmt 0 view .LVU48
 248 00d4 C150      		subi r28,lo8(-(-1))
 249               	.LVL8:
 250               	.L12:
  68:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 251               		.loc 1 68 5 is_stmt 1 view .LVU49
  68:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 252               		.loc 1 68 10 is_stmt 0 view .LVU50
 253 00d6 9695      		lsr r25
 254               	.LVL9:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 255               		.loc 1 62 34 view .LVU51
 256 00d8 2F5F      		subi r18,lo8(-(1))
 257               	.LVL10:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 258               		.loc 1 62 3 view .LVU52
 259 00da 9111      		cpse r25,__zero_reg__
 260 00dc 00C0      		rjmp .L14
 261               	.LVL11:
 262               	.L18:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 263               		.loc 1 62 3 view .LVU53
 264 00de 27E0      		ldi r18,lo8(7)
 265               	.L11:
 266               	.LVL12:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 267               		.loc 1 62 3 view .LVU54
 268               	.LBE30:
 269               	.LBE32:
 270               	.LBB33:
 271               	.LBI33:
  80:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 272               		.loc 1 80 13 is_stmt 1 view .LVU55
 273               	.LBB34:
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 274               		.loc 1 82 3 view .LVU56
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 275               		.loc 1 82 12 is_stmt 0 view .LVU57
 276 00e0 8091 7C00 		lds r24,124
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 277               		.loc 1 82 18 view .LVU58
 278 00e4 887F      		andi r24,lo8(-8)
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 279               		.loc 1 82 26 view .LVU59
 280 00e6 282B      		or r18,r24
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 281               		.loc 1 82 9 view .LVU60
 282 00e8 2093 7C00 		sts 124,r18
 283               	.LBE34:
 284               	.LBE33:
 113:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADCSRA |= 1 << ADSC;
 285               		.loc 1 113 5 is_stmt 1 view .LVU61
 286               		.loc 1 113 12 is_stmt 0 view .LVU62
 287 00ec 8091 7A00 		lds r24,122
 288 00f0 8064      		ori r24,lo8(64)
 289 00f2 8093 7A00 		sts 122,r24
 290               	.L7:
 114:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 115:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   OSAL_IRQ_EPILOGUE();
 291               		.loc 1 116 3 is_stmt 1 view .LVU63
 292               		.loc 1 116 3 view .LVU64
 293               		.loc 1 116 3 view .LVU65
 294               		.loc 1 116 3 view .LVU66
 295               		.loc 1 116 3 view .LVU67
 296 00f6 1092 0000 		sts __avr_in_isr,__zero_reg__
 297               		.loc 1 116 3 view .LVU68
 298               		.loc 1 116 3 view .LVU69
 299 00fa 0E94 0000 		call chSchIsPreemptionRequired
 300               	.LVL13:
 301 00fe 8111      		cpse r24,__zero_reg__
 302 0100 00C0      		rjmp .L38
 303               	.L1:
 304               	/* epilogue start */
 117:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 305               		.loc 1 117 1 is_stmt 0 view .LVU70
 306 0102 FF91      		pop r31
 307 0104 EF91      		pop r30
 308 0106 DF91      		pop r29
 309 0108 CF91      		pop r28
 310 010a BF91      		pop r27
 311 010c AF91      		pop r26
 312 010e 9F91      		pop r25
 313 0110 8F91      		pop r24
 314 0112 7F91      		pop r23
 315 0114 6F91      		pop r22
 316 0116 5F91      		pop r21
 317 0118 4F91      		pop r20
 318 011a 3F91      		pop r19
 319 011c 2F91      		pop r18
 320 011e 1F91      		pop r17
 321 0120 0F91      		pop r16
 322 0122 FF90      		pop r15
 323 0124 EF90      		pop r14
 324               	.LVL14:
 325               		.loc 1 117 1 view .LVU71
 326 0126 DF90      		pop r13
 327 0128 CF90      		pop r12
 328 012a BF90      		pop r11
 329 012c AF90      		pop r10
 330 012e 0F90      		pop r0
 331 0130 0FBE      		out __SREG__,r0
 332 0132 0F90      		pop r0
 333 0134 1F90      		pop r1
 334 0136 1895      		reti
 335               	.LVL15:
 336               	.L2:
 105:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 337               		.loc 1 105 31 is_stmt 1 view .LVU72
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 338               		.loc 1 108 3 view .LVU73
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 339               		.loc 1 108 6 is_stmt 0 view .LVU74
 340 0138 2E15      		cp r18,r14
 341 013a 3F05      		cpc r19,r15
 342 013c 01F0      		breq .+2
 343 013e 00C0      		rjmp .L17
 344               	.LVL16:
 345               	.L6:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 346               		.loc 1 109 5 is_stmt 1 view .LVU75
 347               	.LBB35:
 348               	.LBI35:
 118:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 119:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
 120:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /* Driver exported functions.                                               */
 121:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /*==========================================================================*/
 122:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 123:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
 124:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Low level ADC driver initialization.
 125:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 126:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @notapi
 127:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
 128:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** void adc_lld_init(void) {
 129:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 130:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   adcObjectInit(&ADCD1);
 131:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 132:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   /* Prescaler 128, only value possible at 20Mhz, interrupt. */
 133:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE);
 134:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 135:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   /* uso aref, only valid for arduino. arduino ha aref collegato. */
 136:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADMUX = (0 << REFS1) | (0 << REFS0);
 137:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 138:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 139:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
 140:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Configures and activates the ADC peripheral.
 141:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 142:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 143:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 144:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @notapi
 145:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
 146:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** void adc_lld_start(ADCDriver *adcp) {
 147:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 148:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   if (adcp->state == ADC_STOP) {
 149:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock activation. */
 150:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADCSRA |= (1 << ADEN);
 151:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 152:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 153:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   if (adcp->config != NULL) {
 154:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADMUX = (adcp->config->analog_reference << REFS0);
 155:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 156:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 157:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 158:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
 159:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Deactivates the ADC peripheral.
 160:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 161:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 162:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 163:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @notapi
 164:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
 165:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** void adc_lld_stop(ADCDriver *adcp) {
 166:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 167:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   if (adcp->state == ADC_READY) {
 168:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock de-activation. */
 169:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADCSRA &= ~(1 << ADEN);
 170:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 171:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 172:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 173:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
 174:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Starts an ADC conversion.
 175:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 176:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 177:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 178:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @notapi
 179:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
 180:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** void adc_lld_start_conversion(ADCDriver *adcp) {
 181:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 182:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   adcp->currentBufferPosition=0;
 183:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 184:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
 185:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCSRA |= 1 << ADSC;
 186:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 187:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 188:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** /**
 189:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @brief   Stops an ongoing conversion.
 190:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 191:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @param[in] adcp      pointer to the @p ADCDriver object
 192:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  *
 193:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  * @notapi
 194:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****  */
 195:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** void adc_lld_stop_conversion(ADCDriver *adcp) {
 349               		.loc 1 195 6 view .LVU76
 350               	.LBB36:
 196:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 197:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCSRA &= ~(1 << ADSC);
 351               		.loc 1 197 3 view .LVU77
 352               		.loc 1 197 10 is_stmt 0 view .LVU78
 353 0140 8091 7A00 		lds r24,122
 354 0144 8F7B      		andi r24,lo8(-65)
 355 0146 8093 7A00 		sts 122,r24
 356               	.LVL17:
 357               		.loc 1 197 10 view .LVU79
 358               	.LBE36:
 359               	.LBE35:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 360               		.loc 1 109 5 is_stmt 1 view .LVU80
 361 014a 0380      		ldd __tmp_reg__,Z+3
 362 014c F481      		ldd r31,Z+4
 363 014e E02D      		mov r30,__tmp_reg__
 364 0150 3097      		sbiw r30,0
 365 0152 01F4      		brne .+2
 366 0154 00C0      		rjmp .L9
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 367               		.loc 1 109 5 discriminator 6 view .LVU81
 368 0156 84E0      		ldi r24,lo8(4)
 369 0158 8093 0000 		sts ADCD1,r24
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 370               		.loc 1 109 5 discriminator 6 view .LVU82
 371 015c 4091 0000 		lds r20,ADCD1+5
 372 0160 5091 0000 		lds r21,ADCD1+5+1
 373 0164 6091 0000 		lds r22,ADCD1+3
 374 0168 7091 0000 		lds r23,ADCD1+3+1
 375 016c 80E0      		ldi r24,lo8(ADCD1)
 376 016e 90E0      		ldi r25,hi8(ADCD1)
 377 0170 0995      		icall
 378               	.LVL18:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 379               		.loc 1 109 5 discriminator 6 view .LVU83
 380 0172 8091 0000 		lds r24,ADCD1
 381 0176 8430      		cpi r24,lo8(4)
 382 0178 01F4      		brne .+2
 383 017a 00C0      		rjmp .L9
 384               	.L10:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 385               		.loc 1 109 5 discriminator 9 view .LVU84
 386               		.file 2 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 387               		.loc 2 533 3 discriminator 9 view .LVU85
 388               		.file 3 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 379:../../../os/rt/include/chsys.h **** }
 380:../../../os/rt/include/chsys.h **** 
 381:../../../os/rt/include/chsys.h **** /**
 382:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 383:../../../os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 384:../../../os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 385:../../../os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 386:../../../os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 387:../../../os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 388:../../../os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 389:../../../os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 390:../../../os/rt/include/chsys.h ****  *
 391:../../../os/rt/include/chsys.h ****  * @special
 392:../../../os/rt/include/chsys.h ****  */
 393:../../../os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 394:../../../os/rt/include/chsys.h **** 
 395:../../../os/rt/include/chsys.h ****   port_lock_from_isr();
 389               		.loc 3 395 3 discriminator 9 view .LVU86
 390               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 448:../../../os/common/ports/AVR/chcore.h **** }
 449:../../../os/common/ports/AVR/chcore.h **** 
 450:../../../os/common/ports/AVR/chcore.h **** /**
 451:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action from an interrupt handler.
 452:../../../os/common/ports/AVR/chcore.h ****  * @details This function is invoked before invoking I-class APIs from
 453:../../../os/common/ports/AVR/chcore.h ****  *          interrupt handlers. The implementation is architecture dependent,
 454:../../../os/common/ports/AVR/chcore.h ****  *          in its simplest form it is void.
 455:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 456:../../../os/common/ports/AVR/chcore.h ****  */
 457:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock_from_isr(void) {
 458:../../../os/common/ports/AVR/chcore.h **** 
 459:../../../os/common/ports/AVR/chcore.h **** }
 391               		.loc 4 459 1 discriminator 9 view .LVU87
 396:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 392               		.loc 3 396 34 discriminator 9 view .LVU88
 397:../../../os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 393               		.loc 3 397 29 discriminator 9 view .LVU89
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 394               		.loc 1 109 5 discriminator 9 view .LVU90
 395               	.LVL19:
 396               	.LBB37:
 397               	.LBI37:
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 398               		.loc 2 773 20 discriminator 9 view .LVU91
 399               	.LBB38:
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 400               		.loc 2 775 3 discriminator 9 view .LVU92
 401 017c 70E0      		ldi r23,0
 402 017e 60E0      		ldi r22,0
 403 0180 80E0      		ldi r24,lo8(ADCD1+9)
 404 0182 90E0      		ldi r25,hi8(ADCD1+9)
 405               	.LVL20:
 406               		.loc 2 775 3 is_stmt 0 discriminator 9 view .LVU93
 407 0184 0E94 0000 		call chThdResumeI
 408               	.LVL21:
 409               		.loc 2 775 3 discriminator 9 view .LVU94
 410               	.LBE38:
 411               	.LBE37:
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 412               		.loc 1 116 3 is_stmt 1 discriminator 9 view .LVU95
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 413               		.loc 1 116 3 discriminator 9 view .LVU96
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 414               		.loc 1 116 3 discriminator 9 view .LVU97
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 415               		.loc 1 116 3 discriminator 9 view .LVU98
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 416               		.loc 1 116 3 discriminator 9 view .LVU99
 417 0188 1092 0000 		sts __avr_in_isr,__zero_reg__
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 418               		.loc 1 116 3 discriminator 9 view .LVU100
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 419               		.loc 1 116 3 discriminator 9 view .LVU101
 420 018c 0E94 0000 		call chSchIsPreemptionRequired
 421               	.LVL22:
 422 0190 8823      		tst r24
 423 0192 01F4      		brne .+2
 424 0194 00C0      		rjmp .L1
 425               	.LVL23:
 426               	.L38:
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 427               		.loc 1 116 3 discriminator 1 view .LVU102
 428 0196 0E94 0000 		call chSchDoReschedule
 429               	.LVL24:
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 430               		.loc 1 116 3 discriminator 1 view .LVU103
 116:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 431               		.loc 1 116 22 discriminator 1 view .LVU104
 117:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 432               		.loc 1 117 1 is_stmt 0 discriminator 1 view .LVU105
 433 019a 00C0      		rjmp .L1
 434               	.LVL25:
 435               	.L37:
 436               	.LBB39:
 437               	.LBB31:
  65:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       currentChannel--;
 438               		.loc 1 65 9 is_stmt 1 view .LVU106
 439 019c 2770      		andi r18,lo8(7)
 440               	.LVL26:
  65:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       currentChannel--;
 441               		.loc 1 65 9 is_stmt 0 view .LVU107
 442 019e 00C0      		rjmp .L11
 443               	.LVL27:
 444               	.L36:
  65:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       currentChannel--;
 445               		.loc 1 65 9 view .LVU108
 446               	.LBE31:
 447               	.LBE39:
 105:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 448               		.loc 1 105 5 is_stmt 1 view .LVU109
 449 01a0 0380      		ldd __tmp_reg__,Z+3
 450 01a2 F481      		ldd r31,Z+4
 451 01a4 E02D      		mov r30,__tmp_reg__
 452 01a6 3097      		sbiw r30,0
 453 01a8 01F4      		brne .+2
 454 01aa 00C0      		rjmp .L4
 105:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 455               		.loc 1 105 5 discriminator 1 view .LVU110
 456 01ac A501      		movw r20,r10
 457 01ae B801      		movw r22,r16
 458 01b0 80E0      		ldi r24,lo8(ADCD1)
 459 01b2 90E0      		ldi r25,hi8(ADCD1)
 460 01b4 0995      		icall
 461               	.LVL28:
 105:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 462               		.loc 1 105 31 discriminator 1 view .LVU111
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 463               		.loc 1 108 3 discriminator 1 view .LVU112
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 464               		.loc 1 108 6 is_stmt 0 discriminator 1 view .LVU113
 465 01b6 8091 0000 		lds r24,ADCD1+19
 466 01ba 9091 0000 		lds r25,ADCD1+19+1
 467 01be C090 0000 		lds r12,ADCD1+7
 468 01c2 D090 0000 		lds r13,ADCD1+7+1
 469 01c6 8E15      		cp r24,r14
 470 01c8 9F05      		cpc r25,r15
 471 01ca 01F0      		breq .+2
 472 01cc 00C0      		rjmp .L17
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 473               		.loc 1 109 5 is_stmt 1 view .LVU114
 474 01ce E091 0000 		lds r30,ADCD1+7
 475 01d2 F091 0000 		lds r31,ADCD1+7+1
 476 01d6 8081      		ld r24,Z
 477 01d8 8823      		tst r24
 478 01da 01F4      		brne .+2
 479 01dc 00C0      		rjmp .L6
 480               	.L16:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 481               		.loc 1 109 5 discriminator 1 view .LVU115
 482 01de 2381      		ldd r18,Z+3
 483 01e0 3481      		ldd r19,Z+4
 484 01e2 2115      		cp r18,__zero_reg__
 485 01e4 3105      		cpc r19,__zero_reg__
 486 01e6 01F4      		brne .+2
 487 01e8 00C0      		rjmp .L7
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 488               		.loc 1 109 5 discriminator 3 view .LVU116
 489 01ea 4091 0000 		lds r20,ADCD1+5
 490 01ee 5091 0000 		lds r21,ADCD1+5+1
 491 01f2 6091 0000 		lds r22,ADCD1+3
 492 01f6 7091 0000 		lds r23,ADCD1+3+1
 493 01fa 4230      		cpi r20,2
 494 01fc 5105      		cpc r21,__zero_reg__
 495 01fe 00F0      		brlo .L8
 496               	.LBB40:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 497               		.loc 1 109 5 discriminator 4 view .LVU117
 498 0200 5695      		lsr r21
 499 0202 4795      		ror r20
 500               	.LVL29:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 501               		.loc 1 109 5 discriminator 4 view .LVU118
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 502               		.loc 1 109 5 discriminator 4 view .LVU119
 503 0204 0180      		ldd __tmp_reg__,Z+1
 504 0206 F281      		ldd r31,Z+2
 505 0208 E02D      		mov r30,__tmp_reg__
 506               	.LVL30:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 507               		.loc 1 109 5 is_stmt 0 discriminator 4 view .LVU120
 508 020a 4E9F      		mul r20,r30
 509 020c C001      		movw r24,r0
 510 020e 4F9F      		mul r20,r31
 511 0210 900D      		add r25,r0
 512 0212 5E9F      		mul r21,r30
 513 0214 900D      		add r25,r0
 514 0216 1124      		clr r1
 515               	.LVL31:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 516               		.loc 1 109 5 discriminator 4 view .LVU121
 517 0218 880F      		lsl r24
 518 021a 991F      		rol r25
 519               	.LVL32:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 520               		.loc 1 109 5 discriminator 4 view .LVU122
 521 021c 680F      		add r22,r24
 522 021e 791F      		adc r23,r25
 523 0220 80E0      		ldi r24,lo8(ADCD1)
 524 0222 90E0      		ldi r25,hi8(ADCD1)
 525 0224 F901      		movw r30,r18
 526 0226 0995      		icall
 527               	.LVL33:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 528               		.loc 1 109 5 discriminator 4 view .LVU123
 529               	.LBE40:
 530 0228 00C0      		rjmp .L7
 531               	.L9:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 532               		.loc 1 109 5 is_stmt 1 discriminator 8 view .LVU124
 533 022a 82E0      		ldi r24,lo8(2)
 534 022c 8093 0000 		sts ADCD1,r24
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 535               		.loc 1 109 5 discriminator 8 view .LVU125
 536 0230 1092 0000 		sts ADCD1+7+1,__zero_reg__
 537 0234 1092 0000 		sts ADCD1+7,__zero_reg__
 538 0238 00C0      		rjmp .L10
 539               	.L8:
 109:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 540               		.loc 1 109 5 discriminator 5 view .LVU126
 541 023a 80E0      		ldi r24,lo8(ADCD1)
 542 023c 90E0      		ldi r25,hi8(ADCD1)
 543 023e F901      		movw r30,r18
 544 0240 0995      		icall
 545               	.LVL34:
 546 0242 00C0      		rjmp .L7
 547               	.LVL35:
 548               	.L4:
 105:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 549               		.loc 1 105 31 view .LVU127
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 550               		.loc 1 108 3 view .LVU128
 108:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     _adc_isr_full_code(&ADCD1);
 551               		.loc 1 108 6 is_stmt 0 view .LVU129
 552 0244 2E15      		cp r18,r14
 553 0246 3F05      		cpc r19,r15
 554 0248 01F0      		breq .+2
 555 024a 00C0      		rjmp .L17
 556 024c 00C0      		rjmp .L7
 557               		.cfi_endproc
 558               	.LFE181:
 560               		.section	.text.adc_lld_init,"ax",@progbits
 561               	.global	adc_lld_init
 563               	adc_lld_init:
 564               	.LFB182:
 128:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 565               		.loc 1 128 25 is_stmt 1 view -0
 566               		.cfi_startproc
 567               	/* prologue: function */
 568               	/* frame size = 0 */
 569               	/* stack size = 0 */
 570               	.L__stack_usage = 0
 130:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 571               		.loc 1 130 3 view .LVU131
 572 0000 80E0      		ldi r24,lo8(ADCD1)
 573 0002 90E0      		ldi r25,hi8(ADCD1)
 574 0004 0E94 0000 		call adcObjectInit
 575               	.LVL36:
 133:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 576               		.loc 1 133 3 view .LVU132
 133:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 577               		.loc 1 133 10 is_stmt 0 view .LVU133
 578 0008 8FE0      		ldi r24,lo8(15)
 579 000a 8093 7A00 		sts 122,r24
 136:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 580               		.loc 1 136 3 is_stmt 1 view .LVU134
 136:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 581               		.loc 1 136 9 is_stmt 0 view .LVU135
 582 000e 1092 7C00 		sts 124,__zero_reg__
 583               	/* epilogue start */
 137:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 584               		.loc 1 137 1 view .LVU136
 585 0012 0895      		ret
 586               		.cfi_endproc
 587               	.LFE182:
 589               		.section	.text.adc_lld_start,"ax",@progbits
 590               	.global	adc_lld_start
 592               	adc_lld_start:
 593               	.LVL37:
 594               	.LFB183:
 146:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 595               		.loc 1 146 37 is_stmt 1 view -0
 596               		.cfi_startproc
 597               	/* prologue: function */
 598               	/* frame size = 0 */
 599               	/* stack size = 0 */
 600               	.L__stack_usage = 0
 148:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock activation. */
 601               		.loc 1 148 3 view .LVU138
 148:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock activation. */
 602               		.loc 1 148 6 is_stmt 0 view .LVU139
 603 0000 DC01      		movw r26,r24
 604 0002 2C91      		ld r18,X
 605 0004 2130      		cpi r18,lo8(1)
 606 0006 01F4      		brne .L41
 150:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 607               		.loc 1 150 5 is_stmt 1 view .LVU140
 150:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 608               		.loc 1 150 12 is_stmt 0 view .LVU141
 609 0008 2091 7A00 		lds r18,122
 610 000c 2068      		ori r18,lo8(-128)
 611 000e 2093 7A00 		sts 122,r18
 612               	.L41:
 153:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADMUX = (adcp->config->analog_reference << REFS0);
 613               		.loc 1 153 3 is_stmt 1 view .LVU142
 153:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADMUX = (adcp->config->analog_reference << REFS0);
 614               		.loc 1 153 11 is_stmt 0 view .LVU143
 615 0012 DC01      		movw r26,r24
 616 0014 1196      		adiw r26,1
 617 0016 ED91      		ld r30,X+
 618 0018 FC91      		ld r31,X
 153:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     ADMUX = (adcp->config->analog_reference << REFS0);
 619               		.loc 1 153 6 view .LVU144
 620 001a 3097      		sbiw r30,0
 621 001c 01F0      		breq .L40
 154:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 622               		.loc 1 154 5 is_stmt 1 view .LVU145
 154:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 623               		.loc 1 154 45 is_stmt 0 view .LVU146
 624 001e 8081      		ld r24,Z
 625               	.LVL38:
 154:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 626               		.loc 1 154 45 view .LVU147
 627 0020 8295      		swap r24
 628 0022 880F      		lsl r24
 629 0024 880F      		lsl r24
 630 0026 807C      		andi r24,lo8(-64)
 154:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 631               		.loc 1 154 11 view .LVU148
 632 0028 8093 7C00 		sts 124,r24
 633               	.L40:
 634               	/* epilogue start */
 156:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 635               		.loc 1 156 1 view .LVU149
 636 002c 0895      		ret
 637               		.cfi_endproc
 638               	.LFE183:
 640               		.section	.text.adc_lld_stop,"ax",@progbits
 641               	.global	adc_lld_stop
 643               	adc_lld_stop:
 644               	.LVL39:
 645               	.LFB184:
 165:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 646               		.loc 1 165 36 is_stmt 1 view -0
 647               		.cfi_startproc
 648               	/* prologue: function */
 649               	/* frame size = 0 */
 650               	/* stack size = 0 */
 651               	.L__stack_usage = 0
 167:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock de-activation. */
 652               		.loc 1 167 3 view .LVU151
 167:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock de-activation. */
 653               		.loc 1 167 6 is_stmt 0 view .LVU152
 654 0000 FC01      		movw r30,r24
 655 0002 8081      		ld r24,Z
 656               	.LVL40:
 167:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     /* Clock de-activation. */
 657               		.loc 1 167 6 view .LVU153
 658 0004 8230      		cpi r24,lo8(2)
 659 0006 01F0      		breq .L48
 660               	/* epilogue start */
 171:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 661               		.loc 1 171 1 view .LVU154
 662 0008 0895      		ret
 663               	.L48:
 169:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 664               		.loc 1 169 5 is_stmt 1 view .LVU155
 169:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 665               		.loc 1 169 12 is_stmt 0 view .LVU156
 666 000a 8091 7A00 		lds r24,122
 667 000e 8F77      		andi r24,lo8(127)
 668 0010 8093 7A00 		sts 122,r24
 669               	/* epilogue start */
 171:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 670               		.loc 1 171 1 view .LVU157
 671 0014 0895      		ret
 672               		.cfi_endproc
 673               	.LFE184:
 675               		.section	.text.adc_lld_start_conversion,"ax",@progbits
 676               	.global	adc_lld_start_conversion
 678               	adc_lld_start_conversion:
 679               	.LVL41:
 680               	.LFB185:
 180:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 681               		.loc 1 180 48 is_stmt 1 view -0
 682               		.cfi_startproc
 683               	/* prologue: function */
 684               	/* frame size = 0 */
 685               	/* stack size = 0 */
 686               	.L__stack_usage = 0
 182:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 687               		.loc 1 182 3 view .LVU159
 182:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 688               		.loc 1 182 30 is_stmt 0 view .LVU160
 689 0000 DC01      		movw r26,r24
 690 0002 5496      		adiw r26,19+1
 691 0004 1C92      		st X,__zero_reg__
 692 0006 1E92      		st -X,__zero_reg__
 693 0008 5397      		sbiw r26,19
 184:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCSRA |= 1 << ADSC;
 694               		.loc 1 184 3 is_stmt 1 view .LVU161
 184:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   ADCSRA |= 1 << ADSC;
 695               		.loc 1 184 17 is_stmt 0 view .LVU162
 696 000a 1796      		adiw r26,7
 697 000c ED91      		ld r30,X+
 698 000e FC91      		ld r31,X
 699 0010 8581      		ldd r24,Z+5
 700               	.LVL42:
 701               	.LBB41:
 702               	.LBI41:
  59:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****                                           uint8_t currentChannel) {
 703               		.loc 1 59 15 is_stmt 1 view .LVU163
 704               	.LBE41:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 705               		.loc 1 62 3 view .LVU164
 706               	.LBB44:
 707               	.LBB42:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 708               		.loc 1 62 8 view .LVU165
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 709               		.loc 1 62 3 is_stmt 0 view .LVU166
 710 0012 8823      		tst r24
 711 0014 01F0      		breq .L54
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 712               		.loc 1 63 5 is_stmt 1 view .LVU167
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 713               		.loc 1 63 8 is_stmt 0 view .LVU168
 714 0016 90E0      		ldi r25,0
 715 0018 80FD      		sbrc r24,0
 716 001a 00C0      		rjmp .L50
 717               	.LVL43:
 718               	.L52:
  68:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 719               		.loc 1 68 5 is_stmt 1 view .LVU169
  68:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****   }
 720               		.loc 1 68 10 is_stmt 0 view .LVU170
 721 001c 8695      		lsr r24
 722               	.LVL44:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 723               		.loc 1 62 34 view .LVU171
 724 001e 9F5F      		subi r25,lo8(-(1))
 725               	.LVL45:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 726               		.loc 1 62 3 view .LVU172
 727 0020 8823      		tst r24
 728 0022 01F0      		breq .L54
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 729               		.loc 1 63 5 is_stmt 1 view .LVU173
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 730               		.loc 1 63 8 is_stmt 0 view .LVU174
 731 0024 80FF      		sbrs r24,0
 732 0026 00C0      		rjmp .L52
 733 0028 9770      		andi r25,lo8(7)
 734               	.LVL46:
 735               	.L50:
  63:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****       if (!currentChannel)
 736               		.loc 1 63 8 view .LVU175
 737               	.LBE42:
 738               	.LBE44:
 739               	.LBB45:
 740               	.LBI45:
  80:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 741               		.loc 1 80 13 is_stmt 1 view .LVU176
 742               	.LBB46:
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 743               		.loc 1 82 3 view .LVU177
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 744               		.loc 1 82 12 is_stmt 0 view .LVU178
 745 002a 8091 7C00 		lds r24,124
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 746               		.loc 1 82 18 view .LVU179
 747 002e 887F      		andi r24,lo8(-8)
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 748               		.loc 1 82 26 view .LVU180
 749 0030 892B      		or r24,r25
  82:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 750               		.loc 1 82 9 view .LVU181
 751 0032 8093 7C00 		sts 124,r24
 752               	.LBE46:
 753               	.LBE45:
 185:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 754               		.loc 1 185 3 is_stmt 1 view .LVU182
 185:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 755               		.loc 1 185 10 is_stmt 0 view .LVU183
 756 0036 8091 7A00 		lds r24,122
 757 003a 8064      		ori r24,lo8(64)
 758 003c 8093 7A00 		sts 122,r24
 759               	/* epilogue start */
 186:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 760               		.loc 1 186 1 view .LVU184
 761 0040 0895      		ret
 762               	.LVL47:
 763               	.L54:
 764               	.LBB47:
 765               	.LBB43:
  62:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c ****     if (mask & 0x01) {
 766               		.loc 1 62 3 view .LVU185
 767 0042 97E0      		ldi r25,lo8(7)
 768 0044 00C0      		rjmp .L50
 769               	.LBE43:
 770               	.LBE47:
 771               		.cfi_endproc
 772               	.LFE185:
 774               		.section	.text.adc_lld_stop_conversion,"ax",@progbits
 775               	.global	adc_lld_stop_conversion
 777               	adc_lld_stop_conversion:
 778               	.LVL48:
 779               	.LFB186:
 195:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** 
 780               		.loc 1 195 47 is_stmt 1 view -0
 781               		.cfi_startproc
 782               	/* prologue: function */
 783               	/* frame size = 0 */
 784               	/* stack size = 0 */
 785               	.L__stack_usage = 0
 786               		.loc 1 197 3 view .LVU187
 787               		.loc 1 197 10 is_stmt 0 view .LVU188
 788 0000 EAE7      		ldi r30,lo8(122)
 789 0002 F0E0      		ldi r31,0
 790 0004 8081      		ld r24,Z
 791               	.LVL49:
 792               		.loc 1 197 10 view .LVU189
 793 0006 8F7B      		andi r24,lo8(-65)
 794 0008 8083      		st Z,r24
 795               	/* epilogue start */
 198:../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.c **** }
 796               		.loc 1 198 1 view .LVU190
 797 000a 0895      		ret
 798               		.cfi_endproc
 799               	.LFE186:
 801               		.comm	ADCD1,21,1
 802               		.text
 803               	.Letext0:
 804               		.file 5 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 805               		.file 6 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 806               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 807               		.file 8 "../../../os/rt/include/chsystypes.h"
 808               		.file 9 "../../../os/rt/include/chschd.h"
 809               		.file 10 "../../../os/rt/include/chtime.h"
 810               		.file 11 "../../../os/rt/include/chsem.h"
 811               		.file 12 "../../../os/rt/include/chmtx.h"
 812               		.file 13 "../../../os/rt/include/chregistry.h"
 813               		.file 14 "../../../os/rt/include/chevents.h"
 814               		.file 15 "../../../os/common/oslib/include/chmemcore.h"
 815               		.file 16 "../../../os/hal/include/hal_queues.h"
 816               		.file 17 "../../../os/hal/include/hal_pal.h"
 817               		.file 18 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 818               		.file 19 "../../../os/hal/include/hal_adc.h"
 819               		.file 20 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.h"
 820               		.file 21 "../../../os/hal/include/hal_serial.h"
 821               		.file 22 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 822               		.file 23 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_adc_lld.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:13     .text.__vector_21:0000000000000000 __vector_21
                            *COM*:0000000000000015 ADCD1
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:563    .text.adc_lld_init:0000000000000000 adc_lld_init
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:592    .text.adc_lld_start:0000000000000000 adc_lld_start
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:643    .text.adc_lld_stop:0000000000000000 adc_lld_stop
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:678    .text.adc_lld_start_conversion:0000000000000000 adc_lld_start_conversion
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccailXzc.s:777    .text.adc_lld_stop_conversion:0000000000000000 adc_lld_stop_conversion

UNDEFINED SYMBOLS
__avr_in_isr
__udivmodhi4
chSchIsPreemptionRequired
chThdResumeI
chSchDoReschedule
adcObjectInit
__do_clear_bss
