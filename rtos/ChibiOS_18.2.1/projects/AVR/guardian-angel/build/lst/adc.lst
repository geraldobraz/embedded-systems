   1               		.file	"adc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.adc_cb,"ax",@progbits
  11               	.global	adc_cb
  13               	adc_cb:
  14               	.LFB174:
  15               		.file 1 "adc.c"
   1:adc.c         **** /*
   2:adc.c         ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:adc.c         **** 
   4:adc.c         ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:adc.c         ****     you may not use this file except in compliance with the License.
   6:adc.c         ****     You may obtain a copy of the License at
   7:adc.c         **** 
   8:adc.c         ****         http://www.apache.org/licenses/LICENSE-2.0
   9:adc.c         **** 
  10:adc.c         ****     Unless required by applicable law or agreed to in writing, software
  11:adc.c         ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:adc.c         ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:adc.c         ****     See the License for the specific language governing permissions and
  14:adc.c         ****     limitations under the License.
  15:adc.c         **** */
  16:adc.c         **** 
  17:adc.c         **** 
  18:adc.c         **** // My Code
  19:adc.c         **** #include "ch.h"
  20:adc.c         **** #include "hal.h"
  21:adc.c         **** #include "chprintf.h" 
  22:adc.c         **** 
  23:adc.c         **** /*
  24:adc.c         ****  * LED blinker thread, times are in milliseconds.
  25:adc.c         ****  */
  26:adc.c         **** static THD_WORKING_AREA(waThread1, 32);
  27:adc.c         **** static THD_FUNCTION(Thread1, arg) {
  28:adc.c         **** 
  29:adc.c         ****   (void)arg;
  30:adc.c         ****   chRegSetThreadName("Blinker");
  31:adc.c         ****   while (true) {
  32:adc.c         ****     palTogglePad(IOPORT2, PORTB_LED1);
  33:adc.c         ****     chThdSleepMilliseconds(100);
  34:adc.c         ****   }
  35:adc.c         **** }
  36:adc.c         **** 
  37:adc.c         **** /*
  38:adc.c         ****  * Application entry point.
  39:adc.c         ****  */
  40:adc.c         **** 
  41:adc.c         **** volatile uint8_t flag;
  42:adc.c         **** 
  43:adc.c         **** void adc_cb(ADCDriver *adcp, adcsample_t *buffer, size_t n){
  16               		.loc 1 43 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  44:adc.c         ****   flag = 1;
  23               		.loc 1 44 0
  24 0000 81E0      		ldi r24,lo8(1)
  25               	.LVL1:
  26 0002 8093 0000 		sts flag,r24
  27 0006 0895      		ret
  28               		.cfi_endproc
  29               	.LFE174:
  31               		.section	.rodata.str1.1,"aMS",@progbits,1
  32               	.LC1:
  33 0000 426C 696E 		.string	"Blinker"
  33      6B65 7200 
  34               		.section	.text.Thread1,"ax",@progbits
  36               	Thread1:
  37               	.LFB173:
  27:adc.c         **** 
  38               		.loc 1 27 0
  39               		.cfi_startproc
  40               	.LVL2:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45               	.LBB4:
  46               	.LBB5:
  47               		.file 2 "../../../os/rt/include/chregistry.h"
   1:../../../os/rt/include/chregistry.h **** /*
   2:../../../os/rt/include/chregistry.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chregistry.h **** 
   4:../../../os/rt/include/chregistry.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chregistry.h **** 
   6:../../../os/rt/include/chregistry.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chregistry.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chregistry.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chregistry.h ****     (at your option) any later version.
  10:../../../os/rt/include/chregistry.h **** 
  11:../../../os/rt/include/chregistry.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chregistry.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chregistry.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chregistry.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chregistry.h **** 
  16:../../../os/rt/include/chregistry.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chregistry.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chregistry.h **** */
  19:../../../os/rt/include/chregistry.h **** 
  20:../../../os/rt/include/chregistry.h **** /**
  21:../../../os/rt/include/chregistry.h ****  * @file    chregistry.h
  22:../../../os/rt/include/chregistry.h ****  * @brief   Threads registry macros and structures.
  23:../../../os/rt/include/chregistry.h ****  *
  24:../../../os/rt/include/chregistry.h ****  * @addtogroup registry
  25:../../../os/rt/include/chregistry.h ****  * @{
  26:../../../os/rt/include/chregistry.h ****  */
  27:../../../os/rt/include/chregistry.h **** 
  28:../../../os/rt/include/chregistry.h **** #ifndef CHREGISTRY_H
  29:../../../os/rt/include/chregistry.h **** #define CHREGISTRY_H
  30:../../../os/rt/include/chregistry.h **** 
  31:../../../os/rt/include/chregistry.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chregistry.h **** 
  33:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  34:../../../os/rt/include/chregistry.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  36:../../../os/rt/include/chregistry.h **** 
  37:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  38:../../../os/rt/include/chregistry.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  40:../../../os/rt/include/chregistry.h **** 
  41:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  42:../../../os/rt/include/chregistry.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  44:../../../os/rt/include/chregistry.h **** 
  45:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  46:../../../os/rt/include/chregistry.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  48:../../../os/rt/include/chregistry.h **** 
  49:../../../os/rt/include/chregistry.h **** /**
  50:../../../os/rt/include/chregistry.h ****  * @brief   ChibiOS/RT memory signature record.
  51:../../../os/rt/include/chregistry.h ****  */
  52:../../../os/rt/include/chregistry.h **** typedef struct {
  53:../../../os/rt/include/chregistry.h ****   char      identifier[4];          /**< @brief Always set to "main".       */
  54:../../../os/rt/include/chregistry.h ****   uint8_t   zero;                   /**< @brief Must be zero.               */
  55:../../../os/rt/include/chregistry.h ****   uint8_t   size;                   /**< @brief Size of this structure.     */
  56:../../../os/rt/include/chregistry.h ****   uint16_t  version;                /**< @brief Encoded ChibiOS/RT version. */
  57:../../../os/rt/include/chregistry.h ****   uint8_t   ptrsize;                /**< @brief Size of a pointer.          */
  58:../../../os/rt/include/chregistry.h ****   uint8_t   timesize;               /**< @brief Size of a @p systime_t.     */
  59:../../../os/rt/include/chregistry.h ****   uint8_t   threadsize;             /**< @brief Size of a @p thread_t.      */
  60:../../../os/rt/include/chregistry.h ****   uint8_t   off_prio;               /**< @brief Offset of @p prio field.    */
  61:../../../os/rt/include/chregistry.h ****   uint8_t   off_ctx;                /**< @brief Offset of @p ctx field.     */
  62:../../../os/rt/include/chregistry.h ****   uint8_t   off_newer;              /**< @brief Offset of @p newer field.   */
  63:../../../os/rt/include/chregistry.h ****   uint8_t   off_older;              /**< @brief Offset of @p older field.   */
  64:../../../os/rt/include/chregistry.h ****   uint8_t   off_name;               /**< @brief Offset of @p name field.    */
  65:../../../os/rt/include/chregistry.h ****   uint8_t   off_stklimit;           /**< @brief Offset of @p stklimit field.*/
  66:../../../os/rt/include/chregistry.h ****   uint8_t   off_state;              /**< @brief Offset of @p state field.   */
  67:../../../os/rt/include/chregistry.h ****   uint8_t   off_flags;              /**< @brief Offset of @p flags field.   */
  68:../../../os/rt/include/chregistry.h ****   uint8_t   off_refs;               /**< @brief Offset of @p refs field.    */
  69:../../../os/rt/include/chregistry.h ****   uint8_t   off_preempt;            /**< @brief Offset of @p preempt field. */
  70:../../../os/rt/include/chregistry.h ****   uint8_t   off_time;               /**< @brief Offset of @p time field.    */
  71:../../../os/rt/include/chregistry.h **** } chdebug_t;
  72:../../../os/rt/include/chregistry.h **** 
  73:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  74:../../../os/rt/include/chregistry.h **** /* Module macros.                                                            */
  75:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  76:../../../os/rt/include/chregistry.h **** 
  77:../../../os/rt/include/chregistry.h **** /**
  78:../../../os/rt/include/chregistry.h ****  * @brief   Removes a thread from the registry list.
  79:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  80:../../../os/rt/include/chregistry.h ****  *
  81:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to remove from the registry
  82:../../../os/rt/include/chregistry.h ****  */
  83:../../../os/rt/include/chregistry.h **** #define REG_REMOVE(tp) {                                                    \
  84:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp)->newer;                                         \
  85:../../../os/rt/include/chregistry.h ****   (tp)->newer->older = (tp)->older;                                         \
  86:../../../os/rt/include/chregistry.h **** }
  87:../../../os/rt/include/chregistry.h **** 
  88:../../../os/rt/include/chregistry.h **** /**
  89:../../../os/rt/include/chregistry.h ****  * @brief   Adds a thread to the registry list.
  90:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  91:../../../os/rt/include/chregistry.h ****  *
  92:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to add to the registry
  93:../../../os/rt/include/chregistry.h ****  */
  94:../../../os/rt/include/chregistry.h **** #define REG_INSERT(tp) {                                                    \
  95:../../../os/rt/include/chregistry.h ****   (tp)->newer = (thread_t *)&ch.rlist;                                      \
  96:../../../os/rt/include/chregistry.h ****   (tp)->older = ch.rlist.older;                                           \
  97:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp);                                                \
  98:../../../os/rt/include/chregistry.h ****   ch.rlist.older = (tp);                                                  \
  99:../../../os/rt/include/chregistry.h **** }
 100:../../../os/rt/include/chregistry.h **** 
 101:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 102:../../../os/rt/include/chregistry.h **** /* External declarations.                                                    */
 103:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 104:../../../os/rt/include/chregistry.h **** 
 105:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 106:../../../os/rt/include/chregistry.h **** extern "C" {
 107:../../../os/rt/include/chregistry.h **** #endif
 108:../../../os/rt/include/chregistry.h ****   extern ROMCONST chdebug_t ch_debug;
 109:../../../os/rt/include/chregistry.h ****   thread_t *chRegFirstThread(void);
 110:../../../os/rt/include/chregistry.h ****   thread_t *chRegNextThread(thread_t *tp);
 111:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByName(const char *name);
 112:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByPointer(thread_t *tp);
 113:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa);
 114:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 115:../../../os/rt/include/chregistry.h **** }
 116:../../../os/rt/include/chregistry.h **** #endif
 117:../../../os/rt/include/chregistry.h **** 
 118:../../../os/rt/include/chregistry.h **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 119:../../../os/rt/include/chregistry.h **** 
 120:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 121:../../../os/rt/include/chregistry.h **** /* Module inline functions.                                                  */
 122:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 123:../../../os/rt/include/chregistry.h **** 
 124:../../../os/rt/include/chregistry.h **** /**
 125:../../../os/rt/include/chregistry.h ****  * @brief   Sets the current thread name.
 126:../../../os/rt/include/chregistry.h ****  * @pre     This function only stores the pointer to the name if the option
 127:../../../os/rt/include/chregistry.h ****  *          @p CH_CFG_USE_REGISTRY is enabled else no action is performed.
 128:../../../os/rt/include/chregistry.h ****  *
 129:../../../os/rt/include/chregistry.h ****  * @param[in] name      thread name as a zero terminated string
 130:../../../os/rt/include/chregistry.h ****  *
 131:../../../os/rt/include/chregistry.h ****  * @api
 132:../../../os/rt/include/chregistry.h ****  */
 133:../../../os/rt/include/chregistry.h **** static inline void chRegSetThreadName(const char *name) {
 134:../../../os/rt/include/chregistry.h **** 
 135:../../../os/rt/include/chregistry.h **** #if CH_CFG_USE_REGISTRY == TRUE
 136:../../../os/rt/include/chregistry.h ****   ch.rlist.current->name = name;
  48               		.loc 2 136 0
  49 0000 E091 0000 		lds r30,ch+11
  50 0004 F091 0000 		lds r31,ch+11+1
  51 0008 80E0      		ldi r24,lo8(.LC1)
  52 000a 90E0      		ldi r25,hi8(.LC1)
  53               	.LVL3:
  54 000c 9487      		std Z+12,r25
  55 000e 8387      		std Z+11,r24
  56               	.LBE5:
  57               	.LBE4:
  32:adc.c         ****     chThdSleepMilliseconds(100);
  58               		.loc 1 32 0
  59 0010 C0E2      		ldi r28,lo8(32)
  60               	.L3:
  32:adc.c         ****     chThdSleepMilliseconds(100);
  61               		.loc 1 32 0 is_stmt 0 discriminator 1
  62 0012 85B1      		in r24,0x5
  63 0014 8C27      		eor r24,r28
  64 0016 85B9      		out 0x5,r24
  33:adc.c         ****   }
  65               		.loc 1 33 0 is_stmt 1 discriminator 1
  66 0018 8BE1      		ldi r24,lo8(27)
  67 001a 96E0      		ldi r25,lo8(6)
  68 001c 0E94 0000 		call chThdSleep
  69               	.LVL4:
  34:adc.c         **** }
  70               		.loc 1 34 0 discriminator 1
  71 0020 00C0      		rjmp .L3
  72               		.cfi_endproc
  73               	.LFE173:
  75               	.global	__floatunsisf
  76               	.global	__mulsf3
  77               		.section	.rodata.str1.1
  78               	.LC2:
  79 0008 252E 3266 		.string	"%.2f V\n\r"
  79      2056 0A0D 
  79      00
  80               		.section	.rodata
  81               	.LC0:
  82 0000 00        		.byte	0
  83 0001 0100      		.word	1
  84 0003 0000      		.word	gs(adc_cb)
  85 0005 07        		.byte	7
  86               		.section	.text.startup.main,"ax",@progbits
  87               	.global	main
  89               	main:
  90               	.LFB175:
  45:adc.c         **** }
  46:adc.c         **** 
  47:adc.c         **** 
  48:adc.c         **** #define NBR_CHANNELS 1
  49:adc.c         **** #define DEPTH 5
  50:adc.c         **** #define ADC_CONVERTER_FACTOR 0.00477922077922078 // ((2,5*1.0552519480519482)/552)
  51:adc.c         **** int main(void) {
  91               		.loc 1 51 0
  92               		.cfi_startproc
  93 0000 CF93      		push r28
  94               	.LCFI0:
  95               		.cfi_def_cfa_offset 3
  96               		.cfi_offset 28, -2
  97 0002 DF93      		push r29
  98               	.LCFI1:
  99               		.cfi_def_cfa_offset 4
 100               		.cfi_offset 29, -3
 101 0004 CDB7      		in r28,__SP_L__
 102 0006 DEB7      		in r29,__SP_H__
 103               	.LCFI2:
 104               		.cfi_def_cfa_register 28
 105 0008 6197      		sbiw r28,17
 106               	.LCFI3:
 107               		.cfi_def_cfa_offset 21
 108 000a 0FB6      		in __tmp_reg__,__SREG__
 109 000c F894      		cli
 110 000e DEBF      		out __SP_H__,r29
 111 0010 0FBE      		out __SREG__,__tmp_reg__
 112 0012 CDBF      		out __SP_L__,r28
 113               	/* prologue: function */
 114               	/* frame size = 17 */
 115               	/* stack size = 19 */
 116               	.L__stack_usage = 19
  52:adc.c         **** 
  53:adc.c         ****   /*
  54:adc.c         ****    * System initializations.
  55:adc.c         ****    * - HAL initialization, this also initializes the configured device drivers
  56:adc.c         ****    *   and performs the board-specific initializations.
  57:adc.c         ****    * - Kernel initialization, the main() function becomes a thread and the
  58:adc.c         ****    *   RTOS is active.
  59:adc.c         ****    */
  60:adc.c         ****   halInit();
 117               		.loc 1 60 0
 118 0014 0E94 0000 		call halInit
 119               	.LVL5:
  61:adc.c         ****   chSysInit();
 120               		.loc 1 61 0
 121 0018 0E94 0000 		call chSysInit
 122               	.LVL6:
  62:adc.c         **** 
  63:adc.c         ****   /*
  64:adc.c         ****    * Activates the serial driver 1 using the driver default configuration.
  65:adc.c         ****    */
  66:adc.c         ****   sdStart(&SD1, NULL);
 123               		.loc 1 66 0
 124 001c 60E0      		ldi r22,0
 125 001e 70E0      		ldi r23,0
 126 0020 80E0      		ldi r24,lo8(SD1)
 127 0022 90E0      		ldi r25,hi8(SD1)
 128 0024 0E94 0000 		call sdStart
 129               	.LVL7:
  67:adc.c         **** 
  68:adc.c         ****   /*
  69:adc.c         ****    * 
  70:adc.c         ****    */
  71:adc.c         ****   ADCConfig cfg = {ANALOG_REFERENCE_AVCC};
 130               		.loc 1 71 0
 131 0028 81E0      		ldi r24,lo8(1)
 132 002a 898B      		std Y+17,r24
  72:adc.c         ****   ADCConversionGroup group = {0, NBR_CHANNELS, adc_cb, 0x7};
 133               		.loc 1 72 0
 134 002c 86E0      		ldi r24,lo8(6)
 135 002e E0E0      		ldi r30,lo8(.LC0)
 136 0030 F0E0      		ldi r31,hi8(.LC0)
 137 0032 DE01      		movw r26,r28
 138 0034 1B96      		adiw r26,11
 139               		0:
 140 0036 0190      		ld r0,Z+
 141 0038 0D92      		st X+,r0
 142 003a 8A95      		dec r24
 143 003c 01F4      		brne 0b
  73:adc.c         ****   adcsample_t buffer[DEPTH*NBR_CHANNELS];
  74:adc.c         **** 
  75:adc.c         ****   adcStart(&ADCD1, &cfg);
 144               		.loc 1 75 0
 145 003e BE01      		movw r22,r28
 146 0040 6F5E      		subi r22,-17
 147 0042 7F4F      		sbci r23,-1
 148 0044 80E0      		ldi r24,lo8(ADCD1)
 149 0046 90E0      		ldi r25,hi8(ADCD1)
 150 0048 0E94 0000 		call adcStart
 151               	.LVL8:
  76:adc.c         **** 
  77:adc.c         ****   /*
  78:adc.c         ****    * Starts the LED blinker thread.
  79:adc.c         ****    */
  80:adc.c         ****   // LEDs Thread
  81:adc.c         ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 152               		.loc 1 81 0
 153 004c 00E0      		ldi r16,0
 154 004e 10E0      		ldi r17,0
 155 0050 20E0      		ldi r18,lo8(gs(Thread1))
 156 0052 30E0      		ldi r19,hi8(gs(Thread1))
 157 0054 40E8      		ldi r20,lo8(-128)
 158 0056 61E8      		ldi r22,lo8(-127)
 159 0058 70E0      		ldi r23,0
 160 005a 80E0      		ldi r24,lo8(waThread1)
 161 005c 90E0      		ldi r25,hi8(waThread1)
 162 005e 0E94 0000 		call chThdCreateStatic
 163               	.LVL9:
 164 0062 CE01      		movw r24,r28
 165 0064 0B96      		adiw r24,11
 166 0066 5C01      		movw r10,r24
 167               	.LBB6:
  82:adc.c         **** 
  83:adc.c         ****   while(TRUE) {
  84:adc.c         ****     adcStartConversion(&ADCD1, &group, buffer, DEPTH);
  85:adc.c         ****     while(!flag){
  86:adc.c         **** 
  87:adc.c         ****     }
  88:adc.c         ****       flag =0;
  89:adc.c         ****       // printf("%d", buffer[0]);
  90:adc.c         ****       
  91:adc.c         ****       for(int i = 0; i < DEPTH; i++){
  92:adc.c         ****         // if(buffer[i] <= 20){
  93:adc.c         ****         //   float x = 2.5;
  94:adc.c         ****         //   chprintf((BaseSequentialStream *)&SD1, "%.2f\n\r",x);
  95:adc.c         **** 
  96:adc.c         ****         // }else if(buffer[i] >= 550){
  97:adc.c         ****         //   chprintf((BaseSequentialStream *)&SD1, "2,5v\n\r");
  98:adc.c         ****         // }
  99:adc.c         **** 
 100:adc.c         ****         chprintf((BaseSequentialStream *)&SD1, "%.2f V\n\r",0.1911688311688311*buffer[i]);
 168               		.loc 1 100 0
 169 0068 80E0      		ldi r24,lo8(.LC2)
 170 006a C82E      		mov r12,r24
 171 006c 80E0      		ldi r24,hi8(.LC2)
 172 006e D82E      		mov r13,r24
 173 0070 90E0      		ldi r25,lo8(SD1)
 174 0072 E92E      		mov r14,r25
 175 0074 90E0      		ldi r25,hi8(SD1)
 176 0076 F92E      		mov r15,r25
 177               	.L8:
 178               	.LBE6:
  84:adc.c         ****     while(!flag){
 179               		.loc 1 84 0
 180 0078 25E0      		ldi r18,lo8(5)
 181 007a 30E0      		ldi r19,0
 182 007c AE01      		movw r20,r28
 183 007e 4F5F      		subi r20,-1
 184 0080 5F4F      		sbci r21,-1
 185 0082 B501      		movw r22,r10
 186 0084 80E0      		ldi r24,lo8(ADCD1)
 187 0086 90E0      		ldi r25,hi8(ADCD1)
 188 0088 0E94 0000 		call adcStartConversion
 189               	.LVL10:
 190               	.L6:
  85:adc.c         **** 
 191               		.loc 1 85 0 discriminator 1
 192 008c 8091 0000 		lds r24,flag
 193 0090 8823      		tst r24
 194 0092 01F0      		breq .L6
  88:adc.c         ****       // printf("%d", buffer[0]);
 195               		.loc 1 88 0
 196 0094 1092 0000 		sts flag,__zero_reg__
 197               	.LVL11:
 198 0098 8E01      		movw r16,r28
 199 009a 0F5F      		subi r16,-1
 200 009c 1F4F      		sbci r17,-1
 201               	.LVL12:
 202               	.L7:
 203               	.LBB7:
 204               		.loc 1 100 0 discriminator 3
 205 009e F801      		movw r30,r16
 206 00a0 6191      		ld r22,Z+
 207 00a2 7191      		ld r23,Z+
 208 00a4 8F01      		movw r16,r30
 209 00a6 80E0      		ldi r24,0
 210 00a8 90E0      		ldi r25,0
 211 00aa 0E94 0000 		call __floatunsisf
 212               	.LVL13:
 213 00ae 23EC      		ldi r18,lo8(-61)
 214 00b0 31EC      		ldi r19,lo8(-63)
 215 00b2 43E4      		ldi r20,lo8(67)
 216 00b4 5EE3      		ldi r21,lo8(62)
 217 00b6 0E94 0000 		call __mulsf3
 218               	.LVL14:
 219 00ba 9F93      		push r25
 220 00bc 8F93      		push r24
 221 00be 7F93      		push r23
 222 00c0 6F93      		push r22
 223 00c2 DF92      		push r13
 224 00c4 CF92      		push r12
 225 00c6 FF92      		push r15
 226 00c8 EF92      		push r14
 227 00ca 0E94 0000 		call chprintf
 228               	.LVL15:
 101:adc.c         ****         // chprintf((BaseSequentialStream *)&SD1, ">> %d\n\r",buffer[i]);
 102:adc.c         ****         chThdSleepMilliseconds(500);
 229               		.loc 1 102 0 discriminator 3
 230 00ce 84E8      		ldi r24,lo8(-124)
 231 00d0 9EE1      		ldi r25,lo8(30)
 232 00d2 0E94 0000 		call chThdSleep
 233               	.LVL16:
  91:adc.c         ****         // if(buffer[i] <= 20){
 234               		.loc 1 91 0 discriminator 3
 235 00d6 0FB6      		in __tmp_reg__,__SREG__
 236 00d8 F894      		cli
 237 00da DEBF      		out __SP_H__,r29
 238 00dc 0FBE      		out __SREG__,__tmp_reg__
 239 00de CDBF      		out __SP_L__,r28
 240 00e0 0A15      		cp r16,r10
 241 00e2 1B05      		cpc r17,r11
 242 00e4 01F4      		brne .L7
 243 00e6 00C0      		rjmp .L8
 244               	.LBE7:
 245               		.cfi_endproc
 246               	.LFE175:
 248               		.comm	flag,1,1
 249               		.section	.bss.waThread1,"aw",@nobits
 252               	waThread1:
 253 0000 0000 0000 		.zero	129
 253      0000 0000 
 253      0000 0000 
 253      0000 0000 
 253      0000 0000 
 254               		.text
 255               	.Letext0:
 256               		.file 3 "/usr/lib/gcc/avr/4.9.2/include/stddef.h"
 257               		.file 4 "/usr/lib/avr/include/stdint.h"
 258               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 259               		.file 6 "../../../os/rt/include/chsystypes.h"
 260               		.file 7 "../../../os/rt/include/chschd.h"
 261               		.file 8 "../../../os/rt/include/chtime.h"
 262               		.file 9 "../../../os/common/ports/AVR/chcore.h"
 263               		.file 10 "../../../os/rt/include/chsem.h"
 264               		.file 11 "../../../os/rt/include/chmtx.h"
 265               		.file 12 "../../../os/rt/include/chthreads.h"
 266               		.file 13 "../../../os/rt/include/chevents.h"
 267               		.file 14 "../../../os/hal/include/hal_streams.h"
 268               		.file 15 "../../../os/hal/include/hal_queues.h"
 269               		.file 16 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 270               		.file 17 "../../../os/hal/include/hal_adc.h"
 271               		.file 18 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.h"
 272               		.file 19 "../../../os/hal/include/hal_serial.h"
 273               		.file 20 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 274               		.file 21 "../../../os/hal/include/hal.h"
 275               		.file 22 "../../../os/rt/include/chsys.h"
 276               		.file 23 "../../../os/hal/lib/streams/chprintf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/ccLSUnfA.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLSUnfA.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLSUnfA.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLSUnfA.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLSUnfA.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLSUnfA.s:13     .text.adc_cb:0000000000000000 adc_cb
                            *COM*:0000000000000001 flag
     /tmp/ccLSUnfA.s:36     .text.Thread1:0000000000000000 Thread1
     /tmp/ccLSUnfA.s:89     .text.startup.main:0000000000000000 main
     /tmp/ccLSUnfA.s:252    .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
ch
chThdSleep
__floatunsisf
__mulsf3
halInit
chSysInit
SD1
sdStart
ADCD1
adcStart
chThdCreateStatic
adcStartConversion
chprintf
__do_copy_data
__do_clear_bss
