   1               		.file	"chsys.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._idle_thread,"ax",@progbits
  12               	_idle_thread:
  13               	.LFB141:
  14               		.file 1 "../../../os/rt/src/chsys.c"
   1:../../../os/rt/src/chsys.c **** /*
   2:../../../os/rt/src/chsys.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chsys.c **** 
   4:../../../os/rt/src/chsys.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chsys.c **** 
   6:../../../os/rt/src/chsys.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chsys.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chsys.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chsys.c ****     (at your option) any later version.
  10:../../../os/rt/src/chsys.c **** 
  11:../../../os/rt/src/chsys.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chsys.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chsys.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chsys.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chsys.c **** 
  16:../../../os/rt/src/chsys.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chsys.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chsys.c **** */
  19:../../../os/rt/src/chsys.c **** 
  20:../../../os/rt/src/chsys.c **** /**
  21:../../../os/rt/src/chsys.c ****  * @file    chsys.c
  22:../../../os/rt/src/chsys.c ****  * @brief   System related code.
  23:../../../os/rt/src/chsys.c ****  *
  24:../../../os/rt/src/chsys.c ****  * @addtogroup system
  25:../../../os/rt/src/chsys.c ****  * @details System related APIs and services:
  26:../../../os/rt/src/chsys.c ****  *          - Initialization.
  27:../../../os/rt/src/chsys.c ****  *          - Locks.
  28:../../../os/rt/src/chsys.c ****  *          - Interrupt Handling.
  29:../../../os/rt/src/chsys.c ****  *          - Power Management.
  30:../../../os/rt/src/chsys.c ****  *          - Abnormal Termination.
  31:../../../os/rt/src/chsys.c ****  *          - Realtime counter.
  32:../../../os/rt/src/chsys.c ****  *          .
  33:../../../os/rt/src/chsys.c ****  * @{
  34:../../../os/rt/src/chsys.c ****  */
  35:../../../os/rt/src/chsys.c **** 
  36:../../../os/rt/src/chsys.c **** #include "ch.h"
  37:../../../os/rt/src/chsys.c **** 
  38:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  39:../../../os/rt/src/chsys.c **** /* Module exported variables.                                                */
  40:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  41:../../../os/rt/src/chsys.c **** 
  42:../../../os/rt/src/chsys.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  43:../../../os/rt/src/chsys.c **** /**
  44:../../../os/rt/src/chsys.c ****  * @brief   Idle thread working area.
  45:../../../os/rt/src/chsys.c ****  */
  46:../../../os/rt/src/chsys.c **** THD_WORKING_AREA(ch_idle_thread_wa, PORT_IDLE_THREAD_STACK_SIZE);
  47:../../../os/rt/src/chsys.c **** #endif
  48:../../../os/rt/src/chsys.c **** 
  49:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  50:../../../os/rt/src/chsys.c **** /* Module local types.                                                       */
  51:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  52:../../../os/rt/src/chsys.c **** 
  53:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  54:../../../os/rt/src/chsys.c **** /* Module local variables.                                                   */
  55:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  56:../../../os/rt/src/chsys.c **** 
  57:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  58:../../../os/rt/src/chsys.c **** /* Module local functions.                                                   */
  59:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  60:../../../os/rt/src/chsys.c **** 
  61:../../../os/rt/src/chsys.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  62:../../../os/rt/src/chsys.c **** /**
  63:../../../os/rt/src/chsys.c ****  * @brief   This function implements the idle thread infinite loop.
  64:../../../os/rt/src/chsys.c ****  * @details The function puts the processor in the lowest power mode capable
  65:../../../os/rt/src/chsys.c ****  *          to serve interrupts.<br>
  66:../../../os/rt/src/chsys.c ****  *          The priority is internally set to the minimum system value so
  67:../../../os/rt/src/chsys.c ****  *          that this thread is executed only if there are no other ready
  68:../../../os/rt/src/chsys.c ****  *          threads in the system.
  69:../../../os/rt/src/chsys.c ****  *
  70:../../../os/rt/src/chsys.c ****  * @param[in] p         the thread parameter, unused in this scenario
  71:../../../os/rt/src/chsys.c ****  */
  72:../../../os/rt/src/chsys.c **** static void _idle_thread(void *p) {
  15               		.loc 1 72 35 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.L2:
  73:../../../os/rt/src/chsys.c **** 
  74:../../../os/rt/src/chsys.c ****   (void)p;
  23               		.loc 1 74 3 discriminator 1 view .LVU1
  75:../../../os/rt/src/chsys.c **** 
  76:../../../os/rt/src/chsys.c ****   while (true) {
  24               		.loc 1 76 3 discriminator 1 view .LVU2
  77:../../../os/rt/src/chsys.c ****     /*lint -save -e522 [2.2] Apparently no side effects because it contains
  78:../../../os/rt/src/chsys.c ****       an asm instruction.*/
  79:../../../os/rt/src/chsys.c ****     port_wait_for_interrupt();
  25               		.loc 1 79 5 discriminator 1 view .LVU3
  26               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 448:../../../os/common/ports/AVR/chcore.h **** }
 449:../../../os/common/ports/AVR/chcore.h **** 
 450:../../../os/common/ports/AVR/chcore.h **** /**
 451:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action from an interrupt handler.
 452:../../../os/common/ports/AVR/chcore.h ****  * @details This function is invoked before invoking I-class APIs from
 453:../../../os/common/ports/AVR/chcore.h ****  *          interrupt handlers. The implementation is architecture dependent,
 454:../../../os/common/ports/AVR/chcore.h ****  *          in its simplest form it is void.
 455:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 456:../../../os/common/ports/AVR/chcore.h ****  */
 457:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock_from_isr(void) {
 458:../../../os/common/ports/AVR/chcore.h **** 
 459:../../../os/common/ports/AVR/chcore.h **** }
 460:../../../os/common/ports/AVR/chcore.h **** 
 461:../../../os/common/ports/AVR/chcore.h **** /**
 462:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 463:../../../os/common/ports/AVR/chcore.h ****  * @details This function is invoked after invoking I-class APIs from interrupt
 464:../../../os/common/ports/AVR/chcore.h ****  *          handlers. The implementation is architecture dependent, in its
 465:../../../os/common/ports/AVR/chcore.h ****  *          simplest form it is void.
 466:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 467:../../../os/common/ports/AVR/chcore.h ****  */
 468:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock_from_isr(void) {
 469:../../../os/common/ports/AVR/chcore.h **** 
 470:../../../os/common/ports/AVR/chcore.h **** }
 471:../../../os/common/ports/AVR/chcore.h **** 
 472:../../../os/common/ports/AVR/chcore.h **** /**
 473:../../../os/common/ports/AVR/chcore.h ****  * @brief   Disables all the interrupt sources.
 474:../../../os/common/ports/AVR/chcore.h ****  * @note    Of course non-maskable interrupt sources are not included.
 475:../../../os/common/ports/AVR/chcore.h ****  */
 476:../../../os/common/ports/AVR/chcore.h **** static inline void port_disable(void) {
 477:../../../os/common/ports/AVR/chcore.h **** 
 478:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 479:../../../os/common/ports/AVR/chcore.h **** }
 480:../../../os/common/ports/AVR/chcore.h **** 
 481:../../../os/common/ports/AVR/chcore.h **** /**
 482:../../../os/common/ports/AVR/chcore.h ****  * @brief   Disables the interrupt sources below kernel-level priority.
 483:../../../os/common/ports/AVR/chcore.h ****  * @note    Interrupt sources above kernel level remains enabled.
 484:../../../os/common/ports/AVR/chcore.h ****  */
 485:../../../os/common/ports/AVR/chcore.h **** static inline void port_suspend(void) {
 486:../../../os/common/ports/AVR/chcore.h **** 
 487:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 488:../../../os/common/ports/AVR/chcore.h **** }
 489:../../../os/common/ports/AVR/chcore.h **** 
 490:../../../os/common/ports/AVR/chcore.h **** /**
 491:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables all the interrupt sources.
 492:../../../os/common/ports/AVR/chcore.h ****  */
 493:../../../os/common/ports/AVR/chcore.h **** static inline void port_enable(void) {
 494:../../../os/common/ports/AVR/chcore.h **** 
 495:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 496:../../../os/common/ports/AVR/chcore.h **** }
 497:../../../os/common/ports/AVR/chcore.h **** 
 498:../../../os/common/ports/AVR/chcore.h **** /**
 499:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enters an architecture-dependent IRQ-waiting mode.
 500:../../../os/common/ports/AVR/chcore.h ****  * @details The function is meant to return when an interrupt becomes pending.
 501:../../../os/common/ports/AVR/chcore.h ****  *          The simplest implementation is an empty function or macro but this
 502:../../../os/common/ports/AVR/chcore.h ****  *          would not take advantage of architecture-specific power saving
 503:../../../os/common/ports/AVR/chcore.h ****  *          modes.
 504:../../../os/common/ports/AVR/chcore.h ****  */
 505:../../../os/common/ports/AVR/chcore.h **** static inline void port_wait_for_interrupt(void) {
 506:../../../os/common/ports/AVR/chcore.h **** 
 507:../../../os/common/ports/AVR/chcore.h **** #if PORT_AVR_WFI_SLEEP_IDLE
 508:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sleep" : : : "memory");
 509:../../../os/common/ports/AVR/chcore.h **** #endif
 510:../../../os/common/ports/AVR/chcore.h **** }
  27               		.loc 2 510 1 discriminator 1 view .LVU4
  28 0000 00C0      		rjmp .L2
  29               		.cfi_endproc
  30               	.LFE141:
  32               		.section	.text.chSysInit,"ax",@progbits
  33               	.global	chSysInit
  35               	chSysInit:
  36               	.LFB142:
  80:../../../os/rt/src/chsys.c ****     /*lint -restore*/
  81:../../../os/rt/src/chsys.c ****     CH_CFG_IDLE_LOOP_HOOK();
  82:../../../os/rt/src/chsys.c ****   }
  83:../../../os/rt/src/chsys.c **** }
  84:../../../os/rt/src/chsys.c **** #endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
  85:../../../os/rt/src/chsys.c **** 
  86:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  87:../../../os/rt/src/chsys.c **** /* Module exported functions.                                                */
  88:../../../os/rt/src/chsys.c **** /*===========================================================================*/
  89:../../../os/rt/src/chsys.c **** 
  90:../../../os/rt/src/chsys.c **** /**
  91:../../../os/rt/src/chsys.c ****  * @brief   ChibiOS/RT initialization.
  92:../../../os/rt/src/chsys.c ****  * @details After executing this function the current instructions stream
  93:../../../os/rt/src/chsys.c ****  *          becomes the main thread.
  94:../../../os/rt/src/chsys.c ****  * @pre     Interrupts must disabled before invoking this function.
  95:../../../os/rt/src/chsys.c ****  * @post    The main thread is created with priority @p NORMALPRIO and
  96:../../../os/rt/src/chsys.c ****  *          interrupts are enabled.
  97:../../../os/rt/src/chsys.c ****  *
  98:../../../os/rt/src/chsys.c ****  * @special
  99:../../../os/rt/src/chsys.c ****  */
 100:../../../os/rt/src/chsys.c **** void chSysInit(void) {
  37               		.loc 1 100 22 view -0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
 101:../../../os/rt/src/chsys.c **** 
 102:../../../os/rt/src/chsys.c ****   _scheduler_init();
  43               		.loc 1 102 3 view .LVU6
  44 0000 0E94 0000 		call _scheduler_init
  45               	.LVL1:
 103:../../../os/rt/src/chsys.c ****   _vt_init();
  46               		.loc 1 103 3 view .LVU7
  47 0004 0E94 0000 		call _vt_init
  48               	.LVL2:
 104:../../../os/rt/src/chsys.c ****   _trace_init();
  49               		.loc 1 104 16 view .LVU8
 105:../../../os/rt/src/chsys.c **** 
 106:../../../os/rt/src/chsys.c **** #if CH_DBG_SYSTEM_STATE_CHECK == TRUE
 107:../../../os/rt/src/chsys.c ****   ch.dbg.isr_cnt  = (cnt_t)0;
 108:../../../os/rt/src/chsys.c ****   ch.dbg.lock_cnt = (cnt_t)0;
 109:../../../os/rt/src/chsys.c **** #endif
 110:../../../os/rt/src/chsys.c **** #if CH_CFG_USE_TM == TRUE
 111:../../../os/rt/src/chsys.c ****   _tm_init();
 112:../../../os/rt/src/chsys.c **** #endif
 113:../../../os/rt/src/chsys.c **** #if CH_CFG_USE_MEMCORE == TRUE
 114:../../../os/rt/src/chsys.c ****   _core_init();
  50               		.loc 1 114 3 view .LVU9
  51 0008 0E94 0000 		call _core_init
  52               	.LVL3:
 115:../../../os/rt/src/chsys.c **** #endif
 116:../../../os/rt/src/chsys.c **** #if CH_CFG_USE_HEAP == TRUE
 117:../../../os/rt/src/chsys.c ****   _heap_init();
  53               		.loc 1 117 3 view .LVU10
  54 000c 0E94 0000 		call _heap_init
  55               	.LVL4:
 118:../../../os/rt/src/chsys.c **** #endif
 119:../../../os/rt/src/chsys.c **** #if CH_CFG_USE_FACTORY == TRUE
 120:../../../os/rt/src/chsys.c ****   _factory_init();
 121:../../../os/rt/src/chsys.c **** #endif
 122:../../../os/rt/src/chsys.c **** #if CH_DBG_STATISTICS == TRUE
 123:../../../os/rt/src/chsys.c ****   _stats_init();
 124:../../../os/rt/src/chsys.c **** #endif
 125:../../../os/rt/src/chsys.c **** 
 126:../../../os/rt/src/chsys.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 127:../../../os/rt/src/chsys.c ****   /* Now this instructions flow becomes the main thread.*/
 128:../../../os/rt/src/chsys.c **** #if CH_CFG_USE_REGISTRY == TRUE
 129:../../../os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  56               		.loc 1 129 3 view .LVU11
  57               		.loc 1 129 11 is_stmt 0 view .LVU12
  58 0010 40E8      		ldi r20,lo8(-128)
  59 0012 60E0      		ldi r22,lo8(ch_debug)
  60 0014 70E0      		ldi r23,hi8(ch_debug)
  61 0016 80E0      		ldi r24,lo8(ch+23)
  62 0018 90E0      		ldi r25,hi8(ch+23)
  63 001a 0E94 0000 		call _thread_init
  64               	.LVL5:
  65 001e FC01      		movw r30,r24
  66               		.loc 1 129 9 view .LVU13
  67 0020 9093 0000 		sts ch+11+1,r25
  68 0024 8093 0000 		sts ch+11,r24
 130:../../../os/rt/src/chsys.c **** #else
 131:../../../os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, "main", NORMALPRIO);
 132:../../../os/rt/src/chsys.c **** #endif
 133:../../../os/rt/src/chsys.c **** #else
 134:../../../os/rt/src/chsys.c ****   /* Now this instructions flow becomes the idle thread.*/
 135:../../../os/rt/src/chsys.c ****   currp = _thread_init(&ch.mainthread, "idle", IDLEPRIO);
 136:../../../os/rt/src/chsys.c **** #endif
 137:../../../os/rt/src/chsys.c **** 
 138:../../../os/rt/src/chsys.c **** #if CH_DBG_ENABLE_STACK_CHECK == TRUE
 139:../../../os/rt/src/chsys.c ****   {
 140:../../../os/rt/src/chsys.c ****     /* Setting up the base address of the static main thread stack, the
 141:../../../os/rt/src/chsys.c ****        symbol must be provided externally.*/
 142:../../../os/rt/src/chsys.c ****     extern stkalign_t __main_thread_stack_base__;
 143:../../../os/rt/src/chsys.c ****     currp->wabase = &__main_thread_stack_base__;
 144:../../../os/rt/src/chsys.c ****   }
 145:../../../os/rt/src/chsys.c **** #elif CH_CFG_USE_DYNAMIC == TRUE
 146:../../../os/rt/src/chsys.c ****   currp->wabase = NULL;
 147:../../../os/rt/src/chsys.c **** #endif
 148:../../../os/rt/src/chsys.c **** 
 149:../../../os/rt/src/chsys.c ****   /* Setting up the caller as current thread.*/
 150:../../../os/rt/src/chsys.c ****   currp->state = CH_STATE_CURRENT;
  69               		.loc 1 150 3 is_stmt 1 view .LVU14
  70               		.loc 1 150 16 is_stmt 0 view .LVU15
  71 0028 91E0      		ldi r25,lo8(1)
  72 002a 9587      		std Z+13,r25
 151:../../../os/rt/src/chsys.c **** 
 152:../../../os/rt/src/chsys.c ****   /* Port layer initialization last because it depend on some of the
 153:../../../os/rt/src/chsys.c ****      initializations performed before.*/
 154:../../../os/rt/src/chsys.c ****   port_init();
  73               		.loc 1 154 3 is_stmt 1 view .LVU16
  74 002c 9093 0000 		sts __avr_in_isr,r25
  75               		.loc 1 154 14 view .LVU17
 155:../../../os/rt/src/chsys.c **** 
 156:../../../os/rt/src/chsys.c **** #if CH_DBG_STATISTICS == TRUE
 157:../../../os/rt/src/chsys.c ****   /* Starting measurement for this thread.*/
 158:../../../os/rt/src/chsys.c ****   chTMStartMeasurementX(&currp->stats);
 159:../../../os/rt/src/chsys.c **** #endif
 160:../../../os/rt/src/chsys.c **** 
 161:../../../os/rt/src/chsys.c ****   /* Initialization hook.*/
 162:../../../os/rt/src/chsys.c ****   CH_CFG_SYSTEM_INIT_HOOK();
  76               		.loc 1 162 3 view .LVU18
  77               		.loc 1 162 28 view .LVU19
 163:../../../os/rt/src/chsys.c **** 
 164:../../../os/rt/src/chsys.c ****   /* It is alive now.*/
 165:../../../os/rt/src/chsys.c ****   chSysEnable();
  78               		.loc 1 165 3 view .LVU20
  79               	.LBB71:
  80               	.LBI71:
  81               		.file 3 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
  82               		.loc 3 342 20 view .LVU21
  83               	.LBE71:
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
  84               		.loc 3 344 22 view .LVU22
 345:../../../os/rt/include/chsys.h ****   port_enable();
  85               		.loc 3 345 3 view .LVU23
  86               	.LBB74:
  87               	.LBB72:
  88               	.LBI72:
 493:../../../os/common/ports/AVR/chcore.h **** 
  89               		.loc 2 493 20 view .LVU24
  90               	.LBB73:
 495:../../../os/common/ports/AVR/chcore.h **** }
  91               		.loc 2 495 3 view .LVU25
  92               	/* #APP */
  93               	 ;  495 "../../../os/common/ports/AVR/chcore.h" 1
  94 0030 7894      		sei
  95               	 ;  0 "" 2
  96               	/* #NOAPP */
  97               	.LBE73:
  98               	.LBE72:
  99               	.LBE74:
 100               	.LBB75:
 166:../../../os/rt/src/chsys.c **** 
 167:../../../os/rt/src/chsys.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 168:../../../os/rt/src/chsys.c ****   {
 169:../../../os/rt/src/chsys.c ****     static const thread_descriptor_t idle_descriptor = {
 101               		.loc 1 169 5 view .LVU26
 170:../../../os/rt/src/chsys.c ****       "idle",
 171:../../../os/rt/src/chsys.c ****       THD_WORKING_AREA_BASE(ch_idle_thread_wa),
 172:../../../os/rt/src/chsys.c ****       THD_WORKING_AREA_END(ch_idle_thread_wa),
 173:../../../os/rt/src/chsys.c ****       IDLEPRIO,
 174:../../../os/rt/src/chsys.c ****       _idle_thread,
 175:../../../os/rt/src/chsys.c ****       NULL
 176:../../../os/rt/src/chsys.c ****     };
 177:../../../os/rt/src/chsys.c **** 
 178:../../../os/rt/src/chsys.c ****     /* This thread has the lowest priority in the system, its role is just to
 179:../../../os/rt/src/chsys.c ****        serve interrupts in its context while keeping the lowest energy saving
 180:../../../os/rt/src/chsys.c ****        mode compatible with the system status.*/
 181:../../../os/rt/src/chsys.c ****     (void) chThdCreate(&idle_descriptor);
 102               		.loc 1 181 5 view .LVU27
 103               		.loc 1 181 12 is_stmt 0 view .LVU28
 104 0032 80E0      		ldi r24,lo8(idle_descriptor.2695)
 105 0034 90E0      		ldi r25,hi8(idle_descriptor.2695)
 106 0036 0C94 0000 		jmp chThdCreate
 107               	.LVL6:
 108               	.LBE75:
 109               		.cfi_endproc
 110               	.LFE142:
 112               		.section	.text.chSysHalt,"ax",@progbits
 113               	.global	chSysHalt
 115               	chSysHalt:
 116               	.LVL7:
 117               	.LFB143:
 182:../../../os/rt/src/chsys.c ****   }
 183:../../../os/rt/src/chsys.c **** #endif
 184:../../../os/rt/src/chsys.c **** }
 185:../../../os/rt/src/chsys.c **** 
 186:../../../os/rt/src/chsys.c **** /**
 187:../../../os/rt/src/chsys.c ****  * @brief   Halts the system.
 188:../../../os/rt/src/chsys.c ****  * @details This function is invoked by the operating system when an
 189:../../../os/rt/src/chsys.c ****  *          unrecoverable error is detected, for example because a programming
 190:../../../os/rt/src/chsys.c ****  *          error in the application code that triggers an assertion while
 191:../../../os/rt/src/chsys.c ****  *          in debug mode.
 192:../../../os/rt/src/chsys.c ****  * @note    Can be invoked from any system state.
 193:../../../os/rt/src/chsys.c ****  *
 194:../../../os/rt/src/chsys.c ****  * @param[in] reason        pointer to an error string
 195:../../../os/rt/src/chsys.c ****  *
 196:../../../os/rt/src/chsys.c ****  * @special
 197:../../../os/rt/src/chsys.c ****  */
 198:../../../os/rt/src/chsys.c **** void chSysHalt(const char *reason) {
 118               		.loc 1 198 36 is_stmt 1 view -0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 199:../../../os/rt/src/chsys.c **** 
 200:../../../os/rt/src/chsys.c ****   port_disable();
 124               		.loc 1 200 3 view .LVU30
 125               	.LBB76:
 126               	.LBI76:
 476:../../../os/common/ports/AVR/chcore.h **** 
 127               		.loc 2 476 20 view .LVU31
 128               	.LBB77:
 478:../../../os/common/ports/AVR/chcore.h **** }
 129               		.loc 2 478 3 view .LVU32
 130               	/* #APP */
 131               	 ;  478 "../../../os/common/ports/AVR/chcore.h" 1
 132 0000 F894      		cli
 133               	 ;  0 "" 2
 134               	/* #NOAPP */
 135               	.LBE77:
 136               	.LBE76:
 201:../../../os/rt/src/chsys.c **** 
 202:../../../os/rt/src/chsys.c ****   /* Logging the event.*/
 203:../../../os/rt/src/chsys.c ****   _trace_halt(reason);
 137               		.loc 1 203 22 view .LVU33
 204:../../../os/rt/src/chsys.c **** 
 205:../../../os/rt/src/chsys.c ****   /* Pointing to the passed message.*/
 206:../../../os/rt/src/chsys.c ****   ch.dbg.panic_msg = reason;
 138               		.loc 1 206 3 view .LVU34
 139               		.loc 1 206 20 is_stmt 0 view .LVU35
 140 0002 9093 0000 		sts ch+21+1,r25
 141 0006 8093 0000 		sts ch+21,r24
 142               	.L6:
 207:../../../os/rt/src/chsys.c **** 
 208:../../../os/rt/src/chsys.c ****   /* Halt hook code, usually empty.*/
 209:../../../os/rt/src/chsys.c ****   CH_CFG_SYSTEM_HALT_HOOK(reason);
 143               		.loc 1 209 3 is_stmt 1 discriminator 1 view .LVU36
 144               		.loc 1 209 34 discriminator 1 view .LVU37
 210:../../../os/rt/src/chsys.c **** 
 211:../../../os/rt/src/chsys.c ****   /* Harmless infinite loop.*/
 212:../../../os/rt/src/chsys.c ****   while (true) {
 145               		.loc 1 212 3 discriminator 1 view .LVU38
 213:../../../os/rt/src/chsys.c ****   }
 146               		.loc 1 213 3 discriminator 1 view .LVU39
 209:../../../os/rt/src/chsys.c **** 
 147               		.loc 1 209 3 discriminator 1 view .LVU40
 209:../../../os/rt/src/chsys.c **** 
 148               		.loc 1 209 34 discriminator 1 view .LVU41
 212:../../../os/rt/src/chsys.c ****   }
 149               		.loc 1 212 3 discriminator 1 view .LVU42
 150               		.loc 1 213 3 discriminator 1 view .LVU43
 151 000a 00C0      		rjmp .L6
 152               		.cfi_endproc
 153               	.LFE143:
 155               		.section	.text.chSysIntegrityCheckI,"ax",@progbits
 156               	.global	chSysIntegrityCheckI
 158               	chSysIntegrityCheckI:
 159               	.LVL8:
 160               	.LFB144:
 214:../../../os/rt/src/chsys.c **** }
 215:../../../os/rt/src/chsys.c **** 
 216:../../../os/rt/src/chsys.c **** /**
 217:../../../os/rt/src/chsys.c ****  * @brief   System integrity check.
 218:../../../os/rt/src/chsys.c ****  * @details Performs an integrity check of the important ChibiOS/RT data
 219:../../../os/rt/src/chsys.c ****  *          structures.
 220:../../../os/rt/src/chsys.c ****  * @note    The appropriate action in case of failure is to halt the system
 221:../../../os/rt/src/chsys.c ****  *          before releasing the critical zone.
 222:../../../os/rt/src/chsys.c ****  * @note    If the system is corrupted then one possible outcome of this
 223:../../../os/rt/src/chsys.c ****  *          function is an exception caused by @p NULL or corrupted pointers
 224:../../../os/rt/src/chsys.c ****  *          in list elements. Exception vectors must be monitored as well.
 225:../../../os/rt/src/chsys.c ****  * @note    This function is not used internally, it is up to the
 226:../../../os/rt/src/chsys.c ****  *          application to define if and where to perform system
 227:../../../os/rt/src/chsys.c ****  *          checking.
 228:../../../os/rt/src/chsys.c ****  * @note    Performing all tests at once can be a slow operation and can
 229:../../../os/rt/src/chsys.c ****  *          degrade the system response time. It is suggested to execute
 230:../../../os/rt/src/chsys.c ****  *          one test at time and release the critical zone in between tests.
 231:../../../os/rt/src/chsys.c ****  *
 232:../../../os/rt/src/chsys.c ****  * @param[in] testmask  Each bit in this mask is associated to a test to be
 233:../../../os/rt/src/chsys.c ****  *                      performed.
 234:../../../os/rt/src/chsys.c ****  * @return              The test result.
 235:../../../os/rt/src/chsys.c ****  * @retval false        The test succeeded.
 236:../../../os/rt/src/chsys.c ****  * @retval true         Test failed.
 237:../../../os/rt/src/chsys.c ****  *
 238:../../../os/rt/src/chsys.c ****  * @iclass
 239:../../../os/rt/src/chsys.c ****  */
 240:../../../os/rt/src/chsys.c **** bool chSysIntegrityCheckI(unsigned testmask) {
 161               		.loc 1 240 46 view -0
 162               		.cfi_startproc
 163               	/* prologue: function */
 164               	/* frame size = 0 */
 165               	/* stack size = 0 */
 166               	.L__stack_usage = 0
 241:../../../os/rt/src/chsys.c ****   cnt_t n;
 167               		.loc 1 241 3 view .LVU45
 242:../../../os/rt/src/chsys.c **** 
 243:../../../os/rt/src/chsys.c ****   chDbgCheckClassI();
 168               		.loc 1 243 21 view .LVU46
 244:../../../os/rt/src/chsys.c **** 
 245:../../../os/rt/src/chsys.c ****   /* Ready List integrity check.*/
 246:../../../os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 169               		.loc 1 246 3 view .LVU47
 170               		.loc 1 246 6 is_stmt 0 view .LVU48
 171 0000 80FF      		sbrs r24,0
 172 0002 00C0      		rjmp .L8
 173               	.LBB78:
 247:../../../os/rt/src/chsys.c ****     thread_t *tp;
 174               		.loc 1 247 5 is_stmt 1 view .LVU49
 248:../../../os/rt/src/chsys.c **** 
 249:../../../os/rt/src/chsys.c ****     /* Scanning the ready list forward.*/
 250:../../../os/rt/src/chsys.c ****     n = (cnt_t)0;
 175               		.loc 1 250 5 view .LVU50
 176               	.LVL9:
 251:../../../os/rt/src/chsys.c ****     tp = ch.rlist.queue.next;
 177               		.loc 1 251 5 view .LVU51
 178               		.loc 1 251 8 is_stmt 0 view .LVU52
 179 0004 E091 0000 		lds r30,ch
 180 0008 F091 0000 		lds r31,ch+1
 181               	.LVL10:
 252:../../../os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist.queue) {
 182               		.loc 1 252 5 is_stmt 1 view .LVU53
 183               		.loc 1 252 5 is_stmt 0 view .LVU54
 184 000c A091 0000 		lds r26,ch+2
 185 0010 B091 0000 		lds r27,ch+2+1
 186               		.loc 1 252 11 view .LVU55
 187 0014 20E0      		ldi r18,hi8(ch)
 188 0016 E030      		cpi r30,lo8(ch)
 189 0018 F207      		cpc r31,r18
 190 001a 01F4      		brne .+2
 191 001c 00C0      		rjmp .L9
 250:../../../os/rt/src/chsys.c ****     tp = ch.rlist.queue.next;
 192               		.loc 1 250 7 view .LVU56
 193 001e 90E0      		ldi r25,0
 194               	.LVL11:
 195               	.L10:
 253:../../../os/rt/src/chsys.c ****       n++;
 196               		.loc 1 253 7 is_stmt 1 view .LVU57
 197 0020 9F5F      		subi r25,lo8(-(1))
 198               	.LVL12:
 254:../../../os/rt/src/chsys.c ****       tp = tp->queue.next;
 199               		.loc 1 254 7 view .LVU58
 200               		.loc 1 254 10 is_stmt 0 view .LVU59
 201 0022 0190      		ld __tmp_reg__,Z+
 202 0024 F081      		ld r31,Z
 203 0026 E02D      		mov r30,__tmp_reg__
 204               	.LVL13:
 252:../../../os/rt/src/chsys.c ****       n++;
 205               		.loc 1 252 11 view .LVU60
 206 0028 20E0      		ldi r18,hi8(ch)
 207 002a E030      		cpi r30,lo8(ch)
 208 002c F207      		cpc r31,r18
 209 002e 01F4      		brne .L10
 210               	.LVL14:
 255:../../../os/rt/src/chsys.c ****     }
 256:../../../os/rt/src/chsys.c **** 
 257:../../../os/rt/src/chsys.c ****     /* Scanning the ready list backward.*/
 258:../../../os/rt/src/chsys.c ****     tp = ch.rlist.queue.prev;
 259:../../../os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist.queue) {
 211               		.loc 1 259 11 view .LVU61
 212 0030 20E0      		ldi r18,hi8(ch)
 213 0032 A030      		cpi r26,lo8(ch)
 214 0034 B207      		cpc r27,r18
 215 0036 01F0      		breq .L59
 216               	.LVL15:
 217               	.L14:
 260:../../../os/rt/src/chsys.c ****       n--;
 218               		.loc 1 260 7 is_stmt 1 view .LVU62
 219 0038 9150      		subi r25,lo8(-(-1))
 220               	.LVL16:
 261:../../../os/rt/src/chsys.c ****       tp = tp->queue.prev;
 221               		.loc 1 261 7 view .LVU63
 222               		.loc 1 261 10 is_stmt 0 view .LVU64
 223 003a 1296      		adiw r26,2
 224 003c 0D90      		ld __tmp_reg__,X+
 225 003e BC91      		ld r27,X
 226 0040 A02D      		mov r26,__tmp_reg__
 227               	.LVL17:
 259:../../../os/rt/src/chsys.c ****       n--;
 228               		.loc 1 259 11 view .LVU65
 229 0042 20E0      		ldi r18,hi8(ch)
 230 0044 A030      		cpi r26,lo8(ch)
 231 0046 B207      		cpc r27,r18
 232 0048 01F4      		brne .L14
 233               	.L59:
 262:../../../os/rt/src/chsys.c ****     }
 263:../../../os/rt/src/chsys.c **** 
 264:../../../os/rt/src/chsys.c ****     /* The number of elements must match.*/
 265:../../../os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 234               		.loc 1 265 5 is_stmt 1 view .LVU66
 235               		.loc 1 265 8 is_stmt 0 view .LVU67
 236 004a 9111      		cpse r25,__zero_reg__
 237 004c 00C0      		rjmp .L31
 238               	.LVL18:
 239               	.L8:
 240               		.loc 1 265 8 view .LVU68
 241               	.LBE78:
 266:../../../os/rt/src/chsys.c ****       return true;
 267:../../../os/rt/src/chsys.c ****     }
 268:../../../os/rt/src/chsys.c ****   }
 269:../../../os/rt/src/chsys.c **** 
 270:../../../os/rt/src/chsys.c ****   /* Timers list integrity check.*/
 271:../../../os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 242               		.loc 1 271 3 is_stmt 1 view .LVU69
 243               		.loc 1 271 6 is_stmt 0 view .LVU70
 244 004e 81FF      		sbrs r24,1
 245 0050 00C0      		rjmp .L16
 246               	.LBB79:
 272:../../../os/rt/src/chsys.c ****     virtual_timer_t * vtp;
 247               		.loc 1 272 5 is_stmt 1 view .LVU71
 273:../../../os/rt/src/chsys.c **** 
 274:../../../os/rt/src/chsys.c ****     /* Scanning the timers list forward.*/
 275:../../../os/rt/src/chsys.c ****     n = (cnt_t)0;
 248               		.loc 1 275 5 view .LVU72
 249               	.LVL19:
 276:../../../os/rt/src/chsys.c ****     vtp = ch.vtlist.next;
 250               		.loc 1 276 5 view .LVU73
 251               		.loc 1 276 9 is_stmt 0 view .LVU74
 252 0052 A091 0000 		lds r26,ch+13
 253 0056 B091 0000 		lds r27,ch+13+1
 254               	.LVL20:
 277:../../../os/rt/src/chsys.c ****     while (vtp != (virtual_timer_t *)&ch.vtlist) {
 255               		.loc 1 277 5 is_stmt 1 view .LVU75
 256               		.loc 1 277 5 is_stmt 0 view .LVU76
 257 005a E091 0000 		lds r30,ch+15
 258 005e F091 0000 		lds r31,ch+15+1
 259               		.loc 1 277 11 view .LVU77
 260 0062 90E0      		ldi r25,hi8(ch+13)
 261 0064 A030      		cpi r26,lo8(ch+13)
 262 0066 B907      		cpc r27,r25
 263 0068 01F4      		brne .+2
 264 006a 00C0      		rjmp .L17
 275:../../../os/rt/src/chsys.c ****     vtp = ch.vtlist.next;
 265               		.loc 1 275 7 view .LVU78
 266 006c 90E0      		ldi r25,0
 267               	.LVL21:
 268               	.L18:
 278:../../../os/rt/src/chsys.c ****       n++;
 269               		.loc 1 278 7 is_stmt 1 view .LVU79
 270 006e 9F5F      		subi r25,lo8(-(1))
 271               	.LVL22:
 279:../../../os/rt/src/chsys.c ****       vtp = vtp->next;
 272               		.loc 1 279 7 view .LVU80
 273               		.loc 1 279 11 is_stmt 0 view .LVU81
 274 0070 0D90      		ld __tmp_reg__,X+
 275 0072 BC91      		ld r27,X
 276 0074 A02D      		mov r26,__tmp_reg__
 277               	.LVL23:
 277:../../../os/rt/src/chsys.c ****       n++;
 278               		.loc 1 277 11 view .LVU82
 279 0076 20E0      		ldi r18,hi8(ch+13)
 280 0078 A030      		cpi r26,lo8(ch+13)
 281 007a B207      		cpc r27,r18
 282 007c 01F4      		brne .L18
 283               	.LVL24:
 280:../../../os/rt/src/chsys.c ****     }
 281:../../../os/rt/src/chsys.c **** 
 282:../../../os/rt/src/chsys.c ****     /* Scanning the timers list backward.*/
 283:../../../os/rt/src/chsys.c ****     vtp = ch.vtlist.prev;
 284:../../../os/rt/src/chsys.c ****     while (vtp != (virtual_timer_t *)&ch.vtlist) {
 284               		.loc 1 284 11 view .LVU83
 285 007e 20E0      		ldi r18,hi8(ch+13)
 286 0080 E030      		cpi r30,lo8(ch+13)
 287 0082 F207      		cpc r31,r18
 288 0084 01F0      		breq .L60
 289               	.LVL25:
 290               	.L22:
 285:../../../os/rt/src/chsys.c ****       n--;
 291               		.loc 1 285 7 is_stmt 1 view .LVU84
 292 0086 9150      		subi r25,lo8(-(-1))
 293               	.LVL26:
 286:../../../os/rt/src/chsys.c ****       vtp = vtp->prev;
 294               		.loc 1 286 7 view .LVU85
 295               		.loc 1 286 11 is_stmt 0 view .LVU86
 296 0088 0280      		ldd __tmp_reg__,Z+2
 297 008a F381      		ldd r31,Z+3
 298 008c E02D      		mov r30,__tmp_reg__
 299               	.LVL27:
 284:../../../os/rt/src/chsys.c ****       n--;
 300               		.loc 1 284 11 view .LVU87
 301 008e 20E0      		ldi r18,hi8(ch+13)
 302 0090 E030      		cpi r30,lo8(ch+13)
 303 0092 F207      		cpc r31,r18
 304 0094 01F4      		brne .L22
 305               	.L60:
 287:../../../os/rt/src/chsys.c ****     }
 288:../../../os/rt/src/chsys.c **** 
 289:../../../os/rt/src/chsys.c ****     /* The number of elements must match.*/
 290:../../../os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 306               		.loc 1 290 5 is_stmt 1 view .LVU88
 307               		.loc 1 290 8 is_stmt 0 view .LVU89
 308 0096 9111      		cpse r25,__zero_reg__
 309 0098 00C0      		rjmp .L31
 310               	.LVL28:
 311               	.L16:
 312               		.loc 1 290 8 view .LVU90
 313               	.LBE79:
 291:../../../os/rt/src/chsys.c ****       return true;
 292:../../../os/rt/src/chsys.c ****     }
 293:../../../os/rt/src/chsys.c ****   }
 294:../../../os/rt/src/chsys.c **** 
 295:../../../os/rt/src/chsys.c **** #if CH_CFG_USE_REGISTRY == TRUE
 296:../../../os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 314               		.loc 1 296 3 is_stmt 1 view .LVU91
 315               		.loc 1 296 6 is_stmt 0 view .LVU92
 316 009a 82FF      		sbrs r24,2
 317 009c 00C0      		rjmp .L32
 318               	.LBB80:
 297:../../../os/rt/src/chsys.c ****     thread_t *tp;
 319               		.loc 1 297 5 is_stmt 1 view .LVU93
 298:../../../os/rt/src/chsys.c **** 
 299:../../../os/rt/src/chsys.c ****     /* Scanning the ready list forward.*/
 300:../../../os/rt/src/chsys.c ****     n = (cnt_t)0;
 320               		.loc 1 300 5 view .LVU94
 321               	.LVL29:
 301:../../../os/rt/src/chsys.c ****     tp = ch.rlist.newer;
 322               		.loc 1 301 5 view .LVU95
 323               		.loc 1 301 8 is_stmt 0 view .LVU96
 324 009e E091 0000 		lds r30,ch+7
 325 00a2 F091 0000 		lds r31,ch+7+1
 326               	.LVL30:
 302:../../../os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 327               		.loc 1 302 5 is_stmt 1 view .LVU97
 300:../../../os/rt/src/chsys.c ****     tp = ch.rlist.newer;
 328               		.loc 1 300 7 is_stmt 0 view .LVU98
 329 00a6 90E0      		ldi r25,0
 330               		.loc 1 302 11 view .LVU99
 331 00a8 80E0      		ldi r24,hi8(ch)
 332 00aa E030      		cpi r30,lo8(ch)
 333 00ac F807      		cpc r31,r24
 334               	.LVL31:
 335               		.loc 1 302 11 view .LVU100
 336 00ae 01F0      		breq .L23
 337               	.LVL32:
 338               	.L24:
 303:../../../os/rt/src/chsys.c ****       n++;
 339               		.loc 1 303 7 is_stmt 1 view .LVU101
 340 00b0 9F5F      		subi r25,lo8(-(1))
 341               	.LVL33:
 304:../../../os/rt/src/chsys.c ****       tp = tp->newer;
 342               		.loc 1 304 7 view .LVU102
 343               		.loc 1 304 10 is_stmt 0 view .LVU103
 344 00b2 0780      		ldd __tmp_reg__,Z+7
 345 00b4 F085      		ldd r31,Z+8
 346 00b6 E02D      		mov r30,__tmp_reg__
 347               	.LVL34:
 302:../../../os/rt/src/chsys.c ****       n++;
 348               		.loc 1 302 11 view .LVU104
 349 00b8 20E0      		ldi r18,hi8(ch)
 350 00ba E030      		cpi r30,lo8(ch)
 351 00bc F207      		cpc r31,r18
 352 00be 01F4      		brne .L24
 353               	.LVL35:
 354               	.L23:
 305:../../../os/rt/src/chsys.c ****     }
 306:../../../os/rt/src/chsys.c **** 
 307:../../../os/rt/src/chsys.c ****     /* Scanning the ready list backward.*/
 308:../../../os/rt/src/chsys.c ****     tp = ch.rlist.older;
 355               		.loc 1 308 5 is_stmt 1 view .LVU105
 356               		.loc 1 308 8 is_stmt 0 view .LVU106
 357 00c0 E091 0000 		lds r30,ch+9
 358 00c4 F091 0000 		lds r31,ch+9+1
 359               	.LVL36:
 309:../../../os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 360               		.loc 1 309 5 is_stmt 1 view .LVU107
 361               		.loc 1 309 11 is_stmt 0 view .LVU108
 362 00c8 80E0      		ldi r24,hi8(ch)
 363 00ca E030      		cpi r30,lo8(ch)
 364 00cc F807      		cpc r31,r24
 365 00ce 01F0      		breq .L25
 366               	.L26:
 310:../../../os/rt/src/chsys.c ****       n--;
 367               		.loc 1 310 7 is_stmt 1 view .LVU109
 368 00d0 9150      		subi r25,lo8(-(-1))
 369               	.LVL37:
 311:../../../os/rt/src/chsys.c ****       tp = tp->older;
 370               		.loc 1 311 7 view .LVU110
 371               		.loc 1 311 10 is_stmt 0 view .LVU111
 372 00d2 0184      		ldd __tmp_reg__,Z+9
 373 00d4 F285      		ldd r31,Z+10
 374 00d6 E02D      		mov r30,__tmp_reg__
 375               	.LVL38:
 309:../../../os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist) {
 376               		.loc 1 309 11 view .LVU112
 377 00d8 20E0      		ldi r18,hi8(ch)
 378 00da E030      		cpi r30,lo8(ch)
 379 00dc F207      		cpc r31,r18
 380 00de 01F4      		brne .L26
 381               	.L25:
 312:../../../os/rt/src/chsys.c ****     }
 313:../../../os/rt/src/chsys.c **** 
 314:../../../os/rt/src/chsys.c ****     /* The number of elements must match.*/
 315:../../../os/rt/src/chsys.c ****     if (n != (cnt_t)0) {
 382               		.loc 1 315 5 is_stmt 1 view .LVU113
 383               		.loc 1 315 8 is_stmt 0 view .LVU114
 384 00e0 81E0      		ldi r24,lo8(1)
 385 00e2 9111      		cpse r25,__zero_reg__
 386               	/* epilogue start */
 387               	.LBE80:
 316:../../../os/rt/src/chsys.c ****       return true;
 317:../../../os/rt/src/chsys.c ****     }
 318:../../../os/rt/src/chsys.c ****   }
 319:../../../os/rt/src/chsys.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 320:../../../os/rt/src/chsys.c **** 
 321:../../../os/rt/src/chsys.c **** #if defined(PORT_INTEGRITY_CHECK)
 322:../../../os/rt/src/chsys.c ****   if ((testmask & CH_INTEGRITY_PORT) != 0U) {
 323:../../../os/rt/src/chsys.c ****     PORT_INTEGRITY_CHECK();
 324:../../../os/rt/src/chsys.c ****   }
 325:../../../os/rt/src/chsys.c **** #endif
 326:../../../os/rt/src/chsys.c **** 
 327:../../../os/rt/src/chsys.c ****   return false;
 328:../../../os/rt/src/chsys.c **** }
 388               		.loc 1 328 1 view .LVU115
 389 00e4 0895      		ret
 390               	.LVL39:
 391               	.L32:
 327:../../../os/rt/src/chsys.c **** }
 392               		.loc 1 327 10 view .LVU116
 393 00e6 80E0      		ldi r24,0
 394               	/* epilogue start */
 395               		.loc 1 328 1 view .LVU117
 396 00e8 0895      		ret
 397               	.LVL40:
 398               	.L31:
 399               	.LBB81:
 266:../../../os/rt/src/chsys.c ****     }
 400               		.loc 1 266 14 view .LVU118
 401 00ea 81E0      		ldi r24,lo8(1)
 402               	.LVL41:
 266:../../../os/rt/src/chsys.c ****     }
 403               		.loc 1 266 14 view .LVU119
 404 00ec 0895      		ret
 405               	.LVL42:
 406               	.L9:
 258:../../../os/rt/src/chsys.c ****     while (tp != (thread_t *)&ch.rlist.queue) {
 407               		.loc 1 258 5 is_stmt 1 view .LVU120
 259:../../../os/rt/src/chsys.c ****       n--;
 408               		.loc 1 259 5 view .LVU121
 259:../../../os/rt/src/chsys.c ****       n--;
 409               		.loc 1 259 11 is_stmt 0 view .LVU122
 410 00ee 90E0      		ldi r25,hi8(ch)
 411 00f0 A030      		cpi r26,lo8(ch)
 412 00f2 B907      		cpc r27,r25
 413 00f4 01F4      		brne .+2
 414 00f6 00C0      		rjmp .L8
 250:../../../os/rt/src/chsys.c ****     tp = ch.rlist.queue.next;
 415               		.loc 1 250 7 view .LVU123
 416 00f8 90E0      		ldi r25,0
 417 00fa 00C0      		rjmp .L14
 418               	.LVL43:
 419               	.L17:
 250:../../../os/rt/src/chsys.c ****     tp = ch.rlist.queue.next;
 420               		.loc 1 250 7 view .LVU124
 421               	.LBE81:
 422               	.LBB82:
 283:../../../os/rt/src/chsys.c ****     while (vtp != (virtual_timer_t *)&ch.vtlist) {
 423               		.loc 1 283 5 is_stmt 1 view .LVU125
 284:../../../os/rt/src/chsys.c ****       n--;
 424               		.loc 1 284 5 view .LVU126
 284:../../../os/rt/src/chsys.c ****       n--;
 425               		.loc 1 284 11 is_stmt 0 view .LVU127
 426 00fc 90E0      		ldi r25,hi8(ch+13)
 427 00fe E030      		cpi r30,lo8(ch+13)
 428 0100 F907      		cpc r31,r25
 429 0102 01F0      		breq .L16
 275:../../../os/rt/src/chsys.c ****     vtp = ch.vtlist.next;
 430               		.loc 1 275 7 view .LVU128
 431 0104 90E0      		ldi r25,0
 432 0106 00C0      		rjmp .L22
 433               	.LBE82:
 434               		.cfi_endproc
 435               	.LFE144:
 437               		.section	.text.chSysTimerHandlerI,"ax",@progbits
 438               	.global	chSysTimerHandlerI
 440               	chSysTimerHandlerI:
 441               	.LFB145:
 329:../../../os/rt/src/chsys.c **** 
 330:../../../os/rt/src/chsys.c **** /**
 331:../../../os/rt/src/chsys.c ****  * @brief   Handles time ticks for round robin preemption and timer increments.
 332:../../../os/rt/src/chsys.c ****  * @details Decrements the remaining time quantum of the running thread
 333:../../../os/rt/src/chsys.c ****  *          and preempts it when the quantum is used up. Increments system
 334:../../../os/rt/src/chsys.c ****  *          time and manages the timers.
 335:../../../os/rt/src/chsys.c ****  * @note    The frequency of the timer determines the system tick granularity
 336:../../../os/rt/src/chsys.c ****  *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 337:../../../os/rt/src/chsys.c ****  *          interval.
 338:../../../os/rt/src/chsys.c ****  *
 339:../../../os/rt/src/chsys.c ****  * @iclass
 340:../../../os/rt/src/chsys.c ****  */
 341:../../../os/rt/src/chsys.c **** void chSysTimerHandlerI(void) {
 442               		.loc 1 341 31 is_stmt 1 view -0
 443               		.cfi_startproc
 444 0000 CF92      		push r12
 445               	.LCFI0:
 446               		.cfi_def_cfa_offset 3
 447               		.cfi_offset 12, -2
 448 0002 DF92      		push r13
 449               	.LCFI1:
 450               		.cfi_def_cfa_offset 4
 451               		.cfi_offset 13, -3
 452 0004 EF92      		push r14
 453               	.LCFI2:
 454               		.cfi_def_cfa_offset 5
 455               		.cfi_offset 14, -4
 456 0006 FF92      		push r15
 457               	.LCFI3:
 458               		.cfi_def_cfa_offset 6
 459               		.cfi_offset 15, -5
 460 0008 0F93      		push r16
 461               	.LCFI4:
 462               		.cfi_def_cfa_offset 7
 463               		.cfi_offset 16, -6
 464 000a 1F93      		push r17
 465               	.LCFI5:
 466               		.cfi_def_cfa_offset 8
 467               		.cfi_offset 17, -7
 468 000c CF93      		push r28
 469               	.LCFI6:
 470               		.cfi_def_cfa_offset 9
 471               		.cfi_offset 28, -8
 472 000e DF93      		push r29
 473               	.LCFI7:
 474               		.cfi_def_cfa_offset 10
 475               		.cfi_offset 29, -9
 476               	/* prologue: function */
 477               	/* frame size = 0 */
 478               	/* stack size = 8 */
 479               	.L__stack_usage = 8
 342:../../../os/rt/src/chsys.c **** 
 343:../../../os/rt/src/chsys.c ****   chDbgCheckClassI();
 480               		.loc 1 343 21 view .LVU130
 344:../../../os/rt/src/chsys.c **** 
 345:../../../os/rt/src/chsys.c **** #if CH_CFG_TIME_QUANTUM > 0
 346:../../../os/rt/src/chsys.c ****   /* Running thread has not used up quantum yet? */
 347:../../../os/rt/src/chsys.c ****   if (currp->ticks > (tslices_t)0) {
 348:../../../os/rt/src/chsys.c ****     /* Decrement remaining quantum.*/
 349:../../../os/rt/src/chsys.c ****     currp->ticks--;
 350:../../../os/rt/src/chsys.c ****   }
 351:../../../os/rt/src/chsys.c **** #endif
 352:../../../os/rt/src/chsys.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 353:../../../os/rt/src/chsys.c ****   currp->time++;
 354:../../../os/rt/src/chsys.c **** #endif
 355:../../../os/rt/src/chsys.c ****   chVTDoTickI();
 481               		.loc 1 355 3 view .LVU131
 482               	.LBB98:
 483               	.LBI98:
 484               		.file 4 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 119:../../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 120:../../../os/rt/include/chvt.h ****   return port_timer_get_time();
 121:../../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 122:../../../os/rt/include/chvt.h **** }
 123:../../../os/rt/include/chvt.h **** 
 124:../../../os/rt/include/chvt.h **** /**
 125:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 126:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 127:../../../os/rt/include/chvt.h ****  *          invocation.
 128:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 129:../../../os/rt/include/chvt.h ****  *
 130:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 131:../../../os/rt/include/chvt.h ****  *
 132:../../../os/rt/include/chvt.h ****  * @api
 133:../../../os/rt/include/chvt.h ****  */
 134:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 135:../../../os/rt/include/chvt.h ****   systime_t systime;
 136:../../../os/rt/include/chvt.h **** 
 137:../../../os/rt/include/chvt.h ****   chSysLock();
 138:../../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 139:../../../os/rt/include/chvt.h ****   chSysUnlock();
 140:../../../os/rt/include/chvt.h **** 
 141:../../../os/rt/include/chvt.h ****   return systime;
 142:../../../os/rt/include/chvt.h **** }
 143:../../../os/rt/include/chvt.h **** 
 144:../../../os/rt/include/chvt.h **** /**
 145:../../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 146:../../../os/rt/include/chvt.h ****  *
 147:../../../os/rt/include/chvt.h ****  * @param[in] start     start time
 148:../../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 149:../../../os/rt/include/chvt.h ****  *
 150:../../../os/rt/include/chvt.h ****  * @xclass
 151:../../../os/rt/include/chvt.h ****  */
 152:../../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 153:../../../os/rt/include/chvt.h **** 
 154:../../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 155:../../../os/rt/include/chvt.h **** }
 156:../../../os/rt/include/chvt.h **** 
 157:../../../os/rt/include/chvt.h **** /**
 158:../../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 159:../../../os/rt/include/chvt.h ****  *          window.
 160:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 161:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 162:../../../os/rt/include/chvt.h ****  *
 163:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 164:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 165:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 166:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 167:../../../os/rt/include/chvt.h ****  *
 168:../../../os/rt/include/chvt.h ****  * @xclass
 169:../../../os/rt/include/chvt.h ****  */
 170:../../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 171:../../../os/rt/include/chvt.h **** 
 172:../../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 173:../../../os/rt/include/chvt.h **** }
 174:../../../os/rt/include/chvt.h **** 
 175:../../../os/rt/include/chvt.h **** /**
 176:../../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 177:../../../os/rt/include/chvt.h ****  *          window.
 178:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 179:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 180:../../../os/rt/include/chvt.h ****  *
 181:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 182:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 183:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 184:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 185:../../../os/rt/include/chvt.h ****  *
 186:../../../os/rt/include/chvt.h ****  * @api
 187:../../../os/rt/include/chvt.h ****  */
 188:../../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 189:../../../os/rt/include/chvt.h **** 
 190:../../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 191:../../../os/rt/include/chvt.h **** }
 192:../../../os/rt/include/chvt.h **** 
 193:../../../os/rt/include/chvt.h **** /**
 194:../../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 195:../../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 196:../../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 197:../../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 198:../../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 199:../../../os/rt/include/chvt.h ****  *
 200:../../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 201:../../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 202:../../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 203:../../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 204:../../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 205:../../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 206:../../../os/rt/include/chvt.h ****  *
 207:../../../os/rt/include/chvt.h ****  * @iclass
 208:../../../os/rt/include/chvt.h ****  */
 209:../../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 210:../../../os/rt/include/chvt.h **** 
 211:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 212:../../../os/rt/include/chvt.h **** 
 213:../../../os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 214:../../../os/rt/include/chvt.h ****     return false;
 215:../../../os/rt/include/chvt.h ****   }
 216:../../../os/rt/include/chvt.h **** 
 217:../../../os/rt/include/chvt.h ****   if (timep != NULL) {
 218:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 219:../../../os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 220:../../../os/rt/include/chvt.h **** #else
 221:../../../os/rt/include/chvt.h ****     *timep = chTimeDiffX(chVTGetSystemTimeX(),
 222:../../../os/rt/include/chvt.h ****                          chTimeAddX(ch.vtlist.lasttime,
 223:../../../os/rt/include/chvt.h ****                                     ch.vtlist.next->delta +
 224:../../../os/rt/include/chvt.h ****                                     (sysinterval_t)CH_CFG_ST_TIMEDELTA));
 225:../../../os/rt/include/chvt.h **** #endif
 226:../../../os/rt/include/chvt.h ****   }
 227:../../../os/rt/include/chvt.h **** 
 228:../../../os/rt/include/chvt.h ****   return true;
 229:../../../os/rt/include/chvt.h **** }
 230:../../../os/rt/include/chvt.h **** 
 231:../../../os/rt/include/chvt.h **** /**
 232:../../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 233:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 234:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 235:../../../os/rt/include/chvt.h ****  *
 236:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 237:../../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 238:../../../os/rt/include/chvt.h ****  *
 239:../../../os/rt/include/chvt.h ****  * @iclass
 240:../../../os/rt/include/chvt.h ****  */
 241:../../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 242:../../../os/rt/include/chvt.h **** 
 243:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 244:../../../os/rt/include/chvt.h **** 
 245:../../../os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 246:../../../os/rt/include/chvt.h **** }
 247:../../../os/rt/include/chvt.h **** 
 248:../../../os/rt/include/chvt.h **** /**
 249:../../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 250:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 251:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 252:../../../os/rt/include/chvt.h ****  *
 253:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 254:../../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 255:../../../os/rt/include/chvt.h ****  *
 256:../../../os/rt/include/chvt.h ****  * @api
 257:../../../os/rt/include/chvt.h ****  */
 258:../../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 259:../../../os/rt/include/chvt.h ****   bool b;
 260:../../../os/rt/include/chvt.h **** 
 261:../../../os/rt/include/chvt.h ****   chSysLock();
 262:../../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 263:../../../os/rt/include/chvt.h ****   chSysUnlock();
 264:../../../os/rt/include/chvt.h **** 
 265:../../../os/rt/include/chvt.h ****   return b;
 266:../../../os/rt/include/chvt.h **** }
 267:../../../os/rt/include/chvt.h **** 
 268:../../../os/rt/include/chvt.h **** /**
 269:../../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 270:../../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 271:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 272:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 273:../../../os/rt/include/chvt.h ****  *
 274:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 275:../../../os/rt/include/chvt.h ****  *
 276:../../../os/rt/include/chvt.h ****  * @iclass
 277:../../../os/rt/include/chvt.h ****  */
 278:../../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 279:../../../os/rt/include/chvt.h **** 
 280:../../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 281:../../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 282:../../../os/rt/include/chvt.h ****   }
 283:../../../os/rt/include/chvt.h **** }
 284:../../../os/rt/include/chvt.h **** 
 285:../../../os/rt/include/chvt.h **** /**
 286:../../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 287:../../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 288:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 289:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 290:../../../os/rt/include/chvt.h ****  *
 291:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 292:../../../os/rt/include/chvt.h ****  *
 293:../../../os/rt/include/chvt.h ****  * @api
 294:../../../os/rt/include/chvt.h ****  */
 295:../../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 296:../../../os/rt/include/chvt.h **** 
 297:../../../os/rt/include/chvt.h ****   chSysLock();
 298:../../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 299:../../../os/rt/include/chvt.h ****   chSysUnlock();
 300:../../../os/rt/include/chvt.h **** }
 301:../../../os/rt/include/chvt.h **** 
 302:../../../os/rt/include/chvt.h **** /**
 303:../../../os/rt/include/chvt.h ****  * @brief   Enables a virtual timer.
 304:../../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 305:../../../os/rt/include/chvt.h ****  *          using the new parameters.
 306:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 307:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 308:../../../os/rt/include/chvt.h ****  *
 309:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 310:../../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 311:../../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 312:../../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 313:../../../os/rt/include/chvt.h ****  *                        normal time specification.
 314:../../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 315:../../../os/rt/include/chvt.h ****  *                      .
 316:../../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 317:../../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 318:../../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 319:../../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 320:../../../os/rt/include/chvt.h ****  *                      function
 321:../../../os/rt/include/chvt.h ****  *
 322:../../../os/rt/include/chvt.h ****  * @iclass
 323:../../../os/rt/include/chvt.h ****  */
 324:../../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 325:../../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 326:../../../os/rt/include/chvt.h **** 
 327:../../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 328:../../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 329:../../../os/rt/include/chvt.h **** }
 330:../../../os/rt/include/chvt.h **** 
 331:../../../os/rt/include/chvt.h **** /**
 332:../../../os/rt/include/chvt.h ****  * @brief   Enables a virtual timer.
 333:../../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 334:../../../os/rt/include/chvt.h ****  *          using the new parameters.
 335:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 336:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 337:../../../os/rt/include/chvt.h ****  *
 338:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 339:../../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 340:../../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 341:../../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 342:../../../os/rt/include/chvt.h ****  *                        normal time specification.
 343:../../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 344:../../../os/rt/include/chvt.h ****  *                      .
 345:../../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 346:../../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 347:../../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 348:../../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 349:../../../os/rt/include/chvt.h ****  *                      function
 350:../../../os/rt/include/chvt.h ****  *
 351:../../../os/rt/include/chvt.h ****  * @api
 352:../../../os/rt/include/chvt.h ****  */
 353:../../../os/rt/include/chvt.h **** static inline void chVTSet(virtual_timer_t *vtp, sysinterval_t delay,
 354:../../../os/rt/include/chvt.h ****                            vtfunc_t vtfunc, void *par) {
 355:../../../os/rt/include/chvt.h **** 
 356:../../../os/rt/include/chvt.h ****   chSysLock();
 357:../../../os/rt/include/chvt.h ****   chVTSetI(vtp, delay, vtfunc, par);
 358:../../../os/rt/include/chvt.h ****   chSysUnlock();
 359:../../../os/rt/include/chvt.h **** }
 360:../../../os/rt/include/chvt.h **** 
 361:../../../os/rt/include/chvt.h **** /**
 362:../../../os/rt/include/chvt.h ****  * @brief   Virtual timers ticker.
 363:../../../os/rt/include/chvt.h ****  * @note    The system lock is released before entering the callback and
 364:../../../os/rt/include/chvt.h ****  *          re-acquired immediately after. It is callback's responsibility
 365:../../../os/rt/include/chvt.h ****  *          to acquire the lock if needed. This is done in order to reduce
 366:../../../os/rt/include/chvt.h ****  *          interrupts jitter when many timers are in use.
 367:../../../os/rt/include/chvt.h ****  *
 368:../../../os/rt/include/chvt.h ****  * @iclass
 369:../../../os/rt/include/chvt.h ****  */
 370:../../../os/rt/include/chvt.h **** static inline void chVTDoTickI(void) {
 485               		.loc 4 370 20 view .LVU132
 486               	.LBB99:
 371:../../../os/rt/include/chvt.h **** 
 372:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 487               		.loc 4 372 21 view .LVU133
 373:../../../os/rt/include/chvt.h **** 
 374:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 375:../../../os/rt/include/chvt.h ****   ch.vtlist.systime++;
 376:../../../os/rt/include/chvt.h ****   if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
 377:../../../os/rt/include/chvt.h ****     /* The list is not empty, processing elements on top.*/
 378:../../../os/rt/include/chvt.h ****     --ch.vtlist.next->delta;
 379:../../../os/rt/include/chvt.h ****     while (ch.vtlist.next->delta == (sysinterval_t)0) {
 380:../../../os/rt/include/chvt.h ****       virtual_timer_t *vtp;
 381:../../../os/rt/include/chvt.h ****       vtfunc_t fn;
 382:../../../os/rt/include/chvt.h **** 
 383:../../../os/rt/include/chvt.h ****       vtp = ch.vtlist.next;
 384:../../../os/rt/include/chvt.h ****       fn = vtp->func;
 385:../../../os/rt/include/chvt.h ****       vtp->func = NULL;
 386:../../../os/rt/include/chvt.h ****       vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 387:../../../os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 388:../../../os/rt/include/chvt.h ****       chSysUnlockFromISR();
 389:../../../os/rt/include/chvt.h ****       fn(vtp->par);
 390:../../../os/rt/include/chvt.h ****       chSysLockFromISR();
 391:../../../os/rt/include/chvt.h ****     }
 392:../../../os/rt/include/chvt.h ****   }
 393:../../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 394:../../../os/rt/include/chvt.h ****   virtual_timer_t *vtp;
 488               		.loc 4 394 3 view .LVU134
 395:../../../os/rt/include/chvt.h ****   systime_t now;
 489               		.loc 4 395 3 view .LVU135
 396:../../../os/rt/include/chvt.h ****   sysinterval_t delta, nowdelta;
 490               		.loc 4 396 3 view .LVU136
 397:../../../os/rt/include/chvt.h **** 
 398:../../../os/rt/include/chvt.h ****   /* Looping through timers.*/
 399:../../../os/rt/include/chvt.h ****   vtp = ch.vtlist.next;
 491               		.loc 4 399 3 view .LVU137
 492               		.loc 4 399 7 is_stmt 0 view .LVU138
 493 0010 C091 0000 		lds r28,ch+13
 494 0014 D091 0000 		lds r29,ch+13+1
 495               	.LVL44:
 496               		.loc 4 399 7 view .LVU139
 497 0018 4C81      		ldd r20,Y+4
 498 001a 5D81      		ldd r21,Y+5
 499 001c 80E0      		ldi r24,lo8(ch+13)
 500 001e E82E      		mov r14,r24
 501 0020 80E0      		ldi r24,hi8(ch+13)
 502 0022 F82E      		mov r15,r24
 503               	.L64:
 400:../../../os/rt/include/chvt.h ****   while (true) {
 504               		.loc 4 400 3 is_stmt 1 view .LVU140
 401:../../../os/rt/include/chvt.h **** 
 402:../../../os/rt/include/chvt.h ****     /* Getting the system time as reference.*/
 403:../../../os/rt/include/chvt.h ****     now = chVTGetSystemTimeX();
 505               		.loc 4 403 5 view .LVU141
 506               	.LBB100:
 507               	.LBI100:
 115:../../../os/rt/include/chvt.h **** 
 508               		.loc 4 115 25 view .LVU142
 509               	.LBE100:
 510               	.LBE99:
 511               	.LBE98:
 120:../../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 512               		.loc 4 120 3 view .LVU143
 513               	.LBB133:
 514               	.LBB127:
 515               	.LBB105:
 516               	.LBB101:
 517               	.LBI101:
 518               		.file 5 "../../../os/common/ports/AVR/chcore_timer.h"
   1:../../../os/common/ports/AVR/chcore_timer.h **** /*
   2:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore_timer.h **** 
   4:../../../os/common/ports/AVR/chcore_timer.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore_timer.h **** 
   6:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore_timer.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore_timer.h **** 
  11:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore_timer.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore_timer.h **** 
  16:../../../os/common/ports/AVR/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore_timer.h **** */
  19:../../../os/common/ports/AVR/chcore_timer.h **** 
  20:../../../os/common/ports/AVR/chcore_timer.h **** /**
  21:../../../os/common/ports/AVR/chcore_timer.h ****  * @file    AVR/chcore_timer.h
  22:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   System timer header file.
  23:../../../os/common/ports/AVR/chcore_timer.h ****  *
  24:../../../os/common/ports/AVR/chcore_timer.h ****  * @addtogroup AVR_TIMER
  25:../../../os/common/ports/AVR/chcore_timer.h ****  * @{
  26:../../../os/common/ports/AVR/chcore_timer.h ****  */
  27:../../../os/common/ports/AVR/chcore_timer.h **** 
  28:../../../os/common/ports/AVR/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:../../../os/common/ports/AVR/chcore_timer.h **** #define CHCORE_TIMER_H
  30:../../../os/common/ports/AVR/chcore_timer.h **** 
  31:../../../os/common/ports/AVR/chcore_timer.h **** /* This is the only header in the HAL designed to be include-able alone.*/
  32:../../../os/common/ports/AVR/chcore_timer.h **** #include "hal_st.h"
  33:../../../os/common/ports/AVR/chcore_timer.h **** 
  34:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/common/ports/AVR/chcore_timer.h **** /* Module constants.                                                         */
  36:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore_timer.h **** 
  38:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  40:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore_timer.h **** 
  42:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/common/ports/AVR/chcore_timer.h **** /* Derived constants and error checks.                                       */
  44:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/common/ports/AVR/chcore_timer.h **** 
  46:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/common/ports/AVR/chcore_timer.h **** /* Module data structures and types.                                         */
  48:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/common/ports/AVR/chcore_timer.h **** 
  50:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/common/ports/AVR/chcore_timer.h **** /* Module macros.                                                            */
  52:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  53:../../../os/common/ports/AVR/chcore_timer.h **** 
  54:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  55:../../../os/common/ports/AVR/chcore_timer.h **** /* External declarations.                                                    */
  56:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  57:../../../os/common/ports/AVR/chcore_timer.h **** 
  58:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  59:../../../os/common/ports/AVR/chcore_timer.h **** /* Module inline functions.                                                  */
  60:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  61:../../../os/common/ports/AVR/chcore_timer.h **** 
  62:../../../os/common/ports/AVR/chcore_timer.h **** /**
  63:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Starts the alarm.
  64:../../../os/common/ports/AVR/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  65:../../../os/common/ports/AVR/chcore_timer.h ****  *          this call.
  66:../../../os/common/ports/AVR/chcore_timer.h ****  *
  67:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  68:../../../os/common/ports/AVR/chcore_timer.h ****  *
  69:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  70:../../../os/common/ports/AVR/chcore_timer.h ****  */
  71:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  72:../../../os/common/ports/AVR/chcore_timer.h **** 
  73:../../../os/common/ports/AVR/chcore_timer.h ****   stStartAlarm(time);
  74:../../../os/common/ports/AVR/chcore_timer.h **** }
  75:../../../os/common/ports/AVR/chcore_timer.h **** 
  76:../../../os/common/ports/AVR/chcore_timer.h **** /**
  77:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  78:../../../os/common/ports/AVR/chcore_timer.h ****  *
  79:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  80:../../../os/common/ports/AVR/chcore_timer.h ****  */
  81:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  82:../../../os/common/ports/AVR/chcore_timer.h **** 
  83:../../../os/common/ports/AVR/chcore_timer.h ****   stStopAlarm();
  84:../../../os/common/ports/AVR/chcore_timer.h **** }
  85:../../../os/common/ports/AVR/chcore_timer.h **** 
  86:../../../os/common/ports/AVR/chcore_timer.h **** /**
  87:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Sets the alarm time.
  88:../../../os/common/ports/AVR/chcore_timer.h ****  *
  89:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  90:../../../os/common/ports/AVR/chcore_timer.h ****  *
  91:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  92:../../../os/common/ports/AVR/chcore_timer.h ****  */
  93:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
  94:../../../os/common/ports/AVR/chcore_timer.h **** 
  95:../../../os/common/ports/AVR/chcore_timer.h ****   stSetAlarm(time);
  96:../../../os/common/ports/AVR/chcore_timer.h **** }
  97:../../../os/common/ports/AVR/chcore_timer.h **** 
  98:../../../os/common/ports/AVR/chcore_timer.h **** /**
  99:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Returns the system time.
 100:../../../os/common/ports/AVR/chcore_timer.h ****  *
 101:../../../os/common/ports/AVR/chcore_timer.h ****  * @return              The system time.
 102:../../../os/common/ports/AVR/chcore_timer.h ****  *
 103:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
 104:../../../os/common/ports/AVR/chcore_timer.h ****  */
 105:../../../os/common/ports/AVR/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 519               		.loc 5 105 25 view .LVU144
 520               	.LBE101:
 521               	.LBE105:
 522               	.LBE127:
 523               	.LBE133:
 106:../../../os/common/ports/AVR/chcore_timer.h **** 
 107:../../../os/common/ports/AVR/chcore_timer.h ****   return stGetCounter();
 524               		.loc 5 107 3 view .LVU145
 525               	.LBB134:
 526               	.LBB128:
 527               	.LBB106:
 528               	.LBB104:
 529               	.LBB102:
 530               	.LBI102:
 531               		.file 6 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   AVR/MEGA ST subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                        */
  34:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                        */
  38:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: for models that have many timers, could add AVR_ST_USE_TIMER.      */
  41:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  42:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  43:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                      */
  44:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  45:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  46:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: error checks for valid timer selected.                             */
  47:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  48:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  49:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                        */
  50:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  51:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  52:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  53:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                           */
  54:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  55:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  56:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  57:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                   */
  58:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  59:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  60:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  61:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** extern "C" {
  62:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  63:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  64:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  65:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** }
  66:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  67:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  68:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  69:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  70:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  71:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #else
  72:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  73:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  74:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  75:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  76:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  77:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                 */
  78:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  79:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  80:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  81:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  82:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  83:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  84:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  85:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @notapi
  86:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 532               		.loc 6 87 25 view .LVU146
 533               	.LBB103:
  88:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  89:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 534               		.loc 6 89 3 view .LVU147
 535               		.loc 6 89 10 is_stmt 0 view .LVU148
 536 0024 8091 8400 		lds r24,132
 537 0028 9091 8500 		lds r25,132+1
 538               	.LVL45:
 539               		.loc 6 89 10 view .LVU149
 540               	.LBE103:
 541               	.LBE102:
 542               	.LBE104:
 543               	.LBE106:
 404:../../../os/rt/include/chvt.h ****     nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 544               		.loc 4 404 5 is_stmt 1 view .LVU150
 545               		.loc 4 404 16 is_stmt 0 view .LVU151
 546 002c 2091 0000 		lds r18,ch+19
 547 0030 3091 0000 		lds r19,ch+19+1
 548               	.LVL46:
 549               	.LBB107:
 550               	.LBI107:
 551               		.file 7 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chtime.h **** 
   4:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chtime.h **** 
   6:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chtime.h ****     (at your option) any later version.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @{
  26:../../../os/rt/include/chtime.h ****  */
  27:../../../os/rt/include/chtime.h **** 
  28:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  29:../../../os/rt/include/chtime.h **** #define CHTIME_H
  30:../../../os/rt/include/chtime.h **** 
  31:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  32:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** 
  35:../../../os/rt/include/chtime.h **** /**
  36:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  37:../../../os/rt/include/chtime.h ****  * @{
  38:../../../os/rt/include/chtime.h ****  */
  39:../../../os/rt/include/chtime.h **** /**
  40:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  41:../../../os/rt/include/chtime.h ****  *          specification.
  42:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chtime.h ****  */
  45:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  46:../../../os/rt/include/chtime.h **** 
  47:../../../os/rt/include/chtime.h **** /**
  48:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  49:../../../os/rt/include/chtime.h ****  *          specification.
  50:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chtime.h ****  */
  53:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  54:../../../os/rt/include/chtime.h **** 
  55:../../../os/rt/include/chtime.h **** /**
  56:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  57:../../../os/rt/include/chtime.h ****  */
  58:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  59:../../../os/rt/include/chtime.h **** 
  60:../../../os/rt/include/chtime.h **** /**
  61:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  62:../../../os/rt/include/chtime.h ****  */
  63:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  64:../../../os/rt/include/chtime.h **** /** @} */
  65:../../../os/rt/include/chtime.h **** 
  66:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  67:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** 
  70:../../../os/rt/include/chtime.h **** /**
  71:../../../os/rt/include/chtime.h ****  * @brief   System time counter resolution.
  72:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  73:../../../os/rt/include/chtime.h ****  */
  74:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_RESOLUTION) || defined(__DOXYGEN__)
  75:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_RESOLUTION                32
  76:../../../os/rt/include/chtime.h **** #endif
  77:../../../os/rt/include/chtime.h **** 
  78:../../../os/rt/include/chtime.h **** /**
  79:../../../os/rt/include/chtime.h ****  * @brief   System tick frequency.
  80:../../../os/rt/include/chtime.h ****  * @details Frequency of the system timer that drives the system ticks. This
  81:../../../os/rt/include/chtime.h ****  *          setting also defines the system tick time unit.
  82:../../../os/rt/include/chtime.h ****  */
  83:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_FREQUENCY) || defined(__DOXYGEN__)
  84:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_FREQUENCY                 1000
  85:../../../os/rt/include/chtime.h **** #endif
  86:../../../os/rt/include/chtime.h **** 
  87:../../../os/rt/include/chtime.h **** /**
  88:../../../os/rt/include/chtime.h ****  * @brief   Time intervals data size.
  89:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  90:../../../os/rt/include/chtime.h ****  */
  91:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_INTERVALS_SIZE) || defined(__DOXYGEN__)
  92:../../../os/rt/include/chtime.h **** #define CH_CFG_INTERVALS_SIZE               32
  93:../../../os/rt/include/chtime.h **** #endif
  94:../../../os/rt/include/chtime.h **** 
  95:../../../os/rt/include/chtime.h **** /**
  96:../../../os/rt/include/chtime.h ****  * @brief   Time types data size.
  97:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16 or 32 bits.
  98:../../../os/rt/include/chtime.h ****  */
  99:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_TIME_TYPES_SIZE) || defined(__DOXYGEN__)
 100:../../../os/rt/include/chtime.h **** #define CH_CFG_TIME_TYPES_SIZE              32
 101:../../../os/rt/include/chtime.h **** #endif
 102:../../../os/rt/include/chtime.h **** 
 103:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 104:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
 105:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 106:../../../os/rt/include/chtime.h **** 
 107:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
 108:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
 109:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
 110:../../../os/rt/include/chtime.h **** #endif
 111:../../../os/rt/include/chtime.h **** 
 112:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
 113:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
 114:../../../os/rt/include/chtime.h **** #endif
 115:../../../os/rt/include/chtime.h **** 
 116:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
 117:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
 118:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
 119:../../../os/rt/include/chtime.h **** #endif
 120:../../../os/rt/include/chtime.h **** 
 121:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
 122:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
 123:../../../os/rt/include/chtime.h **** #endif
 124:../../../os/rt/include/chtime.h **** 
 125:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
 126:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
 127:../../../os/rt/include/chtime.h **** #endif
 128:../../../os/rt/include/chtime.h **** 
 129:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 130:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 132:../../../os/rt/include/chtime.h **** 
 133:../../../os/rt/include/chtime.h **** /**
 134:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 135:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 136:../../../os/rt/include/chtime.h ****  */
 137:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 138:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 139:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 140:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 141:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 142:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 143:../../../os/rt/include/chtime.h **** #endif
 144:../../../os/rt/include/chtime.h **** 
 145:../../../os/rt/include/chtime.h **** /**
 146:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 147:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 148:../../../os/rt/include/chtime.h ****  */
 149:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 150:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 151:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 152:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 153:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 154:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 155:../../../os/rt/include/chtime.h **** #endif
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 158:../../../os/rt/include/chtime.h **** /**
 159:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 160:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 161:../../../os/rt/include/chtime.h ****  */
 162:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /**
 165:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 166:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 167:../../../os/rt/include/chtime.h ****  */
 168:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 169:../../../os/rt/include/chtime.h **** 
 170:../../../os/rt/include/chtime.h **** /**
 171:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 172:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 173:../../../os/rt/include/chtime.h ****  */
 174:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 175:../../../os/rt/include/chtime.h **** 
 176:../../../os/rt/include/chtime.h **** /**
 177:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 178:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 179:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 180:../../../os/rt/include/chtime.h ****  */
 181:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 182:../../../os/rt/include/chtime.h **** 
 183:../../../os/rt/include/chtime.h **** #else
 184:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 185:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 186:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 187:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 188:../../../os/rt/include/chtime.h **** #endif
 189:../../../os/rt/include/chtime.h **** 
 190:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 191:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 192:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 193:../../../os/rt/include/chtime.h **** 
 194:../../../os/rt/include/chtime.h **** 
 195:../../../os/rt/include/chtime.h **** /**
 196:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 197:../../../os/rt/include/chtime.h ****  * @{
 198:../../../os/rt/include/chtime.h ****  */
 199:../../../os/rt/include/chtime.h **** /**
 200:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 201:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 202:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 203:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 204:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 205:../../../os/rt/include/chtime.h ****  *          converted.
 206:../../../os/rt/include/chtime.h ****  *
 207:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 208:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 209:../../../os/rt/include/chtime.h ****  *
 210:../../../os/rt/include/chtime.h ****  * @api
 211:../../../os/rt/include/chtime.h ****  */
 212:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 213:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 214:../../../os/rt/include/chtime.h **** 
 215:../../../os/rt/include/chtime.h **** /**
 216:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 217:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 218:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 219:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 220:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 221:../../../os/rt/include/chtime.h ****  *          converted.
 222:../../../os/rt/include/chtime.h ****  *
 223:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 224:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 225:../../../os/rt/include/chtime.h ****  *
 226:../../../os/rt/include/chtime.h ****  * @api
 227:../../../os/rt/include/chtime.h ****  */
 228:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 229:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 230:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 231:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 232:../../../os/rt/include/chtime.h **** 
 233:../../../os/rt/include/chtime.h **** /**
 234:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 235:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 236:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 237:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 238:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 239:../../../os/rt/include/chtime.h ****  *          converted.
 240:../../../os/rt/include/chtime.h ****  *
 241:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 242:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 243:../../../os/rt/include/chtime.h ****  *
 244:../../../os/rt/include/chtime.h ****  * @api
 245:../../../os/rt/include/chtime.h ****  */
 246:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 247:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 248:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 249:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 250:../../../os/rt/include/chtime.h **** 
 251:../../../os/rt/include/chtime.h **** /**
 252:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 253:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 254:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 255:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 256:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 257:../../../os/rt/include/chtime.h ****  *          converted.
 258:../../../os/rt/include/chtime.h ****  *
 259:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 260:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 261:../../../os/rt/include/chtime.h ****  *
 262:../../../os/rt/include/chtime.h ****  * @api
 263:../../../os/rt/include/chtime.h ****  */
 264:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 265:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 266:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 267:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 268:../../../os/rt/include/chtime.h **** 
 269:../../../os/rt/include/chtime.h **** /**
 270:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 271:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 272:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 273:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 274:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 275:../../../os/rt/include/chtime.h ****  *          converted.
 276:../../../os/rt/include/chtime.h ****  *
 277:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 278:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 279:../../../os/rt/include/chtime.h ****  *
 280:../../../os/rt/include/chtime.h ****  * @api
 281:../../../os/rt/include/chtime.h ****  */
 282:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 283:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 284:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 285:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** /**
 288:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 289:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 290:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 291:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 292:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 293:../../../os/rt/include/chtime.h ****  *          converted.
 294:../../../os/rt/include/chtime.h ****  *
 295:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 296:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 297:../../../os/rt/include/chtime.h ****  *
 298:../../../os/rt/include/chtime.h ****  * @api
 299:../../../os/rt/include/chtime.h ****  */
 300:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 301:../../../os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 302:../../../os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 303:../../../os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 304:../../../os/rt/include/chtime.h **** /** @} */
 305:../../../os/rt/include/chtime.h **** 
 306:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 307:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 308:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 309:../../../os/rt/include/chtime.h **** 
 310:../../../os/rt/include/chtime.h **** /*
 311:../../../os/rt/include/chtime.h ****  * Virtual Timers APIs.
 312:../../../os/rt/include/chtime.h ****  */
 313:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 314:../../../os/rt/include/chtime.h **** extern "C" {
 315:../../../os/rt/include/chtime.h **** #endif
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** #endif
 320:../../../os/rt/include/chtime.h **** 
 321:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 322:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 323:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 324:../../../os/rt/include/chtime.h **** 
 325:../../../os/rt/include/chtime.h **** /**
 326:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 327:../../../os/rt/include/chtime.h ****  * @{
 328:../../../os/rt/include/chtime.h ****  */
 329:../../../os/rt/include/chtime.h **** /**
 330:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 331:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 332:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 333:../../../os/rt/include/chtime.h ****  *
 334:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 335:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 336:../../../os/rt/include/chtime.h ****  *
 337:../../../os/rt/include/chtime.h ****  * @special
 338:../../../os/rt/include/chtime.h ****  */
 339:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 340:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 343:../../../os/rt/include/chtime.h **** 
 344:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 345:../../../os/rt/include/chtime.h ****               "conversion overflow");
 346:../../../os/rt/include/chtime.h **** 
 347:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 348:../../../os/rt/include/chtime.h **** }
 349:../../../os/rt/include/chtime.h **** 
 350:../../../os/rt/include/chtime.h **** /**
 351:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 352:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 353:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 354:../../../os/rt/include/chtime.h ****  *
 355:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 356:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 357:../../../os/rt/include/chtime.h ****  *
 358:../../../os/rt/include/chtime.h ****  * @special
 359:../../../os/rt/include/chtime.h ****  */
 360:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 361:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 362:../../../os/rt/include/chtime.h **** 
 363:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 364:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 365:../../../os/rt/include/chtime.h **** 
 366:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 367:../../../os/rt/include/chtime.h ****               "conversion overflow");
 368:../../../os/rt/include/chtime.h **** 
 369:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 370:../../../os/rt/include/chtime.h **** }
 371:../../../os/rt/include/chtime.h **** 
 372:../../../os/rt/include/chtime.h **** /**
 373:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 374:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 375:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 376:../../../os/rt/include/chtime.h ****  *
 377:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 378:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 379:../../../os/rt/include/chtime.h ****  *
 380:../../../os/rt/include/chtime.h ****  * @special
 381:../../../os/rt/include/chtime.h ****  */
 382:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 383:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 384:../../../os/rt/include/chtime.h **** 
 385:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 386:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 387:../../../os/rt/include/chtime.h **** 
 388:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 389:../../../os/rt/include/chtime.h ****               "conversion overflow");
 390:../../../os/rt/include/chtime.h **** 
 391:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 392:../../../os/rt/include/chtime.h **** }
 393:../../../os/rt/include/chtime.h **** 
 394:../../../os/rt/include/chtime.h **** /**
 395:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 396:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 397:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 398:../../../os/rt/include/chtime.h ****  *
 399:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 400:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 401:../../../os/rt/include/chtime.h ****  *
 402:../../../os/rt/include/chtime.h ****  * @special
 403:../../../os/rt/include/chtime.h ****  */
 404:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 405:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 408:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 409:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 410:../../../os/rt/include/chtime.h **** 
 411:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 412:../../../os/rt/include/chtime.h ****               "conversion overflow");
 413:../../../os/rt/include/chtime.h **** 
 414:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 415:../../../os/rt/include/chtime.h **** }
 416:../../../os/rt/include/chtime.h **** 
 417:../../../os/rt/include/chtime.h **** /**
 418:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 419:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 420:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 421:../../../os/rt/include/chtime.h ****  *
 422:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 423:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 424:../../../os/rt/include/chtime.h ****  *
 425:../../../os/rt/include/chtime.h ****  * @special
 426:../../../os/rt/include/chtime.h ****  */
 427:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 428:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 431:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 432:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 433:../../../os/rt/include/chtime.h **** 
 434:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 435:../../../os/rt/include/chtime.h ****               "conversion overflow");
 436:../../../os/rt/include/chtime.h **** 
 437:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 438:../../../os/rt/include/chtime.h **** }
 439:../../../os/rt/include/chtime.h **** 
 440:../../../os/rt/include/chtime.h **** /**
 441:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 442:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 443:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 444:../../../os/rt/include/chtime.h ****  *
 445:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 446:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 447:../../../os/rt/include/chtime.h ****  *
 448:../../../os/rt/include/chtime.h ****  * @special
 449:../../../os/rt/include/chtime.h ****  */
 450:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 451:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 452:../../../os/rt/include/chtime.h **** 
 453:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 454:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 455:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 456:../../../os/rt/include/chtime.h **** 
 457:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 458:../../../os/rt/include/chtime.h ****               "conversion overflow");
 459:../../../os/rt/include/chtime.h **** 
 460:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 461:../../../os/rt/include/chtime.h **** }
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h **** /**
 464:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 465:../../../os/rt/include/chtime.h ****  *
 466:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 467:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 468:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 469:../../../os/rt/include/chtime.h ****  *
 470:../../../os/rt/include/chtime.h ****  * @xclass
 471:../../../os/rt/include/chtime.h ****  */
 472:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 473:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 474:../../../os/rt/include/chtime.h **** 
 475:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 476:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
 477:../../../os/rt/include/chtime.h **** #endif
 478:../../../os/rt/include/chtime.h **** 
 479:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 480:../../../os/rt/include/chtime.h **** }
 481:../../../os/rt/include/chtime.h **** 
 482:../../../os/rt/include/chtime.h **** /**
 483:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 484:../../../os/rt/include/chtime.h ****  *
 485:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 486:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 487:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 488:../../../os/rt/include/chtime.h ****  *
 489:../../../os/rt/include/chtime.h ****  * @xclass
 490:../../../os/rt/include/chtime.h ****  */
 491:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 552               		.loc 7 491 29 is_stmt 1 view .LVU152
 553               	.LBB108:
 492:../../../os/rt/include/chtime.h **** 
 493:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 494:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 495:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 554               		.loc 7 495 3 view .LVU153
 555               		.loc 7 495 10 is_stmt 0 view .LVU154
 556 0034 8C01      		movw r16,r24
 557 0036 021B      		sub r16,r18
 558 0038 130B      		sbc r17,r19
 559               	.LVL47:
 560               		.loc 7 495 10 view .LVU155
 561               	.LBE108:
 562               	.LBE107:
 405:../../../os/rt/include/chvt.h **** 
 406:../../../os/rt/include/chvt.h ****     /* The list scan is limited by the timers header having
 407:../../../os/rt/include/chvt.h ****        "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
 408:../../../os/rt/include/chvt.h ****        greater than all deltas.*/
 409:../../../os/rt/include/chvt.h ****     if (nowdelta < vtp->delta) {
 563               		.loc 4 409 5 is_stmt 1 view .LVU156
 564               		.loc 4 409 8 is_stmt 0 view .LVU157
 565 003a 0417      		cp r16,r20
 566 003c 1507      		cpc r17,r21
 567 003e 00F4      		brsh .L65
 568 0040 00C0      		rjmp .L62
 569               	.LVL48:
 570               	.L63:
 571               	.LBB109:
 410:../../../os/rt/include/chvt.h ****       break;
 411:../../../os/rt/include/chvt.h ****     }
 412:../../../os/rt/include/chvt.h **** 
 413:../../../os/rt/include/chvt.h ****     /* Consuming all timers between "vtp->lasttime" and now.*/
 414:../../../os/rt/include/chvt.h ****     do {
 415:../../../os/rt/include/chvt.h ****       vtfunc_t fn;
 416:../../../os/rt/include/chvt.h **** 
 417:../../../os/rt/include/chvt.h ****       /* The "last time" becomes this timer's expiration time.*/
 418:../../../os/rt/include/chvt.h ****       ch.vtlist.lasttime += vtp->delta;
 419:../../../os/rt/include/chvt.h ****       nowdelta -= vtp->delta;
 420:../../../os/rt/include/chvt.h **** 
 421:../../../os/rt/include/chvt.h ****       vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 422:../../../os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 423:../../../os/rt/include/chvt.h ****       fn = vtp->func;
 424:../../../os/rt/include/chvt.h ****       vtp->func = NULL;
 425:../../../os/rt/include/chvt.h **** 
 426:../../../os/rt/include/chvt.h ****       /* if the list becomes empty then the timer is stopped.*/
 427:../../../os/rt/include/chvt.h ****       if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 428:../../../os/rt/include/chvt.h ****         port_timer_stop_alarm();
 429:../../../os/rt/include/chvt.h ****       }
 430:../../../os/rt/include/chvt.h **** 
 431:../../../os/rt/include/chvt.h ****       /* The callback is invoked outside the kernel critical zone.*/
 432:../../../os/rt/include/chvt.h ****       chSysUnlockFromISR();
 572               		.loc 4 432 7 is_stmt 1 view .LVU158
 573               	.LBE109:
 574               	.LBE128:
 575               	.LBE134:
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 379:../../../os/rt/include/chsys.h **** }
 380:../../../os/rt/include/chsys.h **** 
 381:../../../os/rt/include/chsys.h **** /**
 382:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 383:../../../os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 384:../../../os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 385:../../../os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 386:../../../os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 387:../../../os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 388:../../../os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 389:../../../os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 390:../../../os/rt/include/chsys.h ****  *
 391:../../../os/rt/include/chsys.h ****  * @special
 392:../../../os/rt/include/chsys.h ****  */
 393:../../../os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 394:../../../os/rt/include/chsys.h **** 
 395:../../../os/rt/include/chsys.h ****   port_lock_from_isr();
 396:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 397:../../../os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 398:../../../os/rt/include/chsys.h **** }
 399:../../../os/rt/include/chsys.h **** 
 400:../../../os/rt/include/chsys.h **** /**
 401:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 402:../../../os/rt/include/chsys.h ****  *
 403:../../../os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 404:../../../os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 405:../../../os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 406:../../../os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 407:../../../os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 408:../../../os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 409:../../../os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 410:../../../os/rt/include/chsys.h ****  *
 411:../../../os/rt/include/chsys.h ****  * @special
 412:../../../os/rt/include/chsys.h ****  */
 413:../../../os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 414:../../../os/rt/include/chsys.h **** 
 415:../../../os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 576               		.loc 3 415 31 view .LVU159
 416:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 577               		.loc 3 416 33 view .LVU160
 417:../../../os/rt/include/chsys.h ****   port_unlock_from_isr();
 578               		.loc 3 417 3 view .LVU161
 470:../../../os/common/ports/AVR/chcore.h **** 
 579               		.loc 2 470 1 view .LVU162
 580               	.LBB135:
 581               	.LBB129:
 582               	.LBB112:
 433:../../../os/rt/include/chvt.h ****       fn(vtp->par);
 583               		.loc 4 433 7 view .LVU163
 584 0042 8885      		ldd r24,Y+8
 585 0044 9985      		ldd r25,Y+9
 586 0046 F601      		movw r30,r12
 587 0048 0995      		icall
 588               	.LVL49:
 434:../../../os/rt/include/chvt.h ****       chSysLockFromISR();
 589               		.loc 4 434 7 view .LVU164
 590               	.LBE112:
 591               	.LBE129:
 592               	.LBE135:
 395:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 593               		.loc 3 395 3 view .LVU165
 459:../../../os/common/ports/AVR/chcore.h **** 
 594               		.loc 2 459 1 view .LVU166
 396:../../../os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 595               		.loc 3 396 34 view .LVU167
 397:../../../os/rt/include/chsys.h **** }
 596               		.loc 3 397 29 view .LVU168
 597               	.LBB136:
 598               	.LBB130:
 599               	.LBB113:
 435:../../../os/rt/include/chvt.h **** 
 436:../../../os/rt/include/chvt.h ****       /* Next element in the list.*/
 437:../../../os/rt/include/chvt.h ****       vtp = ch.vtlist.next;
 600               		.loc 4 437 7 view .LVU169
 601               		.loc 4 437 11 is_stmt 0 view .LVU170
 602 004a C091 0000 		lds r28,ch+13
 603 004e D091 0000 		lds r29,ch+13+1
 604               		.loc 4 437 11 view .LVU171
 605               	.LBE113:
 438:../../../os/rt/include/chvt.h ****     }
 439:../../../os/rt/include/chvt.h ****     while (vtp->delta <= nowdelta);
 606               		.loc 4 439 15 view .LVU172
 607 0052 4C81      		ldd r20,Y+4
 608 0054 5D81      		ldd r21,Y+5
 609               		.loc 4 439 5 view .LVU173
 610 0056 0417      		cp r16,r20
 611 0058 1507      		cpc r17,r21
 612 005a 00F0      		brlo .L64
 613               		.loc 4 439 5 view .LVU174
 614 005c 2091 0000 		lds r18,ch+19
 615 0060 3091 0000 		lds r19,ch+19+1
 616               	.LVL50:
 617               	.L65:
 414:../../../os/rt/include/chvt.h ****       vtfunc_t fn;
 618               		.loc 4 414 5 is_stmt 1 view .LVU175
 619               	.LBB114:
 415:../../../os/rt/include/chvt.h **** 
 620               		.loc 4 415 7 view .LVU176
 418:../../../os/rt/include/chvt.h ****       nowdelta -= vtp->delta;
 621               		.loc 4 418 7 view .LVU177
 418:../../../os/rt/include/chvt.h ****       nowdelta -= vtp->delta;
 622               		.loc 4 418 26 is_stmt 0 view .LVU178
 623 0064 240F      		add r18,r20
 624 0066 351F      		adc r19,r21
 625 0068 3093 0000 		sts ch+19+1,r19
 626 006c 2093 0000 		sts ch+19,r18
 419:../../../os/rt/include/chvt.h **** 
 627               		.loc 4 419 7 is_stmt 1 view .LVU179
 419:../../../os/rt/include/chvt.h **** 
 628               		.loc 4 419 16 is_stmt 0 view .LVU180
 629 0070 041B      		sub r16,r20
 630 0072 150B      		sbc r17,r21
 631               	.LVL51:
 421:../../../os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 632               		.loc 4 421 7 is_stmt 1 view .LVU181
 421:../../../os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 633               		.loc 4 421 10 is_stmt 0 view .LVU182
 634 0074 E881      		ld r30,Y
 635 0076 F981      		ldd r31,Y+1
 421:../../../os/rt/include/chvt.h ****       ch.vtlist.next = vtp->next;
 636               		.loc 4 421 23 view .LVU183
 637 0078 F382      		std Z+3,r15
 638 007a E282      		std Z+2,r14
 422:../../../os/rt/include/chvt.h ****       fn = vtp->func;
 639               		.loc 4 422 7 is_stmt 1 view .LVU184
 422:../../../os/rt/include/chvt.h ****       fn = vtp->func;
 640               		.loc 4 422 22 is_stmt 0 view .LVU185
 641 007c F093 0000 		sts ch+13+1,r31
 642 0080 E093 0000 		sts ch+13,r30
 423:../../../os/rt/include/chvt.h ****       vtp->func = NULL;
 643               		.loc 4 423 7 is_stmt 1 view .LVU186
 423:../../../os/rt/include/chvt.h ****       vtp->func = NULL;
 644               		.loc 4 423 10 is_stmt 0 view .LVU187
 645 0084 CE80      		ldd r12,Y+6
 646 0086 DF80      		ldd r13,Y+7
 647               	.LVL52:
 424:../../../os/rt/include/chvt.h **** 
 648               		.loc 4 424 7 is_stmt 1 view .LVU188
 424:../../../os/rt/include/chvt.h **** 
 649               		.loc 4 424 17 is_stmt 0 view .LVU189
 650 0088 1F82      		std Y+7,__zero_reg__
 651 008a 1E82      		std Y+6,__zero_reg__
 427:../../../os/rt/include/chvt.h ****         port_timer_stop_alarm();
 652               		.loc 4 427 7 is_stmt 1 view .LVU190
 427:../../../os/rt/include/chvt.h ****         port_timer_stop_alarm();
 653               		.loc 4 427 10 is_stmt 0 view .LVU191
 654 008c E050      		subi r30,lo8(ch+13)
 655 008e F040      		sbci r31,hi8(ch+13)
 656 0090 01F4      		brne .L63
 428:../../../os/rt/include/chvt.h ****       }
 657               		.loc 4 428 9 is_stmt 1 view .LVU192
 658               	.LBB110:
 659               	.LBI110:
  81:../../../os/common/ports/AVR/chcore_timer.h **** 
 660               		.loc 5 81 20 view .LVU193
 661               	.LBB111:
  83:../../../os/common/ports/AVR/chcore_timer.h **** }
 662               		.loc 5 83 3 view .LVU194
 663 0092 0E94 0000 		call stStopAlarm
 664               	.LVL53:
 665 0096 00C0      		rjmp .L63
 666               	.LVL54:
 667               	.L62:
  83:../../../os/common/ports/AVR/chcore_timer.h **** }
 668               		.loc 5 83 3 is_stmt 0 view .LVU195
 669               	.LBE111:
 670               	.LBE110:
 671               	.LBE114:
 440:../../../os/rt/include/chvt.h ****   }
 441:../../../os/rt/include/chvt.h **** 
 442:../../../os/rt/include/chvt.h ****   /* if the list is empty, nothing else to do.*/
 443:../../../os/rt/include/chvt.h ****   if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 672               		.loc 4 443 3 is_stmt 1 view .LVU196
 673               		.loc 4 443 6 is_stmt 0 view .LVU197
 674 0098 F0E0      		ldi r31,hi8(ch+13)
 675 009a C030      		cpi r28,lo8(ch+13)
 676 009c DF07      		cpc r29,r31
 677 009e 01F0      		breq .L61
 444:../../../os/rt/include/chvt.h ****     return;
 445:../../../os/rt/include/chvt.h ****   }
 446:../../../os/rt/include/chvt.h **** 
 447:../../../os/rt/include/chvt.h ****   /* The "unprocessed nowdelta" time slice is added to "last time"
 448:../../../os/rt/include/chvt.h ****      and subtracted to next timer's delta.*/
 449:../../../os/rt/include/chvt.h ****   ch.vtlist.lasttime += nowdelta;
 678               		.loc 4 449 3 is_stmt 1 view .LVU198
 679               		.loc 4 449 22 is_stmt 0 view .LVU199
 680 00a0 9093 0000 		sts ch+19+1,r25
 681 00a4 8093 0000 		sts ch+19,r24
 450:../../../os/rt/include/chvt.h ****   ch.vtlist.next->delta -= nowdelta;
 682               		.loc 4 450 3 is_stmt 1 view .LVU200
 683               		.loc 4 450 25 is_stmt 0 view .LVU201
 684 00a8 4C81      		ldd r20,Y+4
 685 00aa 5D81      		ldd r21,Y+5
 686 00ac 240F      		add r18,r20
 687 00ae 351F      		adc r19,r21
 688 00b0 281B      		sub r18,r24
 689 00b2 390B      		sbc r19,r25
 690 00b4 3D83      		std Y+5,r19
 691 00b6 2C83      		std Y+4,r18
 451:../../../os/rt/include/chvt.h **** 
 452:../../../os/rt/include/chvt.h ****   /* Recalculating the next alarm time.*/
 453:../../../os/rt/include/chvt.h ****   delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
 692               		.loc 4 453 3 is_stmt 1 view .LVU202
 693               	.LVL55:
 694               		.loc 4 453 3 is_stmt 0 view .LVU203
 695               	.LBE130:
 696               	.LBE136:
 479:../../../os/rt/include/chtime.h **** }
 697               		.loc 7 479 3 is_stmt 1 view .LVU204
 698               		.loc 7 495 3 view .LVU205
 699               	.LBB137:
 700               	.LBB131:
 454:../../../os/rt/include/chvt.h ****   if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 701               		.loc 4 454 3 view .LVU206
 455:../../../os/rt/include/chvt.h ****     delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 456:../../../os/rt/include/chvt.h ****   }
 457:../../../os/rt/include/chvt.h **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 458:../../../os/rt/include/chvt.h ****   /* The delta could be too large for the physical timer to handle.*/
 459:../../../os/rt/include/chvt.h ****   else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 460:../../../os/rt/include/chvt.h ****     delta = (sysinterval_t)TIME_MAX_SYSTIME;
 461:../../../os/rt/include/chvt.h ****   }
 462:../../../os/rt/include/chvt.h **** #endif
 463:../../../os/rt/include/chvt.h ****   port_timer_set_alarm(chTimeAddX(now, delta));
 702               		.loc 4 463 3 view .LVU207
 703               	.LBB115:
 704               	.LBI115:
 472:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 705               		.loc 7 472 25 view .LVU208
 706               	.LBB116:
 479:../../../os/rt/include/chtime.h **** }
 707               		.loc 7 479 3 view .LVU209
 479:../../../os/rt/include/chtime.h **** }
 708               		.loc 7 479 3 is_stmt 0 view .LVU210
 709               	.LBE116:
 710               	.LBE115:
 711               	.LBB119:
 712               	.LBI119:
  93:../../../os/common/ports/AVR/chcore_timer.h **** 
 713               		.loc 5 93 20 is_stmt 1 view .LVU211
 714               	.LBB120:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 715               		.loc 5 95 3 view .LVU212
 716               	.LBE120:
 717               	.LBE119:
 718               	.LBB123:
 719               	.LBB117:
 479:../../../os/rt/include/chtime.h **** }
 720               		.loc 7 479 18 is_stmt 0 view .LVU213
 721 00b8 2230      		cpi r18,2
 722 00ba 3105      		cpc r19,__zero_reg__
 723 00bc 00F0      		brlo .L69
 724               	.LVL56:
 725               	.L67:
 479:../../../os/rt/include/chtime.h **** }
 726               		.loc 7 479 18 view .LVU214
 727               	.LBE117:
 728               	.LBE123:
 729               	.LBB124:
 730               	.LBB121:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 731               		.loc 5 95 3 view .LVU215
 732 00be 820F      		add r24,r18
 733 00c0 931F      		adc r25,r19
 734               	.LVL57:
 735               	/* epilogue start */
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 736               		.loc 5 95 3 view .LVU216
 737               	.LBE121:
 738               	.LBE124:
 739               	.LBE131:
 740               	.LBE137:
 356:../../../os/rt/src/chsys.c ****   CH_CFG_SYSTEM_TICK_HOOK();
 357:../../../os/rt/src/chsys.c **** }
 741               		.loc 1 357 1 view .LVU217
 742 00c2 DF91      		pop r29
 743 00c4 CF91      		pop r28
 744               	.LVL58:
 745               		.loc 1 357 1 view .LVU218
 746 00c6 1F91      		pop r17
 747 00c8 0F91      		pop r16
 748               	.LVL59:
 749               		.loc 1 357 1 view .LVU219
 750 00ca FF90      		pop r15
 751 00cc EF90      		pop r14
 752               	.LVL60:
 753               		.loc 1 357 1 view .LVU220
 754 00ce DF90      		pop r13
 755 00d0 CF90      		pop r12
 756               	.LBB138:
 757               	.LBB132:
 758               	.LBB125:
 759               	.LBB122:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 760               		.loc 5 95 3 view .LVU221
 761 00d2 0C94 0000 		jmp stSetAlarm
 762               	.LVL61:
 763               	.L69:
  95:../../../os/common/ports/AVR/chcore_timer.h **** }
 764               		.loc 5 95 3 view .LVU222
 765               	.LBE122:
 766               	.LBE125:
 767               	.LBB126:
 768               	.LBB118:
 479:../../../os/rt/include/chtime.h **** }
 769               		.loc 7 479 18 view .LVU223
 770 00d6 22E0      		ldi r18,lo8(2)
 771 00d8 30E0      		ldi r19,0
 772 00da 00C0      		rjmp .L67
 773               	.LVL62:
 774               	.L61:
 775               	/* epilogue start */
 479:../../../os/rt/include/chtime.h **** }
 776               		.loc 7 479 18 view .LVU224
 777               	.LBE118:
 778               	.LBE126:
 779               	.LBE132:
 780               	.LBE138:
 781               		.loc 1 357 1 view .LVU225
 782 00dc DF91      		pop r29
 783 00de CF91      		pop r28
 784               	.LVL63:
 785               		.loc 1 357 1 view .LVU226
 786 00e0 1F91      		pop r17
 787 00e2 0F91      		pop r16
 788               	.LVL64:
 789               		.loc 1 357 1 view .LVU227
 790 00e4 FF90      		pop r15
 791 00e6 EF90      		pop r14
 792               	.LVL65:
 793               		.loc 1 357 1 view .LVU228
 794 00e8 DF90      		pop r13
 795 00ea CF90      		pop r12
 796 00ec 0895      		ret
 797               		.cfi_endproc
 798               	.LFE145:
 800               		.section	.text.chSysGetStatusAndLockX,"ax",@progbits
 801               	.global	chSysGetStatusAndLockX
 803               	chSysGetStatusAndLockX:
 804               	.LFB146:
 358:../../../os/rt/src/chsys.c **** 
 359:../../../os/rt/src/chsys.c **** /**
 360:../../../os/rt/src/chsys.c ****  * @brief   Returns the execution status and enters a critical zone.
 361:../../../os/rt/src/chsys.c ****  * @details This functions enters into a critical zone and can be called
 362:../../../os/rt/src/chsys.c ****  *          from any context. Because its flexibility it is less efficient
 363:../../../os/rt/src/chsys.c ****  *          than @p chSysLock() which is preferable when the calling context
 364:../../../os/rt/src/chsys.c ****  *          is known.
 365:../../../os/rt/src/chsys.c ****  * @post    The system is in a critical zone.
 366:../../../os/rt/src/chsys.c ****  *
 367:../../../os/rt/src/chsys.c ****  * @return              The previous system status, the encoding of this
 368:../../../os/rt/src/chsys.c ****  *                      status word is architecture-dependent and opaque.
 369:../../../os/rt/src/chsys.c ****  *
 370:../../../os/rt/src/chsys.c ****  * @xclass
 371:../../../os/rt/src/chsys.c ****  */
 372:../../../os/rt/src/chsys.c **** syssts_t chSysGetStatusAndLockX(void) {
 805               		.loc 1 372 39 is_stmt 1 view -0
 806               		.cfi_startproc
 807               	/* prologue: function */
 808               	/* frame size = 0 */
 809               	/* stack size = 0 */
 810               	.L__stack_usage = 0
 373:../../../os/rt/src/chsys.c **** 
 374:../../../os/rt/src/chsys.c ****   syssts_t sts = port_get_irq_status();
 811               		.loc 1 374 3 view .LVU230
 812               	.LBB139:
 813               	.LBI139:
 399:../../../os/common/ports/AVR/chcore.h **** 
 814               		.loc 2 399 24 view .LVU231
 815               	.LBB140:
 401:../../../os/common/ports/AVR/chcore.h **** }
 816               		.loc 2 401 3 view .LVU232
 401:../../../os/common/ports/AVR/chcore.h **** }
 817               		.loc 2 401 10 is_stmt 0 view .LVU233
 818 0000 8FB7      		in r24,__SREG__
 819               	.LVL66:
 401:../../../os/common/ports/AVR/chcore.h **** }
 820               		.loc 2 401 10 view .LVU234
 821               	.LBE140:
 822               	.LBE139:
 375:../../../os/rt/src/chsys.c ****   if (port_irq_enabled(sts)) {
 823               		.loc 1 375 3 is_stmt 1 view .LVU235
 824               	.LBB141:
 825               	.LBI141:
 413:../../../os/common/ports/AVR/chcore.h **** 
 826               		.loc 2 413 20 view .LVU236
 827               	.LBB142:
 415:../../../os/common/ports/AVR/chcore.h **** }
 828               		.loc 2 415 3 view .LVU237
 415:../../../os/common/ports/AVR/chcore.h **** }
 829               		.loc 2 415 3 is_stmt 0 view .LVU238
 830               	.LBE142:
 831               	.LBE141:
 832               		.loc 1 375 6 view .LVU239
 833 0002 87FF      		sbrs r24,7
 834               	.L70:
 835               	/* epilogue start */
 376:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 377:../../../os/rt/src/chsys.c ****       chSysLockFromISR();
 378:../../../os/rt/src/chsys.c ****     }
 379:../../../os/rt/src/chsys.c ****     else {
 380:../../../os/rt/src/chsys.c ****       chSysLock();
 381:../../../os/rt/src/chsys.c ****     }
 382:../../../os/rt/src/chsys.c ****   }
 383:../../../os/rt/src/chsys.c ****   return sts;
 384:../../../os/rt/src/chsys.c **** }
 836               		.loc 1 384 1 view .LVU240
 837 0004 0895      		ret
 838               	.L72:
 376:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 839               		.loc 1 376 5 is_stmt 1 view .LVU241
 840               	.LBB143:
 841               	.LBI143:
 425:../../../os/common/ports/AVR/chcore.h **** 
 842               		.loc 2 425 20 view .LVU242
 843               	.LBB144:
 427:../../../os/common/ports/AVR/chcore.h **** }
 844               		.loc 2 427 3 view .LVU243
 845               	.LBE144:
 846               	.LBE143:
 376:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 847               		.loc 1 376 8 is_stmt 0 view .LVU244
 848 0006 9091 0000 		lds r25,__avr_in_isr
 849 000a 9111      		cpse r25,__zero_reg__
 850 000c 00C0      		rjmp .L70
 380:../../../os/rt/src/chsys.c ****     }
 851               		.loc 1 380 7 is_stmt 1 view .LVU245
 852               	.LBB145:
 853               	.LBI145:
 353:../../../os/rt/include/chsys.h **** 
 854               		.loc 3 353 20 view .LVU246
 855               	.LBE145:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 856               		.loc 3 355 3 view .LVU247
 857               	.LBB148:
 858               	.LBB146:
 859               	.LBI146:
 435:../../../os/common/ports/AVR/chcore.h **** 
 860               		.loc 2 435 20 view .LVU248
 861               	.LBB147:
 437:../../../os/common/ports/AVR/chcore.h **** }
 862               		.loc 2 437 3 view .LVU249
 863               	/* #APP */
 864               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 865 000e F894      		cli
 866               	 ;  0 "" 2
 867               	/* #NOAPP */
 868               	.LBE147:
 869               	.LBE146:
 870               	.LBE148:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 871               		.loc 3 356 34 view .LVU250
 357:../../../os/rt/include/chsys.h **** }
 872               		.loc 3 357 20 view .LVU251
 383:../../../os/rt/src/chsys.c **** }
 873               		.loc 1 383 3 view .LVU252
 874               	/* epilogue start */
 875               		.loc 1 384 1 is_stmt 0 view .LVU253
 876 0010 0895      		ret
 877               		.cfi_endproc
 878               	.LFE146:
 880               		.section	.text.chSysRestoreStatusX,"ax",@progbits
 881               	.global	chSysRestoreStatusX
 883               	chSysRestoreStatusX:
 884               	.LVL67:
 885               	.LFB147:
 385:../../../os/rt/src/chsys.c **** 
 386:../../../os/rt/src/chsys.c **** /**
 387:../../../os/rt/src/chsys.c ****  * @brief   Restores the specified execution status and leaves a critical zone.
 388:../../../os/rt/src/chsys.c ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 389:../../../os/rt/src/chsys.c ****  *          if exiting the critical zone and if not in ISR context.
 390:../../../os/rt/src/chsys.c ****  *
 391:../../../os/rt/src/chsys.c ****  * @param[in] sts       the system status to be restored.
 392:../../../os/rt/src/chsys.c ****  *
 393:../../../os/rt/src/chsys.c ****  * @xclass
 394:../../../os/rt/src/chsys.c ****  */
 395:../../../os/rt/src/chsys.c **** void chSysRestoreStatusX(syssts_t sts) {
 886               		.loc 1 395 40 is_stmt 1 view -0
 887               		.cfi_startproc
 888               	/* prologue: function */
 889               	/* frame size = 0 */
 890               	/* stack size = 0 */
 891               	.L__stack_usage = 0
 396:../../../os/rt/src/chsys.c **** 
 397:../../../os/rt/src/chsys.c ****   if (port_irq_enabled(sts)) {
 892               		.loc 1 397 3 view .LVU255
 893               	.LBB149:
 894               	.LBI149:
 413:../../../os/common/ports/AVR/chcore.h **** 
 895               		.loc 2 413 20 view .LVU256
 896               	.LBB150:
 415:../../../os/common/ports/AVR/chcore.h **** }
 897               		.loc 2 415 3 view .LVU257
 415:../../../os/common/ports/AVR/chcore.h **** }
 898               		.loc 2 415 3 is_stmt 0 view .LVU258
 899               	.LBE150:
 900               	.LBE149:
 901               		.loc 1 397 6 view .LVU259
 902 0000 87FF      		sbrs r24,7
 903               	.LVL68:
 904               	.L73:
 905               	/* epilogue start */
 398:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 399:../../../os/rt/src/chsys.c ****       chSysUnlockFromISR();
 400:../../../os/rt/src/chsys.c ****     }
 401:../../../os/rt/src/chsys.c ****     else {
 402:../../../os/rt/src/chsys.c ****       chSchRescheduleS();
 403:../../../os/rt/src/chsys.c ****       chSysUnlock();
 404:../../../os/rt/src/chsys.c ****     }
 405:../../../os/rt/src/chsys.c ****   }
 406:../../../os/rt/src/chsys.c **** }
 906               		.loc 1 406 1 view .LVU260
 907 0002 0895      		ret
 908               	.LVL69:
 909               	.L75:
 398:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 910               		.loc 1 398 5 is_stmt 1 view .LVU261
 911               	.LBB151:
 912               	.LBI151:
 425:../../../os/common/ports/AVR/chcore.h **** 
 913               		.loc 2 425 20 view .LVU262
 914               	.LBB152:
 427:../../../os/common/ports/AVR/chcore.h **** }
 915               		.loc 2 427 3 view .LVU263
 916               	.LBE152:
 917               	.LBE151:
 398:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 918               		.loc 1 398 8 is_stmt 0 view .LVU264
 919 0004 8091 0000 		lds r24,__avr_in_isr
 920               	.LVL70:
 398:../../../os/rt/src/chsys.c ****     if (port_is_isr_context()) {
 921               		.loc 1 398 8 view .LVU265
 922 0008 8111      		cpse r24,__zero_reg__
 923 000a 00C0      		rjmp .L73
 402:../../../os/rt/src/chsys.c ****       chSysUnlock();
 924               		.loc 1 402 7 is_stmt 1 view .LVU266
 925 000c 0E94 0000 		call chSchRescheduleS
 926               	.LVL71:
 403:../../../os/rt/src/chsys.c ****     }
 927               		.loc 1 403 7 view .LVU267
 928               	.LBB153:
 929               	.LBI153:
 365:../../../os/rt/include/chsys.h **** 
 930               		.loc 3 365 20 view .LVU268
 931               	.LBB154:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 932               		.loc 3 367 22 view .LVU269
 368:../../../os/rt/include/chsys.h **** 
 933               		.loc 3 368 33 view .LVU270
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 934               		.loc 3 374 3 view .LVU271
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 935               		.loc 3 374 3 view .LVU272
 378:../../../os/rt/include/chsys.h **** }
 936               		.loc 3 378 3 view .LVU273
 937               	.LBB155:
 938               	.LBI155:
 445:../../../os/common/ports/AVR/chcore.h **** 
 939               		.loc 2 445 20 view .LVU274
 940               	.LBB156:
 447:../../../os/common/ports/AVR/chcore.h **** }
 941               		.loc 2 447 3 view .LVU275
 942               	/* #APP */
 943               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 944 0010 7894      		sei
 945               	 ;  0 "" 2
 946               	/* #NOAPP */
 947               	/* epilogue start */
 948               	.LBE156:
 949               	.LBE155:
 950               	.LBE154:
 951               	.LBE153:
 952               		.loc 1 406 1 is_stmt 0 view .LVU276
 953 0012 0895      		ret
 954               		.cfi_endproc
 955               	.LFE147:
 957               		.section	.rodata.str1.1,"aMS",@progbits,1
 958               	.LC0:
 959 0000 6964 6C65 		.string	"idle"
 959      00
 960               		.section	.rodata.idle_descriptor.2695,"a"
 963               	idle_descriptor.2695:
 964 0000 0000      		.word	.LC0
 965 0002 0000      		.word	ch_idle_thread_wa
 966 0004 0000      		.word	ch_idle_thread_wa+105
 967 0006 01        		.byte	1
 968 0007 0000      		.word	gs(_idle_thread)
 969 0009 0000      		.word	0
 970               		.comm	ch_idle_thread_wa,105,1
 971               		.text
 972               	.Letext0:
 973               		.file 8 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 974               		.file 9 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 975               		.file 10 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 976               		.file 11 "../../../os/rt/include/chsystypes.h"
 977               		.file 12 "../../../os/rt/include/chschd.h"
 978               		.file 13 "../../../os/rt/include/chsem.h"
 979               		.file 14 "../../../os/rt/include/chmtx.h"
 980               		.file 15 "../../../os/rt/include/chthreads.h"
 981               		.file 16 "../../../os/rt/include/chregistry.h"
 982               		.file 17 "../../../os/common/oslib/include/chmemcore.h"
 983               		.file 18 "../../../os/hal/include/hal_st.h"
 984               		.file 19 "../../../os/common/oslib/include/chheap.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chsys.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:12     .text._idle_thread:0000000000000000 _idle_thread
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:35     .text.chSysInit:0000000000000000 chSysInit
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:963    .rodata.idle_descriptor.2695:0000000000000000 idle_descriptor.2695
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:115    .text.chSysHalt:0000000000000000 chSysHalt
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:158    .text.chSysIntegrityCheckI:0000000000000000 chSysIntegrityCheckI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:440    .text.chSysTimerHandlerI:0000000000000000 chSysTimerHandlerI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:803    .text.chSysGetStatusAndLockX:0000000000000000 chSysGetStatusAndLockX
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cckNa866.s:883    .text.chSysRestoreStatusX:0000000000000000 chSysRestoreStatusX
                            *COM*:0000000000000069 ch_idle_thread_wa

UNDEFINED SYMBOLS
_scheduler_init
_vt_init
_core_init
_heap_init
ch_debug
ch
_thread_init
__avr_in_isr
chThdCreate
stStopAlarm
stSetAlarm
chSchRescheduleS
__do_copy_data
__do_clear_bss
