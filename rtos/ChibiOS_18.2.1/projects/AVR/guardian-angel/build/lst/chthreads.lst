   1               		.file	"chthreads.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._thread_init,"ax",@progbits
  11               	.global	_thread_init
  13               	_thread_init:
  14               	.LVL0:
  15               	.LFB141:
  16               		.file 1 "../../../os/rt/src/chthreads.c"
   1:../../../os/rt/src/chthreads.c **** /*
   2:../../../os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chthreads.c **** 
   4:../../../os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chthreads.c **** 
   6:../../../os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chthreads.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chthreads.c ****     (at your option) any later version.
  10:../../../os/rt/src/chthreads.c **** 
  11:../../../os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chthreads.c **** 
  16:../../../os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chthreads.c **** */
  19:../../../os/rt/src/chthreads.c **** 
  20:../../../os/rt/src/chthreads.c **** /**
  21:../../../os/rt/src/chthreads.c ****  * @file    chthreads.c
  22:../../../os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:../../../os/rt/src/chthreads.c ****  *
  24:../../../os/rt/src/chthreads.c ****  * @addtogroup threads
  25:../../../os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:../../../os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:../../../os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:../../../os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:../../../os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:../../../os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:../../../os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:../../../os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:../../../os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:../../../os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:../../../os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:../../../os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:../../../os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:../../../os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:../../../os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:../../../os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:../../../os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:../../../os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:../../../os/rt/src/chthreads.c ****  *            is reached.
  45:../../../os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:../../../os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:../../../os/rt/src/chthreads.c ****  *          .
  48:../../../os/rt/src/chthreads.c ****  * @{
  49:../../../os/rt/src/chthreads.c ****  */
  50:../../../os/rt/src/chthreads.c **** 
  51:../../../os/rt/src/chthreads.c **** #include "ch.h"
  52:../../../os/rt/src/chthreads.c **** 
  53:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  54:../../../os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  55:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  56:../../../os/rt/src/chthreads.c **** 
  57:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  58:../../../os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  59:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  60:../../../os/rt/src/chthreads.c **** 
  61:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  62:../../../os/rt/src/chthreads.c **** /* Module local types.                                                       */
  63:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  64:../../../os/rt/src/chthreads.c **** 
  65:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  66:../../../os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  67:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  68:../../../os/rt/src/chthreads.c **** 
  69:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  70:../../../os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  71:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  72:../../../os/rt/src/chthreads.c **** 
  73:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  74:../../../os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  75:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  76:../../../os/rt/src/chthreads.c **** 
  77:../../../os/rt/src/chthreads.c **** /**
  78:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  79:../../../os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  80:../../../os/rt/src/chthreads.c ****  *
  81:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  82:../../../os/rt/src/chthreads.c ****  * @param[in] name      thread name
  83:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  84:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  85:../../../os/rt/src/chthreads.c ****  *
  86:../../../os/rt/src/chthreads.c ****  * @notapi
  87:../../../os/rt/src/chthreads.c ****  */
  88:../../../os/rt/src/chthreads.c **** thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
  17               		.loc 1 88 70 view -0
  18               		.cfi_startproc
  19               		.loc 1 88 70 is_stmt 0 view .LVU1
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 29, -3
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 FC01      		movw r30,r24
  89:../../../os/rt/src/chthreads.c **** 
  90:../../../os/rt/src/chthreads.c ****   tp->prio      = prio;
  33               		.loc 1 90 3 is_stmt 1 view .LVU2
  34               		.loc 1 90 17 is_stmt 0 view .LVU3
  35 0006 4483      		std Z+4,r20
  91:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
  36               		.loc 1 91 3 is_stmt 1 view .LVU4
  37               		.loc 1 91 17 is_stmt 0 view .LVU5
  38 0008 82E0      		ldi r24,lo8(2)
  39               	.LVL1:
  40               		.loc 1 91 17 view .LVU6
  41 000a 8587      		std Z+13,r24
  92:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  42               		.loc 1 92 3 is_stmt 1 view .LVU7
  43               		.loc 1 92 17 is_stmt 0 view .LVU8
  44 000c 1686      		std Z+14,__zero_reg__
  93:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
  94:../../../os/rt/src/chthreads.c ****   tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
  95:../../../os/rt/src/chthreads.c **** #endif
  96:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
  97:../../../os/rt/src/chthreads.c ****   tp->realprio  = prio;
  45               		.loc 1 97 3 is_stmt 1 view .LVU9
  46               		.loc 1 97 17 is_stmt 0 view .LVU10
  47 000e 438F      		std Z+27,r20
  98:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
  48               		.loc 1 98 3 is_stmt 1 view .LVU11
  49               		.loc 1 98 17 is_stmt 0 view .LVU12
  50 0010 128E      		std Z+26,__zero_reg__
  51 0012 118E      		std Z+25,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #endif
 100:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 101:../../../os/rt/src/chthreads.c ****   tp->epending  = (eventmask_t)0;
  52               		.loc 1 101 3 is_stmt 1 view .LVU13
  53               		.loc 1 101 17 is_stmt 0 view .LVU14
  54 0014 108E      		std Z+24,__zero_reg__
 102:../../../os/rt/src/chthreads.c **** #endif
 103:../../../os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 104:../../../os/rt/src/chthreads.c ****   tp->time      = (systime_t)0;
 105:../../../os/rt/src/chthreads.c **** #endif
 106:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 107:../../../os/rt/src/chthreads.c ****   tp->refs      = (trefs_t)1;
  55               		.loc 1 107 3 is_stmt 1 view .LVU15
  56               		.loc 1 107 17 is_stmt 0 view .LVU16
  57 0016 81E0      		ldi r24,lo8(1)
  58 0018 8787      		std Z+15,r24
 108:../../../os/rt/src/chthreads.c ****   tp->name      = name;
  59               		.loc 1 108 3 is_stmt 1 view .LVU17
  60               		.loc 1 108 17 is_stmt 0 view .LVU18
  61 001a 7487      		std Z+12,r23
  62 001c 6387      		std Z+11,r22
 109:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
  63               		.loc 1 109 3 is_stmt 1 view .LVU19
  64 001e A0E0      		ldi r26,lo8(ch)
  65 0020 B0E0      		ldi r27,hi8(ch)
  66 0022 B087      		std Z+8,r27
  67 0024 A783      		std Z+7,r26
  68               		.loc 1 109 3 view .LVU20
  69 0026 1996      		adiw r26,9
  70 0028 CD91      		ld r28,X+
  71 002a DC91      		ld r29,X
  72 002c 1A97      		sbiw r26,9+1
  73 002e D287      		std Z+10,r29
  74 0030 C187      		std Z+9,r28
  75               		.loc 1 109 3 view .LVU21
  76 0032 F887      		std Y+8,r31
  77 0034 EF83      		std Y+7,r30
  78               		.loc 1 109 3 view .LVU22
  79 0036 1A96      		adiw r26,9+1
  80 0038 FC93      		st X,r31
  81 003a EE93      		st -X,r30
  82 003c 1997      		sbiw r26,9
  83               		.loc 1 109 17 view .LVU23
 110:../../../os/rt/src/chthreads.c **** #else
 111:../../../os/rt/src/chthreads.c ****   (void)name;
 112:../../../os/rt/src/chthreads.c **** #endif
 113:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 114:../../../os/rt/src/chthreads.c ****   list_init(&tp->waiting);
  84               		.loc 1 114 3 view .LVU24
  85               	.LVL2:
  86               	.LBB218:
  87               	.LBI218:
  88               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
  89               		.loc 2 499 20 view .LVU25
  90               	.LBB219:
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
  91               		.loc 2 501 3 view .LVU26
  92               	.LBE219:
  93               	.LBE218:
  94               		.loc 1 114 3 is_stmt 0 view .LVU27
  95 003e CF01      		movw r24,r30
  96 0040 4296      		adiw r24,18
  97               	.LVL3:
  98               	.LBB221:
  99               	.LBB220:
 100               		.loc 2 501 13 view .LVU28
 101 0042 938B      		std Z+19,r25
 102 0044 828B      		std Z+18,r24
 103               	.LVL4:
 104               		.loc 2 501 13 view .LVU29
 105               	.LBE220:
 106               	.LBE221:
 115:../../../os/rt/src/chthreads.c **** #endif
 116:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 117:../../../os/rt/src/chthreads.c ****   queue_init(&tp->msgqueue);
 107               		.loc 1 117 3 is_stmt 1 view .LVU30
 108 0046 0296      		adiw r24,2
 109               	.LVL5:
 110               	.LBB222:
 111               	.LBI222:
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 112               		.loc 2 537 20 view .LVU31
 113               	.LBB223:
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 114               		.loc 2 539 3 view .LVU32
 115               		.loc 2 539 13 is_stmt 0 view .LVU33
 116 0048 958B      		std Z+21,r25
 117 004a 848B      		std Z+20,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 118               		.loc 2 540 3 is_stmt 1 view .LVU34
 119               		.loc 2 540 13 is_stmt 0 view .LVU35
 120 004c 978B      		std Z+23,r25
 121 004e 868B      		std Z+22,r24
 122               	.LVL6:
 123               		.loc 2 540 13 view .LVU36
 124               	.LBE223:
 125               	.LBE222:
 118:../../../os/rt/src/chthreads.c **** #endif
 119:../../../os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 120:../../../os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 121:../../../os/rt/src/chthreads.c **** #endif
 122:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
 126               		.loc 1 122 3 is_stmt 1 view .LVU37
 127               		.loc 1 122 30 view .LVU38
 123:../../../os/rt/src/chthreads.c ****   return tp;
 128               		.loc 1 123 3 view .LVU39
 124:../../../os/rt/src/chthreads.c **** }
 129               		.loc 1 124 1 is_stmt 0 view .LVU40
 130 0050 CF01      		movw r24,r30
 131               	/* epilogue start */
 132 0052 DF91      		pop r29
 133 0054 CF91      		pop r28
 134 0056 0895      		ret
 135               		.cfi_endproc
 136               	.LFE141:
 138               		.section	.text.chThdCreateSuspendedI,"ax",@progbits
 139               	.global	chThdCreateSuspendedI
 141               	chThdCreateSuspendedI:
 142               	.LVL7:
 143               	.LFB142:
 125:../../../os/rt/src/chthreads.c **** 
 126:../../../os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 127:../../../os/rt/src/chthreads.c **** /**
 128:../../../os/rt/src/chthreads.c ****  * @brief   Memory fill utility.
 129:../../../os/rt/src/chthreads.c ****  *
 130:../../../os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 131:../../../os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 132:../../../os/rt/src/chthreads.c ****  * @param[in] v         filler value
 133:../../../os/rt/src/chthreads.c ****  *
 134:../../../os/rt/src/chthreads.c ****  * @notapi
 135:../../../os/rt/src/chthreads.c ****  */
 136:../../../os/rt/src/chthreads.c **** void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 137:../../../os/rt/src/chthreads.c **** 
 138:../../../os/rt/src/chthreads.c ****   while (startp < endp) {
 139:../../../os/rt/src/chthreads.c ****     *startp++ = v;
 140:../../../os/rt/src/chthreads.c ****   }
 141:../../../os/rt/src/chthreads.c **** }
 142:../../../os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS == TRUE */
 143:../../../os/rt/src/chthreads.c **** 
 144:../../../os/rt/src/chthreads.c **** /**
 145:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 146:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 147:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 148:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 149:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 150:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 151:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 152:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 153:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 154:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 155:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 156:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 157:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 158:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 159:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 160:../../../os/rt/src/chthreads.c ****  *
 161:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 162:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 163:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 164:../../../os/rt/src/chthreads.c ****  *
 165:../../../os/rt/src/chthreads.c ****  * @iclass
 166:../../../os/rt/src/chthreads.c ****  */
 167:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 144               		.loc 1 167 65 is_stmt 1 view -0
 145               		.cfi_startproc
 146               		.loc 1 167 65 is_stmt 0 view .LVU42
 147 0000 CF93      		push r28
 148               	.LCFI2:
 149               		.cfi_def_cfa_offset 3
 150               		.cfi_offset 28, -2
 151 0002 DF93      		push r29
 152               	.LCFI3:
 153               		.cfi_def_cfa_offset 4
 154               		.cfi_offset 29, -3
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 2 */
 158               	.L__stack_usage = 2
 159 0004 DC01      		movw r26,r24
 168:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 160               		.loc 1 168 3 is_stmt 1 view .LVU43
 169:../../../os/rt/src/chthreads.c **** 
 170:../../../os/rt/src/chthreads.c ****   chDbgCheckClassI();
 161               		.loc 1 170 21 view .LVU44
 171:../../../os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
 162               		.loc 1 171 3 view .LVU45
 163               		.loc 1 171 3 view .LVU46
 172:../../../os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 164               		.loc 1 172 3 view .LVU47
 165               		.loc 1 172 3 view .LVU48
 173:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 174:../../../os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 175:../../../os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 176:../../../os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 166               		.loc 1 176 3 view .LVU49
 167               		.loc 1 176 3 view .LVU50
 177:../../../os/rt/src/chthreads.c **** 
 178:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 179:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 180:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 181:../../../os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)tdp->wend -
 168               		.loc 1 181 3 view .LVU51
 169               		.loc 1 181 35 is_stmt 0 view .LVU52
 170 0006 1496      		adiw r26,4
 171 0008 2D91      		ld r18,X+
 172 000a 3C91      		ld r19,X
 173 000c 1597      		sbiw r26,4+1
 174               		.loc 1 181 6 view .LVU53
 175 000e F901      		movw r30,r18
 176 0010 7C97      		sbiw r30,28
 177               	.LVL8:
 182:../../../os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 183:../../../os/rt/src/chthreads.c **** 
 184:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 185:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 186:../../../os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 187:../../../os/rt/src/chthreads.c **** #endif
 188:../../../os/rt/src/chthreads.c **** 
 189:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 190:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 178               		.loc 1 190 3 is_stmt 1 view .LVU54
 179 0012 E901      		movw r28,r18
 180 0014 E197      		sbiw r28,49
 181 0016 D683      		std Z+6,r29
 182 0018 C583      		std Z+5,r28
 183               		.loc 1 190 3 view .LVU55
 184 001a 1796      		adiw r26,7
 185 001c 9C91      		ld r25,X
 186 001e 1797      		sbiw r26,7
 187 0020 1896      		adiw r26,8
 188 0022 8C91      		ld r24,X
 189 0024 1897      		sbiw r26,8
 190               	.LVL9:
 191               		.loc 1 190 3 is_stmt 0 view .LVU56
 192 0026 9A8B      		std Y+18,r25
 193               		.loc 1 190 3 is_stmt 1 view .LVU57
 194 0028 898B      		std Y+17,r24
 195               		.loc 1 190 3 view .LVU58
 196 002a 1996      		adiw r26,9
 197 002c 9C91      		ld r25,X
 198 002e 1997      		sbiw r26,9
 199 0030 1A96      		adiw r26,10
 200 0032 8C91      		ld r24,X
 201 0034 1A97      		sbiw r26,10
 202 0036 988B      		std Y+16,r25
 203               		.loc 1 190 3 view .LVU59
 204 0038 8F87      		std Y+15,r24
 205               		.loc 1 190 3 view .LVU60
 206 003a 80E0      		ldi r24,lo8(gs(_port_thread_start))
 207 003c 90E0      		ldi r25,hi8(gs(_port_thread_start))
 208 003e 9B8B      		std Y+19,r25
 209               		.loc 1 190 3 view .LVU61
 210 0040 8C8B      		std Y+20,r24
 211               		.loc 1 190 63 view .LVU62
 191:../../../os/rt/src/chthreads.c **** 
 192:../../../os/rt/src/chthreads.c ****   /* The driver object is initialized but not started.*/
 193:../../../os/rt/src/chthreads.c ****   return _thread_init(tp, tdp->name, tdp->prio);
 212               		.loc 1 193 3 view .LVU63
 213               		.loc 1 193 10 is_stmt 0 view .LVU64
 214 0042 1696      		adiw r26,6
 215 0044 8C91      		ld r24,X
 216 0046 1697      		sbiw r26,6
 217 0048 4D91      		ld r20,X+
 218 004a 5C91      		ld r21,X
 219               	.LVL10:
 220               	.LBB224:
 221               	.LBI224:
  88:../../../os/rt/src/chthreads.c **** 
 222               		.loc 1 88 11 is_stmt 1 view .LVU65
 223               	.LBB225:
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 224               		.loc 1 90 3 view .LVU66
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 225               		.loc 1 90 17 is_stmt 0 view .LVU67
 226 004c 8483      		std Z+4,r24
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 227               		.loc 1 91 3 is_stmt 1 view .LVU68
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 228               		.loc 1 91 17 is_stmt 0 view .LVU69
 229 004e 92E0      		ldi r25,lo8(2)
 230 0050 9587      		std Z+13,r25
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 231               		.loc 1 92 3 is_stmt 1 view .LVU70
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 232               		.loc 1 92 17 is_stmt 0 view .LVU71
 233 0052 1686      		std Z+14,__zero_reg__
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 234               		.loc 1 97 3 is_stmt 1 view .LVU72
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 235               		.loc 1 97 17 is_stmt 0 view .LVU73
 236 0054 838F      		std Z+27,r24
  98:../../../os/rt/src/chthreads.c **** #endif
 237               		.loc 1 98 3 is_stmt 1 view .LVU74
  98:../../../os/rt/src/chthreads.c **** #endif
 238               		.loc 1 98 17 is_stmt 0 view .LVU75
 239 0056 128E      		std Z+26,__zero_reg__
 240 0058 118E      		std Z+25,__zero_reg__
 101:../../../os/rt/src/chthreads.c **** #endif
 241               		.loc 1 101 3 is_stmt 1 view .LVU76
 101:../../../os/rt/src/chthreads.c **** #endif
 242               		.loc 1 101 17 is_stmt 0 view .LVU77
 243 005a 108E      		std Z+24,__zero_reg__
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 244               		.loc 1 107 3 is_stmt 1 view .LVU78
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 245               		.loc 1 107 17 is_stmt 0 view .LVU79
 246 005c 81E0      		ldi r24,lo8(1)
 247               	.LVL11:
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 248               		.loc 1 107 17 view .LVU80
 249 005e 8787      		std Z+15,r24
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 250               		.loc 1 108 3 is_stmt 1 view .LVU81
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 251               		.loc 1 108 17 is_stmt 0 view .LVU82
 252 0060 5487      		std Z+12,r21
 253 0062 4387      		std Z+11,r20
 109:../../../os/rt/src/chthreads.c **** #else
 254               		.loc 1 109 3 is_stmt 1 view .LVU83
 255 0064 A0E0      		ldi r26,lo8(ch)
 256 0066 B0E0      		ldi r27,hi8(ch)
 257               	.LVL12:
 109:../../../os/rt/src/chthreads.c **** #else
 258               		.loc 1 109 3 is_stmt 0 view .LVU84
 259 0068 B087      		std Z+8,r27
 260 006a A783      		std Z+7,r26
 109:../../../os/rt/src/chthreads.c **** #else
 261               		.loc 1 109 3 is_stmt 1 view .LVU85
 262 006c 1996      		adiw r26,9
 263 006e CD91      		ld r28,X+
 264 0070 DC91      		ld r29,X
 265 0072 1A97      		sbiw r26,9+1
 266 0074 D287      		std Z+10,r29
 267 0076 C187      		std Z+9,r28
 109:../../../os/rt/src/chthreads.c **** #else
 268               		.loc 1 109 3 view .LVU86
 269 0078 F887      		std Y+8,r31
 270 007a EF83      		std Y+7,r30
 271               	.LVL13:
 109:../../../os/rt/src/chthreads.c **** #else
 272               		.loc 1 109 3 view .LVU87
 273 007c 1A96      		adiw r26,9+1
 274 007e FC93      		st X,r31
 275 0080 EE93      		st -X,r30
 276 0082 1997      		sbiw r26,9
 109:../../../os/rt/src/chthreads.c **** #else
 277               		.loc 1 109 17 view .LVU88
 114:../../../os/rt/src/chthreads.c **** #endif
 278               		.loc 1 114 3 view .LVU89
 279               	.LVL14:
 280               	.LBB226:
 281               	.LBI226:
 499:../../../os/rt/include/chschd.h **** 
 282               		.loc 2 499 20 view .LVU90
 283               	.LBB227:
 501:../../../os/rt/include/chschd.h **** }
 284               		.loc 2 501 3 view .LVU91
 501:../../../os/rt/include/chschd.h **** }
 285               		.loc 2 501 13 is_stmt 0 view .LVU92
 286 0084 D901      		movw r26,r18
 287 0086 1A97      		sbiw r26,10
 288               	.LVL15:
 501:../../../os/rt/include/chschd.h **** }
 289               		.loc 2 501 13 view .LVU93
 290 0088 0B2E      		mov __tmp_reg__,r27
 291 008a 1196      		adiw r26,1
 292 008c 0C92      		st X,__tmp_reg__
 293 008e 1197      		sbiw r26,1
 294 0090 AC93      		st X,r26
 295               	.LVL16:
 501:../../../os/rt/include/chschd.h **** }
 296               		.loc 2 501 13 view .LVU94
 297               	.LBE227:
 298               	.LBE226:
 117:../../../os/rt/src/chthreads.c **** #endif
 299               		.loc 1 117 3 is_stmt 1 view .LVU95
 300 0092 1296      		adiw r26,2
 301               	.LVL17:
 302               	.LBB228:
 303               	.LBI228:
 537:../../../os/rt/include/chschd.h **** 
 304               		.loc 2 537 20 view .LVU96
 305               	.LBB229:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 306               		.loc 2 539 3 view .LVU97
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 307               		.loc 2 539 13 is_stmt 0 view .LVU98
 308 0094 0B2E      		mov __tmp_reg__,r27
 309 0096 1196      		adiw r26,1
 310 0098 0C92      		st X,__tmp_reg__
 311 009a 1197      		sbiw r26,1
 312 009c AC93      		st X,r26
 313               		.loc 2 540 3 is_stmt 1 view .LVU99
 314               		.loc 2 540 13 is_stmt 0 view .LVU100
 315 009e 0A2E      		mov __tmp_reg__,r26
 316 00a0 1B2E      		mov __zero_reg__,r27
 317 00a2 1396      		adiw r26,2+1
 318 00a4 1C92      		st X,__zero_reg__
 319 00a6 0E92      		st -X,__tmp_reg__
 320 00a8 1124      		clr __zero_reg__
 321 00aa 1297      		sbiw r26,2
 322               	.LVL18:
 323               		.loc 2 540 13 view .LVU101
 324               	.LBE229:
 325               	.LBE228:
 122:../../../os/rt/src/chthreads.c ****   return tp;
 326               		.loc 1 122 3 is_stmt 1 view .LVU102
 122:../../../os/rt/src/chthreads.c ****   return tp;
 327               		.loc 1 122 30 view .LVU103
 123:../../../os/rt/src/chthreads.c **** }
 328               		.loc 1 123 3 view .LVU104
 123:../../../os/rt/src/chthreads.c **** }
 329               		.loc 1 123 3 is_stmt 0 view .LVU105
 330               	.LBE225:
 331               	.LBE224:
 194:../../../os/rt/src/chthreads.c **** }
 332               		.loc 1 194 1 view .LVU106
 333 00ac CF01      		movw r24,r30
 334               	/* epilogue start */
 335 00ae DF91      		pop r29
 336 00b0 CF91      		pop r28
 337 00b2 0895      		ret
 338               		.cfi_endproc
 339               	.LFE142:
 341               		.section	.text.chThdCreateSuspended,"ax",@progbits
 342               	.global	chThdCreateSuspended
 344               	chThdCreateSuspended:
 345               	.LVL19:
 346               	.LFB143:
 195:../../../os/rt/src/chthreads.c **** 
 196:../../../os/rt/src/chthreads.c **** /**
 197:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 198:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 199:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 200:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 201:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 202:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 203:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 204:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 205:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 206:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 207:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 208:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 209:../../../os/rt/src/chthreads.c ****  *
 210:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 211:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 212:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 213:../../../os/rt/src/chthreads.c ****  *
 214:../../../os/rt/src/chthreads.c ****  * @api
 215:../../../os/rt/src/chthreads.c ****  */
 216:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 347               		.loc 1 216 64 is_stmt 1 view -0
 348               		.cfi_startproc
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 217:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 353               		.loc 1 217 3 view .LVU108
 218:../../../os/rt/src/chthreads.c **** 
 219:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 220:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 354               		.loc 1 220 3 view .LVU109
 355               		.loc 1 220 3 view .LVU110
 221:../../../os/rt/src/chthreads.c ****               "working area in use");
 222:../../../os/rt/src/chthreads.c **** #endif
 223:../../../os/rt/src/chthreads.c **** 
 224:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 226:../../../os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 227:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 228:../../../os/rt/src/chthreads.c **** #endif
 229:../../../os/rt/src/chthreads.c **** 
 230:../../../os/rt/src/chthreads.c ****   chSysLock();
 356               		.loc 1 230 3 view .LVU111
 357               	.LBB230:
 358               	.LBI230:
 359               		.file 3 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 360               		.loc 3 353 20 view .LVU112
 361               	.LBE230:
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 362               		.loc 3 355 3 view .LVU113
 363               	.LBB233:
 364               	.LBB231:
 365               	.LBI231:
 366               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 367               		.loc 4 435 20 view .LVU114
 368               	.LBB232:
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 369               		.loc 4 437 3 view .LVU115
 370               	/* #APP */
 371               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 372 0000 F894      		cli
 373               	 ;  0 "" 2
 374               	/* #NOAPP */
 375               	.LBE232:
 376               	.LBE231:
 377               	.LBE233:
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 378               		.loc 3 356 34 view .LVU116
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 379               		.loc 3 357 20 view .LVU117
 231:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 380               		.loc 1 231 3 view .LVU118
 381               		.loc 1 231 8 is_stmt 0 view .LVU119
 382 0002 0E94 0000 		call chThdCreateSuspendedI
 383               	.LVL20:
 232:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 384               		.loc 1 232 3 is_stmt 1 view .LVU120
 385               	.LBB234:
 386               	.LBI234:
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 387               		.loc 3 365 20 view .LVU121
 388               	.LBB235:
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 389               		.loc 3 367 22 view .LVU122
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 390               		.loc 3 368 33 view .LVU123
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 391               		.loc 3 374 3 view .LVU124
 392               		.loc 3 374 3 view .LVU125
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 393               		.loc 3 378 3 view .LVU126
 394               	.LBB236:
 395               	.LBI236:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 396               		.loc 4 445 20 view .LVU127
 397               	.LBB237:
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 398               		.loc 4 447 3 view .LVU128
 399               	/* #APP */
 400               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 401 0006 7894      		sei
 402               	 ;  0 "" 2
 403               	/* #NOAPP */
 404               	.LBE237:
 405               	.LBE236:
 406               	.LBE235:
 407               	.LBE234:
 233:../../../os/rt/src/chthreads.c **** 
 234:../../../os/rt/src/chthreads.c ****   return tp;
 408               		.loc 1 234 3 view .LVU129
 409               	/* epilogue start */
 235:../../../os/rt/src/chthreads.c **** }
 410               		.loc 1 235 1 is_stmt 0 view .LVU130
 411 0008 0895      		ret
 412               		.cfi_endproc
 413               	.LFE143:
 415               		.section	.text.chThdCreateI,"ax",@progbits
 416               	.global	chThdCreateI
 418               	chThdCreateI:
 419               	.LVL21:
 420               	.LFB144:
 236:../../../os/rt/src/chthreads.c **** 
 237:../../../os/rt/src/chthreads.c **** /**
 238:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 239:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 240:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 241:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 242:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 243:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 244:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 245:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 246:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 247:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 248:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 249:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 250:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 251:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 252:../../../os/rt/src/chthreads.c ****  *
 253:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 254:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 255:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 256:../../../os/rt/src/chthreads.c ****  *
 257:../../../os/rt/src/chthreads.c ****  * @iclass
 258:../../../os/rt/src/chthreads.c ****  */
 259:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 421               		.loc 1 259 56 is_stmt 1 view -0
 422               		.cfi_startproc
 423               	/* prologue: function */
 424               	/* frame size = 0 */
 425               	/* stack size = 0 */
 426               	.L__stack_usage = 0
 260:../../../os/rt/src/chthreads.c **** 
 261:../../../os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 427               		.loc 1 261 3 view .LVU132
 428               		.loc 1 261 10 is_stmt 0 view .LVU133
 429 0000 0E94 0000 		call chThdCreateSuspendedI
 430               	.LVL22:
 431               		.loc 1 261 10 view .LVU134
 432 0004 0C94 0000 		jmp chSchReadyI
 433               	.LVL23:
 434               		.cfi_endproc
 435               	.LFE144:
 437               		.section	.text.chThdCreate,"ax",@progbits
 438               	.global	chThdCreate
 440               	chThdCreate:
 441               	.LVL24:
 442               	.LFB145:
 262:../../../os/rt/src/chthreads.c **** }
 263:../../../os/rt/src/chthreads.c **** 
 264:../../../os/rt/src/chthreads.c **** /**
 265:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 266:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 267:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 268:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 269:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 270:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 271:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 272:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 273:../../../os/rt/src/chthreads.c ****  *
 274:../../../os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 275:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 276:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 277:../../../os/rt/src/chthreads.c ****  *
 278:../../../os/rt/src/chthreads.c ****  * @iclass
 279:../../../os/rt/src/chthreads.c ****  */
 280:../../../os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 443               		.loc 1 280 55 is_stmt 1 view -0
 444               		.cfi_startproc
 445               		.loc 1 280 55 is_stmt 0 view .LVU136
 446 0000 CF93      		push r28
 447               	.LCFI4:
 448               		.cfi_def_cfa_offset 3
 449               		.cfi_offset 28, -2
 450 0002 DF93      		push r29
 451               	.LCFI5:
 452               		.cfi_def_cfa_offset 4
 453               		.cfi_offset 29, -3
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 2 */
 457               	.L__stack_usage = 2
 281:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 458               		.loc 1 281 3 is_stmt 1 view .LVU137
 282:../../../os/rt/src/chthreads.c **** 
 283:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 284:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 285:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 286:../../../os/rt/src/chthreads.c ****               "working area in use");
 287:../../../os/rt/src/chthreads.c **** #endif
 288:../../../os/rt/src/chthreads.c **** 
 289:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 290:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 291:../../../os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 292:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 293:../../../os/rt/src/chthreads.c **** #endif
 294:../../../os/rt/src/chthreads.c **** 
 295:../../../os/rt/src/chthreads.c ****   chSysLock();
 459               		.loc 1 295 3 view .LVU138
 460               	.LBB238:
 461               	.LBI238:
 353:../../../os/rt/include/chsys.h **** 
 462               		.loc 3 353 20 view .LVU139
 463               	.LBE238:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 464               		.loc 3 355 3 view .LVU140
 465               	.LBB241:
 466               	.LBB239:
 467               	.LBI239:
 435:../../../os/common/ports/AVR/chcore.h **** 
 468               		.loc 4 435 20 view .LVU141
 469               	.LBB240:
 437:../../../os/common/ports/AVR/chcore.h **** }
 470               		.loc 4 437 3 view .LVU142
 471               	/* #APP */
 472               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 473 0004 F894      		cli
 474               	 ;  0 "" 2
 475               	/* #NOAPP */
 476               	.LBE240:
 477               	.LBE239:
 478               	.LBE241:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 479               		.loc 3 356 34 view .LVU143
 357:../../../os/rt/include/chsys.h **** }
 480               		.loc 3 357 20 view .LVU144
 296:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 481               		.loc 1 296 3 view .LVU145
 482               		.loc 1 296 8 is_stmt 0 view .LVU146
 483 0006 0E94 0000 		call chThdCreateSuspendedI
 484               	.LVL25:
 485               		.loc 1 296 8 view .LVU147
 486 000a EC01      		movw r28,r24
 487               	.LVL26:
 297:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 488               		.loc 1 297 3 is_stmt 1 view .LVU148
 489 000c 70E0      		ldi r23,0
 490 000e 60E0      		ldi r22,0
 491 0010 0E94 0000 		call chSchWakeupS
 492               	.LVL27:
 298:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 493               		.loc 1 298 3 view .LVU149
 494               	.LBB242:
 495               	.LBI242:
 365:../../../os/rt/include/chsys.h **** 
 496               		.loc 3 365 20 view .LVU150
 497               	.LBB243:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 498               		.loc 3 367 22 view .LVU151
 368:../../../os/rt/include/chsys.h **** 
 499               		.loc 3 368 33 view .LVU152
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 500               		.loc 3 374 3 view .LVU153
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 501               		.loc 3 374 3 view .LVU154
 502               		.loc 3 378 3 view .LVU155
 503               	.LBB244:
 504               	.LBI244:
 445:../../../os/common/ports/AVR/chcore.h **** 
 505               		.loc 4 445 20 view .LVU156
 506               	.LBB245:
 507               		.loc 4 447 3 view .LVU157
 508               	/* #APP */
 509               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 510 0014 7894      		sei
 511               	 ;  0 "" 2
 512               	/* #NOAPP */
 513               	.LBE245:
 514               	.LBE244:
 515               	.LBE243:
 516               	.LBE242:
 299:../../../os/rt/src/chthreads.c **** 
 300:../../../os/rt/src/chthreads.c ****   return tp;
 517               		.loc 1 300 3 view .LVU158
 301:../../../os/rt/src/chthreads.c **** }
 518               		.loc 1 301 1 is_stmt 0 view .LVU159
 519 0016 CE01      		movw r24,r28
 520               	/* epilogue start */
 521 0018 DF91      		pop r29
 522 001a CF91      		pop r28
 523               	.LVL28:
 524               		.loc 1 301 1 view .LVU160
 525 001c 0895      		ret
 526               		.cfi_endproc
 527               	.LFE145:
 529               		.section	.rodata.chThdCreateStatic.str1.1,"aMS",@progbits,1
 530               	.LC0:
 531 0000 6E6F 6E61 		.string	"noname"
 531      6D65 00
 532               		.section	.text.chThdCreateStatic,"ax",@progbits
 533               	.global	chThdCreateStatic
 535               	chThdCreateStatic:
 536               	.LVL29:
 537               	.LFB146:
 302:../../../os/rt/src/chthreads.c **** 
 303:../../../os/rt/src/chthreads.c **** /**
 304:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 305:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 306:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 307:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 308:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 309:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 310:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 311:../../../os/rt/src/chthreads.c ****  *
 312:../../../os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 313:../../../os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 314:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
 315:../../../os/rt/src/chthreads.c ****  * @param[in] pf        the thread function
 316:../../../os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 317:../../../os/rt/src/chthreads.c ****  *                      @p NULL.
 318:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 319:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 320:../../../os/rt/src/chthreads.c ****  *
 321:../../../os/rt/src/chthreads.c ****  * @api
 322:../../../os/rt/src/chthreads.c ****  */
 323:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 324:../../../os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 538               		.loc 1 324 66 is_stmt 1 view -0
 539               		.cfi_startproc
 540               		.loc 1 324 66 is_stmt 0 view .LVU162
 541 0000 0F93      		push r16
 542               	.LCFI6:
 543               		.cfi_def_cfa_offset 3
 544               		.cfi_offset 16, -2
 545 0002 1F93      		push r17
 546               	.LCFI7:
 547               		.cfi_def_cfa_offset 4
 548               		.cfi_offset 17, -3
 549 0004 CF93      		push r28
 550               	.LCFI8:
 551               		.cfi_def_cfa_offset 5
 552               		.cfi_offset 28, -4
 553 0006 DF93      		push r29
 554               	.LCFI9:
 555               		.cfi_def_cfa_offset 6
 556               		.cfi_offset 29, -5
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 4 */
 560               	.L__stack_usage = 4
 325:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 561               		.loc 1 325 3 is_stmt 1 view .LVU163
 326:../../../os/rt/src/chthreads.c **** 
 327:../../../os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 562               		.loc 1 327 3 view .LVU164
 563               		.loc 1 327 3 view .LVU165
 328:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 329:../../../os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 330:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 331:../../../os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 332:../../../os/rt/src/chthreads.c **** 
 333:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 334:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 335:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 336:../../../os/rt/src/chthreads.c ****               "working area in use");
 337:../../../os/rt/src/chthreads.c **** #endif
 338:../../../os/rt/src/chthreads.c **** 
 339:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 340:../../../os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)wsp,
 341:../../../os/rt/src/chthreads.c ****                   (uint8_t *)wsp + size,
 342:../../../os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 343:../../../os/rt/src/chthreads.c **** #endif
 344:../../../os/rt/src/chthreads.c **** 
 345:../../../os/rt/src/chthreads.c ****   chSysLock();
 564               		.loc 1 345 3 view .LVU166
 565               	.LBB246:
 566               	.LBI246:
 353:../../../os/rt/include/chsys.h **** 
 567               		.loc 3 353 20 view .LVU167
 568               	.LBE246:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 569               		.loc 3 355 3 view .LVU168
 570               	.LBB249:
 571               	.LBB247:
 572               	.LBI247:
 435:../../../os/common/ports/AVR/chcore.h **** 
 573               		.loc 4 435 20 view .LVU169
 574               	.LBB248:
 437:../../../os/common/ports/AVR/chcore.h **** }
 575               		.loc 4 437 3 view .LVU170
 576               	/* #APP */
 577               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 578 0008 F894      		cli
 579               	 ;  0 "" 2
 580               	/* #NOAPP */
 581               	.LBE248:
 582               	.LBE247:
 583               	.LBE249:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 584               		.loc 3 356 34 view .LVU171
 357:../../../os/rt/include/chsys.h **** }
 585               		.loc 3 357 20 view .LVU172
 346:../../../os/rt/src/chthreads.c **** 
 347:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 348:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 349:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 350:../../../os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)wsp + size -
 586               		.loc 1 350 3 view .LVU173
 587               		.loc 1 350 43 is_stmt 0 view .LVU174
 588 000a 6C51      		subi r22,28
 589 000c 7109      		sbc r23,__zero_reg__
 590               	.LVL30:
 591               		.loc 1 350 6 view .LVU175
 592 000e EC01      		movw r28,r24
 593 0010 C60F      		add r28,r22
 594 0012 D71F      		adc r29,r23
 595               	.LVL31:
 351:../../../os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 352:../../../os/rt/src/chthreads.c **** 
 353:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 354:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 355:../../../os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 356:../../../os/rt/src/chthreads.c **** #endif
 357:../../../os/rt/src/chthreads.c **** 
 358:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 359:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 596               		.loc 1 359 3 is_stmt 1 view .LVU176
 597 0014 FE01      		movw r30,r28
 598 0016 7597      		sbiw r30,21
 599 0018 FE83      		std Y+6,r31
 600 001a ED83      		std Y+5,r30
 601               		.loc 1 359 3 view .LVU177
 602 001c 228B      		std Z+18,r18
 603               		.loc 1 359 3 view .LVU178
 604 001e 318B      		std Z+17,r19
 605               		.loc 1 359 3 view .LVU179
 606 0020 008B      		std Z+16,r16
 607               		.loc 1 359 3 view .LVU180
 608 0022 1787      		std Z+15,r17
 609               		.loc 1 359 3 view .LVU181
 610 0024 80E0      		ldi r24,lo8(gs(_port_thread_start))
 611 0026 90E0      		ldi r25,hi8(gs(_port_thread_start))
 612               	.LVL32:
 613               		.loc 1 359 3 is_stmt 0 view .LVU182
 614 0028 938B      		std Z+19,r25
 615               		.loc 1 359 3 is_stmt 1 view .LVU183
 616 002a 848B      		std Z+20,r24
 617               		.loc 1 359 43 view .LVU184
 360:../../../os/rt/src/chthreads.c **** 
 361:../../../os/rt/src/chthreads.c ****   tp = _thread_init(tp, "noname", prio);
 618               		.loc 1 361 3 view .LVU185
 619               	.LVL33:
 620               	.LBB250:
 621               	.LBI250:
  88:../../../os/rt/src/chthreads.c **** 
 622               		.loc 1 88 11 view .LVU186
 623               	.LBB251:
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 624               		.loc 1 90 3 view .LVU187
  90:../../../os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 625               		.loc 1 90 17 is_stmt 0 view .LVU188
 626 002c 4C83      		std Y+4,r20
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 627               		.loc 1 91 3 is_stmt 1 view .LVU189
  91:../../../os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 628               		.loc 1 91 17 is_stmt 0 view .LVU190
 629 002e 82E0      		ldi r24,lo8(2)
 630 0030 8D87      		std Y+13,r24
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 631               		.loc 1 92 3 is_stmt 1 view .LVU191
  92:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 632               		.loc 1 92 17 is_stmt 0 view .LVU192
 633 0032 1E86      		std Y+14,__zero_reg__
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 634               		.loc 1 97 3 is_stmt 1 view .LVU193
  97:../../../os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 635               		.loc 1 97 17 is_stmt 0 view .LVU194
 636 0034 4B8F      		std Y+27,r20
  98:../../../os/rt/src/chthreads.c **** #endif
 637               		.loc 1 98 3 is_stmt 1 view .LVU195
  98:../../../os/rt/src/chthreads.c **** #endif
 638               		.loc 1 98 17 is_stmt 0 view .LVU196
 639 0036 1A8E      		std Y+26,__zero_reg__
 640 0038 198E      		std Y+25,__zero_reg__
 101:../../../os/rt/src/chthreads.c **** #endif
 641               		.loc 1 101 3 is_stmt 1 view .LVU197
 101:../../../os/rt/src/chthreads.c **** #endif
 642               		.loc 1 101 17 is_stmt 0 view .LVU198
 643 003a 188E      		std Y+24,__zero_reg__
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 644               		.loc 1 107 3 is_stmt 1 view .LVU199
 107:../../../os/rt/src/chthreads.c ****   tp->name      = name;
 645               		.loc 1 107 17 is_stmt 0 view .LVU200
 646 003c 81E0      		ldi r24,lo8(1)
 647 003e 8F87      		std Y+15,r24
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 648               		.loc 1 108 3 is_stmt 1 view .LVU201
 108:../../../os/rt/src/chthreads.c ****   REG_INSERT(tp);
 649               		.loc 1 108 17 is_stmt 0 view .LVU202
 650 0040 80E0      		ldi r24,lo8(.LC0)
 651 0042 90E0      		ldi r25,hi8(.LC0)
 652 0044 9C87      		std Y+12,r25
 653 0046 8B87      		std Y+11,r24
 109:../../../os/rt/src/chthreads.c **** #else
 654               		.loc 1 109 3 is_stmt 1 view .LVU203
 655 0048 E0E0      		ldi r30,lo8(ch)
 656 004a F0E0      		ldi r31,hi8(ch)
 657 004c F887      		std Y+8,r31
 658 004e EF83      		std Y+7,r30
 109:../../../os/rt/src/chthreads.c **** #else
 659               		.loc 1 109 3 view .LVU204
 660 0050 A185      		ldd r26,Z+9
 661 0052 B285      		ldd r27,Z+10
 662 0054 BA87      		std Y+10,r27
 663 0056 A987      		std Y+9,r26
 109:../../../os/rt/src/chthreads.c **** #else
 664               		.loc 1 109 3 view .LVU205
 665 0058 1896      		adiw r26,7+1
 666 005a DC93      		st X,r29
 667 005c CE93      		st -X,r28
 668 005e 1797      		sbiw r26,7
 109:../../../os/rt/src/chthreads.c **** #else
 669               		.loc 1 109 3 view .LVU206
 670 0060 D287      		std Z+10,r29
 671 0062 C187      		std Z+9,r28
 109:../../../os/rt/src/chthreads.c **** #else
 672               		.loc 1 109 17 view .LVU207
 114:../../../os/rt/src/chthreads.c **** #endif
 673               		.loc 1 114 3 view .LVU208
 674               	.LVL34:
 675               	.LBB252:
 676               	.LBI252:
 499:../../../os/rt/include/chschd.h **** 
 677               		.loc 2 499 20 view .LVU209
 678               	.LBB253:
 501:../../../os/rt/include/chschd.h **** }
 679               		.loc 2 501 3 view .LVU210
 680               	.LBE253:
 681               	.LBE252:
 114:../../../os/rt/src/chthreads.c **** #endif
 682               		.loc 1 114 3 is_stmt 0 view .LVU211
 683 0064 CE01      		movw r24,r28
 684 0066 4296      		adiw r24,18
 685               	.LVL35:
 686               	.LBB255:
 687               	.LBB254:
 501:../../../os/rt/include/chschd.h **** }
 688               		.loc 2 501 13 view .LVU212
 689 0068 9B8B      		std Y+19,r25
 690 006a 8A8B      		std Y+18,r24
 691               	.LVL36:
 501:../../../os/rt/include/chschd.h **** }
 692               		.loc 2 501 13 view .LVU213
 693               	.LBE254:
 694               	.LBE255:
 117:../../../os/rt/src/chthreads.c **** #endif
 695               		.loc 1 117 3 is_stmt 1 view .LVU214
 696 006c 0296      		adiw r24,2
 697               	.LVL37:
 698               	.LBB256:
 699               	.LBI256:
 537:../../../os/rt/include/chschd.h **** 
 700               		.loc 2 537 20 view .LVU215
 701               	.LBB257:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 702               		.loc 2 539 3 view .LVU216
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 703               		.loc 2 539 13 is_stmt 0 view .LVU217
 704 006e 9D8B      		std Y+21,r25
 705 0070 8C8B      		std Y+20,r24
 706               		.loc 2 540 3 is_stmt 1 view .LVU218
 707               		.loc 2 540 13 is_stmt 0 view .LVU219
 708 0072 9F8B      		std Y+23,r25
 709 0074 8E8B      		std Y+22,r24
 710               	.LVL38:
 711               		.loc 2 540 13 view .LVU220
 712               	.LBE257:
 713               	.LBE256:
 122:../../../os/rt/src/chthreads.c ****   return tp;
 714               		.loc 1 122 3 is_stmt 1 view .LVU221
 122:../../../os/rt/src/chthreads.c ****   return tp;
 715               		.loc 1 122 30 view .LVU222
 123:../../../os/rt/src/chthreads.c **** }
 716               		.loc 1 123 3 view .LVU223
 123:../../../os/rt/src/chthreads.c **** }
 717               		.loc 1 123 3 is_stmt 0 view .LVU224
 718               	.LBE251:
 719               	.LBE250:
 362:../../../os/rt/src/chthreads.c **** 
 363:../../../os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 364:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 720               		.loc 1 364 3 is_stmt 1 view .LVU225
 721 0076 70E0      		ldi r23,0
 722 0078 60E0      		ldi r22,0
 723               	.LVL39:
 724               		.loc 1 364 3 is_stmt 0 view .LVU226
 725 007a CE01      		movw r24,r28
 726 007c 0E94 0000 		call chSchWakeupS
 727               	.LVL40:
 365:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 728               		.loc 1 365 3 is_stmt 1 view .LVU227
 729               	.LBB258:
 730               	.LBI258:
 365:../../../os/rt/include/chsys.h **** 
 731               		.loc 3 365 20 view .LVU228
 732               	.LBB259:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 733               		.loc 3 367 22 view .LVU229
 368:../../../os/rt/include/chsys.h **** 
 734               		.loc 3 368 33 view .LVU230
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 735               		.loc 3 374 3 view .LVU231
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 736               		.loc 3 374 3 view .LVU232
 737               		.loc 3 378 3 view .LVU233
 738               	.LBB260:
 739               	.LBI260:
 445:../../../os/common/ports/AVR/chcore.h **** 
 740               		.loc 4 445 20 view .LVU234
 741               	.LBB261:
 742               		.loc 4 447 3 view .LVU235
 743               	/* #APP */
 744               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 745 0080 7894      		sei
 746               	 ;  0 "" 2
 747               	/* #NOAPP */
 748               	.LBE261:
 749               	.LBE260:
 750               	.LBE259:
 751               	.LBE258:
 366:../../../os/rt/src/chthreads.c **** 
 367:../../../os/rt/src/chthreads.c ****   return tp;
 752               		.loc 1 367 3 view .LVU236
 368:../../../os/rt/src/chthreads.c **** }
 753               		.loc 1 368 1 is_stmt 0 view .LVU237
 754 0082 CE01      		movw r24,r28
 755               	/* epilogue start */
 756 0084 DF91      		pop r29
 757 0086 CF91      		pop r28
 758               	.LVL41:
 759               		.loc 1 368 1 view .LVU238
 760 0088 1F91      		pop r17
 761 008a 0F91      		pop r16
 762               	.LVL42:
 763               		.loc 1 368 1 view .LVU239
 764 008c 0895      		ret
 765               		.cfi_endproc
 766               	.LFE146:
 768               		.section	.text.chThdStart,"ax",@progbits
 769               	.global	chThdStart
 771               	chThdStart:
 772               	.LVL43:
 773               	.LFB147:
 369:../../../os/rt/src/chthreads.c **** 
 370:../../../os/rt/src/chthreads.c **** /**
 371:../../../os/rt/src/chthreads.c ****  * @brief   Resumes a thread created with @p chThdCreateI().
 372:../../../os/rt/src/chthreads.c ****  *
 373:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 374:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 375:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 376:../../../os/rt/src/chthreads.c ****  *
 377:../../../os/rt/src/chthreads.c ****  * @api
 378:../../../os/rt/src/chthreads.c ****  */
 379:../../../os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 774               		.loc 1 379 36 is_stmt 1 view -0
 775               		.cfi_startproc
 776               		.loc 1 379 36 is_stmt 0 view .LVU241
 777 0000 CF93      		push r28
 778               	.LCFI10:
 779               		.cfi_def_cfa_offset 3
 780               		.cfi_offset 28, -2
 781 0002 DF93      		push r29
 782               	.LCFI11:
 783               		.cfi_def_cfa_offset 4
 784               		.cfi_offset 29, -3
 785               	/* prologue: function */
 786               	/* frame size = 0 */
 787               	/* stack size = 2 */
 788               	.L__stack_usage = 2
 789 0004 EC01      		movw r28,r24
 380:../../../os/rt/src/chthreads.c **** 
 381:../../../os/rt/src/chthreads.c ****   chSysLock();
 790               		.loc 1 381 3 is_stmt 1 view .LVU242
 791               	.LBB262:
 792               	.LBI262:
 353:../../../os/rt/include/chsys.h **** 
 793               		.loc 3 353 20 view .LVU243
 794               	.LBE262:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 795               		.loc 3 355 3 view .LVU244
 796               	.LBB265:
 797               	.LBB263:
 798               	.LBI263:
 435:../../../os/common/ports/AVR/chcore.h **** 
 799               		.loc 4 435 20 view .LVU245
 800               	.LBB264:
 437:../../../os/common/ports/AVR/chcore.h **** }
 801               		.loc 4 437 3 view .LVU246
 802               	/* #APP */
 803               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 804 0006 F894      		cli
 805               	 ;  0 "" 2
 806               	/* #NOAPP */
 807               	.LBE264:
 808               	.LBE263:
 809               	.LBE265:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 810               		.loc 3 356 34 view .LVU247
 357:../../../os/rt/include/chsys.h **** }
 811               		.loc 3 357 20 view .LVU248
 382:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 812               		.loc 1 382 3 view .LVU249
 813               		.loc 1 382 3 view .LVU250
 383:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 814               		.loc 1 383 3 view .LVU251
 815 0008 70E0      		ldi r23,0
 816 000a 60E0      		ldi r22,0
 817 000c 0E94 0000 		call chSchWakeupS
 818               	.LVL44:
 384:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 819               		.loc 1 384 3 view .LVU252
 820               	.LBB266:
 821               	.LBI266:
 365:../../../os/rt/include/chsys.h **** 
 822               		.loc 3 365 20 view .LVU253
 823               	.LBB267:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 824               		.loc 3 367 22 view .LVU254
 368:../../../os/rt/include/chsys.h **** 
 825               		.loc 3 368 33 view .LVU255
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 826               		.loc 3 374 3 view .LVU256
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 827               		.loc 3 374 3 view .LVU257
 828               		.loc 3 378 3 view .LVU258
 829               	.LBB268:
 830               	.LBI268:
 445:../../../os/common/ports/AVR/chcore.h **** 
 831               		.loc 4 445 20 view .LVU259
 832               	.LBB269:
 833               		.loc 4 447 3 view .LVU260
 834               	/* #APP */
 835               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 836 0010 7894      		sei
 837               	 ;  0 "" 2
 838               	/* #NOAPP */
 839               	.LBE269:
 840               	.LBE268:
 841               	.LBE267:
 842               	.LBE266:
 385:../../../os/rt/src/chthreads.c **** 
 386:../../../os/rt/src/chthreads.c ****   return tp;
 843               		.loc 1 386 3 view .LVU261
 387:../../../os/rt/src/chthreads.c **** }
 844               		.loc 1 387 1 is_stmt 0 view .LVU262
 845 0012 CE01      		movw r24,r28
 846               	/* epilogue start */
 847 0014 DF91      		pop r29
 848 0016 CF91      		pop r28
 849               	.LVL45:
 850               		.loc 1 387 1 view .LVU263
 851 0018 0895      		ret
 852               		.cfi_endproc
 853               	.LFE147:
 855               		.section	.text.chThdAddRef,"ax",@progbits
 856               	.global	chThdAddRef
 858               	chThdAddRef:
 859               	.LVL46:
 860               	.LFB148:
 388:../../../os/rt/src/chthreads.c **** 
 389:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 390:../../../os/rt/src/chthreads.c **** /**
 391:../../../os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 392:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 393:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 394:../../../os/rt/src/chthreads.c ****  *
 395:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 396:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 397:../../../os/rt/src/chthreads.c ****  *                      representing the new reference.
 398:../../../os/rt/src/chthreads.c ****  *
 399:../../../os/rt/src/chthreads.c ****  * @api
 400:../../../os/rt/src/chthreads.c ****  */
 401:../../../os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 861               		.loc 1 401 37 is_stmt 1 view -0
 862               		.cfi_startproc
 863               	/* prologue: function */
 864               	/* frame size = 0 */
 865               	/* stack size = 0 */
 866               	.L__stack_usage = 0
 402:../../../os/rt/src/chthreads.c **** 
 403:../../../os/rt/src/chthreads.c ****   chSysLock();
 867               		.loc 1 403 3 view .LVU265
 868               	.LBB270:
 869               	.LBI270:
 353:../../../os/rt/include/chsys.h **** 
 870               		.loc 3 353 20 view .LVU266
 871               	.LBE270:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 872               		.loc 3 355 3 view .LVU267
 873               	.LBB273:
 874               	.LBB271:
 875               	.LBI271:
 435:../../../os/common/ports/AVR/chcore.h **** 
 876               		.loc 4 435 20 view .LVU268
 877               	.LBB272:
 437:../../../os/common/ports/AVR/chcore.h **** }
 878               		.loc 4 437 3 view .LVU269
 879               	/* #APP */
 880               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 881 0000 F894      		cli
 882               	 ;  0 "" 2
 883               	/* #NOAPP */
 884               	.LBE272:
 885               	.LBE271:
 886               	.LBE273:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 887               		.loc 3 356 34 view .LVU270
 357:../../../os/rt/include/chsys.h **** }
 888               		.loc 3 357 20 view .LVU271
 404:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 889               		.loc 1 404 3 view .LVU272
 890               		.loc 1 404 3 view .LVU273
 405:../../../os/rt/src/chthreads.c ****   tp->refs++;
 891               		.loc 1 405 3 view .LVU274
 892               		.loc 1 405 11 is_stmt 0 view .LVU275
 893 0002 FC01      		movw r30,r24
 894 0004 2785      		ldd r18,Z+15
 895 0006 2F5F      		subi r18,lo8(-(1))
 896 0008 2787      		std Z+15,r18
 406:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 897               		.loc 1 406 3 is_stmt 1 view .LVU276
 898               	.LBB274:
 899               	.LBI274:
 365:../../../os/rt/include/chsys.h **** 
 900               		.loc 3 365 20 view .LVU277
 901               	.LBB275:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 902               		.loc 3 367 22 view .LVU278
 368:../../../os/rt/include/chsys.h **** 
 903               		.loc 3 368 33 view .LVU279
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 904               		.loc 3 374 3 view .LVU280
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 905               		.loc 3 374 3 view .LVU281
 906               		.loc 3 378 3 view .LVU282
 907               	.LBB276:
 908               	.LBI276:
 445:../../../os/common/ports/AVR/chcore.h **** 
 909               		.loc 4 445 20 view .LVU283
 910               	.LBB277:
 911               		.loc 4 447 3 view .LVU284
 912               	/* #APP */
 913               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 914 000a 7894      		sei
 915               	 ;  0 "" 2
 916               	/* #NOAPP */
 917               	.LBE277:
 918               	.LBE276:
 919               	.LBE275:
 920               	.LBE274:
 407:../../../os/rt/src/chthreads.c **** 
 408:../../../os/rt/src/chthreads.c ****   return tp;
 921               		.loc 1 408 3 view .LVU285
 922               	/* epilogue start */
 409:../../../os/rt/src/chthreads.c **** }
 923               		.loc 1 409 1 is_stmt 0 view .LVU286
 924 000c 0895      		ret
 925               		.cfi_endproc
 926               	.LFE148:
 928               		.section	.text.chThdRelease,"ax",@progbits
 929               	.global	chThdRelease
 931               	chThdRelease:
 932               	.LVL47:
 933               	.LFB149:
 410:../../../os/rt/src/chthreads.c **** 
 411:../../../os/rt/src/chthreads.c **** /**
 412:../../../os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 413:../../../os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 414:../../../os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 415:../../../os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 416:../../../os/rt/src/chthreads.c ****  *          from the registry.<br>
 417:../../../os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 418:../../../os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 419:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 420:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 421:../../../os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 422:../../../os/rt/src/chthreads.c ****  *
 423:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 424:../../../os/rt/src/chthreads.c ****  *
 425:../../../os/rt/src/chthreads.c ****  * @api
 426:../../../os/rt/src/chthreads.c ****  */
 427:../../../os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 934               		.loc 1 427 33 is_stmt 1 view -0
 935               		.cfi_startproc
 936               	/* prologue: function */
 937               	/* frame size = 0 */
 938               	/* stack size = 0 */
 939               	.L__stack_usage = 0
 940               		.loc 1 427 33 is_stmt 0 view .LVU288
 941 0000 FC01      		movw r30,r24
 428:../../../os/rt/src/chthreads.c **** 
 429:../../../os/rt/src/chthreads.c ****   chSysLock();
 942               		.loc 1 429 3 is_stmt 1 view .LVU289
 943               	.LBB298:
 944               	.LBI298:
 353:../../../os/rt/include/chsys.h **** 
 945               		.loc 3 353 20 view .LVU290
 946               	.LBE298:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 947               		.loc 3 355 3 view .LVU291
 948               	.LBB301:
 949               	.LBB299:
 950               	.LBI299:
 435:../../../os/common/ports/AVR/chcore.h **** 
 951               		.loc 4 435 20 view .LVU292
 952               	.LBB300:
 437:../../../os/common/ports/AVR/chcore.h **** }
 953               		.loc 4 437 3 view .LVU293
 954               	/* #APP */
 955               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 956 0002 F894      		cli
 957               	 ;  0 "" 2
 958               	/* #NOAPP */
 959               	.LBE300:
 960               	.LBE299:
 961               	.LBE301:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 962               		.loc 3 356 34 view .LVU294
 357:../../../os/rt/include/chsys.h **** }
 963               		.loc 3 357 20 view .LVU295
 430:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 964               		.loc 1 430 3 view .LVU296
 965               		.loc 1 430 3 view .LVU297
 431:../../../os/rt/src/chthreads.c ****   tp->refs--;
 966               		.loc 1 431 3 view .LVU298
 967               		.loc 1 431 11 is_stmt 0 view .LVU299
 968 0004 9785      		ldd r25,Z+15
 969 0006 9150      		subi r25,lo8(-(-1))
 970 0008 9787      		std Z+15,r25
 432:../../../os/rt/src/chthreads.c **** 
 433:../../../os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 434:../../../os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 435:../../../os/rt/src/chthreads.c ****      allocator.*/
 436:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 971               		.loc 1 436 3 is_stmt 1 view .LVU300
 972               		.loc 1 436 6 is_stmt 0 view .LVU301
 973 000a 9111      		cpse r25,__zero_reg__
 974 000c 00C0      		rjmp .L11
 975               		.loc 1 436 32 discriminator 1 view .LVU302
 976 000e 8585      		ldd r24,Z+13
 977               	.LVL48:
 978               		.loc 1 436 32 discriminator 1 view .LVU303
 979 0010 8F30      		cpi r24,lo8(15)
 980 0012 01F0      		breq .L13
 981               	.L11:
 437:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 438:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 439:../../../os/rt/src/chthreads.c **** 
 440:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 441:../../../os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 442:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 443:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 444:../../../os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 445:../../../os/rt/src/chthreads.c ****       break;
 446:../../../os/rt/src/chthreads.c **** #endif
 447:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 448:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 449:../../../os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 450:../../../os/rt/src/chthreads.c ****       break;
 451:../../../os/rt/src/chthreads.c **** #endif
 452:../../../os/rt/src/chthreads.c ****     default:
 453:../../../os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 454:../../../os/rt/src/chthreads.c ****       break;
 455:../../../os/rt/src/chthreads.c ****     }
 456:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 457:../../../os/rt/src/chthreads.c ****     return;
 458:../../../os/rt/src/chthreads.c ****   }
 459:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 982               		.loc 1 459 3 is_stmt 1 view .LVU304
 983               	.LBB302:
 984               	.LBI302:
 365:../../../os/rt/include/chsys.h **** 
 985               		.loc 3 365 20 view .LVU305
 986               	.LBB303:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 987               		.loc 3 367 22 view .LVU306
 368:../../../os/rt/include/chsys.h **** 
 988               		.loc 3 368 33 view .LVU307
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 989               		.loc 3 374 3 view .LVU308
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 990               		.loc 3 374 3 view .LVU309
 991               		.loc 3 378 3 view .LVU310
 992               	.LBB304:
 993               	.LBI304:
 445:../../../os/common/ports/AVR/chcore.h **** 
 994               		.loc 4 445 20 view .LVU311
 995               	.LBB305:
 996               		.loc 4 447 3 view .LVU312
 997               	/* #APP */
 998               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 999 0014 7894      		sei
 1000               	 ;  0 "" 2
 1001               	/* #NOAPP */
 1002               	/* epilogue start */
 1003               	.LBE305:
 1004               	.LBE304:
 1005               	.LBE303:
 1006               	.LBE302:
 460:../../../os/rt/src/chthreads.c **** }
 1007               		.loc 1 460 1 is_stmt 0 view .LVU313
 1008 0016 0895      		ret
 1009               	.L13:
 1010               	.LVL49:
 1011               	.LBB306:
 1012               	.LBB307:
 437:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 1013               		.loc 1 437 5 is_stmt 1 view .LVU314
 1014 0018 A185      		ldd r26,Z+9
 1015 001a B285      		ldd r27,Z+10
 1016 001c 8781      		ldd r24,Z+7
 1017 001e 9085      		ldd r25,Z+8
 1018 0020 1896      		adiw r26,7+1
 1019 0022 9C93      		st X,r25
 1020 0024 8E93      		st -X,r24
 1021 0026 1797      		sbiw r26,7
 437:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 1022               		.loc 1 437 5 view .LVU315
 1023 0028 0780      		ldd __tmp_reg__,Z+7
 1024 002a F085      		ldd r31,Z+8
 1025 002c E02D      		mov r30,__tmp_reg__
 1026               	.LVL50:
 437:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 1027               		.loc 1 437 5 is_stmt 0 view .LVU316
 1028 002e B287      		std Z+10,r27
 1029 0030 A187      		std Z+9,r26
 437:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 1030               		.loc 1 437 19 is_stmt 1 view .LVU317
 438:../../../os/rt/src/chthreads.c **** 
 1031               		.loc 1 438 5 view .LVU318
 1032               	.LBB308:
 1033               	.LBI308:
 365:../../../os/rt/include/chsys.h **** 
 1034               		.loc 3 365 20 view .LVU319
 1035               	.LBB309:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1036               		.loc 3 367 22 view .LVU320
 368:../../../os/rt/include/chsys.h **** 
 1037               		.loc 3 368 33 view .LVU321
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1038               		.loc 3 374 3 view .LVU322
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1039               		.loc 3 374 3 view .LVU323
 1040               		.loc 3 378 3 view .LVU324
 1041               	.LBB310:
 1042               	.LBI310:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1043               		.loc 4 445 20 view .LVU325
 1044               	.LBB311:
 1045               		.loc 4 447 3 view .LVU326
 1046               	/* #APP */
 1047               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1048 0032 7894      		sei
 1049               	 ;  0 "" 2
 1050               	/* #NOAPP */
 1051               	.LBE311:
 1052               	.LBE310:
 1053               	.LBE309:
 1054               	.LBE308:
 457:../../../os/rt/src/chthreads.c ****   }
 1055               		.loc 1 457 5 view .LVU327
 1056 0034 0895      		ret
 1057               	.LBE307:
 1058               	.LBE306:
 1059               		.cfi_endproc
 1060               	.LFE149:
 1062               		.section	.text.chThdExitS,"ax",@progbits
 1063               	.global	chThdExitS
 1065               	chThdExitS:
 1066               	.LVL51:
 1067               	.LFB151:
 461:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 462:../../../os/rt/src/chthreads.c **** 
 463:../../../os/rt/src/chthreads.c **** /**
 464:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 465:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 466:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 467:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 468:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 469:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 470:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 471:../../../os/rt/src/chthreads.c ****  *          the dead code.
 472:../../../os/rt/src/chthreads.c ****  *
 473:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 474:../../../os/rt/src/chthreads.c ****  *
 475:../../../os/rt/src/chthreads.c ****  * @api
 476:../../../os/rt/src/chthreads.c ****  */
 477:../../../os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 478:../../../os/rt/src/chthreads.c **** 
 479:../../../os/rt/src/chthreads.c ****   chSysLock();
 480:../../../os/rt/src/chthreads.c ****   chThdExitS(msg);
 481:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 482:../../../os/rt/src/chthreads.c **** }
 483:../../../os/rt/src/chthreads.c **** 
 484:../../../os/rt/src/chthreads.c **** /**
 485:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 486:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 487:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 488:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 489:../../../os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 490:../../../os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 491:../../../os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 492:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 493:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 494:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 495:../../../os/rt/src/chthreads.c ****  *          the dead code.
 496:../../../os/rt/src/chthreads.c ****  *
 497:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 498:../../../os/rt/src/chthreads.c ****  *
 499:../../../os/rt/src/chthreads.c ****  * @sclass
 500:../../../os/rt/src/chthreads.c ****  */
 501:../../../os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 1068               		.loc 1 501 28 view -0
 1069               		.cfi_startproc
 1070               		.loc 1 501 28 is_stmt 0 view .LVU329
 1071 0000 0F93      		push r16
 1072               	.LCFI12:
 1073               		.cfi_def_cfa_offset 3
 1074               		.cfi_offset 16, -2
 1075 0002 1F93      		push r17
 1076               	.LCFI13:
 1077               		.cfi_def_cfa_offset 4
 1078               		.cfi_offset 17, -3
 1079 0004 CF93      		push r28
 1080               	.LCFI14:
 1081               		.cfi_def_cfa_offset 5
 1082               		.cfi_offset 28, -4
 1083 0006 DF93      		push r29
 1084               	.LCFI15:
 1085               		.cfi_def_cfa_offset 6
 1086               		.cfi_offset 29, -5
 1087               	/* prologue: function */
 1088               	/* frame size = 0 */
 1089               	/* stack size = 4 */
 1090               	.L__stack_usage = 4
 502:../../../os/rt/src/chthreads.c ****   thread_t *tp = currp;
 1091               		.loc 1 502 3 is_stmt 1 view .LVU330
 1092               		.loc 1 502 13 is_stmt 0 view .LVU331
 1093 0008 C091 0000 		lds r28,ch+11
 1094 000c D091 0000 		lds r29,ch+11+1
 1095               	.LVL52:
 503:../../../os/rt/src/chthreads.c **** 
 504:../../../os/rt/src/chthreads.c ****   /* Storing exit message.*/
 505:../../../os/rt/src/chthreads.c ****   tp->u.exitcode = msg;
 1096               		.loc 1 505 3 is_stmt 1 view .LVU332
 1097               		.loc 1 505 18 is_stmt 0 view .LVU333
 1098 0010 998B      		std Y+17,r25
 1099 0012 888B      		std Y+16,r24
 506:../../../os/rt/src/chthreads.c **** 
 507:../../../os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 508:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(tp);
 1100               		.loc 1 508 3 is_stmt 1 view .LVU334
 1101               		.loc 1 508 30 view .LVU335
 509:../../../os/rt/src/chthreads.c **** 
 510:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 511:../../../os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 512:../../../os/rt/src/chthreads.c ****   while (list_notempty(&tp->waiting)) {
 1102               		.loc 1 512 3 view .LVU336
 1103               		.loc 1 512 10 is_stmt 0 view .LVU337
 1104 0014 8E01      		movw r16,r28
 1105 0016 0E5E      		subi r16,-18
 1106 0018 1F4F      		sbci r17,-1
 1107               	.LVL53:
 1108               	.LBB312:
 1109               	.LBI312:
 525:../../../os/rt/include/chschd.h **** 
 1110               		.loc 2 525 20 is_stmt 1 view .LVU338
 1111               	.LBB313:
 527:../../../os/rt/include/chschd.h **** }
 1112               		.loc 2 527 3 view .LVU339
 527:../../../os/rt/include/chschd.h **** }
 1113               		.loc 2 527 20 is_stmt 0 view .LVU340
 1114 001a 8A89      		ldd r24,Y+18
 1115 001c 9B89      		ldd r25,Y+19
 1116               	.LVL54:
 527:../../../os/rt/include/chschd.h **** }
 1117               		.loc 2 527 20 view .LVU341
 1118               	.LBE313:
 1119               	.LBE312:
 1120               		.loc 1 512 9 view .LVU342
 1121 001e 0817      		cp r16,r24
 1122 0020 1907      		cpc r17,r25
 1123 0022 01F0      		breq .L15
 1124               	.LVL55:
 1125               	.L16:
 513:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 1126               		.loc 1 513 5 is_stmt 1 view .LVU343
 1127               	.LBB315:
 1128               	.LBI315:
 541:../../../os/rt/include/chschd.h **** }
 542:../../../os/rt/include/chschd.h **** 
 543:../../../os/rt/include/chschd.h **** /**
 544:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:../../../os/rt/include/chschd.h ****  *
 549:../../../os/rt/include/chschd.h ****  * @notapi
 550:../../../os/rt/include/chschd.h ****  */
 551:../../../os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:../../../os/rt/include/chschd.h **** 
 553:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:../../../os/rt/include/chschd.h **** }
 555:../../../os/rt/include/chschd.h **** 
 556:../../../os/rt/include/chschd.h **** /**
 557:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:../../../os/rt/include/chschd.h ****  *
 559:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:../../../os/rt/include/chschd.h ****  *
 562:../../../os/rt/include/chschd.h ****  * @notapi
 563:../../../os/rt/include/chschd.h ****  */
 564:../../../os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 565:../../../os/rt/include/chschd.h **** 
 566:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 567:../../../os/rt/include/chschd.h **** }
 568:../../../os/rt/include/chschd.h **** 
 569:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:../../../os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:../../../os/rt/include/chschd.h **** 
 574:../../../os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 576:../../../os/rt/include/chschd.h **** }
 577:../../../os/rt/include/chschd.h **** 
 578:../../../os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 1129               		.loc 2 578 25 view .LVU344
 1130               	.LBB316:
 579:../../../os/rt/include/chschd.h **** 
 580:../../../os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 1131               		.loc 2 580 3 view .LVU345
 581:../../../os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 1132               		.loc 2 581 3 view .LVU346
 1133               		.loc 2 581 24 is_stmt 0 view .LVU347
 1134 0024 FC01      		movw r30,r24
 1135 0026 2081      		ld r18,Z
 1136 0028 3181      		ldd r19,Z+1
 1137               		.loc 2 581 13 view .LVU348
 1138 002a 3B8B      		std Y+19,r19
 1139 002c 2A8B      		std Y+18,r18
 582:../../../os/rt/include/chschd.h **** 
 583:../../../os/rt/include/chschd.h ****   return tp;
 1140               		.loc 2 583 3 is_stmt 1 view .LVU349
 1141               	.LVL56:
 1142               		.loc 2 583 3 is_stmt 0 view .LVU350
 1143               	.LBE316:
 1144               	.LBE315:
 1145               		.loc 1 513 12 view .LVU351
 1146 002e 0E94 0000 		call chSchReadyI
 1147               	.LVL57:
 1148               	.LBB317:
 525:../../../os/rt/include/chschd.h **** 
 1149               		.loc 2 525 20 is_stmt 1 view .LVU352
 1150               	.LBB314:
 527:../../../os/rt/include/chschd.h **** }
 1151               		.loc 2 527 3 view .LVU353
 527:../../../os/rt/include/chschd.h **** }
 1152               		.loc 2 527 20 is_stmt 0 view .LVU354
 1153 0032 8A89      		ldd r24,Y+18
 1154 0034 9B89      		ldd r25,Y+19
 1155               	.LVL58:
 527:../../../os/rt/include/chschd.h **** }
 1156               		.loc 2 527 20 view .LVU355
 1157               	.LBE314:
 1158               	.LBE317:
 512:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 1159               		.loc 1 512 9 view .LVU356
 1160 0036 8017      		cp r24,r16
 1161 0038 9107      		cpc r25,r17
 1162 003a 01F4      		brne .L16
 1163               	.LVL59:
 1164               	.L15:
 514:../../../os/rt/src/chthreads.c ****   }
 515:../../../os/rt/src/chthreads.c **** #endif
 516:../../../os/rt/src/chthreads.c **** 
 517:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 518:../../../os/rt/src/chthreads.c ****   /* Static threads with no references are immediately removed from the
 519:../../../os/rt/src/chthreads.c ****      registry because there is no memory to recover.*/
 520:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 521:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) &&
 522:../../../os/rt/src/chthreads.c ****       ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 523:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 524:../../../os/rt/src/chthreads.c ****   }
 525:../../../os/rt/src/chthreads.c **** #else
 526:../../../os/rt/src/chthreads.c ****   if (tp->refs == (trefs_t)0) {
 1165               		.loc 1 526 3 is_stmt 1 view .LVU357
 1166               		.loc 1 526 6 is_stmt 0 view .LVU358
 1167 003c 8F85      		ldd r24,Y+15
 1168 003e 8111      		cpse r24,__zero_reg__
 1169 0040 00C0      		rjmp .L17
 527:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 1170               		.loc 1 527 5 is_stmt 1 view .LVU359
 1171 0042 A985      		ldd r26,Y+9
 1172 0044 BA85      		ldd r27,Y+10
 1173 0046 EF81      		ldd r30,Y+7
 1174 0048 F885      		ldd r31,Y+8
 1175 004a 1896      		adiw r26,7+1
 1176 004c FC93      		st X,r31
 1177 004e EE93      		st -X,r30
 1178 0050 1797      		sbiw r26,7
 1179               		.loc 1 527 5 view .LVU360
 1180 0052 B287      		std Z+10,r27
 1181 0054 A187      		std Z+9,r26
 1182               	.L17:
 1183               		.loc 1 527 19 discriminator 1 view .LVU361
 528:../../../os/rt/src/chthreads.c ****   }
 529:../../../os/rt/src/chthreads.c **** #endif
 530:../../../os/rt/src/chthreads.c **** #endif
 531:../../../os/rt/src/chthreads.c **** 
 532:../../../os/rt/src/chthreads.c ****   /* Going into final state.*/
 533:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 1184               		.loc 1 533 3 discriminator 1 view .LVU362
 1185 0056 8FE0      		ldi r24,lo8(15)
 1186               	/* epilogue start */
 534:../../../os/rt/src/chthreads.c **** 
 535:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 536:../../../os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 537:../../../os/rt/src/chthreads.c **** }
 1187               		.loc 1 537 1 is_stmt 0 discriminator 1 view .LVU363
 1188 0058 DF91      		pop r29
 1189 005a CF91      		pop r28
 1190               	.LVL60:
 1191               		.loc 1 537 1 discriminator 1 view .LVU364
 1192 005c 1F91      		pop r17
 1193 005e 0F91      		pop r16
 1194               	.LVL61:
 533:../../../os/rt/src/chthreads.c **** 
 1195               		.loc 1 533 3 discriminator 1 view .LVU365
 1196 0060 0C94 0000 		jmp chSchGoSleepS
 1197               	.LVL62:
 1198               		.cfi_endproc
 1199               	.LFE151:
 1201               		.section	.text.chThdExit,"ax",@progbits
 1202               	.global	chThdExit
 1204               	chThdExit:
 1205               	.LVL63:
 1206               	.LFB150:
 477:../../../os/rt/src/chthreads.c **** 
 1207               		.loc 1 477 27 is_stmt 1 view -0
 1208               		.cfi_startproc
 1209               	/* prologue: function */
 1210               	/* frame size = 0 */
 1211               	/* stack size = 0 */
 1212               	.L__stack_usage = 0
 479:../../../os/rt/src/chthreads.c ****   chThdExitS(msg);
 1213               		.loc 1 479 3 view .LVU367
 1214               	.LBB318:
 1215               	.LBI318:
 353:../../../os/rt/include/chsys.h **** 
 1216               		.loc 3 353 20 view .LVU368
 1217               	.LBE318:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1218               		.loc 3 355 3 view .LVU369
 1219               	.LBB321:
 1220               	.LBB319:
 1221               	.LBI319:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1222               		.loc 4 435 20 view .LVU370
 1223               	.LBB320:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1224               		.loc 4 437 3 view .LVU371
 1225               	/* #APP */
 1226               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1227 0000 F894      		cli
 1228               	 ;  0 "" 2
 1229               	/* #NOAPP */
 1230               	.LBE320:
 1231               	.LBE319:
 1232               	.LBE321:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1233               		.loc 3 356 34 view .LVU372
 357:../../../os/rt/include/chsys.h **** }
 1234               		.loc 3 357 20 view .LVU373
 480:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 1235               		.loc 1 480 3 view .LVU374
 1236 0002 0C94 0000 		jmp chThdExitS
 1237               	.LVL64:
 480:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 1238               		.loc 1 480 3 is_stmt 0 view .LVU375
 1239               		.cfi_endproc
 1240               	.LFE150:
 1242               		.section	.text.chThdWait,"ax",@progbits
 1243               	.global	chThdWait
 1245               	chThdWait:
 1246               	.LVL65:
 1247               	.LFB152:
 538:../../../os/rt/src/chthreads.c **** 
 539:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 540:../../../os/rt/src/chthreads.c **** /**
 541:../../../os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 542:../../../os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 543:../../../os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 544:../../../os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 545:../../../os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 546:../../../os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 547:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 548:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 549:../../../os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 550:../../../os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 551:../../../os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 552:../../../os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 553:../../../os/rt/src/chthreads.c ****  *
 554:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 555:../../../os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 556:../../../os/rt/src/chthreads.c ****  *
 557:../../../os/rt/src/chthreads.c ****  * @api
 558:../../../os/rt/src/chthreads.c ****  */
 559:../../../os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 1248               		.loc 1 559 31 is_stmt 1 view -0
 1249               		.cfi_startproc
 1250               		.loc 1 559 31 is_stmt 0 view .LVU377
 1251 0000 0F93      		push r16
 1252               	.LCFI16:
 1253               		.cfi_def_cfa_offset 3
 1254               		.cfi_offset 16, -2
 1255 0002 1F93      		push r17
 1256               	.LCFI17:
 1257               		.cfi_def_cfa_offset 4
 1258               		.cfi_offset 17, -3
 1259 0004 CF93      		push r28
 1260               	.LCFI18:
 1261               		.cfi_def_cfa_offset 5
 1262               		.cfi_offset 28, -4
 1263 0006 DF93      		push r29
 1264               	.LCFI19:
 1265               		.cfi_def_cfa_offset 6
 1266               		.cfi_offset 29, -5
 1267               	/* prologue: function */
 1268               	/* frame size = 0 */
 1269               	/* stack size = 4 */
 1270               	.L__stack_usage = 4
 1271 0008 EC01      		movw r28,r24
 560:../../../os/rt/src/chthreads.c ****   msg_t msg;
 1272               		.loc 1 560 3 is_stmt 1 view .LVU378
 561:../../../os/rt/src/chthreads.c **** 
 562:../../../os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 1273               		.loc 1 562 3 view .LVU379
 1274               		.loc 1 562 3 view .LVU380
 563:../../../os/rt/src/chthreads.c **** 
 564:../../../os/rt/src/chthreads.c ****   chSysLock();
 1275               		.loc 1 564 3 view .LVU381
 1276               	.LBB322:
 1277               	.LBI322:
 353:../../../os/rt/include/chsys.h **** 
 1278               		.loc 3 353 20 view .LVU382
 1279               	.LBE322:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1280               		.loc 3 355 3 view .LVU383
 1281               	.LBB325:
 1282               	.LBB323:
 1283               	.LBI323:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1284               		.loc 4 435 20 view .LVU384
 1285               	.LBB324:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1286               		.loc 4 437 3 view .LVU385
 1287               	/* #APP */
 1288               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1289 000a F894      		cli
 1290               	 ;  0 "" 2
 1291               	/* #NOAPP */
 1292               	.LBE324:
 1293               	.LBE323:
 1294               	.LBE325:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1295               		.loc 3 356 34 view .LVU386
 357:../../../os/rt/include/chsys.h **** }
 1296               		.loc 3 357 20 view .LVU387
 565:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp != currp, "waiting self");
 1297               		.loc 1 565 3 view .LVU388
 1298               		.loc 1 565 3 view .LVU389
 566:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 567:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 1299               		.loc 1 567 3 view .LVU390
 1300               		.loc 1 567 3 view .LVU391
 568:../../../os/rt/src/chthreads.c **** #endif
 569:../../../os/rt/src/chthreads.c **** 
 570:../../../os/rt/src/chthreads.c ****   if (tp->state != CH_STATE_FINAL) {
 1301               		.loc 1 570 3 view .LVU392
 1302               		.loc 1 570 6 is_stmt 0 view .LVU393
 1303 000c 8D85      		ldd r24,Y+13
 1304               	.LVL66:
 1305               		.loc 1 570 6 view .LVU394
 1306 000e 8F30      		cpi r24,lo8(15)
 1307 0010 01F0      		breq .L21
 571:../../../os/rt/src/chthreads.c ****     list_insert(currp, &tp->waiting);
 1308               		.loc 1 571 5 is_stmt 1 view .LVU395
 1309 0012 E091 0000 		lds r30,ch+11
 1310 0016 F091 0000 		lds r31,ch+11+1
 1311               	.LVL67:
 1312               	.LBB326:
 1313               	.LBI326:
 572:../../../os/rt/include/chschd.h **** 
 1314               		.loc 2 572 20 view .LVU396
 1315               	.LBB327:
 574:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 1316               		.loc 2 574 3 view .LVU397
 574:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 1317               		.loc 2 574 23 is_stmt 0 view .LVU398
 1318 001a 8A89      		ldd r24,Y+18
 1319 001c 9B89      		ldd r25,Y+19
 574:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 1320               		.loc 2 574 18 view .LVU399
 1321 001e 9183      		std Z+1,r25
 1322 0020 8083      		st Z,r24
 575:../../../os/rt/include/chschd.h **** }
 1323               		.loc 2 575 3 is_stmt 1 view .LVU400
 575:../../../os/rt/include/chschd.h **** }
 1324               		.loc 2 575 13 is_stmt 0 view .LVU401
 1325 0022 FB8B      		std Y+19,r31
 1326 0024 EA8B      		std Y+18,r30
 1327               	.LVL68:
 575:../../../os/rt/include/chschd.h **** }
 1328               		.loc 2 575 13 view .LVU402
 1329               	.LBE327:
 1330               	.LBE326:
 572:../../../os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 1331               		.loc 1 572 5 is_stmt 1 view .LVU403
 1332 0026 89E0      		ldi r24,lo8(9)
 1333 0028 0E94 0000 		call chSchGoSleepS
 1334               	.LVL69:
 1335               	.L21:
 573:../../../os/rt/src/chthreads.c ****   }
 574:../../../os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 1336               		.loc 1 574 3 view .LVU404
 1337               		.loc 1 574 7 is_stmt 0 view .LVU405
 1338 002c 0889      		ldd r16,Y+16
 1339 002e 1989      		ldd r17,Y+17
 1340               	.LVL70:
 575:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 1341               		.loc 1 575 3 is_stmt 1 view .LVU406
 1342               	.LBB328:
 1343               	.LBI328:
 365:../../../os/rt/include/chsys.h **** 
 1344               		.loc 3 365 20 view .LVU407
 1345               	.LBB329:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1346               		.loc 3 367 22 view .LVU408
 368:../../../os/rt/include/chsys.h **** 
 1347               		.loc 3 368 33 view .LVU409
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1348               		.loc 3 374 3 view .LVU410
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1349               		.loc 3 374 3 view .LVU411
 1350               		.loc 3 378 3 view .LVU412
 1351               	.LBB330:
 1352               	.LBI330:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1353               		.loc 4 445 20 view .LVU413
 1354               	.LBB331:
 1355               		.loc 4 447 3 view .LVU414
 1356               	/* #APP */
 1357               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1358 0030 7894      		sei
 1359               	 ;  0 "" 2
 1360               	/* #NOAPP */
 1361               	.LBE331:
 1362               	.LBE330:
 1363               	.LBE329:
 1364               	.LBE328:
 576:../../../os/rt/src/chthreads.c **** 
 577:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 578:../../../os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 579:../../../os/rt/src/chthreads.c ****   chThdRelease(tp);
 1365               		.loc 1 579 3 view .LVU415
 1366 0032 CE01      		movw r24,r28
 1367 0034 0E94 0000 		call chThdRelease
 1368               	.LVL71:
 580:../../../os/rt/src/chthreads.c **** #endif
 581:../../../os/rt/src/chthreads.c **** 
 582:../../../os/rt/src/chthreads.c ****   return msg;
 1369               		.loc 1 582 3 view .LVU416
 583:../../../os/rt/src/chthreads.c **** }
 1370               		.loc 1 583 1 is_stmt 0 view .LVU417
 1371 0038 C801      		movw r24,r16
 1372               	/* epilogue start */
 1373 003a DF91      		pop r29
 1374 003c CF91      		pop r28
 1375               	.LVL72:
 1376               		.loc 1 583 1 view .LVU418
 1377 003e 1F91      		pop r17
 1378 0040 0F91      		pop r16
 1379               	.LVL73:
 1380               		.loc 1 583 1 view .LVU419
 1381 0042 0895      		ret
 1382               		.cfi_endproc
 1383               	.LFE152:
 1385               		.section	.text.chThdSetPriority,"ax",@progbits
 1386               	.global	chThdSetPriority
 1388               	chThdSetPriority:
 1389               	.LVL74:
 1390               	.LFB153:
 584:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 585:../../../os/rt/src/chthreads.c **** 
 586:../../../os/rt/src/chthreads.c **** /**
 587:../../../os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 588:../../../os/rt/src/chthreads.c ****  *          necessary.
 589:../../../os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 590:../../../os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 591:../../../os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 592:../../../os/rt/src/chthreads.c ****  *
 593:../../../os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 594:../../../os/rt/src/chthreads.c ****  * @return              The old priority level.
 595:../../../os/rt/src/chthreads.c ****  *
 596:../../../os/rt/src/chthreads.c ****  * @api
 597:../../../os/rt/src/chthreads.c ****  */
 598:../../../os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 1391               		.loc 1 598 43 is_stmt 1 view -0
 1392               		.cfi_startproc
 1393               		.loc 1 598 43 is_stmt 0 view .LVU421
 1394 0000 CF93      		push r28
 1395               	.LCFI20:
 1396               		.cfi_def_cfa_offset 3
 1397               		.cfi_offset 28, -2
 1398               	/* prologue: function */
 1399               	/* frame size = 0 */
 1400               	/* stack size = 1 */
 1401               	.L__stack_usage = 1
 599:../../../os/rt/src/chthreads.c ****   tprio_t oldprio;
 1402               		.loc 1 599 3 is_stmt 1 view .LVU422
 600:../../../os/rt/src/chthreads.c **** 
 601:../../../os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 1403               		.loc 1 601 3 view .LVU423
 1404               		.loc 1 601 3 view .LVU424
 602:../../../os/rt/src/chthreads.c **** 
 603:../../../os/rt/src/chthreads.c ****   chSysLock();
 1405               		.loc 1 603 3 view .LVU425
 1406               	.LBB332:
 1407               	.LBI332:
 353:../../../os/rt/include/chsys.h **** 
 1408               		.loc 3 353 20 view .LVU426
 1409               	.LBE332:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1410               		.loc 3 355 3 view .LVU427
 1411               	.LBB335:
 1412               	.LBB333:
 1413               	.LBI333:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1414               		.loc 4 435 20 view .LVU428
 1415               	.LBB334:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1416               		.loc 4 437 3 view .LVU429
 1417               	/* #APP */
 1418               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1419 0002 F894      		cli
 1420               	 ;  0 "" 2
 1421               	/* #NOAPP */
 1422               	.LBE334:
 1423               	.LBE333:
 1424               	.LBE335:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1425               		.loc 3 356 34 view .LVU430
 357:../../../os/rt/include/chsys.h **** }
 1426               		.loc 3 357 20 view .LVU431
 604:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 605:../../../os/rt/src/chthreads.c ****   oldprio = currp->realprio;
 1427               		.loc 1 605 3 view .LVU432
 1428               		.loc 1 605 13 is_stmt 0 view .LVU433
 1429 0004 E091 0000 		lds r30,ch+11
 1430 0008 F091 0000 		lds r31,ch+11+1
 1431               		.loc 1 605 11 view .LVU434
 1432 000c C38D      		ldd r28,Z+27
 1433               	.LVL75:
 606:../../../os/rt/src/chthreads.c ****   if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 1434               		.loc 1 606 3 is_stmt 1 view .LVU435
 1435               		.loc 1 606 13 is_stmt 0 view .LVU436
 1436 000e 9481      		ldd r25,Z+4
 1437               		.loc 1 606 6 view .LVU437
 1438 0010 9C17      		cp r25,r28
 1439 0012 01F0      		breq .L26
 1440               		.loc 1 606 40 discriminator 1 view .LVU438
 1441 0014 9817      		cp r25,r24
 1442 0016 00F4      		brsh .L27
 1443               	.L26:
 607:../../../os/rt/src/chthreads.c ****     currp->prio = newprio;
 1444               		.loc 1 607 5 is_stmt 1 view .LVU439
 1445               		.loc 1 607 17 is_stmt 0 view .LVU440
 1446 0018 8483      		std Z+4,r24
 1447               	.L27:
 608:../../../os/rt/src/chthreads.c ****   }
 609:../../../os/rt/src/chthreads.c ****   currp->realprio = newprio;
 1448               		.loc 1 609 3 is_stmt 1 view .LVU441
 1449               		.loc 1 609 19 is_stmt 0 view .LVU442
 1450 001a 838F      		std Z+27,r24
 610:../../../os/rt/src/chthreads.c **** #else
 611:../../../os/rt/src/chthreads.c ****   oldprio = currp->prio;
 612:../../../os/rt/src/chthreads.c ****   currp->prio = newprio;
 613:../../../os/rt/src/chthreads.c **** #endif
 614:../../../os/rt/src/chthreads.c ****   chSchRescheduleS();
 1451               		.loc 1 614 3 is_stmt 1 view .LVU443
 1452 001c 0E94 0000 		call chSchRescheduleS
 1453               	.LVL76:
 615:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 1454               		.loc 1 615 3 view .LVU444
 1455               	.LBB336:
 1456               	.LBI336:
 365:../../../os/rt/include/chsys.h **** 
 1457               		.loc 3 365 20 view .LVU445
 1458               	.LBB337:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1459               		.loc 3 367 22 view .LVU446
 368:../../../os/rt/include/chsys.h **** 
 1460               		.loc 3 368 33 view .LVU447
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1461               		.loc 3 374 3 view .LVU448
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1462               		.loc 3 374 3 view .LVU449
 1463               		.loc 3 378 3 view .LVU450
 1464               	.LBB338:
 1465               	.LBI338:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1466               		.loc 4 445 20 view .LVU451
 1467               	.LBB339:
 1468               		.loc 4 447 3 view .LVU452
 1469               	/* #APP */
 1470               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1471 0020 7894      		sei
 1472               	 ;  0 "" 2
 1473               	/* #NOAPP */
 1474               	.LBE339:
 1475               	.LBE338:
 1476               	.LBE337:
 1477               	.LBE336:
 616:../../../os/rt/src/chthreads.c **** 
 617:../../../os/rt/src/chthreads.c ****   return oldprio;
 1478               		.loc 1 617 3 view .LVU453
 618:../../../os/rt/src/chthreads.c **** }
 1479               		.loc 1 618 1 is_stmt 0 view .LVU454
 1480 0022 8C2F      		mov r24,r28
 1481               	/* epilogue start */
 1482 0024 CF91      		pop r28
 1483               	.LVL77:
 1484               		.loc 1 618 1 view .LVU455
 1485 0026 0895      		ret
 1486               		.cfi_endproc
 1487               	.LFE153:
 1489               		.section	.text.chThdTerminate,"ax",@progbits
 1490               	.global	chThdTerminate
 1492               	chThdTerminate:
 1493               	.LVL78:
 1494               	.LFB154:
 619:../../../os/rt/src/chthreads.c **** 
 620:../../../os/rt/src/chthreads.c **** /**
 621:../../../os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 622:../../../os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 623:../../../os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 624:../../../os/rt/src/chthreads.c ****  *          @p true.
 625:../../../os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 626:../../../os/rt/src/chthreads.c ****  *          condition.
 627:../../../os/rt/src/chthreads.c ****  *
 628:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 629:../../../os/rt/src/chthreads.c ****  *
 630:../../../os/rt/src/chthreads.c ****  * @api
 631:../../../os/rt/src/chthreads.c ****  */
 632:../../../os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 1495               		.loc 1 632 35 is_stmt 1 view -0
 1496               		.cfi_startproc
 1497               	/* prologue: function */
 1498               	/* frame size = 0 */
 1499               	/* stack size = 0 */
 1500               	.L__stack_usage = 0
 1501               		.loc 1 632 35 is_stmt 0 view .LVU457
 1502 0000 FC01      		movw r30,r24
 633:../../../os/rt/src/chthreads.c **** 
 634:../../../os/rt/src/chthreads.c ****   chSysLock();
 1503               		.loc 1 634 3 is_stmt 1 view .LVU458
 1504               	.LBB340:
 1505               	.LBI340:
 353:../../../os/rt/include/chsys.h **** 
 1506               		.loc 3 353 20 view .LVU459
 1507               	.LBE340:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1508               		.loc 3 355 3 view .LVU460
 1509               	.LBB343:
 1510               	.LBB341:
 1511               	.LBI341:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1512               		.loc 4 435 20 view .LVU461
 1513               	.LBB342:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1514               		.loc 4 437 3 view .LVU462
 1515               	/* #APP */
 1516               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1517 0002 F894      		cli
 1518               	 ;  0 "" 2
 1519               	/* #NOAPP */
 1520               	.LBE342:
 1521               	.LBE341:
 1522               	.LBE343:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1523               		.loc 3 356 34 view .LVU463
 357:../../../os/rt/include/chsys.h **** }
 1524               		.loc 3 357 20 view .LVU464
 635:../../../os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1525               		.loc 1 635 3 view .LVU465
 1526               		.loc 1 635 13 is_stmt 0 view .LVU466
 1527 0004 9685      		ldd r25,Z+14
 1528 0006 9460      		ori r25,lo8(4)
 1529 0008 9687      		std Z+14,r25
 636:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 1530               		.loc 1 636 3 is_stmt 1 view .LVU467
 1531               	.LBB344:
 1532               	.LBI344:
 365:../../../os/rt/include/chsys.h **** 
 1533               		.loc 3 365 20 view .LVU468
 1534               	.LBB345:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1535               		.loc 3 367 22 view .LVU469
 368:../../../os/rt/include/chsys.h **** 
 1536               		.loc 3 368 33 view .LVU470
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1537               		.loc 3 374 3 view .LVU471
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1538               		.loc 3 374 3 view .LVU472
 1539               		.loc 3 378 3 view .LVU473
 1540               	.LBB346:
 1541               	.LBI346:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1542               		.loc 4 445 20 view .LVU474
 1543               	.LBB347:
 1544               		.loc 4 447 3 view .LVU475
 1545               	/* #APP */
 1546               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1547 000a 7894      		sei
 1548               	 ;  0 "" 2
 1549               	/* #NOAPP */
 1550               	/* epilogue start */
 1551               	.LBE347:
 1552               	.LBE346:
 1553               	.LBE345:
 1554               	.LBE344:
 637:../../../os/rt/src/chthreads.c **** }
 1555               		.loc 1 637 1 is_stmt 0 view .LVU476
 1556 000c 0895      		ret
 1557               		.cfi_endproc
 1558               	.LFE154:
 1560               		.section	.text.chThdSleep,"ax",@progbits
 1561               	.global	chThdSleep
 1563               	chThdSleep:
 1564               	.LVL79:
 1565               	.LFB155:
 638:../../../os/rt/src/chthreads.c **** 
 639:../../../os/rt/src/chthreads.c **** /**
 640:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 641:../../../os/rt/src/chthreads.c ****  *
 642:../../../os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 643:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 644:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 645:../../../os/rt/src/chthreads.c ****  *                        state.
 646:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 647:../../../os/rt/src/chthreads.c ****  *                      .
 648:../../../os/rt/src/chthreads.c ****  *
 649:../../../os/rt/src/chthreads.c ****  * @api
 650:../../../os/rt/src/chthreads.c ****  */
 651:../../../os/rt/src/chthreads.c **** void chThdSleep(sysinterval_t time) {
 1566               		.loc 1 651 37 is_stmt 1 view -0
 1567               		.cfi_startproc
 1568               	/* prologue: function */
 1569               	/* frame size = 0 */
 1570               	/* stack size = 0 */
 1571               	.L__stack_usage = 0
 652:../../../os/rt/src/chthreads.c **** 
 653:../../../os/rt/src/chthreads.c ****   chSysLock();
 1572               		.loc 1 653 3 view .LVU478
 1573               	.LBB348:
 1574               	.LBI348:
 353:../../../os/rt/include/chsys.h **** 
 1575               		.loc 3 353 20 view .LVU479
 1576               	.LBE348:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1577               		.loc 3 355 3 view .LVU480
 1578               	.LBB351:
 1579               	.LBB349:
 1580               	.LBI349:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1581               		.loc 4 435 20 view .LVU481
 1582               	.LBB350:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1583               		.loc 4 437 3 view .LVU482
 1584               	/* #APP */
 1585               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1586 0000 F894      		cli
 1587               	 ;  0 "" 2
 1588               	/* #NOAPP */
 1589               	.LBE350:
 1590               	.LBE349:
 1591               	.LBE351:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1592               		.loc 3 356 34 view .LVU483
 357:../../../os/rt/include/chsys.h **** }
 1593               		.loc 3 357 20 view .LVU484
 654:../../../os/rt/src/chthreads.c ****   chThdSleepS(time);
 1594               		.loc 1 654 3 view .LVU485
 1595               	.LVL80:
 1596               	.LBB352:
 1597               	.LBI352:
 1598               		.file 5 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chthreads.h **** 
   4:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chthreads.h **** 
   6:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chthreads.h ****     (at your option) any later version.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   End of the working area.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  83:../../../os/rt/include/chthreads.h **** 
  84:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  85:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  86:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  87:../../../os/rt/include/chthreads.h **** 
  88:../../../os/rt/include/chthreads.h **** /**
  89:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
  90:../../../os/rt/include/chthreads.h ****  */
  91:../../../os/rt/include/chthreads.h **** /**
  92:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
  93:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
  94:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
  95:../../../os/rt/include/chthreads.h ****  *
  96:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
  97:../../../os/rt/include/chthreads.h ****  */
  98:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
  99:../../../os/rt/include/chthreads.h **** 
 100:../../../os/rt/include/chthreads.h **** /**
 101:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 102:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 103:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 104:../../../os/rt/include/chthreads.h ****  *
 105:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 106:../../../os/rt/include/chthreads.h ****  */
 107:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 108:../../../os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 109:../../../os/rt/include/chthreads.h **** /** @} */
 110:../../../os/rt/include/chthreads.h **** 
 111:../../../os/rt/include/chthreads.h **** /**
 112:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 113:../../../os/rt/include/chthreads.h ****  */
 114:../../../os/rt/include/chthreads.h **** /**
 115:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 116:../../../os/rt/include/chthreads.h ****  *
 117:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 118:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 119:../../../os/rt/include/chthreads.h ****  *
 120:../../../os/rt/include/chthreads.h ****  * @api
 121:../../../os/rt/include/chthreads.h ****  */
 122:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 123:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 124:../../../os/rt/include/chthreads.h **** 
 125:../../../os/rt/include/chthreads.h **** /**
 126:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 127:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 128:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 129:../../../os/rt/include/chthreads.h ****  *
 130:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 131:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @api
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 139:../../../os/rt/include/chthreads.h ****  *
 140:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 141:../../../os/rt/include/chthreads.h ****  */
 142:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 143:../../../os/rt/include/chthreads.h **** 
 144:../../../os/rt/include/chthreads.h **** /**
 145:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 146:../../../os/rt/include/chthreads.h ****  *
 147:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 148:../../../os/rt/include/chthreads.h ****  */
 149:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 150:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 151:../../../os/rt/include/chthreads.h **** /** @} */
 152:../../../os/rt/include/chthreads.h **** 
 153:../../../os/rt/include/chthreads.h **** /**
 154:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 155:../../../os/rt/include/chthreads.h ****  */
 156:../../../os/rt/include/chthreads.h **** /**
 157:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 158:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 159:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 160:../../../os/rt/include/chthreads.h ****  */
 161:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 162:../../../os/rt/include/chthreads.h **** /** @} */
 163:../../../os/rt/include/chthreads.h **** 
 164:../../../os/rt/include/chthreads.h **** /**
 165:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 166:../../../os/rt/include/chthreads.h ****  * @{
 167:../../../os/rt/include/chthreads.h ****  */
 168:../../../os/rt/include/chthreads.h **** /**
 169:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 170:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 171:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 172:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 173:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 174:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 175:../../../os/rt/include/chthreads.h ****  *          converted.
 176:../../../os/rt/include/chthreads.h ****  *
 177:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 178:../../../os/rt/include/chthreads.h ****  *
 179:../../../os/rt/include/chthreads.h ****  * @api
 180:../../../os/rt/include/chthreads.h ****  */
 181:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 182:../../../os/rt/include/chthreads.h **** 
 183:../../../os/rt/include/chthreads.h **** /**
 184:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 185:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 186:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 187:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 188:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 189:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 190:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 191:../../../os/rt/include/chthreads.h ****  *          converted.
 192:../../../os/rt/include/chthreads.h ****  *
 193:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 194:../../../os/rt/include/chthreads.h ****  *
 195:../../../os/rt/include/chthreads.h ****  * @api
 196:../../../os/rt/include/chthreads.h ****  */
 197:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 198:../../../os/rt/include/chthreads.h **** 
 199:../../../os/rt/include/chthreads.h **** /**
 200:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 201:../../../os/rt/include/chthreads.h ****  *          microseconds.
 202:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 203:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 204:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 205:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 206:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 207:../../../os/rt/include/chthreads.h ****  *          converted.
 208:../../../os/rt/include/chthreads.h ****  *
 209:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @api
 212:../../../os/rt/include/chthreads.h ****  */
 213:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 214:../../../os/rt/include/chthreads.h **** /** @} */
 215:../../../os/rt/include/chthreads.h **** 
 216:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 217:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 218:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 219:../../../os/rt/include/chthreads.h **** 
 220:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 221:../../../os/rt/include/chthreads.h **** extern "C" {
 222:../../../os/rt/include/chthreads.h **** #endif
 223:../../../os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 224:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 226:../../../os/rt/include/chthreads.h **** #endif
 227:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 228:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 229:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 230:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 231:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 232:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 233:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 234:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 235:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 236:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 237:../../../os/rt/include/chthreads.h **** #endif
 238:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 239:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 240:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 241:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 242:../../../os/rt/include/chthreads.h **** #endif
 243:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 244:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 245:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 246:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 247:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 248:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 249:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 250:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 251:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 252:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 253:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 254:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 255:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 256:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 257:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 258:../../../os/rt/include/chthreads.h **** }
 259:../../../os/rt/include/chthreads.h **** #endif
 260:../../../os/rt/include/chthreads.h **** 
 261:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 262:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 263:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 264:../../../os/rt/include/chthreads.h **** 
 265:../../../os/rt/include/chthreads.h ****  /**
 266:../../../os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 267:../../../os/rt/include/chthreads.h ****   *
 268:../../../os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 269:../../../os/rt/include/chthreads.h ****   *
 270:../../../os/rt/include/chthreads.h ****   * @xclass
 271:../../../os/rt/include/chthreads.h ****   */
 272:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 273:../../../os/rt/include/chthreads.h **** 
 274:../../../os/rt/include/chthreads.h ****   return ch.rlist.current;
 275:../../../os/rt/include/chthreads.h **** }
 276:../../../os/rt/include/chthreads.h **** 
 277:../../../os/rt/include/chthreads.h **** /**
 278:../../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 279:../../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 280:../../../os/rt/include/chthreads.h ****  *
 281:../../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 282:../../../os/rt/include/chthreads.h ****  *
 283:../../../os/rt/include/chthreads.h ****  * @xclass
 284:../../../os/rt/include/chthreads.h ****  */
 285:../../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 286:../../../os/rt/include/chthreads.h **** 
 287:../../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->prio;
 288:../../../os/rt/include/chthreads.h **** }
 289:../../../os/rt/include/chthreads.h **** 
 290:../../../os/rt/include/chthreads.h **** /**
 291:../../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 292:../../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 293:../../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 294:../../../os/rt/include/chthreads.h ****  *
 295:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 296:../../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 297:../../../os/rt/include/chthreads.h ****  *
 298:../../../os/rt/include/chthreads.h ****  * @xclass
 299:../../../os/rt/include/chthreads.h ****  */
 300:../../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 301:../../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 302:../../../os/rt/include/chthreads.h **** 
 303:../../../os/rt/include/chthreads.h ****   return tp->time;
 304:../../../os/rt/include/chthreads.h **** }
 305:../../../os/rt/include/chthreads.h **** #endif
 306:../../../os/rt/include/chthreads.h **** 
 307:../../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 308:../../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 309:../../../os/rt/include/chthreads.h **** /**
 310:../../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 311:../../../os/rt/include/chthreads.h ****  *
 312:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 313:../../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 314:../../../os/rt/include/chthreads.h ****  *
 315:../../../os/rt/include/chthreads.h ****  * @xclass
 316:../../../os/rt/include/chthreads.h ****  */
 317:../../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 318:../../../os/rt/include/chthreads.h **** 
 319:../../../os/rt/include/chthreads.h ****   return tp->wabase;
 320:../../../os/rt/include/chthreads.h **** }
 321:../../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 322:../../../os/rt/include/chthreads.h **** 
 323:../../../os/rt/include/chthreads.h **** /**
 324:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 325:../../../os/rt/include/chthreads.h ****  *
 326:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 327:../../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 328:../../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 329:../../../os/rt/include/chthreads.h ****  *
 330:../../../os/rt/include/chthreads.h ****  * @xclass
 331:../../../os/rt/include/chthreads.h ****  */
 332:../../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 333:../../../os/rt/include/chthreads.h **** 
 334:../../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 335:../../../os/rt/include/chthreads.h **** }
 336:../../../os/rt/include/chthreads.h **** 
 337:../../../os/rt/include/chthreads.h **** /**
 338:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 339:../../../os/rt/include/chthreads.h ****  *
 340:../../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 341:../../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 342:../../../os/rt/include/chthreads.h ****  *
 343:../../../os/rt/include/chthreads.h ****  * @xclass
 344:../../../os/rt/include/chthreads.h ****  */
 345:../../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 346:../../../os/rt/include/chthreads.h **** 
 347:../../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 348:../../../os/rt/include/chthreads.h **** }
 349:../../../os/rt/include/chthreads.h **** 
 350:../../../os/rt/include/chthreads.h **** /**
 351:../../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 352:../../../os/rt/include/chthreads.h ****  *
 353:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 354:../../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 355:../../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 356:../../../os/rt/include/chthreads.h ****  *
 357:../../../os/rt/include/chthreads.h ****  * @iclass
 358:../../../os/rt/include/chthreads.h ****  */
 359:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 360:../../../os/rt/include/chthreads.h **** 
 361:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 362:../../../os/rt/include/chthreads.h **** 
 363:../../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 364:../../../os/rt/include/chthreads.h **** }
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 370:../../../os/rt/include/chthreads.h ****  *                      handled as follow:
 371:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 372:../../../os/rt/include/chthreads.h ****  *                        state.
 373:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 374:../../../os/rt/include/chthreads.h ****  *                      .
 375:../../../os/rt/include/chthreads.h ****  *
 376:../../../os/rt/include/chthreads.h ****  * @sclass
 377:../../../os/rt/include/chthreads.h ****  */
 378:../../../os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 1599               		.loc 5 378 20 view .LVU486
 1600               	.LBB353:
 379:../../../os/rt/include/chthreads.h **** 
 380:../../../os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 1601               		.loc 5 380 3 view .LVU487
 1602               		.loc 5 380 3 view .LVU488
 381:../../../os/rt/include/chthreads.h **** 
 382:../../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 1603               		.loc 5 382 3 view .LVU489
 1604               		.loc 5 382 10 is_stmt 0 view .LVU490
 1605 0002 BC01      		movw r22,r24
 1606 0004 88E0      		ldi r24,lo8(8)
 1607               	.LVL81:
 1608               		.loc 5 382 10 view .LVU491
 1609 0006 0E94 0000 		call chSchGoSleepTimeoutS
 1610               	.LVL82:
 1611               		.loc 5 382 10 view .LVU492
 1612               	.LBE353:
 1613               	.LBE352:
 655:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 1614               		.loc 1 655 3 is_stmt 1 view .LVU493
 1615               	.LBB354:
 1616               	.LBI354:
 365:../../../os/rt/include/chsys.h **** 
 1617               		.loc 3 365 20 view .LVU494
 1618               	.LBB355:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1619               		.loc 3 367 22 view .LVU495
 368:../../../os/rt/include/chsys.h **** 
 1620               		.loc 3 368 33 view .LVU496
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1621               		.loc 3 374 3 view .LVU497
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1622               		.loc 3 374 3 view .LVU498
 1623               		.loc 3 378 3 view .LVU499
 1624               	.LBB356:
 1625               	.LBI356:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1626               		.loc 4 445 20 view .LVU500
 1627               	.LBB357:
 1628               		.loc 4 447 3 view .LVU501
 1629               	/* #APP */
 1630               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1631 000a 7894      		sei
 1632               	 ;  0 "" 2
 1633               	/* #NOAPP */
 1634               	/* epilogue start */
 1635               	.LBE357:
 1636               	.LBE356:
 1637               	.LBE355:
 1638               	.LBE354:
 656:../../../os/rt/src/chthreads.c **** }
 1639               		.loc 1 656 1 is_stmt 0 view .LVU502
 1640 000c 0895      		ret
 1641               		.cfi_endproc
 1642               	.LFE155:
 1644               		.section	.text.chThdSleepUntil,"ax",@progbits
 1645               	.global	chThdSleepUntil
 1647               	chThdSleepUntil:
 1648               	.LVL83:
 1649               	.LFB156:
 657:../../../os/rt/src/chthreads.c **** 
 658:../../../os/rt/src/chthreads.c **** /**
 659:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 660:../../../os/rt/src/chthreads.c ****  *          specified value.
 661:../../../os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 662:../../../os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 663:../../../os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 664:../../../os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 665:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 666:../../../os/rt/src/chthreads.c ****  *
 667:../../../os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 668:../../../os/rt/src/chthreads.c ****  *
 669:../../../os/rt/src/chthreads.c ****  * @api
 670:../../../os/rt/src/chthreads.c ****  */
 671:../../../os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1650               		.loc 1 671 38 is_stmt 1 view -0
 1651               		.cfi_startproc
 1652               	/* prologue: function */
 1653               	/* frame size = 0 */
 1654               	/* stack size = 0 */
 1655               	.L__stack_usage = 0
 672:../../../os/rt/src/chthreads.c ****   sysinterval_t interval;
 1656               		.loc 1 672 3 view .LVU504
 673:../../../os/rt/src/chthreads.c **** 
 674:../../../os/rt/src/chthreads.c ****   chSysLock();
 1657               		.loc 1 674 3 view .LVU505
 1658               	.LBB358:
 1659               	.LBI358:
 353:../../../os/rt/include/chsys.h **** 
 1660               		.loc 3 353 20 view .LVU506
 1661               	.LBE358:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1662               		.loc 3 355 3 view .LVU507
 1663               	.LBB361:
 1664               	.LBB359:
 1665               	.LBI359:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1666               		.loc 4 435 20 view .LVU508
 1667               	.LBB360:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1668               		.loc 4 437 3 view .LVU509
 1669               	/* #APP */
 1670               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1671 0000 F894      		cli
 1672               	 ;  0 "" 2
 1673               	/* #NOAPP */
 1674               	.LBE360:
 1675               	.LBE359:
 1676               	.LBE361:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1677               		.loc 3 356 34 view .LVU510
 357:../../../os/rt/include/chsys.h **** }
 1678               		.loc 3 357 20 view .LVU511
 675:../../../os/rt/src/chthreads.c ****   interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 1679               		.loc 1 675 3 view .LVU512
 1680               	.LBB362:
 1681               	.LBI362:
 1682               		.file 6 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 1683               		.loc 6 115 25 view .LVU513
 1684               	.LBE362:
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 119:../../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 120:../../../os/rt/include/chvt.h ****   return port_timer_get_time();
 1685               		.loc 6 120 3 view .LVU514
 1686               	.LBB367:
 1687               	.LBB363:
 1688               	.LBI363:
 1689               		.file 7 "../../../os/common/ports/AVR/chcore_timer.h"
   1:../../../os/common/ports/AVR/chcore_timer.h **** /*
   2:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore_timer.h **** 
   4:../../../os/common/ports/AVR/chcore_timer.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore_timer.h **** 
   6:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore_timer.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore_timer.h **** 
  11:../../../os/common/ports/AVR/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore_timer.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore_timer.h **** 
  16:../../../os/common/ports/AVR/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore_timer.h **** */
  19:../../../os/common/ports/AVR/chcore_timer.h **** 
  20:../../../os/common/ports/AVR/chcore_timer.h **** /**
  21:../../../os/common/ports/AVR/chcore_timer.h ****  * @file    AVR/chcore_timer.h
  22:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   System timer header file.
  23:../../../os/common/ports/AVR/chcore_timer.h ****  *
  24:../../../os/common/ports/AVR/chcore_timer.h ****  * @addtogroup AVR_TIMER
  25:../../../os/common/ports/AVR/chcore_timer.h ****  * @{
  26:../../../os/common/ports/AVR/chcore_timer.h ****  */
  27:../../../os/common/ports/AVR/chcore_timer.h **** 
  28:../../../os/common/ports/AVR/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:../../../os/common/ports/AVR/chcore_timer.h **** #define CHCORE_TIMER_H
  30:../../../os/common/ports/AVR/chcore_timer.h **** 
  31:../../../os/common/ports/AVR/chcore_timer.h **** /* This is the only header in the HAL designed to be include-able alone.*/
  32:../../../os/common/ports/AVR/chcore_timer.h **** #include "hal_st.h"
  33:../../../os/common/ports/AVR/chcore_timer.h **** 
  34:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/common/ports/AVR/chcore_timer.h **** /* Module constants.                                                         */
  36:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore_timer.h **** 
  38:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  40:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore_timer.h **** 
  42:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/common/ports/AVR/chcore_timer.h **** /* Derived constants and error checks.                                       */
  44:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/common/ports/AVR/chcore_timer.h **** 
  46:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/common/ports/AVR/chcore_timer.h **** /* Module data structures and types.                                         */
  48:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/common/ports/AVR/chcore_timer.h **** 
  50:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/common/ports/AVR/chcore_timer.h **** /* Module macros.                                                            */
  52:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  53:../../../os/common/ports/AVR/chcore_timer.h **** 
  54:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  55:../../../os/common/ports/AVR/chcore_timer.h **** /* External declarations.                                                    */
  56:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  57:../../../os/common/ports/AVR/chcore_timer.h **** 
  58:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  59:../../../os/common/ports/AVR/chcore_timer.h **** /* Module inline functions.                                                  */
  60:../../../os/common/ports/AVR/chcore_timer.h **** /*===========================================================================*/
  61:../../../os/common/ports/AVR/chcore_timer.h **** 
  62:../../../os/common/ports/AVR/chcore_timer.h **** /**
  63:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Starts the alarm.
  64:../../../os/common/ports/AVR/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  65:../../../os/common/ports/AVR/chcore_timer.h ****  *          this call.
  66:../../../os/common/ports/AVR/chcore_timer.h ****  *
  67:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  68:../../../os/common/ports/AVR/chcore_timer.h ****  *
  69:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  70:../../../os/common/ports/AVR/chcore_timer.h ****  */
  71:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  72:../../../os/common/ports/AVR/chcore_timer.h **** 
  73:../../../os/common/ports/AVR/chcore_timer.h ****   stStartAlarm(time);
  74:../../../os/common/ports/AVR/chcore_timer.h **** }
  75:../../../os/common/ports/AVR/chcore_timer.h **** 
  76:../../../os/common/ports/AVR/chcore_timer.h **** /**
  77:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  78:../../../os/common/ports/AVR/chcore_timer.h ****  *
  79:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  80:../../../os/common/ports/AVR/chcore_timer.h ****  */
  81:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  82:../../../os/common/ports/AVR/chcore_timer.h **** 
  83:../../../os/common/ports/AVR/chcore_timer.h ****   stStopAlarm();
  84:../../../os/common/ports/AVR/chcore_timer.h **** }
  85:../../../os/common/ports/AVR/chcore_timer.h **** 
  86:../../../os/common/ports/AVR/chcore_timer.h **** /**
  87:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Sets the alarm time.
  88:../../../os/common/ports/AVR/chcore_timer.h ****  *
  89:../../../os/common/ports/AVR/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  90:../../../os/common/ports/AVR/chcore_timer.h ****  *
  91:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
  92:../../../os/common/ports/AVR/chcore_timer.h ****  */
  93:../../../os/common/ports/AVR/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
  94:../../../os/common/ports/AVR/chcore_timer.h **** 
  95:../../../os/common/ports/AVR/chcore_timer.h ****   stSetAlarm(time);
  96:../../../os/common/ports/AVR/chcore_timer.h **** }
  97:../../../os/common/ports/AVR/chcore_timer.h **** 
  98:../../../os/common/ports/AVR/chcore_timer.h **** /**
  99:../../../os/common/ports/AVR/chcore_timer.h ****  * @brief   Returns the system time.
 100:../../../os/common/ports/AVR/chcore_timer.h ****  *
 101:../../../os/common/ports/AVR/chcore_timer.h ****  * @return              The system time.
 102:../../../os/common/ports/AVR/chcore_timer.h ****  *
 103:../../../os/common/ports/AVR/chcore_timer.h ****  * @notapi
 104:../../../os/common/ports/AVR/chcore_timer.h ****  */
 105:../../../os/common/ports/AVR/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 1690               		.loc 7 105 25 view .LVU515
 1691               	.LBE363:
 1692               	.LBE367:
 106:../../../os/common/ports/AVR/chcore_timer.h **** 
 107:../../../os/common/ports/AVR/chcore_timer.h ****   return stGetCounter();
 1693               		.loc 7 107 3 view .LVU516
 1694               	.LBB368:
 1695               	.LBB366:
 1696               	.LBB364:
 1697               	.LBI364:
 1698               		.file 8 "../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h"
   1:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*
   2:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   4:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
   8:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  10:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** */
  16:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  17:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  18:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   AVR/MEGA ST subsystem low level driver header.
  20:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  23:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup AVR
  24:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  26:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  27:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  30:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #include <avr/io.h>
  31:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  32:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  33:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                        */
  34:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  35:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  36:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  37:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                        */
  38:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  39:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  40:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: for models that have many timers, could add AVR_ST_USE_TIMER.      */
  41:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  42:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  43:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                      */
  44:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  45:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  46:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* TODO: error checks for valid timer selected.                             */
  47:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  48:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  49:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                        */
  50:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  51:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  52:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  53:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                           */
  54:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  55:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  56:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  57:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                   */
  58:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  59:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  60:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  61:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** extern "C" {
  62:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  63:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
  64:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
  65:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** }
  66:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  67:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  68:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #if defined(__AVR_ATmega128__) || defined(__AVR_ATmega162__)
  69:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR
  70:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK
  71:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #else
  72:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIFR_REG TIFR1
  73:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #define TIMSK_REG TIMSK1
  74:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** #endif
  75:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  76:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  77:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                 */
  78:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /*==========================================================================*/
  79:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  80:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** /**
  81:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
  82:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  83:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
  84:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  *
  85:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  * @notapi
  86:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****  */
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 1699               		.loc 8 87 25 view .LVU517
 1700               	.LBB365:
  88:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
  89:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h ****   return (systime_t) TCNT1;
 1701               		.loc 8 89 3 view .LVU518
 1702               		.loc 8 89 10 is_stmt 0 view .LVU519
 1703 0002 2091 8400 		lds r18,132
 1704 0006 3091 8500 		lds r19,132+1
 1705               	.LVL84:
 1706               		.loc 8 89 10 view .LVU520
 1707               	.LBE365:
 1708               	.LBE364:
 1709               	.LBE366:
 1710               	.LBE368:
 1711               	.LBB369:
 1712               	.LBI369:
 1713               		.file 9 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chtime.h **** 
   4:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chtime.h **** 
   6:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chtime.h ****     (at your option) any later version.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @{
  26:../../../os/rt/include/chtime.h ****  */
  27:../../../os/rt/include/chtime.h **** 
  28:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  29:../../../os/rt/include/chtime.h **** #define CHTIME_H
  30:../../../os/rt/include/chtime.h **** 
  31:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  32:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** 
  35:../../../os/rt/include/chtime.h **** /**
  36:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  37:../../../os/rt/include/chtime.h ****  * @{
  38:../../../os/rt/include/chtime.h ****  */
  39:../../../os/rt/include/chtime.h **** /**
  40:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  41:../../../os/rt/include/chtime.h ****  *          specification.
  42:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  44:../../../os/rt/include/chtime.h ****  */
  45:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  46:../../../os/rt/include/chtime.h **** 
  47:../../../os/rt/include/chtime.h **** /**
  48:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  49:../../../os/rt/include/chtime.h ****  *          specification.
  50:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  52:../../../os/rt/include/chtime.h ****  */
  53:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  54:../../../os/rt/include/chtime.h **** 
  55:../../../os/rt/include/chtime.h **** /**
  56:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  57:../../../os/rt/include/chtime.h ****  */
  58:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  59:../../../os/rt/include/chtime.h **** 
  60:../../../os/rt/include/chtime.h **** /**
  61:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  62:../../../os/rt/include/chtime.h ****  */
  63:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  64:../../../os/rt/include/chtime.h **** /** @} */
  65:../../../os/rt/include/chtime.h **** 
  66:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  67:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** 
  70:../../../os/rt/include/chtime.h **** /**
  71:../../../os/rt/include/chtime.h ****  * @brief   System time counter resolution.
  72:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  73:../../../os/rt/include/chtime.h ****  */
  74:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_RESOLUTION) || defined(__DOXYGEN__)
  75:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_RESOLUTION                32
  76:../../../os/rt/include/chtime.h **** #endif
  77:../../../os/rt/include/chtime.h **** 
  78:../../../os/rt/include/chtime.h **** /**
  79:../../../os/rt/include/chtime.h ****  * @brief   System tick frequency.
  80:../../../os/rt/include/chtime.h ****  * @details Frequency of the system timer that drives the system ticks. This
  81:../../../os/rt/include/chtime.h ****  *          setting also defines the system tick time unit.
  82:../../../os/rt/include/chtime.h ****  */
  83:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_ST_FREQUENCY) || defined(__DOXYGEN__)
  84:../../../os/rt/include/chtime.h **** #define CH_CFG_ST_FREQUENCY                 1000
  85:../../../os/rt/include/chtime.h **** #endif
  86:../../../os/rt/include/chtime.h **** 
  87:../../../os/rt/include/chtime.h **** /**
  88:../../../os/rt/include/chtime.h ****  * @brief   Time intervals data size.
  89:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16, 32 or 64 bits.
  90:../../../os/rt/include/chtime.h ****  */
  91:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_INTERVALS_SIZE) || defined(__DOXYGEN__)
  92:../../../os/rt/include/chtime.h **** #define CH_CFG_INTERVALS_SIZE               32
  93:../../../os/rt/include/chtime.h **** #endif
  94:../../../os/rt/include/chtime.h **** 
  95:../../../os/rt/include/chtime.h **** /**
  96:../../../os/rt/include/chtime.h ****  * @brief   Time types data size.
  97:../../../os/rt/include/chtime.h ****  * @note    Allowed values are 16 or 32 bits.
  98:../../../os/rt/include/chtime.h ****  */
  99:../../../os/rt/include/chtime.h **** #if !defined(CH_CFG_TIME_TYPES_SIZE) || defined(__DOXYGEN__)
 100:../../../os/rt/include/chtime.h **** #define CH_CFG_TIME_TYPES_SIZE              32
 101:../../../os/rt/include/chtime.h **** #endif
 102:../../../os/rt/include/chtime.h **** 
 103:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 104:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
 105:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 106:../../../os/rt/include/chtime.h **** 
 107:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
 108:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
 109:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
 110:../../../os/rt/include/chtime.h **** #endif
 111:../../../os/rt/include/chtime.h **** 
 112:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
 113:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
 114:../../../os/rt/include/chtime.h **** #endif
 115:../../../os/rt/include/chtime.h **** 
 116:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
 117:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
 118:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
 119:../../../os/rt/include/chtime.h **** #endif
 120:../../../os/rt/include/chtime.h **** 
 121:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
 122:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
 123:../../../os/rt/include/chtime.h **** #endif
 124:../../../os/rt/include/chtime.h **** 
 125:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
 126:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
 127:../../../os/rt/include/chtime.h **** #endif
 128:../../../os/rt/include/chtime.h **** 
 129:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 130:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 131:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 132:../../../os/rt/include/chtime.h **** 
 133:../../../os/rt/include/chtime.h **** /**
 134:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 135:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 136:../../../os/rt/include/chtime.h ****  */
 137:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 138:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 139:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 140:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 141:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 142:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 143:../../../os/rt/include/chtime.h **** #endif
 144:../../../os/rt/include/chtime.h **** 
 145:../../../os/rt/include/chtime.h **** /**
 146:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 147:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 148:../../../os/rt/include/chtime.h ****  */
 149:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 150:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 151:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 152:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 153:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 154:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 155:../../../os/rt/include/chtime.h **** #endif
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 158:../../../os/rt/include/chtime.h **** /**
 159:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 160:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 161:../../../os/rt/include/chtime.h ****  */
 162:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /**
 165:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 166:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 167:../../../os/rt/include/chtime.h ****  */
 168:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 169:../../../os/rt/include/chtime.h **** 
 170:../../../os/rt/include/chtime.h **** /**
 171:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 172:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 173:../../../os/rt/include/chtime.h ****  */
 174:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 175:../../../os/rt/include/chtime.h **** 
 176:../../../os/rt/include/chtime.h **** /**
 177:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 178:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 179:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 180:../../../os/rt/include/chtime.h ****  */
 181:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 182:../../../os/rt/include/chtime.h **** 
 183:../../../os/rt/include/chtime.h **** #else
 184:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 185:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 186:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 187:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 188:../../../os/rt/include/chtime.h **** #endif
 189:../../../os/rt/include/chtime.h **** 
 190:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 191:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 192:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 193:../../../os/rt/include/chtime.h **** 
 194:../../../os/rt/include/chtime.h **** 
 195:../../../os/rt/include/chtime.h **** /**
 196:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 197:../../../os/rt/include/chtime.h ****  * @{
 198:../../../os/rt/include/chtime.h ****  */
 199:../../../os/rt/include/chtime.h **** /**
 200:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 201:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 202:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 203:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 204:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 205:../../../os/rt/include/chtime.h ****  *          converted.
 206:../../../os/rt/include/chtime.h ****  *
 207:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 208:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 209:../../../os/rt/include/chtime.h ****  *
 210:../../../os/rt/include/chtime.h ****  * @api
 211:../../../os/rt/include/chtime.h ****  */
 212:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 213:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 214:../../../os/rt/include/chtime.h **** 
 215:../../../os/rt/include/chtime.h **** /**
 216:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 217:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 218:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 219:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 220:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 221:../../../os/rt/include/chtime.h ****  *          converted.
 222:../../../os/rt/include/chtime.h ****  *
 223:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 224:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 225:../../../os/rt/include/chtime.h ****  *
 226:../../../os/rt/include/chtime.h ****  * @api
 227:../../../os/rt/include/chtime.h ****  */
 228:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 229:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 230:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 231:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 232:../../../os/rt/include/chtime.h **** 
 233:../../../os/rt/include/chtime.h **** /**
 234:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 235:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 236:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 237:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 238:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 239:../../../os/rt/include/chtime.h ****  *          converted.
 240:../../../os/rt/include/chtime.h ****  *
 241:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 242:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 243:../../../os/rt/include/chtime.h ****  *
 244:../../../os/rt/include/chtime.h ****  * @api
 245:../../../os/rt/include/chtime.h ****  */
 246:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 247:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 248:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 249:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 250:../../../os/rt/include/chtime.h **** 
 251:../../../os/rt/include/chtime.h **** /**
 252:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 253:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 254:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 255:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 256:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 257:../../../os/rt/include/chtime.h ****  *          converted.
 258:../../../os/rt/include/chtime.h ****  *
 259:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 260:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 261:../../../os/rt/include/chtime.h ****  *
 262:../../../os/rt/include/chtime.h ****  * @api
 263:../../../os/rt/include/chtime.h ****  */
 264:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 265:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 266:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 267:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 268:../../../os/rt/include/chtime.h **** 
 269:../../../os/rt/include/chtime.h **** /**
 270:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 271:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 272:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 273:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 274:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 275:../../../os/rt/include/chtime.h ****  *          converted.
 276:../../../os/rt/include/chtime.h ****  *
 277:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 278:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 279:../../../os/rt/include/chtime.h ****  *
 280:../../../os/rt/include/chtime.h ****  * @api
 281:../../../os/rt/include/chtime.h ****  */
 282:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 283:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 284:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 285:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** /**
 288:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 289:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 290:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 291:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 292:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 293:../../../os/rt/include/chtime.h ****  *          converted.
 294:../../../os/rt/include/chtime.h ****  *
 295:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 296:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 297:../../../os/rt/include/chtime.h ****  *
 298:../../../os/rt/include/chtime.h ****  * @api
 299:../../../os/rt/include/chtime.h ****  */
 300:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 301:../../../os/rt/include/chtime.h ****     (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +      \
 302:../../../os/rt/include/chtime.h ****                     (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /    \
 303:../../../os/rt/include/chtime.h ****                    (time_conv_t)CH_CFG_ST_FREQUENCY)
 304:../../../os/rt/include/chtime.h **** /** @} */
 305:../../../os/rt/include/chtime.h **** 
 306:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 307:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 308:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 309:../../../os/rt/include/chtime.h **** 
 310:../../../os/rt/include/chtime.h **** /*
 311:../../../os/rt/include/chtime.h ****  * Virtual Timers APIs.
 312:../../../os/rt/include/chtime.h ****  */
 313:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 314:../../../os/rt/include/chtime.h **** extern "C" {
 315:../../../os/rt/include/chtime.h **** #endif
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** #endif
 320:../../../os/rt/include/chtime.h **** 
 321:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 322:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 323:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 324:../../../os/rt/include/chtime.h **** 
 325:../../../os/rt/include/chtime.h **** /**
 326:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 327:../../../os/rt/include/chtime.h ****  * @{
 328:../../../os/rt/include/chtime.h ****  */
 329:../../../os/rt/include/chtime.h **** /**
 330:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 331:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 332:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 333:../../../os/rt/include/chtime.h ****  *
 334:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 335:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 336:../../../os/rt/include/chtime.h ****  *
 337:../../../os/rt/include/chtime.h ****  * @special
 338:../../../os/rt/include/chtime.h ****  */
 339:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 340:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 343:../../../os/rt/include/chtime.h **** 
 344:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 345:../../../os/rt/include/chtime.h ****               "conversion overflow");
 346:../../../os/rt/include/chtime.h **** 
 347:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 348:../../../os/rt/include/chtime.h **** }
 349:../../../os/rt/include/chtime.h **** 
 350:../../../os/rt/include/chtime.h **** /**
 351:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 352:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 353:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 354:../../../os/rt/include/chtime.h ****  *
 355:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 356:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 357:../../../os/rt/include/chtime.h ****  *
 358:../../../os/rt/include/chtime.h ****  * @special
 359:../../../os/rt/include/chtime.h ****  */
 360:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 361:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 362:../../../os/rt/include/chtime.h **** 
 363:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 364:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 365:../../../os/rt/include/chtime.h **** 
 366:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 367:../../../os/rt/include/chtime.h ****               "conversion overflow");
 368:../../../os/rt/include/chtime.h **** 
 369:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 370:../../../os/rt/include/chtime.h **** }
 371:../../../os/rt/include/chtime.h **** 
 372:../../../os/rt/include/chtime.h **** /**
 373:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 374:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 375:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 376:../../../os/rt/include/chtime.h ****  *
 377:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 378:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 379:../../../os/rt/include/chtime.h ****  *
 380:../../../os/rt/include/chtime.h ****  * @special
 381:../../../os/rt/include/chtime.h ****  */
 382:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 383:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 384:../../../os/rt/include/chtime.h **** 
 385:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 386:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 387:../../../os/rt/include/chtime.h **** 
 388:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 389:../../../os/rt/include/chtime.h ****               "conversion overflow");
 390:../../../os/rt/include/chtime.h **** 
 391:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 392:../../../os/rt/include/chtime.h **** }
 393:../../../os/rt/include/chtime.h **** 
 394:../../../os/rt/include/chtime.h **** /**
 395:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 396:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 397:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 398:../../../os/rt/include/chtime.h ****  *
 399:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 400:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 401:../../../os/rt/include/chtime.h ****  *
 402:../../../os/rt/include/chtime.h ****  * @special
 403:../../../os/rt/include/chtime.h ****  */
 404:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 405:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 408:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 409:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 410:../../../os/rt/include/chtime.h **** 
 411:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 412:../../../os/rt/include/chtime.h ****               "conversion overflow");
 413:../../../os/rt/include/chtime.h **** 
 414:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 415:../../../os/rt/include/chtime.h **** }
 416:../../../os/rt/include/chtime.h **** 
 417:../../../os/rt/include/chtime.h **** /**
 418:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 419:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 420:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 421:../../../os/rt/include/chtime.h ****  *
 422:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 423:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 424:../../../os/rt/include/chtime.h ****  *
 425:../../../os/rt/include/chtime.h ****  * @special
 426:../../../os/rt/include/chtime.h ****  */
 427:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 428:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 431:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 432:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 433:../../../os/rt/include/chtime.h **** 
 434:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 435:../../../os/rt/include/chtime.h ****               "conversion overflow");
 436:../../../os/rt/include/chtime.h **** 
 437:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 438:../../../os/rt/include/chtime.h **** }
 439:../../../os/rt/include/chtime.h **** 
 440:../../../os/rt/include/chtime.h **** /**
 441:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 442:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 443:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 444:../../../os/rt/include/chtime.h ****  *
 445:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 446:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 447:../../../os/rt/include/chtime.h ****  *
 448:../../../os/rt/include/chtime.h ****  * @special
 449:../../../os/rt/include/chtime.h ****  */
 450:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 451:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 452:../../../os/rt/include/chtime.h **** 
 453:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 454:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 455:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 456:../../../os/rt/include/chtime.h **** 
 457:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 458:../../../os/rt/include/chtime.h ****               "conversion overflow");
 459:../../../os/rt/include/chtime.h **** 
 460:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 461:../../../os/rt/include/chtime.h **** }
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h **** /**
 464:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 465:../../../os/rt/include/chtime.h ****  *
 466:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 467:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 468:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 469:../../../os/rt/include/chtime.h ****  *
 470:../../../os/rt/include/chtime.h ****  * @xclass
 471:../../../os/rt/include/chtime.h ****  */
 472:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 473:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 474:../../../os/rt/include/chtime.h **** 
 475:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 476:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
 477:../../../os/rt/include/chtime.h **** #endif
 478:../../../os/rt/include/chtime.h **** 
 479:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 480:../../../os/rt/include/chtime.h **** }
 481:../../../os/rt/include/chtime.h **** 
 482:../../../os/rt/include/chtime.h **** /**
 483:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 484:../../../os/rt/include/chtime.h ****  *
 485:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 486:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 487:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 488:../../../os/rt/include/chtime.h ****  *
 489:../../../os/rt/include/chtime.h ****  * @xclass
 490:../../../os/rt/include/chtime.h ****  */
 491:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 1714               		.loc 9 491 29 is_stmt 1 view .LVU521
 1715               	.LBB370:
 492:../../../os/rt/include/chtime.h **** 
 493:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 494:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 495:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1716               		.loc 9 495 3 view .LVU522
 1717               		.loc 9 495 10 is_stmt 0 view .LVU523
 1718 000a 821B      		sub r24,r18
 1719 000c 930B      		sbc r25,r19
 1720               	.LVL85:
 1721               		.loc 9 495 10 view .LVU524
 1722               	.LBE370:
 1723               	.LBE369:
 676:../../../os/rt/src/chthreads.c ****   if (interval > (sysinterval_t)0) {
 1724               		.loc 1 676 3 is_stmt 1 view .LVU525
 1725               		.loc 1 676 6 is_stmt 0 view .LVU526
 1726 000e 01F4      		brne .L35
 677:../../../os/rt/src/chthreads.c ****     chThdSleepS(interval);
 678:../../../os/rt/src/chthreads.c ****   }
 679:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 1727               		.loc 1 679 3 is_stmt 1 view .LVU527
 1728               	.LBB371:
 1729               	.LBI371:
 365:../../../os/rt/include/chsys.h **** 
 1730               		.loc 3 365 20 view .LVU528
 1731               	.LBB372:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1732               		.loc 3 367 22 view .LVU529
 368:../../../os/rt/include/chsys.h **** 
 1733               		.loc 3 368 33 view .LVU530
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1734               		.loc 3 374 3 view .LVU531
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1735               		.loc 3 374 3 view .LVU532
 1736               		.loc 3 378 3 view .LVU533
 1737               	.LBB373:
 1738               	.LBI373:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1739               		.loc 4 445 20 view .LVU534
 1740               	.LBB374:
 1741               		.loc 4 447 3 view .LVU535
 1742               	/* #APP */
 1743               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1744 0010 7894      		sei
 1745               	 ;  0 "" 2
 1746               	/* #NOAPP */
 1747               	/* epilogue start */
 1748               	.LBE374:
 1749               	.LBE373:
 1750               	.LBE372:
 1751               	.LBE371:
 680:../../../os/rt/src/chthreads.c **** }
 1752               		.loc 1 680 1 is_stmt 0 view .LVU536
 1753 0012 0895      		ret
 1754               	.L35:
 677:../../../os/rt/src/chthreads.c ****   }
 1755               		.loc 1 677 5 is_stmt 1 view .LVU537
 1756               	.LVL86:
 1757               	.LBB378:
 1758               	.LBI378:
 378:../../../os/rt/include/chthreads.h **** 
 1759               		.loc 5 378 20 view .LVU538
 1760               	.LBB379:
 380:../../../os/rt/include/chthreads.h **** 
 1761               		.loc 5 380 3 view .LVU539
 380:../../../os/rt/include/chthreads.h **** 
 1762               		.loc 5 380 3 view .LVU540
 1763               		.loc 5 382 3 view .LVU541
 1764               		.loc 5 382 10 is_stmt 0 view .LVU542
 1765 0014 BC01      		movw r22,r24
 1766 0016 88E0      		ldi r24,lo8(8)
 1767               	.LVL87:
 1768               		.loc 5 382 10 view .LVU543
 1769 0018 0E94 0000 		call chSchGoSleepTimeoutS
 1770               	.LVL88:
 1771               		.loc 5 382 10 view .LVU544
 1772               	.LBE379:
 1773               	.LBE378:
 679:../../../os/rt/src/chthreads.c **** }
 1774               		.loc 1 679 3 is_stmt 1 view .LVU545
 1775               	.LBB380:
 365:../../../os/rt/include/chsys.h **** 
 1776               		.loc 3 365 20 view .LVU546
 1777               	.LBB377:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1778               		.loc 3 367 22 view .LVU547
 368:../../../os/rt/include/chsys.h **** 
 1779               		.loc 3 368 33 view .LVU548
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1780               		.loc 3 374 3 view .LVU549
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1781               		.loc 3 374 3 view .LVU550
 1782               		.loc 3 378 3 view .LVU551
 1783               	.LBB376:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1784               		.loc 4 445 20 view .LVU552
 1785               	.LBB375:
 1786               		.loc 4 447 3 view .LVU553
 1787               	/* #APP */
 1788               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1789 001c 7894      		sei
 1790               	 ;  0 "" 2
 1791               	/* #NOAPP */
 1792               	/* epilogue start */
 1793               	.LBE375:
 1794               	.LBE376:
 1795               	.LBE377:
 1796               	.LBE380:
 1797               		.loc 1 680 1 is_stmt 0 view .LVU554
 1798 001e 0895      		ret
 1799               		.cfi_endproc
 1800               	.LFE156:
 1802               		.section	.text.chThdSleepUntilWindowed,"ax",@progbits
 1803               	.global	chThdSleepUntilWindowed
 1805               	chThdSleepUntilWindowed:
 1806               	.LVL89:
 1807               	.LFB157:
 681:../../../os/rt/src/chthreads.c **** 
 682:../../../os/rt/src/chthreads.c **** /**
 683:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 684:../../../os/rt/src/chthreads.c ****  *          specified value.
 685:../../../os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p time
 686:../../../os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 687:../../../os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 688:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 689:../../../os/rt/src/chthreads.c ****  *
 690:../../../os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 691:../../../os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 692:../../../os/rt/src/chthreads.c ****  * @return              the @p next parameter
 693:../../../os/rt/src/chthreads.c ****  *
 694:../../../os/rt/src/chthreads.c ****  * @api
 695:../../../os/rt/src/chthreads.c ****  */
 696:../../../os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1808               		.loc 1 696 67 is_stmt 1 view -0
 1809               		.cfi_startproc
 1810               		.loc 1 696 67 is_stmt 0 view .LVU556
 1811 0000 CF93      		push r28
 1812               	.LCFI21:
 1813               		.cfi_def_cfa_offset 3
 1814               		.cfi_offset 28, -2
 1815 0002 DF93      		push r29
 1816               	.LCFI22:
 1817               		.cfi_def_cfa_offset 4
 1818               		.cfi_offset 29, -3
 1819               	/* prologue: function */
 1820               	/* frame size = 0 */
 1821               	/* stack size = 2 */
 1822               	.L__stack_usage = 2
 1823 0004 EB01      		movw r28,r22
 697:../../../os/rt/src/chthreads.c ****   systime_t time;
 1824               		.loc 1 697 3 is_stmt 1 view .LVU557
 698:../../../os/rt/src/chthreads.c **** 
 699:../../../os/rt/src/chthreads.c ****   chSysLock();
 1825               		.loc 1 699 3 view .LVU558
 1826               	.LBB381:
 1827               	.LBI381:
 353:../../../os/rt/include/chsys.h **** 
 1828               		.loc 3 353 20 view .LVU559
 1829               	.LBE381:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1830               		.loc 3 355 3 view .LVU560
 1831               	.LBB384:
 1832               	.LBB382:
 1833               	.LBI382:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1834               		.loc 4 435 20 view .LVU561
 1835               	.LBB383:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1836               		.loc 4 437 3 view .LVU562
 1837               	/* #APP */
 1838               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1839 0006 F894      		cli
 1840               	 ;  0 "" 2
 1841               	/* #NOAPP */
 1842               	.LBE383:
 1843               	.LBE382:
 1844               	.LBE384:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1845               		.loc 3 356 34 view .LVU563
 357:../../../os/rt/include/chsys.h **** }
 1846               		.loc 3 357 20 view .LVU564
 700:../../../os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 1847               		.loc 1 700 3 view .LVU565
 1848               	.LBB385:
 1849               	.LBI385:
 115:../../../os/rt/include/chvt.h **** 
 1850               		.loc 6 115 25 view .LVU566
 1851               	.LBE385:
 1852               		.loc 6 120 3 view .LVU567
 1853               	.LBB390:
 1854               	.LBB386:
 1855               	.LBI386:
 105:../../../os/common/ports/AVR/chcore_timer.h **** 
 1856               		.loc 7 105 25 view .LVU568
 1857               	.LBE386:
 1858               	.LBE390:
 1859               		.loc 7 107 3 view .LVU569
 1860               	.LBB391:
 1861               	.LBB389:
 1862               	.LBB387:
 1863               	.LBI387:
  87:../../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_st_lld.h **** 
 1864               		.loc 8 87 25 view .LVU570
 1865               	.LBB388:
 1866               		.loc 8 89 3 view .LVU571
 1867               		.loc 8 89 10 is_stmt 0 view .LVU572
 1868 0008 2091 8400 		lds r18,132
 1869 000c 3091 8500 		lds r19,132+1
 1870               	.LVL90:
 1871               		.loc 8 89 10 view .LVU573
 1872               	.LBE388:
 1873               	.LBE387:
 1874               	.LBE389:
 1875               	.LBE391:
 701:../../../os/rt/src/chthreads.c ****   if (chTimeIsInRangeX(time, prev, next)) {
 1876               		.loc 1 701 3 is_stmt 1 view .LVU574
 1877               	.LBB392:
 1878               	.LBI392:
 496:../../../os/rt/include/chtime.h ****   /*lint -restore*/
 497:../../../os/rt/include/chtime.h **** }
 498:../../../os/rt/include/chtime.h **** 
 499:../../../os/rt/include/chtime.h **** /**
 500:../../../os/rt/include/chtime.h ****  * @brief   Checks if the specified time is within the specified time range.
 501:../../../os/rt/include/chtime.h ****  * @note    When start==end then the function returns always true because the
 502:../../../os/rt/include/chtime.h ****  *          whole time range is specified.
 503:../../../os/rt/include/chtime.h ****  *
 504:../../../os/rt/include/chtime.h ****  * @param[in] time      the time to be verified
 505:../../../os/rt/include/chtime.h ****  * @param[in] start     the start of the time window (inclusive)
 506:../../../os/rt/include/chtime.h ****  * @param[in] end       the end of the time window (non inclusive)
 507:../../../os/rt/include/chtime.h ****  * @retval true         current time within the specified time window.
 508:../../../os/rt/include/chtime.h ****  * @retval false        current time not within the specified time window.
 509:../../../os/rt/include/chtime.h ****  *
 510:../../../os/rt/include/chtime.h ****  * @xclass
 511:../../../os/rt/include/chtime.h ****  */
 512:../../../os/rt/include/chtime.h **** static inline bool chTimeIsInRangeX(systime_t time,
 1879               		.loc 9 512 20 view .LVU575
 1880               	.LBB393:
 513:../../../os/rt/include/chtime.h ****                                     systime_t start,
 514:../../../os/rt/include/chtime.h ****                                     systime_t end) {
 515:../../../os/rt/include/chtime.h **** 
 516:../../../os/rt/include/chtime.h ****   return (bool)((time - start) < (end - start));
 1881               		.loc 9 516 3 view .LVU576
 1882               		.loc 9 516 39 is_stmt 0 view .LVU577
 1883 0010 AB01      		movw r20,r22
 1884 0012 481B      		sub r20,r24
 1885 0014 590B      		sbc r21,r25
 1886               		.loc 9 516 23 view .LVU578
 1887 0016 B901      		movw r22,r18
 1888               	.LVL91:
 1889               		.loc 9 516 23 view .LVU579
 1890 0018 681B      		sub r22,r24
 1891 001a 790B      		sbc r23,r25
 1892               	.LBE393:
 1893               	.LBE392:
 1894               		.loc 1 701 6 view .LVU580
 1895 001c 6417      		cp r22,r20
 1896 001e 7507      		cpc r23,r21
 1897 0020 00F0      		brlo .L38
 702:../../../os/rt/src/chthreads.c ****     chThdSleepS(chTimeDiffX(time, next));
 703:../../../os/rt/src/chthreads.c ****   }
 704:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 1898               		.loc 1 704 3 is_stmt 1 view .LVU581
 1899               	.LBB394:
 1900               	.LBI394:
 365:../../../os/rt/include/chsys.h **** 
 1901               		.loc 3 365 20 view .LVU582
 1902               	.LBB395:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1903               		.loc 3 367 22 view .LVU583
 368:../../../os/rt/include/chsys.h **** 
 1904               		.loc 3 368 33 view .LVU584
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1905               		.loc 3 374 3 view .LVU585
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1906               		.loc 3 374 3 view .LVU586
 1907               		.loc 3 378 3 view .LVU587
 1908               	.LBB396:
 1909               	.LBI396:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1910               		.loc 4 445 20 view .LVU588
 1911               	.LBB397:
 1912               		.loc 4 447 3 view .LVU589
 1913               	/* #APP */
 1914               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1915 0022 7894      		sei
 1916               	 ;  0 "" 2
 1917               	/* #NOAPP */
 1918               	.LBE397:
 1919               	.LBE396:
 1920               	.LBE395:
 1921               	.LBE394:
 705:../../../os/rt/src/chthreads.c **** 
 706:../../../os/rt/src/chthreads.c ****   return next;
 1922               		.loc 1 706 3 view .LVU590
 707:../../../os/rt/src/chthreads.c **** }
 1923               		.loc 1 707 1 is_stmt 0 view .LVU591
 1924 0024 CE01      		movw r24,r28
 1925               	.LVL92:
 1926               	/* epilogue start */
 1927               		.loc 1 707 1 view .LVU592
 1928 0026 DF91      		pop r29
 1929 0028 CF91      		pop r28
 1930               	.LVL93:
 1931               		.loc 1 707 1 view .LVU593
 1932 002a 0895      		ret
 1933               	.LVL94:
 1934               	.L38:
 702:../../../os/rt/src/chthreads.c ****   }
 1935               		.loc 1 702 5 is_stmt 1 view .LVU594
 1936               	.LBB401:
 1937               	.LBI401:
 491:../../../os/rt/include/chtime.h **** 
 1938               		.loc 9 491 29 view .LVU595
 1939               	.LBB402:
 495:../../../os/rt/include/chtime.h ****   /*lint -restore*/
 1940               		.loc 9 495 3 view .LVU596
 495:../../../os/rt/include/chtime.h ****   /*lint -restore*/
 1941               		.loc 9 495 3 is_stmt 0 view .LVU597
 1942               	.LBE402:
 1943               	.LBE401:
 1944               	.LBB404:
 1945               	.LBI404:
 378:../../../os/rt/include/chthreads.h **** 
 1946               		.loc 5 378 20 is_stmt 1 view .LVU598
 1947               	.LBB405:
 380:../../../os/rt/include/chthreads.h **** 
 1948               		.loc 5 380 3 view .LVU599
 380:../../../os/rt/include/chthreads.h **** 
 1949               		.loc 5 380 3 view .LVU600
 1950               		.loc 5 382 3 view .LVU601
 1951               	.LBE405:
 1952               	.LBE404:
 1953               	.LBB407:
 1954               	.LBB403:
 495:../../../os/rt/include/chtime.h ****   /*lint -restore*/
 1955               		.loc 9 495 10 is_stmt 0 view .LVU602
 1956 002c BE01      		movw r22,r28
 1957 002e 621B      		sub r22,r18
 1958 0030 730B      		sbc r23,r19
 1959               	.LVL95:
 495:../../../os/rt/include/chtime.h ****   /*lint -restore*/
 1960               		.loc 9 495 10 view .LVU603
 1961               	.LBE403:
 1962               	.LBE407:
 1963               	.LBB408:
 1964               	.LBB406:
 1965               		.loc 5 382 10 view .LVU604
 1966 0032 88E0      		ldi r24,lo8(8)
 1967               	.LVL96:
 1968               		.loc 5 382 10 view .LVU605
 1969 0034 0E94 0000 		call chSchGoSleepTimeoutS
 1970               	.LVL97:
 1971               		.loc 5 382 10 view .LVU606
 1972               	.LBE406:
 1973               	.LBE408:
 704:../../../os/rt/src/chthreads.c **** 
 1974               		.loc 1 704 3 is_stmt 1 view .LVU607
 1975               	.LBB409:
 365:../../../os/rt/include/chsys.h **** 
 1976               		.loc 3 365 20 view .LVU608
 1977               	.LBB400:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1978               		.loc 3 367 22 view .LVU609
 368:../../../os/rt/include/chsys.h **** 
 1979               		.loc 3 368 33 view .LVU610
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1980               		.loc 3 374 3 view .LVU611
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1981               		.loc 3 374 3 view .LVU612
 1982               		.loc 3 378 3 view .LVU613
 1983               	.LBB399:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1984               		.loc 4 445 20 view .LVU614
 1985               	.LBB398:
 1986               		.loc 4 447 3 view .LVU615
 1987               	/* #APP */
 1988               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1989 0038 7894      		sei
 1990               	 ;  0 "" 2
 1991               	/* #NOAPP */
 1992               	.LBE398:
 1993               	.LBE399:
 1994               	.LBE400:
 1995               	.LBE409:
 706:../../../os/rt/src/chthreads.c **** }
 1996               		.loc 1 706 3 view .LVU616
 1997               		.loc 1 707 1 is_stmt 0 view .LVU617
 1998 003a CE01      		movw r24,r28
 1999               	/* epilogue start */
 2000 003c DF91      		pop r29
 2001 003e CF91      		pop r28
 2002               	.LVL98:
 2003               		.loc 1 707 1 view .LVU618
 2004 0040 0895      		ret
 2005               		.cfi_endproc
 2006               	.LFE157:
 2008               		.section	.text.chThdYield,"ax",@progbits
 2009               	.global	chThdYield
 2011               	chThdYield:
 2012               	.LFB158:
 708:../../../os/rt/src/chthreads.c **** 
 709:../../../os/rt/src/chthreads.c **** /**
 710:../../../os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 711:../../../os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 712:../../../os/rt/src/chthreads.c ****  *          equal priority, if any.
 713:../../../os/rt/src/chthreads.c ****  *
 714:../../../os/rt/src/chthreads.c ****  * @api
 715:../../../os/rt/src/chthreads.c ****  */
 716:../../../os/rt/src/chthreads.c **** void chThdYield(void) {
 2013               		.loc 1 716 23 is_stmt 1 view -0
 2014               		.cfi_startproc
 2015               	/* prologue: function */
 2016               	/* frame size = 0 */
 2017               	/* stack size = 0 */
 2018               	.L__stack_usage = 0
 717:../../../os/rt/src/chthreads.c **** 
 718:../../../os/rt/src/chthreads.c ****   chSysLock();
 2019               		.loc 1 718 3 view .LVU620
 2020               	.LBB410:
 2021               	.LBI410:
 353:../../../os/rt/include/chsys.h **** 
 2022               		.loc 3 353 20 view .LVU621
 2023               	.LBE410:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 2024               		.loc 3 355 3 view .LVU622
 2025               	.LBB413:
 2026               	.LBB411:
 2027               	.LBI411:
 435:../../../os/common/ports/AVR/chcore.h **** 
 2028               		.loc 4 435 20 view .LVU623
 2029               	.LBB412:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2030               		.loc 4 437 3 view .LVU624
 2031               	/* #APP */
 2032               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2033 0000 F894      		cli
 2034               	 ;  0 "" 2
 2035               	/* #NOAPP */
 2036               	.LBE412:
 2037               	.LBE411:
 2038               	.LBE413:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 2039               		.loc 3 356 34 view .LVU625
 357:../../../os/rt/include/chsys.h **** }
 2040               		.loc 3 357 20 view .LVU626
 719:../../../os/rt/src/chthreads.c ****   chSchDoYieldS();
 2041               		.loc 1 719 3 view .LVU627
 2042               	.LBB414:
 2043               	.LBI414:
 584:../../../os/rt/include/chschd.h **** }
 585:../../../os/rt/include/chschd.h **** 
 586:../../../os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 587:../../../os/rt/include/chschd.h **** 
 588:../../../os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 589:../../../os/rt/include/chschd.h ****   do {
 590:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 591:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 592:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 594:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 595:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 596:../../../os/rt/include/chschd.h **** }
 597:../../../os/rt/include/chschd.h **** 
 598:../../../os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:../../../os/rt/include/chschd.h **** 
 600:../../../os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:../../../os/rt/include/chschd.h **** }
 605:../../../os/rt/include/chschd.h **** 
 606:../../../os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 607:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 608:../../../os/rt/include/chschd.h **** 
 609:../../../os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 610:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 611:../../../os/rt/include/chschd.h **** 
 612:../../../os/rt/include/chschd.h ****   return tp;
 613:../../../os/rt/include/chschd.h **** }
 614:../../../os/rt/include/chschd.h **** 
 615:../../../os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 616:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 617:../../../os/rt/include/chschd.h **** 
 618:../../../os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 619:../../../os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 620:../../../os/rt/include/chschd.h **** 
 621:../../../os/rt/include/chschd.h ****   return tp;
 622:../../../os/rt/include/chschd.h **** }
 623:../../../os/rt/include/chschd.h **** 
 624:../../../os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 625:../../../os/rt/include/chschd.h **** 
 626:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 627:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 628:../../../os/rt/include/chschd.h **** 
 629:../../../os/rt/include/chschd.h ****   return tp;
 630:../../../os/rt/include/chschd.h **** }
 631:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == TRUE */
 632:../../../os/rt/include/chschd.h **** 
 633:../../../os/rt/include/chschd.h **** /**
 634:../../../os/rt/include/chschd.h ****  * @brief   Determines if the current thread must reschedule.
 635:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 636:../../../os/rt/include/chschd.h ****  *          higher priority.
 637:../../../os/rt/include/chschd.h ****  *
 638:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 639:../../../os/rt/include/chschd.h ****  * @retval false        if rescheduling is not necessary.
 640:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at higher priority.
 641:../../../os/rt/include/chschd.h ****  *
 642:../../../os/rt/include/chschd.h ****  * @iclass
 643:../../../os/rt/include/chschd.h ****  */
 644:../../../os/rt/include/chschd.h **** static inline bool chSchIsRescRequiredI(void) {
 645:../../../os/rt/include/chschd.h **** 
 646:../../../os/rt/include/chschd.h ****   chDbgCheckClassI();
 647:../../../os/rt/include/chschd.h **** 
 648:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) > currp->prio;
 649:../../../os/rt/include/chschd.h **** }
 650:../../../os/rt/include/chschd.h **** 
 651:../../../os/rt/include/chschd.h **** /**
 652:../../../os/rt/include/chschd.h ****  * @brief   Determines if yielding is possible.
 653:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 654:../../../os/rt/include/chschd.h ****  *          equal or higher priority.
 655:../../../os/rt/include/chschd.h ****  *
 656:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 657:../../../os/rt/include/chschd.h ****  * @retval false        if yielding is not possible.
 658:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at equal or higher priority.
 659:../../../os/rt/include/chschd.h ****  *
 660:../../../os/rt/include/chschd.h ****  * @sclass
 661:../../../os/rt/include/chschd.h ****  */
 662:../../../os/rt/include/chschd.h **** static inline bool chSchCanYieldS(void) {
 663:../../../os/rt/include/chschd.h **** 
 664:../../../os/rt/include/chschd.h ****   chDbgCheckClassS();
 665:../../../os/rt/include/chschd.h **** 
 666:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) >= currp->prio;
 667:../../../os/rt/include/chschd.h **** }
 668:../../../os/rt/include/chschd.h **** 
 669:../../../os/rt/include/chschd.h **** /**
 670:../../../os/rt/include/chschd.h ****  * @brief   Yields the time slot.
 671:../../../os/rt/include/chschd.h ****  * @details Yields the CPU control to the next thread in the ready list with
 672:../../../os/rt/include/chschd.h ****  *          equal or higher priority, if any.
 673:../../../os/rt/include/chschd.h ****  *
 674:../../../os/rt/include/chschd.h ****  * @sclass
 675:../../../os/rt/include/chschd.h ****  */
 676:../../../os/rt/include/chschd.h **** static inline void chSchDoYieldS(void) {
 2044               		.loc 2 676 20 view .LVU628
 2045               	.LBB415:
 677:../../../os/rt/include/chschd.h **** 
 678:../../../os/rt/include/chschd.h ****   chDbgCheckClassS();
 2046               		.loc 2 678 21 view .LVU629
 679:../../../os/rt/include/chschd.h **** 
 680:../../../os/rt/include/chschd.h ****   if (chSchCanYieldS()) {
 2047               		.loc 2 680 3 view .LVU630
 2048               	.LBB416:
 2049               	.LBI416:
 662:../../../os/rt/include/chschd.h **** 
 2050               		.loc 2 662 20 view .LVU631
 2051               	.LBB417:
 664:../../../os/rt/include/chschd.h **** 
 2052               		.loc 2 664 21 view .LVU632
 666:../../../os/rt/include/chschd.h **** }
 2053               		.loc 2 666 3 view .LVU633
 666:../../../os/rt/include/chschd.h **** }
 2054               		.loc 2 666 10 is_stmt 0 view .LVU634
 2055 0002 A091 0000 		lds r26,ch
 2056 0006 B091 0000 		lds r27,ch+1
 666:../../../os/rt/include/chschd.h **** }
 2057               		.loc 2 666 45 view .LVU635
 2058 000a E091 0000 		lds r30,ch+11
 2059 000e F091 0000 		lds r31,ch+11+1
 2060               	.LBE417:
 2061               	.LBE416:
 2062               		.loc 2 680 6 view .LVU636
 2063 0012 1496      		adiw r26,4
 2064 0014 9C91      		ld r25,X
 2065 0016 8481      		ldd r24,Z+4
 2066 0018 9817      		cp r25,r24
 2067 001a 00F4      		brsh .L41
 2068               	.LBE415:
 2069               	.LBE414:
 720:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 2070               		.loc 1 720 3 is_stmt 1 view .LVU637
 2071               	.LBB419:
 2072               	.LBI419:
 365:../../../os/rt/include/chsys.h **** 
 2073               		.loc 3 365 20 view .LVU638
 2074               	.LBB420:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 2075               		.loc 3 367 22 view .LVU639
 368:../../../os/rt/include/chsys.h **** 
 2076               		.loc 3 368 33 view .LVU640
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2077               		.loc 3 374 3 view .LVU641
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2078               		.loc 3 374 3 view .LVU642
 2079               		.loc 3 378 3 view .LVU643
 2080               	.LBB421:
 2081               	.LBI421:
 445:../../../os/common/ports/AVR/chcore.h **** 
 2082               		.loc 4 445 20 view .LVU644
 2083               	.LBB422:
 2084               		.loc 4 447 3 view .LVU645
 2085               	/* #APP */
 2086               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2087 001c 7894      		sei
 2088               	 ;  0 "" 2
 2089               	/* #NOAPP */
 2090               	/* epilogue start */
 2091               	.LBE422:
 2092               	.LBE421:
 2093               	.LBE420:
 2094               	.LBE419:
 721:../../../os/rt/src/chthreads.c **** }
 2095               		.loc 1 721 1 is_stmt 0 view .LVU646
 2096 001e 0895      		ret
 2097               	.L41:
 2098               	.LBB426:
 2099               	.LBB418:
 681:../../../os/rt/include/chschd.h ****     chSchDoRescheduleBehind();
 2100               		.loc 2 681 5 is_stmt 1 view .LVU647
 2101 0020 0E94 0000 		call chSchDoRescheduleBehind
 2102               	.LVL99:
 2103               	.LBE418:
 2104               	.LBE426:
 720:../../../os/rt/src/chthreads.c **** }
 2105               		.loc 1 720 3 view .LVU648
 2106               	.LBB427:
 365:../../../os/rt/include/chsys.h **** 
 2107               		.loc 3 365 20 view .LVU649
 2108               	.LBB425:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 2109               		.loc 3 367 22 view .LVU650
 368:../../../os/rt/include/chsys.h **** 
 2110               		.loc 3 368 33 view .LVU651
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2111               		.loc 3 374 3 view .LVU652
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2112               		.loc 3 374 3 view .LVU653
 2113               		.loc 3 378 3 view .LVU654
 2114               	.LBB424:
 445:../../../os/common/ports/AVR/chcore.h **** 
 2115               		.loc 4 445 20 view .LVU655
 2116               	.LBB423:
 2117               		.loc 4 447 3 view .LVU656
 2118               	/* #APP */
 2119               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2120 0024 7894      		sei
 2121               	 ;  0 "" 2
 2122               	/* #NOAPP */
 2123               	/* epilogue start */
 2124               	.LBE423:
 2125               	.LBE424:
 2126               	.LBE425:
 2127               	.LBE427:
 2128               		.loc 1 721 1 is_stmt 0 view .LVU657
 2129 0026 0895      		ret
 2130               		.cfi_endproc
 2131               	.LFE158:
 2133               		.section	.text.chThdSuspendS,"ax",@progbits
 2134               	.global	chThdSuspendS
 2136               	chThdSuspendS:
 2137               	.LVL100:
 2138               	.LFB159:
 722:../../../os/rt/src/chthreads.c **** 
 723:../../../os/rt/src/chthreads.c **** /**
 724:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/rt/src/chthreads.c ****  *          context.
 727:../../../os/rt/src/chthreads.c ****  *
 728:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 730:../../../os/rt/src/chthreads.c ****  *
 731:../../../os/rt/src/chthreads.c ****  * @sclass
 732:../../../os/rt/src/chthreads.c ****  */
 733:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 2139               		.loc 1 733 46 is_stmt 1 view -0
 2140               		.cfi_startproc
 2141               		.loc 1 733 46 is_stmt 0 view .LVU659
 2142 0000 CF93      		push r28
 2143               	.LCFI23:
 2144               		.cfi_def_cfa_offset 3
 2145               		.cfi_offset 28, -2
 2146 0002 DF93      		push r29
 2147               	.LCFI24:
 2148               		.cfi_def_cfa_offset 4
 2149               		.cfi_offset 29, -3
 2150               	/* prologue: function */
 2151               	/* frame size = 0 */
 2152               	/* stack size = 2 */
 2153               	.L__stack_usage = 2
 734:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 2154               		.loc 1 734 3 is_stmt 1 view .LVU660
 2155               	.LBB428:
 2156               	.LBI428:
 272:../../../os/rt/include/chthreads.h **** 
 2157               		.loc 5 272 25 view .LVU661
 2158               	.LBB429:
 274:../../../os/rt/include/chthreads.h **** }
 2159               		.loc 5 274 3 view .LVU662
 274:../../../os/rt/include/chthreads.h **** }
 2160               		.loc 5 274 18 is_stmt 0 view .LVU663
 2161 0004 C0E0      		ldi r28,lo8(ch)
 2162 0006 D0E0      		ldi r29,hi8(ch)
 2163 0008 EB85      		ldd r30,Y+11
 2164 000a FC85      		ldd r31,Y+12
 2165               	.LVL101:
 274:../../../os/rt/include/chthreads.h **** }
 2166               		.loc 5 274 18 view .LVU664
 2167               	.LBE429:
 2168               	.LBE428:
 735:../../../os/rt/src/chthreads.c **** 
 736:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 2169               		.loc 1 736 3 is_stmt 1 view .LVU665
 2170               		.loc 1 736 3 view .LVU666
 737:../../../os/rt/src/chthreads.c **** 
 738:../../../os/rt/src/chthreads.c ****   *trp = tp;
 2171               		.loc 1 738 3 view .LVU667
 2172               		.loc 1 738 8 is_stmt 0 view .LVU668
 2173 000c DC01      		movw r26,r24
 2174 000e ED93      		st X+,r30
 2175 0010 FC93      		st X,r31
 739:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 2176               		.loc 1 739 3 is_stmt 1 view .LVU669
 2177               		.loc 1 739 15 is_stmt 0 view .LVU670
 2178 0012 918B      		std Z+17,r25
 2179 0014 808B      		std Z+16,r24
 740:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 2180               		.loc 1 740 3 is_stmt 1 view .LVU671
 2181 0016 83E0      		ldi r24,lo8(3)
 2182               	.LVL102:
 2183               		.loc 1 740 3 is_stmt 0 view .LVU672
 2184 0018 0E94 0000 		call chSchGoSleepS
 2185               	.LVL103:
 741:../../../os/rt/src/chthreads.c **** 
 742:../../../os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 2186               		.loc 1 742 3 is_stmt 1 view .LVU673
 2187               	.LBB430:
 2188               	.LBI430:
 272:../../../os/rt/include/chthreads.h **** 
 2189               		.loc 5 272 25 view .LVU674
 2190               	.LBB431:
 274:../../../os/rt/include/chthreads.h **** }
 2191               		.loc 5 274 3 view .LVU675
 2192               	.LBE431:
 2193               	.LBE430:
 2194               		.loc 1 742 28 is_stmt 0 view .LVU676
 2195 001c EB85      		ldd r30,Y+11
 2196 001e FC85      		ldd r31,Y+12
 743:../../../os/rt/src/chthreads.c **** }
 2197               		.loc 1 743 1 view .LVU677
 2198 0020 8089      		ldd r24,Z+16
 2199 0022 9189      		ldd r25,Z+17
 2200               	/* epilogue start */
 2201 0024 DF91      		pop r29
 2202 0026 CF91      		pop r28
 2203 0028 0895      		ret
 2204               		.cfi_endproc
 2205               	.LFE159:
 2207               		.section	.text.chThdSuspendTimeoutS,"ax",@progbits
 2208               	.global	chThdSuspendTimeoutS
 2210               	chThdSuspendTimeoutS:
 2211               	.LVL104:
 2212               	.LFB160:
 744:../../../os/rt/src/chthreads.c **** 
 745:../../../os/rt/src/chthreads.c **** /**
 746:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 747:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 748:../../../os/rt/src/chthreads.c ****  *          context.
 749:../../../os/rt/src/chthreads.c ****  *
 750:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 751:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 752:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 753:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 754:../../../os/rt/src/chthreads.c ****  *                        state.
 755:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 756:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 757:../../../os/rt/src/chthreads.c ****  *                        occurred.
 758:../../../os/rt/src/chthreads.c ****  *                      .
 759:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 760:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 761:../../../os/rt/src/chthreads.c ****  *
 762:../../../os/rt/src/chthreads.c ****  * @sclass
 763:../../../os/rt/src/chthreads.c ****  */
 764:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 2213               		.loc 1 764 76 is_stmt 1 view -0
 2214               		.cfi_startproc
 2215               	/* prologue: function */
 2216               	/* frame size = 0 */
 2217               	/* stack size = 0 */
 2218               	.L__stack_usage = 0
 765:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 2219               		.loc 1 765 3 view .LVU679
 2220               	.LBB432:
 2221               	.LBI432:
 272:../../../os/rt/include/chthreads.h **** 
 2222               		.loc 5 272 25 view .LVU680
 2223               	.LBB433:
 274:../../../os/rt/include/chthreads.h **** }
 2224               		.loc 5 274 3 view .LVU681
 274:../../../os/rt/include/chthreads.h **** }
 2225               		.loc 5 274 18 is_stmt 0 view .LVU682
 2226 0000 E091 0000 		lds r30,ch+11
 2227 0004 F091 0000 		lds r31,ch+11+1
 2228               	.LVL105:
 274:../../../os/rt/include/chthreads.h **** }
 2229               		.loc 5 274 18 view .LVU683
 2230               	.LBE433:
 2231               	.LBE432:
 766:../../../os/rt/src/chthreads.c **** 
 767:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 2232               		.loc 1 767 3 is_stmt 1 view .LVU684
 2233               		.loc 1 767 3 view .LVU685
 768:../../../os/rt/src/chthreads.c **** 
 769:../../../os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 2234               		.loc 1 769 3 view .LVU686
 2235               		.loc 1 769 6 is_stmt 0 view .LVU687
 2236 0008 6115      		cp r22,__zero_reg__
 2237 000a 7105      		cpc r23,__zero_reg__
 2238 000c 01F0      		breq .L44
 770:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 771:../../../os/rt/src/chthreads.c ****   }
 772:../../../os/rt/src/chthreads.c **** 
 773:../../../os/rt/src/chthreads.c ****   *trp = tp;
 2239               		.loc 1 773 3 is_stmt 1 view .LVU688
 2240               		.loc 1 773 8 is_stmt 0 view .LVU689
 2241 000e DC01      		movw r26,r24
 2242 0010 ED93      		st X+,r30
 2243 0012 FC93      		st X,r31
 774:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 2244               		.loc 1 774 3 is_stmt 1 view .LVU690
 2245               		.loc 1 774 15 is_stmt 0 view .LVU691
 2246 0014 918B      		std Z+17,r25
 2247 0016 808B      		std Z+16,r24
 775:../../../os/rt/src/chthreads.c **** 
 776:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 2248               		.loc 1 776 3 is_stmt 1 view .LVU692
 2249               		.loc 1 776 10 is_stmt 0 view .LVU693
 2250 0018 83E0      		ldi r24,lo8(3)
 2251               	.LVL106:
 2252               		.loc 1 776 10 view .LVU694
 2253 001a 0C94 0000 		jmp chSchGoSleepTimeoutS
 2254               	.LVL107:
 2255               	.L44:
 777:../../../os/rt/src/chthreads.c **** }
 2256               		.loc 1 777 1 view .LVU695
 2257 001e 8FEF      		ldi r24,lo8(-1)
 2258 0020 9FEF      		ldi r25,lo8(-1)
 2259               	.LVL108:
 2260               	/* epilogue start */
 2261               		.loc 1 777 1 view .LVU696
 2262 0022 0895      		ret
 2263               		.cfi_endproc
 2264               	.LFE160:
 2266               		.section	.text.chThdResumeI,"ax",@progbits
 2267               	.global	chThdResumeI
 2269               	chThdResumeI:
 2270               	.LVL109:
 2271               	.LFB161:
 778:../../../os/rt/src/chthreads.c **** 
 779:../../../os/rt/src/chthreads.c **** /**
 780:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 781:../../../os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 782:../../../os/rt/src/chthreads.c ****  *          ISR context.
 783:../../../os/rt/src/chthreads.c ****  *
 784:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 785:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 786:../../../os/rt/src/chthreads.c ****  *
 787:../../../os/rt/src/chthreads.c ****  * @iclass
 788:../../../os/rt/src/chthreads.c ****  */
 789:../../../os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 2272               		.loc 1 789 55 is_stmt 1 view -0
 2273               		.cfi_startproc
 2274               	/* prologue: function */
 2275               	/* frame size = 0 */
 2276               	/* stack size = 0 */
 2277               	.L__stack_usage = 0
 790:../../../os/rt/src/chthreads.c **** 
 791:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 2278               		.loc 1 791 3 view .LVU698
 2279               		.loc 1 791 7 is_stmt 0 view .LVU699
 2280 0000 DC01      		movw r26,r24
 2281 0002 ED91      		ld r30,X+
 2282 0004 FC91      		ld r31,X
 2283 0006 1197      		sbiw r26,1
 2284               		.loc 1 791 6 view .LVU700
 2285 0008 3097      		sbiw r30,0
 2286 000a 01F0      		breq .L45
 2287               	.LBB434:
 792:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 2288               		.loc 1 792 5 is_stmt 1 view .LVU701
 2289               	.LVL110:
 793:../../../os/rt/src/chthreads.c **** 
 794:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 2290               		.loc 1 794 5 view .LVU702
 2291               		.loc 1 794 5 view .LVU703
 795:../../../os/rt/src/chthreads.c **** 
 796:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 2292               		.loc 1 796 5 view .LVU704
 2293               		.loc 1 796 10 is_stmt 0 view .LVU705
 2294 000c 1D92      		st X+,__zero_reg__
 2295 000e 1C92      		st X,__zero_reg__
 797:../../../os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 2296               		.loc 1 797 5 is_stmt 1 view .LVU706
 2297               		.loc 1 797 18 is_stmt 0 view .LVU707
 2298 0010 718B      		std Z+17,r23
 2299 0012 608B      		std Z+16,r22
 798:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 2300               		.loc 1 798 5 is_stmt 1 view .LVU708
 2301               		.loc 1 798 12 is_stmt 0 view .LVU709
 2302 0014 CF01      		movw r24,r30
 2303               	.LVL111:
 2304               		.loc 1 798 12 view .LVU710
 2305 0016 0C94 0000 		jmp chSchReadyI
 2306               	.LVL112:
 2307               	.L45:
 2308               	/* epilogue start */
 2309               		.loc 1 798 12 view .LVU711
 2310               	.LBE434:
 799:../../../os/rt/src/chthreads.c ****   }
 800:../../../os/rt/src/chthreads.c **** }
 2311               		.loc 1 800 1 view .LVU712
 2312 001a 0895      		ret
 2313               		.cfi_endproc
 2314               	.LFE161:
 2316               		.section	.text.chThdResumeS,"ax",@progbits
 2317               	.global	chThdResumeS
 2319               	chThdResumeS:
 2320               	.LVL113:
 2321               	.LFB162:
 801:../../../os/rt/src/chthreads.c **** 
 802:../../../os/rt/src/chthreads.c **** /**
 803:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 804:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 805:../../../os/rt/src/chthreads.c ****  *          context.
 806:../../../os/rt/src/chthreads.c ****  *
 807:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 808:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 809:../../../os/rt/src/chthreads.c ****  *
 810:../../../os/rt/src/chthreads.c ****  * @iclass
 811:../../../os/rt/src/chthreads.c ****  */
 812:../../../os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 2322               		.loc 1 812 55 is_stmt 1 view -0
 2323               		.cfi_startproc
 2324               	/* prologue: function */
 2325               	/* frame size = 0 */
 2326               	/* stack size = 0 */
 2327               	.L__stack_usage = 0
 813:../../../os/rt/src/chthreads.c **** 
 814:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 2328               		.loc 1 814 3 view .LVU714
 2329               		.loc 1 814 7 is_stmt 0 view .LVU715
 2330 0000 FC01      		movw r30,r24
 2331 0002 2081      		ld r18,Z
 2332 0004 3181      		ldd r19,Z+1
 2333               		.loc 1 814 6 view .LVU716
 2334 0006 2115      		cp r18,__zero_reg__
 2335 0008 3105      		cpc r19,__zero_reg__
 2336 000a 01F0      		breq .L47
 2337               	.LBB435:
 815:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 2338               		.loc 1 815 5 is_stmt 1 view .LVU717
 2339               	.LVL114:
 816:../../../os/rt/src/chthreads.c **** 
 817:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 2340               		.loc 1 817 5 view .LVU718
 2341               		.loc 1 817 5 view .LVU719
 818:../../../os/rt/src/chthreads.c **** 
 819:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 2342               		.loc 1 819 5 view .LVU720
 2343               		.loc 1 819 10 is_stmt 0 view .LVU721
 2344 000c 1182      		std Z+1,__zero_reg__
 2345 000e 1082      		st Z,__zero_reg__
 820:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 2346               		.loc 1 820 5 is_stmt 1 view .LVU722
 2347 0010 C901      		movw r24,r18
 2348               	.LVL115:
 2349               		.loc 1 820 5 is_stmt 0 view .LVU723
 2350 0012 0C94 0000 		jmp chSchWakeupS
 2351               	.LVL116:
 2352               	.L47:
 2353               	/* epilogue start */
 2354               		.loc 1 820 5 view .LVU724
 2355               	.LBE435:
 821:../../../os/rt/src/chthreads.c ****   }
 822:../../../os/rt/src/chthreads.c **** }
 2356               		.loc 1 822 1 view .LVU725
 2357 0016 0895      		ret
 2358               		.cfi_endproc
 2359               	.LFE162:
 2361               		.section	.text.chThdResume,"ax",@progbits
 2362               	.global	chThdResume
 2364               	chThdResume:
 2365               	.LVL117:
 2366               	.LFB163:
 823:../../../os/rt/src/chthreads.c **** 
 824:../../../os/rt/src/chthreads.c **** /**
 825:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 826:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 827:../../../os/rt/src/chthreads.c ****  *          context.
 828:../../../os/rt/src/chthreads.c ****  *
 829:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 830:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 831:../../../os/rt/src/chthreads.c ****  *
 832:../../../os/rt/src/chthreads.c ****  * @api
 833:../../../os/rt/src/chthreads.c ****  */
 834:../../../os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 2367               		.loc 1 834 54 is_stmt 1 view -0
 2368               		.cfi_startproc
 2369               	/* prologue: function */
 2370               	/* frame size = 0 */
 2371               	/* stack size = 0 */
 2372               	.L__stack_usage = 0
 835:../../../os/rt/src/chthreads.c **** 
 836:../../../os/rt/src/chthreads.c ****   chSysLock();
 2373               		.loc 1 836 3 view .LVU727
 2374               	.LBB436:
 2375               	.LBI436:
 353:../../../os/rt/include/chsys.h **** 
 2376               		.loc 3 353 20 view .LVU728
 2377               	.LBE436:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 2378               		.loc 3 355 3 view .LVU729
 2379               	.LBB439:
 2380               	.LBB437:
 2381               	.LBI437:
 435:../../../os/common/ports/AVR/chcore.h **** 
 2382               		.loc 4 435 20 view .LVU730
 2383               	.LBB438:
 437:../../../os/common/ports/AVR/chcore.h **** }
 2384               		.loc 4 437 3 view .LVU731
 2385               	/* #APP */
 2386               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 2387 0000 F894      		cli
 2388               	 ;  0 "" 2
 2389               	/* #NOAPP */
 2390               	.LBE438:
 2391               	.LBE437:
 2392               	.LBE439:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 2393               		.loc 3 356 34 view .LVU732
 357:../../../os/rt/include/chsys.h **** }
 2394               		.loc 3 357 20 view .LVU733
 837:../../../os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 2395               		.loc 1 837 3 view .LVU734
 2396               	.LVL118:
 2397               	.LBB440:
 2398               	.LBI440:
 812:../../../os/rt/src/chthreads.c **** 
 2399               		.loc 1 812 6 view .LVU735
 2400               	.LBB441:
 814:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 2401               		.loc 1 814 3 view .LVU736
 814:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 2402               		.loc 1 814 7 is_stmt 0 view .LVU737
 2403 0002 FC01      		movw r30,r24
 2404 0004 2081      		ld r18,Z
 2405 0006 3181      		ldd r19,Z+1
 814:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 2406               		.loc 1 814 6 view .LVU738
 2407 0008 2115      		cp r18,__zero_reg__
 2408 000a 3105      		cpc r19,__zero_reg__
 2409 000c 01F0      		breq .L50
 2410               	.LBB442:
 815:../../../os/rt/src/chthreads.c **** 
 2411               		.loc 1 815 5 is_stmt 1 view .LVU739
 2412               	.LVL119:
 817:../../../os/rt/src/chthreads.c **** 
 2413               		.loc 1 817 5 view .LVU740
 817:../../../os/rt/src/chthreads.c **** 
 2414               		.loc 1 817 5 view .LVU741
 819:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 2415               		.loc 1 819 5 view .LVU742
 819:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 2416               		.loc 1 819 10 is_stmt 0 view .LVU743
 2417 000e 1182      		std Z+1,__zero_reg__
 2418 0010 1082      		st Z,__zero_reg__
 820:../../../os/rt/src/chthreads.c ****   }
 2419               		.loc 1 820 5 is_stmt 1 view .LVU744
 2420 0012 C901      		movw r24,r18
 2421               	.LVL120:
 820:../../../os/rt/src/chthreads.c ****   }
 2422               		.loc 1 820 5 is_stmt 0 view .LVU745
 2423 0014 0E94 0000 		call chSchWakeupS
 2424               	.LVL121:
 2425               	.L50:
 820:../../../os/rt/src/chthreads.c ****   }
 2426               		.loc 1 820 5 view .LVU746
 2427               	.LBE442:
 2428               	.LBE441:
 2429               	.LBE440:
 838:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 2430               		.loc 1 838 3 is_stmt 1 view .LVU747
 2431               	.LBB443:
 2432               	.LBI443:
 365:../../../os/rt/include/chsys.h **** 
 2433               		.loc 3 365 20 view .LVU748
 2434               	.LBB444:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 2435               		.loc 3 367 22 view .LVU749
 368:../../../os/rt/include/chsys.h **** 
 2436               		.loc 3 368 33 view .LVU750
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2437               		.loc 3 374 3 view .LVU751
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2438               		.loc 3 374 3 view .LVU752
 2439               		.loc 3 378 3 view .LVU753
 2440               	.LBB445:
 2441               	.LBI445:
 445:../../../os/common/ports/AVR/chcore.h **** 
 2442               		.loc 4 445 20 view .LVU754
 2443               	.LBB446:
 2444               		.loc 4 447 3 view .LVU755
 2445               	/* #APP */
 2446               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 2447 0018 7894      		sei
 2448               	 ;  0 "" 2
 2449               	/* #NOAPP */
 2450               	/* epilogue start */
 2451               	.LBE446:
 2452               	.LBE445:
 2453               	.LBE444:
 2454               	.LBE443:
 839:../../../os/rt/src/chthreads.c **** }
 2455               		.loc 1 839 1 is_stmt 0 view .LVU756
 2456 001a 0895      		ret
 2457               		.cfi_endproc
 2458               	.LFE163:
 2460               		.section	.text.chThdEnqueueTimeoutS,"ax",@progbits
 2461               	.global	chThdEnqueueTimeoutS
 2463               	chThdEnqueueTimeoutS:
 2464               	.LVL122:
 2465               	.LFB164:
 840:../../../os/rt/src/chthreads.c **** 
 841:../../../os/rt/src/chthreads.c **** /**
 842:../../../os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 843:../../../os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 844:../../../os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 845:../../../os/rt/src/chthreads.c ****  *
 846:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 847:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 848:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 849:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 850:../../../os/rt/src/chthreads.c ****  *                        state.
 851:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 852:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 853:../../../os/rt/src/chthreads.c ****  *                        occurred.
 854:../../../os/rt/src/chthreads.c ****  *                      .
 855:../../../os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 856:../../../os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 857:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 858:../../../os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 859:../../../os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 860:../../../os/rt/src/chthreads.c ****  *                      specification.
 861:../../../os/rt/src/chthreads.c ****  *
 862:../../../os/rt/src/chthreads.c ****  * @sclass
 863:../../../os/rt/src/chthreads.c ****  */
 864:../../../os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 2466               		.loc 1 864 73 is_stmt 1 view -0
 2467               		.cfi_startproc
 2468               		.loc 1 864 73 is_stmt 0 view .LVU758
 2469 0000 CF93      		push r28
 2470               	.LCFI25:
 2471               		.cfi_def_cfa_offset 3
 2472               		.cfi_offset 28, -2
 2473 0002 DF93      		push r29
 2474               	.LCFI26:
 2475               		.cfi_def_cfa_offset 4
 2476               		.cfi_offset 29, -3
 2477               	/* prologue: function */
 2478               	/* frame size = 0 */
 2479               	/* stack size = 2 */
 2480               	.L__stack_usage = 2
 865:../../../os/rt/src/chthreads.c **** 
 866:../../../os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 2481               		.loc 1 866 3 is_stmt 1 view .LVU759
 2482               		.loc 1 866 6 is_stmt 0 view .LVU760
 2483 0004 6115      		cp r22,__zero_reg__
 2484 0006 7105      		cpc r23,__zero_reg__
 2485 0008 01F0      		breq .L55
 867:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 868:../../../os/rt/src/chthreads.c ****   }
 869:../../../os/rt/src/chthreads.c **** 
 870:../../../os/rt/src/chthreads.c ****   queue_insert(currp, tqp);
 2486               		.loc 1 870 3 is_stmt 1 view .LVU761
 2487 000a E091 0000 		lds r30,ch+11
 2488 000e F091 0000 		lds r31,ch+11+1
 2489               	.LVL123:
 2490               	.LBB447:
 2491               	.LBI447:
 598:../../../os/rt/include/chschd.h **** 
 2492               		.loc 2 598 20 view .LVU762
 2493               	.LBB448:
 600:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 2494               		.loc 2 600 3 view .LVU763
 600:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 2495               		.loc 2 600 30 is_stmt 0 view .LVU764
 2496 0012 9183      		std Z+1,r25
 2497 0014 8083      		st Z,r24
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 2498               		.loc 2 601 3 is_stmt 1 view .LVU765
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 2499               		.loc 2 601 35 is_stmt 0 view .LVU766
 2500 0016 EC01      		movw r28,r24
 2501 0018 AA81      		ldd r26,Y+2
 2502 001a BB81      		ldd r27,Y+3
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 2503               		.loc 2 601 30 view .LVU767
 2504 001c B383      		std Z+3,r27
 2505 001e A283      		std Z+2,r26
 602:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 2506               		.loc 2 602 3 is_stmt 1 view .LVU768
 602:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 2507               		.loc 2 602 30 is_stmt 0 view .LVU769
 2508 0020 ED93      		st X+,r30
 2509 0022 FC93      		st X,r31
 603:../../../os/rt/include/chschd.h **** }
 2510               		.loc 2 603 3 is_stmt 1 view .LVU770
 603:../../../os/rt/include/chschd.h **** }
 2511               		.loc 2 603 30 is_stmt 0 view .LVU771
 2512 0024 FB83      		std Y+3,r31
 2513 0026 EA83      		std Y+2,r30
 2514               	.LVL124:
 603:../../../os/rt/include/chschd.h **** }
 2515               		.loc 2 603 30 view .LVU772
 2516               	.LBE448:
 2517               	.LBE447:
 871:../../../os/rt/src/chthreads.c **** 
 872:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 2518               		.loc 1 872 3 is_stmt 1 view .LVU773
 2519               		.loc 1 872 10 is_stmt 0 view .LVU774
 2520 0028 84E0      		ldi r24,lo8(4)
 2521               	.LVL125:
 2522               	/* epilogue start */
 873:../../../os/rt/src/chthreads.c **** }
 2523               		.loc 1 873 1 view .LVU775
 2524 002a DF91      		pop r29
 2525 002c CF91      		pop r28
 2526               	.LVL126:
 872:../../../os/rt/src/chthreads.c **** }
 2527               		.loc 1 872 10 view .LVU776
 2528 002e 0C94 0000 		jmp chSchGoSleepTimeoutS
 2529               	.LVL127:
 2530               	.L55:
 2531               		.loc 1 873 1 view .LVU777
 2532 0032 8FEF      		ldi r24,lo8(-1)
 2533 0034 9FEF      		ldi r25,lo8(-1)
 2534               	.LVL128:
 2535               	/* epilogue start */
 2536               		.loc 1 873 1 view .LVU778
 2537 0036 DF91      		pop r29
 2538 0038 CF91      		pop r28
 2539 003a 0895      		ret
 2540               		.cfi_endproc
 2541               	.LFE164:
 2543               		.section	.text.chThdDequeueNextI,"ax",@progbits
 2544               	.global	chThdDequeueNextI
 2546               	chThdDequeueNextI:
 2547               	.LVL129:
 2548               	.LFB165:
 874:../../../os/rt/src/chthreads.c **** 
 875:../../../os/rt/src/chthreads.c **** /**
 876:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 877:../../../os/rt/src/chthreads.c ****  *          if any.
 878:../../../os/rt/src/chthreads.c ****  *
 879:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 880:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 881:../../../os/rt/src/chthreads.c ****  *
 882:../../../os/rt/src/chthreads.c ****  * @iclass
 883:../../../os/rt/src/chthreads.c ****  */
 884:../../../os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 2549               		.loc 1 884 57 is_stmt 1 view -0
 2550               		.cfi_startproc
 2551               		.loc 1 884 57 is_stmt 0 view .LVU780
 2552 0000 CF93      		push r28
 2553               	.LCFI27:
 2554               		.cfi_def_cfa_offset 3
 2555               		.cfi_offset 28, -2
 2556 0002 DF93      		push r29
 2557               	.LCFI28:
 2558               		.cfi_def_cfa_offset 4
 2559               		.cfi_offset 29, -3
 2560               	/* prologue: function */
 2561               	/* frame size = 0 */
 2562               	/* stack size = 2 */
 2563               	.L__stack_usage = 2
 2564 0004 FC01      		movw r30,r24
 885:../../../os/rt/src/chthreads.c **** 
 886:../../../os/rt/src/chthreads.c ****   if (queue_notempty(tqp)) {
 2565               		.loc 1 886 3 is_stmt 1 view .LVU781
 2566               	.LVL130:
 2567               	.LBB449:
 2568               	.LBI449:
 564:../../../os/rt/include/chschd.h **** 
 2569               		.loc 2 564 20 view .LVU782
 2570               	.LBB450:
 566:../../../os/rt/include/chschd.h **** }
 2571               		.loc 2 566 3 view .LVU783
 566:../../../os/rt/include/chschd.h **** }
 2572               		.loc 2 566 20 is_stmt 0 view .LVU784
 2573 0006 8081      		ld r24,Z
 2574 0008 9181      		ldd r25,Z+1
 2575               	.LVL131:
 566:../../../os/rt/include/chschd.h **** }
 2576               		.loc 2 566 20 view .LVU785
 2577               	.LBE450:
 2578               	.LBE449:
 2579               		.loc 1 886 6 view .LVU786
 2580 000a E817      		cp r30,r24
 2581 000c F907      		cpc r31,r25
 2582 000e 01F0      		breq .L56
 887:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 2583               		.loc 1 887 5 is_stmt 1 view .LVU787
 2584               	.LVL132:
 2585               	.LBB451:
 2586               	.LBI451:
 383:../../../os/rt/include/chthreads.h **** }
 384:../../../os/rt/include/chthreads.h **** 
 385:../../../os/rt/include/chthreads.h **** /**
 386:../../../os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 387:../../../os/rt/include/chthreads.h ****  *
 388:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 389:../../../os/rt/include/chthreads.h ****  *
 390:../../../os/rt/include/chthreads.h ****  * @init
 391:../../../os/rt/include/chthreads.h ****  */
 392:../../../os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 393:../../../os/rt/include/chthreads.h **** 
 394:../../../os/rt/include/chthreads.h ****   queue_init(tqp);
 395:../../../os/rt/include/chthreads.h **** }
 396:../../../os/rt/include/chthreads.h **** 
 397:../../../os/rt/include/chthreads.h **** /**
 398:../../../os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 399:../../../os/rt/include/chthreads.h ****  *
 400:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 401:../../../os/rt/include/chthreads.h ****  * @return              The queue status.
 402:../../../os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 403:../../../os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 404:../../../os/rt/include/chthreads.h ****  *
 405:../../../os/rt/include/chthreads.h ****  * @iclass
 406:../../../os/rt/include/chthreads.h ****  */
 407:../../../os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 408:../../../os/rt/include/chthreads.h **** 
 409:../../../os/rt/include/chthreads.h ****   chDbgCheckClassI();
 410:../../../os/rt/include/chthreads.h **** 
 411:../../../os/rt/include/chthreads.h ****   return queue_isempty(tqp);
 412:../../../os/rt/include/chthreads.h **** }
 413:../../../os/rt/include/chthreads.h **** 
 414:../../../os/rt/include/chthreads.h **** /**
 415:../../../os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 416:../../../os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 417:../../../os/rt/include/chthreads.h ****  *          is empty.
 418:../../../os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 419:../../../os/rt/include/chthreads.h ****  *
 420:../../../os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to the threads queue object
 421:../../../os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 422:../../../os/rt/include/chthreads.h ****  *
 423:../../../os/rt/include/chthreads.h ****  * @iclass
 424:../../../os/rt/include/chthreads.h ****  */
 425:../../../os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 2587               		.loc 5 425 20 view .LVU788
 2588               	.LBB452:
 426:../../../os/rt/include/chthreads.h ****   thread_t *tp;
 2589               		.loc 5 426 3 view .LVU789
 427:../../../os/rt/include/chthreads.h **** 
 428:../../../os/rt/include/chthreads.h ****   chDbgAssert(queue_notempty(tqp), "empty queue");
 2590               		.loc 5 428 3 view .LVU790
 2591               		.loc 5 428 3 view .LVU791
 429:../../../os/rt/include/chthreads.h **** 
 430:../../../os/rt/include/chthreads.h ****   tp = queue_fifo_remove(tqp);
 2592               		.loc 5 430 3 view .LVU792
 2593               	.LBB453:
 2594               	.LBI453:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 2595               		.loc 2 606 25 view .LVU793
 2596               	.LBB454:
 607:../../../os/rt/include/chschd.h **** 
 2597               		.loc 2 607 3 view .LVU794
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2598               		.loc 2 609 3 view .LVU795
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2599               		.loc 2 609 36 is_stmt 0 view .LVU796
 2600 0010 EC01      		movw r28,r24
 2601 0012 A881      		ld r26,Y
 2602 0014 B981      		ldd r27,Y+1
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2603               		.loc 2 609 25 view .LVU797
 2604 0016 B183      		std Z+1,r27
 2605 0018 A083      		st Z,r26
 610:../../../os/rt/include/chschd.h **** 
 2606               		.loc 2 610 3 is_stmt 1 view .LVU798
 610:../../../os/rt/include/chschd.h **** 
 2607               		.loc 2 610 25 is_stmt 0 view .LVU799
 2608 001a 1396      		adiw r26,2+1
 2609 001c FC93      		st X,r31
 2610 001e EE93      		st -X,r30
 2611 0020 1297      		sbiw r26,2
 612:../../../os/rt/include/chschd.h **** }
 2612               		.loc 2 612 3 is_stmt 1 view .LVU800
 2613               	.LVL133:
 612:../../../os/rt/include/chschd.h **** }
 2614               		.loc 2 612 3 is_stmt 0 view .LVU801
 2615               	.LBE454:
 2616               	.LBE453:
 431:../../../os/rt/include/chthreads.h **** 
 432:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 2617               		.loc 5 432 3 is_stmt 1 view .LVU802
 2618               		.loc 5 432 3 view .LVU803
 433:../../../os/rt/include/chthreads.h **** 
 434:../../../os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 2619               		.loc 5 434 3 view .LVU804
 2620               		.loc 5 434 16 is_stmt 0 view .LVU805
 2621 0022 798B      		std Y+17,r23
 2622 0024 688B      		std Y+16,r22
 435:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 2623               		.loc 5 435 3 is_stmt 1 view .LVU806
 2624               	/* epilogue start */
 2625               	.LBE452:
 2626               	.LBE451:
 888:../../../os/rt/src/chthreads.c ****   }
 889:../../../os/rt/src/chthreads.c **** }
 2627               		.loc 1 889 1 is_stmt 0 view .LVU807
 2628 0026 DF91      		pop r29
 2629 0028 CF91      		pop r28
 2630               	.LBB456:
 2631               	.LBB455:
 2632               		.loc 5 435 10 view .LVU808
 2633 002a 0C94 0000 		jmp chSchReadyI
 2634               	.LVL134:
 2635               	.L56:
 2636               	/* epilogue start */
 2637               		.loc 5 435 10 view .LVU809
 2638               	.LBE455:
 2639               	.LBE456:
 2640               		.loc 1 889 1 view .LVU810
 2641 002e DF91      		pop r29
 2642 0030 CF91      		pop r28
 2643 0032 0895      		ret
 2644               		.cfi_endproc
 2645               	.LFE165:
 2647               		.section	.text.chThdDequeueAllI,"ax",@progbits
 2648               	.global	chThdDequeueAllI
 2650               	chThdDequeueAllI:
 2651               	.LVL135:
 2652               	.LFB166:
 890:../../../os/rt/src/chthreads.c **** 
 891:../../../os/rt/src/chthreads.c **** /**
 892:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 893:../../../os/rt/src/chthreads.c ****  *
 894:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 895:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 896:../../../os/rt/src/chthreads.c ****  *
 897:../../../os/rt/src/chthreads.c ****  * @iclass
 898:../../../os/rt/src/chthreads.c ****  */
 899:../../../os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 2653               		.loc 1 899 56 is_stmt 1 view -0
 2654               		.cfi_startproc
 2655               		.loc 1 899 56 is_stmt 0 view .LVU812
 2656 0000 0F93      		push r16
 2657               	.LCFI29:
 2658               		.cfi_def_cfa_offset 3
 2659               		.cfi_offset 16, -2
 2660 0002 1F93      		push r17
 2661               	.LCFI30:
 2662               		.cfi_def_cfa_offset 4
 2663               		.cfi_offset 17, -3
 2664 0004 CF93      		push r28
 2665               	.LCFI31:
 2666               		.cfi_def_cfa_offset 5
 2667               		.cfi_offset 28, -4
 2668 0006 DF93      		push r29
 2669               	.LCFI32:
 2670               		.cfi_def_cfa_offset 6
 2671               		.cfi_offset 29, -5
 2672               	/* prologue: function */
 2673               	/* frame size = 0 */
 2674               	/* stack size = 4 */
 2675               	.L__stack_usage = 4
 2676 0008 EC01      		movw r28,r24
 2677 000a 8B01      		movw r16,r22
 900:../../../os/rt/src/chthreads.c **** 
 901:../../../os/rt/src/chthreads.c ****   while (queue_notempty(tqp)) {
 2678               		.loc 1 901 3 is_stmt 1 view .LVU813
 2679               	.LVL136:
 2680               	.LBB457:
 2681               	.LBI457:
 564:../../../os/rt/include/chschd.h **** 
 2682               		.loc 2 564 20 view .LVU814
 2683               	.LBB458:
 566:../../../os/rt/include/chschd.h **** }
 2684               		.loc 2 566 3 view .LVU815
 566:../../../os/rt/include/chschd.h **** }
 2685               		.loc 2 566 20 is_stmt 0 view .LVU816
 2686 000c 8881      		ld r24,Y
 2687 000e 9981      		ldd r25,Y+1
 2688               	.LVL137:
 566:../../../os/rt/include/chschd.h **** }
 2689               		.loc 2 566 20 view .LVU817
 2690               	.LBE458:
 2691               	.LBE457:
 2692               		.loc 1 901 9 view .LVU818
 2693 0010 C817      		cp r28,r24
 2694 0012 D907      		cpc r29,r25
 2695 0014 01F0      		breq .L58
 2696               	.LVL138:
 2697               	.L60:
 902:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 2698               		.loc 1 902 5 is_stmt 1 view .LVU819
 2699               	.LBB460:
 2700               	.LBI460:
 425:../../../os/rt/include/chthreads.h ****   thread_t *tp;
 2701               		.loc 5 425 20 view .LVU820
 2702               	.LBB461:
 426:../../../os/rt/include/chthreads.h **** 
 2703               		.loc 5 426 3 view .LVU821
 428:../../../os/rt/include/chthreads.h **** 
 2704               		.loc 5 428 3 view .LVU822
 428:../../../os/rt/include/chthreads.h **** 
 2705               		.loc 5 428 3 view .LVU823
 430:../../../os/rt/include/chthreads.h **** 
 2706               		.loc 5 430 3 view .LVU824
 2707               	.LBB462:
 2708               	.LBI462:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 2709               		.loc 2 606 25 view .LVU825
 2710               	.LBB463:
 607:../../../os/rt/include/chschd.h **** 
 2711               		.loc 2 607 3 view .LVU826
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2712               		.loc 2 609 3 view .LVU827
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2713               		.loc 2 609 36 is_stmt 0 view .LVU828
 2714 0016 DC01      		movw r26,r24
 2715 0018 ED91      		ld r30,X+
 2716 001a FC91      		ld r31,X
 2717 001c 1197      		sbiw r26,1
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2718               		.loc 2 609 25 view .LVU829
 2719 001e F983      		std Y+1,r31
 2720 0020 E883      		st Y,r30
 610:../../../os/rt/include/chschd.h **** 
 2721               		.loc 2 610 3 is_stmt 1 view .LVU830
 610:../../../os/rt/include/chschd.h **** 
 2722               		.loc 2 610 25 is_stmt 0 view .LVU831
 2723 0022 D383      		std Z+3,r29
 2724 0024 C283      		std Z+2,r28
 612:../../../os/rt/include/chschd.h **** }
 2725               		.loc 2 612 3 is_stmt 1 view .LVU832
 2726               	.LVL139:
 612:../../../os/rt/include/chschd.h **** }
 2727               		.loc 2 612 3 is_stmt 0 view .LVU833
 2728               	.LBE463:
 2729               	.LBE462:
 432:../../../os/rt/include/chthreads.h **** 
 2730               		.loc 5 432 3 is_stmt 1 view .LVU834
 432:../../../os/rt/include/chthreads.h **** 
 2731               		.loc 5 432 3 view .LVU835
 434:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 2732               		.loc 5 434 3 view .LVU836
 434:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 2733               		.loc 5 434 16 is_stmt 0 view .LVU837
 2734 0026 5196      		adiw r26,16+1
 2735 0028 1C93      		st X,r17
 2736 002a 0E93      		st -X,r16
 2737 002c 5097      		sbiw r26,16
 2738               		.loc 5 435 3 is_stmt 1 view .LVU838
 2739               		.loc 5 435 10 is_stmt 0 view .LVU839
 2740 002e 0E94 0000 		call chSchReadyI
 2741               	.LVL140:
 2742               		.loc 5 435 10 view .LVU840
 2743               	.LBE461:
 2744               	.LBE460:
 2745               	.LBB464:
 564:../../../os/rt/include/chschd.h **** 
 2746               		.loc 2 564 20 is_stmt 1 view .LVU841
 2747               	.LBB459:
 566:../../../os/rt/include/chschd.h **** }
 2748               		.loc 2 566 3 view .LVU842
 566:../../../os/rt/include/chschd.h **** }
 2749               		.loc 2 566 20 is_stmt 0 view .LVU843
 2750 0032 8881      		ld r24,Y
 2751 0034 9981      		ldd r25,Y+1
 2752               	.LVL141:
 566:../../../os/rt/include/chschd.h **** }
 2753               		.loc 2 566 20 view .LVU844
 2754               	.LBE459:
 2755               	.LBE464:
 901:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 2756               		.loc 1 901 9 view .LVU845
 2757 0036 C817      		cp r28,r24
 2758 0038 D907      		cpc r29,r25
 2759 003a 01F4      		brne .L60
 2760               	.LVL142:
 2761               	.L58:
 2762               	/* epilogue start */
 903:../../../os/rt/src/chthreads.c ****   }
 904:../../../os/rt/src/chthreads.c **** }
 2763               		.loc 1 904 1 view .LVU846
 2764 003c DF91      		pop r29
 2765 003e CF91      		pop r28
 2766               	.LVL143:
 2767               		.loc 1 904 1 view .LVU847
 2768 0040 1F91      		pop r17
 2769 0042 0F91      		pop r16
 2770               	.LVL144:
 2771               		.loc 1 904 1 view .LVU848
 2772 0044 0895      		ret
 2773               		.cfi_endproc
 2774               	.LFE166:
 2776               		.text
 2777               	.Letext0:
 2778               		.file 10 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 2779               		.file 11 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 2780               		.file 12 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2781               		.file 13 "../../../os/rt/include/chsystypes.h"
 2782               		.file 14 "../../../os/rt/include/chsem.h"
 2783               		.file 15 "../../../os/rt/include/chmtx.h"
 2784               		.file 16 "../../../os/rt/include/chregistry.h"
 2785               		.file 17 "../../../os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:13     .text._thread_init:0000000000000000 _thread_init
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:141    .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:344    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:418    .text.chThdCreateI:0000000000000000 chThdCreateI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:440    .text.chThdCreate:0000000000000000 chThdCreate
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:535    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:771    .text.chThdStart:0000000000000000 chThdStart
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:858    .text.chThdAddRef:0000000000000000 chThdAddRef
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:931    .text.chThdRelease:0000000000000000 chThdRelease
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1065   .text.chThdExitS:0000000000000000 chThdExitS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1204   .text.chThdExit:0000000000000000 chThdExit
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1245   .text.chThdWait:0000000000000000 chThdWait
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1388   .text.chThdSetPriority:0000000000000000 chThdSetPriority
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1492   .text.chThdTerminate:0000000000000000 chThdTerminate
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1563   .text.chThdSleep:0000000000000000 chThdSleep
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1647   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:1805   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2011   .text.chThdYield:0000000000000000 chThdYield
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2136   .text.chThdSuspendS:0000000000000000 chThdSuspendS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2210   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2269   .text.chThdResumeI:0000000000000000 chThdResumeI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2319   .text.chThdResumeS:0000000000000000 chThdResumeS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2364   .text.chThdResume:0000000000000000 chThdResume
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2463   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2546   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccSYl6Yx.s:2650   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
ch
_port_thread_start
chSchReadyI
chSchWakeupS
chSchGoSleepS
chSchRescheduleS
chSchGoSleepTimeoutS
chSchDoRescheduleBehind
__do_copy_data
