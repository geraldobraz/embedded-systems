   1               		.file	"chcond.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chCondObjectInit,"ax",@progbits
  11               	.global	chCondObjectInit
  13               	chCondObjectInit:
  14               	.LVL0:
  15               	.LFB141:
  16               		.file 1 "../../../os/rt/src/chcond.c"
   1:../../../os/rt/src/chcond.c **** /*
   2:../../../os/rt/src/chcond.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chcond.c **** 
   4:../../../os/rt/src/chcond.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chcond.c **** 
   6:../../../os/rt/src/chcond.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chcond.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chcond.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chcond.c ****     (at your option) any later version.
  10:../../../os/rt/src/chcond.c **** 
  11:../../../os/rt/src/chcond.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chcond.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chcond.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chcond.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chcond.c **** 
  16:../../../os/rt/src/chcond.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chcond.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chcond.c **** */
  19:../../../os/rt/src/chcond.c **** /*
  20:../../../os/rt/src/chcond.c ****    Concepts and parts of this file have been contributed by Leon Woestenberg.
  21:../../../os/rt/src/chcond.c ****  */
  22:../../../os/rt/src/chcond.c **** 
  23:../../../os/rt/src/chcond.c **** /**
  24:../../../os/rt/src/chcond.c ****  * @file    chcond.c
  25:../../../os/rt/src/chcond.c ****  * @brief   Condition Variables code.
  26:../../../os/rt/src/chcond.c ****  *
  27:../../../os/rt/src/chcond.c ****  * @addtogroup condvars
  28:../../../os/rt/src/chcond.c ****  * @details This module implements the Condition Variables mechanism. Condition
  29:../../../os/rt/src/chcond.c ****  *          variables are an extensions to the mutex subsystem and cannot
  30:../../../os/rt/src/chcond.c ****  *          work alone.
  31:../../../os/rt/src/chcond.c ****  *          <h2>Operation mode</h2>
  32:../../../os/rt/src/chcond.c ****  *          The condition variable is a synchronization object meant to be
  33:../../../os/rt/src/chcond.c ****  *          used inside a zone protected by a mutex. Mutexes and condition
  34:../../../os/rt/src/chcond.c ****  *          variables together can implement a Monitor construct.
  35:../../../os/rt/src/chcond.c ****  * @pre     In order to use the condition variable APIs the @p CH_CFG_USE_CONDVARS
  36:../../../os/rt/src/chcond.c ****  *          option must be enabled in @p chconf.h.
  37:../../../os/rt/src/chcond.c ****  * @{
  38:../../../os/rt/src/chcond.c ****  */
  39:../../../os/rt/src/chcond.c **** 
  40:../../../os/rt/src/chcond.c **** #include "ch.h"
  41:../../../os/rt/src/chcond.c **** 
  42:../../../os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS == TRUE) || defined(__DOXYGEN__)
  43:../../../os/rt/src/chcond.c **** 
  44:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  45:../../../os/rt/src/chcond.c **** /* Module local definitions.                                                 */
  46:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  47:../../../os/rt/src/chcond.c **** 
  48:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  49:../../../os/rt/src/chcond.c **** /* Module exported variables.                                                */
  50:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  51:../../../os/rt/src/chcond.c **** 
  52:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  53:../../../os/rt/src/chcond.c **** /* Module local types.                                                       */
  54:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  55:../../../os/rt/src/chcond.c **** 
  56:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  57:../../../os/rt/src/chcond.c **** /* Module local variables.                                                   */
  58:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  59:../../../os/rt/src/chcond.c **** 
  60:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  61:../../../os/rt/src/chcond.c **** /* Module local functions.                                                   */
  62:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  63:../../../os/rt/src/chcond.c **** 
  64:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  65:../../../os/rt/src/chcond.c **** /* Module exported functions.                                                */
  66:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  67:../../../os/rt/src/chcond.c **** 
  68:../../../os/rt/src/chcond.c **** /**
  69:../../../os/rt/src/chcond.c ****  * @brief   Initializes s @p condition_variable_t structure.
  70:../../../os/rt/src/chcond.c ****  *
  71:../../../os/rt/src/chcond.c ****  * @param[out] cp       pointer to a @p condition_variable_t structure
  72:../../../os/rt/src/chcond.c ****  *
  73:../../../os/rt/src/chcond.c ****  * @init
  74:../../../os/rt/src/chcond.c ****  */
  75:../../../os/rt/src/chcond.c **** void chCondObjectInit(condition_variable_t *cp) {
  17               		.loc 1 75 49 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  76:../../../os/rt/src/chcond.c **** 
  77:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
  23               		.loc 1 77 3 view .LVU1
  24               		.loc 1 77 3 view .LVU2
  78:../../../os/rt/src/chcond.c **** 
  79:../../../os/rt/src/chcond.c ****   queue_init(&cp->queue);
  25               		.loc 1 79 3 view .LVU3
  26               	.LBB73:
  27               	.LBI73:
  28               		.file 2 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
  29               		.loc 2 537 20 view .LVU4
  30               	.LBB74:
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  31               		.loc 2 539 3 view .LVU5
  32               		.loc 2 539 13 is_stmt 0 view .LVU6
  33 0000 FC01      		movw r30,r24
  34 0002 9183      		std Z+1,r25
  35 0004 8083      		st Z,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  36               		.loc 2 540 3 is_stmt 1 view .LVU7
  37               		.loc 2 540 13 is_stmt 0 view .LVU8
  38 0006 9383      		std Z+3,r25
  39 0008 8283      		std Z+2,r24
  40               	.LVL1:
  41               	/* epilogue start */
  42               		.loc 2 540 13 view .LVU9
  43               	.LBE74:
  44               	.LBE73:
  80:../../../os/rt/src/chcond.c **** }
  45               		.loc 1 80 1 view .LVU10
  46 000a 0895      		ret
  47               		.cfi_endproc
  48               	.LFE141:
  50               		.section	.text.chCondSignal,"ax",@progbits
  51               	.global	chCondSignal
  53               	chCondSignal:
  54               	.LVL2:
  55               	.LFB142:
  81:../../../os/rt/src/chcond.c **** 
  82:../../../os/rt/src/chcond.c **** /**
  83:../../../os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
  84:../../../os/rt/src/chcond.c ****  *
  85:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
  86:../../../os/rt/src/chcond.c ****  *
  87:../../../os/rt/src/chcond.c ****  * @api
  88:../../../os/rt/src/chcond.c ****  */
  89:../../../os/rt/src/chcond.c **** void chCondSignal(condition_variable_t *cp) {
  56               		.loc 1 89 45 is_stmt 1 view -0
  57               		.cfi_startproc
  58               		.loc 1 89 45 is_stmt 0 view .LVU12
  59 0000 CF93      		push r28
  60               	.LCFI0:
  61               		.cfi_def_cfa_offset 3
  62               		.cfi_offset 28, -2
  63 0002 DF93      		push r29
  64               	.LCFI1:
  65               		.cfi_def_cfa_offset 4
  66               		.cfi_offset 29, -3
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 2 */
  70               	.L__stack_usage = 2
  71 0004 FC01      		movw r30,r24
  90:../../../os/rt/src/chcond.c **** 
  91:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
  72               		.loc 1 91 3 is_stmt 1 view .LVU13
  73               		.loc 1 91 3 view .LVU14
  92:../../../os/rt/src/chcond.c **** 
  93:../../../os/rt/src/chcond.c ****   chSysLock();
  74               		.loc 1 93 3 view .LVU15
  75               	.LBB75:
  76               	.LBI75:
  77               		.file 3 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
  78               		.loc 3 353 20 view .LVU16
  79               	.LBE75:
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
  80               		.loc 3 355 3 view .LVU17
  81               	.LBB78:
  82               	.LBB76:
  83               	.LBI76:
  84               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
  85               		.loc 4 435 20 view .LVU18
  86               	.LBB77:
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  87               		.loc 4 437 3 view .LVU19
  88               	/* #APP */
  89               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  90 0006 F894      		cli
  91               	 ;  0 "" 2
  92               	/* #NOAPP */
  93               	.LBE77:
  94               	.LBE76:
  95               	.LBE78:
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
  96               		.loc 3 356 34 view .LVU20
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
  97               		.loc 3 357 20 view .LVU21
  94:../../../os/rt/src/chcond.c ****   if (queue_notempty(&cp->queue)) {
  98               		.loc 1 94 3 view .LVU22
  99               	.LVL3:
 100               	.LBB79:
 101               	.LBI79:
 541:../../../os/rt/include/chschd.h **** }
 542:../../../os/rt/include/chschd.h **** 
 543:../../../os/rt/include/chschd.h **** /**
 544:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:../../../os/rt/include/chschd.h ****  *
 549:../../../os/rt/include/chschd.h ****  * @notapi
 550:../../../os/rt/include/chschd.h ****  */
 551:../../../os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:../../../os/rt/include/chschd.h **** 
 553:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:../../../os/rt/include/chschd.h **** }
 555:../../../os/rt/include/chschd.h **** 
 556:../../../os/rt/include/chschd.h **** /**
 557:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:../../../os/rt/include/chschd.h ****  *
 559:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:../../../os/rt/include/chschd.h ****  *
 562:../../../os/rt/include/chschd.h ****  * @notapi
 563:../../../os/rt/include/chschd.h ****  */
 564:../../../os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 102               		.loc 2 564 20 view .LVU23
 103               	.LBB80:
 565:../../../os/rt/include/chschd.h **** 
 566:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 104               		.loc 2 566 3 view .LVU24
 105               		.loc 2 566 20 is_stmt 0 view .LVU25
 106 0008 8081      		ld r24,Z
 107 000a 9181      		ldd r25,Z+1
 108               	.LVL4:
 109               		.loc 2 566 20 view .LVU26
 110               	.LBE80:
 111               	.LBE79:
 112               		.loc 1 94 6 view .LVU27
 113 000c E817      		cp r30,r24
 114 000e F907      		cpc r31,r25
 115 0010 01F0      		breq .L4
  95:../../../os/rt/src/chcond.c ****     chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 116               		.loc 1 95 5 is_stmt 1 view .LVU28
 117               	.LVL5:
 118               	.LBB81:
 119               	.LBI81:
 567:../../../os/rt/include/chschd.h **** }
 568:../../../os/rt/include/chschd.h **** 
 569:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:../../../os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:../../../os/rt/include/chschd.h **** 
 574:../../../os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 576:../../../os/rt/include/chschd.h **** }
 577:../../../os/rt/include/chschd.h **** 
 578:../../../os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 579:../../../os/rt/include/chschd.h **** 
 580:../../../os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 581:../../../os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 582:../../../os/rt/include/chschd.h **** 
 583:../../../os/rt/include/chschd.h ****   return tp;
 584:../../../os/rt/include/chschd.h **** }
 585:../../../os/rt/include/chschd.h **** 
 586:../../../os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 587:../../../os/rt/include/chschd.h **** 
 588:../../../os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 589:../../../os/rt/include/chschd.h ****   do {
 590:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 591:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 592:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 594:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 595:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 596:../../../os/rt/include/chschd.h **** }
 597:../../../os/rt/include/chschd.h **** 
 598:../../../os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:../../../os/rt/include/chschd.h **** 
 600:../../../os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:../../../os/rt/include/chschd.h **** }
 605:../../../os/rt/include/chschd.h **** 
 606:../../../os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 120               		.loc 2 606 25 view .LVU29
 121               	.LBB82:
 607:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 122               		.loc 2 607 3 view .LVU30
 608:../../../os/rt/include/chschd.h **** 
 609:../../../os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 123               		.loc 2 609 3 view .LVU31
 124               		.loc 2 609 36 is_stmt 0 view .LVU32
 125 0012 EC01      		movw r28,r24
 126 0014 A881      		ld r26,Y
 127 0016 B981      		ldd r27,Y+1
 128               		.loc 2 609 25 view .LVU33
 129 0018 B183      		std Z+1,r27
 130 001a A083      		st Z,r26
 610:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 131               		.loc 2 610 3 is_stmt 1 view .LVU34
 132               		.loc 2 610 25 is_stmt 0 view .LVU35
 133 001c 1396      		adiw r26,2+1
 134 001e FC93      		st X,r31
 135 0020 EE93      		st -X,r30
 136 0022 1297      		sbiw r26,2
 611:../../../os/rt/include/chschd.h **** 
 612:../../../os/rt/include/chschd.h ****   return tp;
 137               		.loc 2 612 3 is_stmt 1 view .LVU36
 138               	.LVL6:
 139               		.loc 2 612 3 is_stmt 0 view .LVU37
 140               	.LBE82:
 141               	.LBE81:
 142               		.loc 1 95 5 view .LVU38
 143 0024 70E0      		ldi r23,0
 144 0026 60E0      		ldi r22,0
 145 0028 0E94 0000 		call chSchWakeupS
 146               	.LVL7:
 147               	.L4:
  96:../../../os/rt/src/chcond.c ****   }
  97:../../../os/rt/src/chcond.c ****   chSysUnlock();
 148               		.loc 1 97 3 is_stmt 1 view .LVU39
 149               	.LBB83:
 150               	.LBI83:
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 151               		.loc 3 365 20 view .LVU40
 152               	.LBB84:
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 153               		.loc 3 367 22 view .LVU41
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 154               		.loc 3 368 33 view .LVU42
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 155               		.loc 3 374 3 view .LVU43
 156               		.loc 3 374 3 view .LVU44
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 157               		.loc 3 378 3 view .LVU45
 158               	.LBB85:
 159               	.LBI85:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 160               		.loc 4 445 20 view .LVU46
 161               	.LBB86:
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 162               		.loc 4 447 3 view .LVU47
 163               	/* #APP */
 164               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 165 002c 7894      		sei
 166               	 ;  0 "" 2
 167               	/* #NOAPP */
 168               	/* epilogue start */
 169               	.LBE86:
 170               	.LBE85:
 171               	.LBE84:
 172               	.LBE83:
  98:../../../os/rt/src/chcond.c **** }
 173               		.loc 1 98 1 is_stmt 0 view .LVU48
 174 002e DF91      		pop r29
 175 0030 CF91      		pop r28
 176 0032 0895      		ret
 177               		.cfi_endproc
 178               	.LFE142:
 180               		.section	.text.chCondSignalI,"ax",@progbits
 181               	.global	chCondSignalI
 183               	chCondSignalI:
 184               	.LVL8:
 185               	.LFB143:
  99:../../../os/rt/src/chcond.c **** 
 100:../../../os/rt/src/chcond.c **** /**
 101:../../../os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
 102:../../../os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 103:../../../os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 104:../../../os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 105:../../../os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 106:../../../os/rt/src/chcond.c ****  *
 107:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 108:../../../os/rt/src/chcond.c ****  *
 109:../../../os/rt/src/chcond.c ****  * @iclass
 110:../../../os/rt/src/chcond.c ****  */
 111:../../../os/rt/src/chcond.c **** void chCondSignalI(condition_variable_t *cp) {
 186               		.loc 1 111 46 is_stmt 1 view -0
 187               		.cfi_startproc
 188               		.loc 1 111 46 is_stmt 0 view .LVU50
 189 0000 CF93      		push r28
 190               	.LCFI2:
 191               		.cfi_def_cfa_offset 3
 192               		.cfi_offset 28, -2
 193 0002 DF93      		push r29
 194               	.LCFI3:
 195               		.cfi_def_cfa_offset 4
 196               		.cfi_offset 29, -3
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 2 */
 200               	.L__stack_usage = 2
 201 0004 FC01      		movw r30,r24
 112:../../../os/rt/src/chcond.c **** 
 113:../../../os/rt/src/chcond.c ****   chDbgCheckClassI();
 202               		.loc 1 113 21 is_stmt 1 view .LVU51
 114:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 203               		.loc 1 114 3 view .LVU52
 204               		.loc 1 114 3 view .LVU53
 115:../../../os/rt/src/chcond.c **** 
 116:../../../os/rt/src/chcond.c ****   if (queue_notempty(&cp->queue)) {
 205               		.loc 1 116 3 view .LVU54
 206               	.LVL9:
 207               	.LBB87:
 208               	.LBI87:
 564:../../../os/rt/include/chschd.h **** 
 209               		.loc 2 564 20 view .LVU55
 210               	.LBB88:
 566:../../../os/rt/include/chschd.h **** }
 211               		.loc 2 566 3 view .LVU56
 566:../../../os/rt/include/chschd.h **** }
 212               		.loc 2 566 20 is_stmt 0 view .LVU57
 213 0006 8081      		ld r24,Z
 214 0008 9181      		ldd r25,Z+1
 215               	.LVL10:
 566:../../../os/rt/include/chschd.h **** }
 216               		.loc 2 566 20 view .LVU58
 217               	.LBE88:
 218               	.LBE87:
 219               		.loc 1 116 6 view .LVU59
 220 000a E817      		cp r30,r24
 221 000c F907      		cpc r31,r25
 222 000e 01F0      		breq .L5
 223               	.LBB89:
 117:../../../os/rt/src/chcond.c ****     thread_t *tp = queue_fifo_remove(&cp->queue);
 224               		.loc 1 117 5 is_stmt 1 view .LVU60
 225               	.LVL11:
 226               	.LBB90:
 227               	.LBI90:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 228               		.loc 2 606 25 view .LVU61
 229               	.LBB91:
 607:../../../os/rt/include/chschd.h **** 
 230               		.loc 2 607 3 view .LVU62
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 231               		.loc 2 609 3 view .LVU63
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 232               		.loc 2 609 36 is_stmt 0 view .LVU64
 233 0010 EC01      		movw r28,r24
 234 0012 A881      		ld r26,Y
 235 0014 B981      		ldd r27,Y+1
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 236               		.loc 2 609 25 view .LVU65
 237 0016 B183      		std Z+1,r27
 238 0018 A083      		st Z,r26
 610:../../../os/rt/include/chschd.h **** 
 239               		.loc 2 610 3 is_stmt 1 view .LVU66
 610:../../../os/rt/include/chschd.h **** 
 240               		.loc 2 610 25 is_stmt 0 view .LVU67
 241 001a 1396      		adiw r26,2+1
 242 001c FC93      		st X,r31
 243 001e EE93      		st -X,r30
 244 0020 1297      		sbiw r26,2
 245               		.loc 2 612 3 is_stmt 1 view .LVU68
 246               	.LVL12:
 247               		.loc 2 612 3 is_stmt 0 view .LVU69
 248               	.LBE91:
 249               	.LBE90:
 118:../../../os/rt/src/chcond.c ****     tp->u.rdymsg = MSG_OK;
 250               		.loc 1 118 5 is_stmt 1 view .LVU70
 251               		.loc 1 118 18 is_stmt 0 view .LVU71
 252 0022 198A      		std Y+17,__zero_reg__
 253 0024 188A      		std Y+16,__zero_reg__
 119:../../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 254               		.loc 1 119 5 is_stmt 1 view .LVU72
 255               	/* epilogue start */
 256               	.LBE89:
 120:../../../os/rt/src/chcond.c ****   }
 121:../../../os/rt/src/chcond.c **** }
 257               		.loc 1 121 1 is_stmt 0 view .LVU73
 258 0026 DF91      		pop r29
 259 0028 CF91      		pop r28
 260               	.LBB92:
 119:../../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 261               		.loc 1 119 12 view .LVU74
 262 002a 0C94 0000 		jmp chSchReadyI
 263               	.LVL13:
 264               	.L5:
 265               	/* epilogue start */
 119:../../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 266               		.loc 1 119 12 view .LVU75
 267               	.LBE92:
 268               		.loc 1 121 1 view .LVU76
 269 002e DF91      		pop r29
 270 0030 CF91      		pop r28
 271 0032 0895      		ret
 272               		.cfi_endproc
 273               	.LFE143:
 275               		.section	.text.chCondBroadcast,"ax",@progbits
 276               	.global	chCondBroadcast
 278               	chCondBroadcast:
 279               	.LVL14:
 280               	.LFB144:
 122:../../../os/rt/src/chcond.c **** 
 123:../../../os/rt/src/chcond.c **** /**
 124:../../../os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 125:../../../os/rt/src/chcond.c ****  *
 126:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 127:../../../os/rt/src/chcond.c ****  *
 128:../../../os/rt/src/chcond.c ****  * @api
 129:../../../os/rt/src/chcond.c ****  */
 130:../../../os/rt/src/chcond.c **** void chCondBroadcast(condition_variable_t *cp) {
 281               		.loc 1 130 48 is_stmt 1 view -0
 282               		.cfi_startproc
 283               		.loc 1 130 48 is_stmt 0 view .LVU78
 284 0000 0F93      		push r16
 285               	.LCFI4:
 286               		.cfi_def_cfa_offset 3
 287               		.cfi_offset 16, -2
 288 0002 1F93      		push r17
 289               	.LCFI5:
 290               		.cfi_def_cfa_offset 4
 291               		.cfi_offset 17, -3
 292 0004 CF93      		push r28
 293               	.LCFI6:
 294               		.cfi_def_cfa_offset 5
 295               		.cfi_offset 28, -4
 296 0006 DF93      		push r29
 297               	.LCFI7:
 298               		.cfi_def_cfa_offset 6
 299               		.cfi_offset 29, -5
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 4 */
 303               	.L__stack_usage = 4
 304 0008 EC01      		movw r28,r24
 131:../../../os/rt/src/chcond.c **** 
 132:../../../os/rt/src/chcond.c ****   chSysLock();
 305               		.loc 1 132 3 is_stmt 1 view .LVU79
 306               	.LBB93:
 307               	.LBI93:
 353:../../../os/rt/include/chsys.h **** 
 308               		.loc 3 353 20 view .LVU80
 309               	.LBE93:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 310               		.loc 3 355 3 view .LVU81
 311               	.LBB96:
 312               	.LBB94:
 313               	.LBI94:
 435:../../../os/common/ports/AVR/chcore.h **** 
 314               		.loc 4 435 20 view .LVU82
 315               	.LBB95:
 437:../../../os/common/ports/AVR/chcore.h **** }
 316               		.loc 4 437 3 view .LVU83
 317               	/* #APP */
 318               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 319 000a F894      		cli
 320               	 ;  0 "" 2
 321               	/* #NOAPP */
 322               	.LBE95:
 323               	.LBE94:
 324               	.LBE96:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 325               		.loc 3 356 34 view .LVU84
 357:../../../os/rt/include/chsys.h **** }
 326               		.loc 3 357 20 view .LVU85
 327               	.LVL15:
 328               	.LBB97:
 329               	.LBB98:
 330               	.LBB99:
 331               	.LBI99:
 564:../../../os/rt/include/chschd.h **** 
 332               		.loc 2 564 20 view .LVU86
 333               	.LBB100:
 566:../../../os/rt/include/chschd.h **** }
 334               		.loc 2 566 3 view .LVU87
 566:../../../os/rt/include/chschd.h **** }
 335               		.loc 2 566 20 is_stmt 0 view .LVU88
 336 000c 8881      		ld r24,Y
 337 000e 9981      		ldd r25,Y+1
 338               	.LVL16:
 566:../../../os/rt/include/chschd.h **** }
 339               		.loc 2 566 20 view .LVU89
 340               	.LBE100:
 341               	.LBE99:
 133:../../../os/rt/src/chcond.c ****   chCondBroadcastI(cp);
 134:../../../os/rt/src/chcond.c ****   chSchRescheduleS();
 135:../../../os/rt/src/chcond.c ****   chSysUnlock();
 136:../../../os/rt/src/chcond.c **** }
 137:../../../os/rt/src/chcond.c **** 
 138:../../../os/rt/src/chcond.c **** /**
 139:../../../os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 140:../../../os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 141:../../../os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 142:../../../os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 143:../../../os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 144:../../../os/rt/src/chcond.c ****  *
 145:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 146:../../../os/rt/src/chcond.c ****  *
 147:../../../os/rt/src/chcond.c ****  * @iclass
 148:../../../os/rt/src/chcond.c ****  */
 149:../../../os/rt/src/chcond.c **** void chCondBroadcastI(condition_variable_t *cp) {
 150:../../../os/rt/src/chcond.c **** 
 151:../../../os/rt/src/chcond.c ****   chDbgCheckClassI();
 152:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 153:../../../os/rt/src/chcond.c **** 
 154:../../../os/rt/src/chcond.c ****   /* Empties the condition variable queue and inserts all the threads into the
 155:../../../os/rt/src/chcond.c ****      ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
 156:../../../os/rt/src/chcond.c ****      order to make a chCondBroadcast() detectable from a chCondSignal().*/
 157:../../../os/rt/src/chcond.c ****   while (queue_notempty(&cp->queue)) {
 342               		.loc 1 157 9 view .LVU90
 343 0010 C817      		cp r28,r24
 344 0012 D907      		cpc r29,r25
 345 0014 01F0      		breq .L8
 158:../../../os/rt/src/chcond.c ****     chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 346               		.loc 1 158 58 view .LVU91
 347 0016 0EEF      		ldi r16,lo8(-2)
 348 0018 1FEF      		ldi r17,lo8(-1)
 349               	.L9:
 350               		.loc 1 158 5 is_stmt 1 view .LVU92
 351               	.LVL17:
 352               	.LBB102:
 353               	.LBI102:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 354               		.loc 2 606 25 view .LVU93
 355               	.LBB103:
 607:../../../os/rt/include/chschd.h **** 
 356               		.loc 2 607 3 view .LVU94
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 357               		.loc 2 609 3 view .LVU95
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 358               		.loc 2 609 36 is_stmt 0 view .LVU96
 359 001a DC01      		movw r26,r24
 360 001c ED91      		ld r30,X+
 361 001e FC91      		ld r31,X
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 362               		.loc 2 609 25 view .LVU97
 363 0020 F983      		std Y+1,r31
 364 0022 E883      		st Y,r30
 610:../../../os/rt/include/chschd.h **** 
 365               		.loc 2 610 3 is_stmt 1 view .LVU98
 610:../../../os/rt/include/chschd.h **** 
 366               		.loc 2 610 25 is_stmt 0 view .LVU99
 367 0024 D383      		std Z+3,r29
 368 0026 C283      		std Z+2,r28
 369               		.loc 2 612 3 is_stmt 1 view .LVU100
 370               	.LVL18:
 371               		.loc 2 612 3 is_stmt 0 view .LVU101
 372               	.LBE103:
 373               	.LBE102:
 374               		.loc 1 158 5 view .LVU102
 375 0028 0E94 0000 		call chSchReadyI
 376               	.LVL19:
 377               		.loc 1 158 58 view .LVU103
 378 002c FC01      		movw r30,r24
 379 002e 118B      		std Z+17,r17
 380 0030 008B      		std Z+16,r16
 381               	.LVL20:
 382               	.LBB104:
 564:../../../os/rt/include/chschd.h **** 
 383               		.loc 2 564 20 is_stmt 1 view .LVU104
 384               	.LBB101:
 566:../../../os/rt/include/chschd.h **** }
 385               		.loc 2 566 3 view .LVU105
 566:../../../os/rt/include/chschd.h **** }
 386               		.loc 2 566 20 is_stmt 0 view .LVU106
 387 0032 8881      		ld r24,Y
 388 0034 9981      		ldd r25,Y+1
 389               	.LVL21:
 566:../../../os/rt/include/chschd.h **** }
 390               		.loc 2 566 20 view .LVU107
 391               	.LBE101:
 392               	.LBE104:
 157:../../../os/rt/src/chcond.c ****     chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 393               		.loc 1 157 9 view .LVU108
 394 0036 8C17      		cp r24,r28
 395 0038 9D07      		cpc r25,r29
 396 003a 01F4      		brne .L9
 397               	.L8:
 157:../../../os/rt/src/chcond.c ****     chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 398               		.loc 1 157 9 view .LVU109
 399               	.LBE98:
 400               	.LBE97:
 134:../../../os/rt/src/chcond.c ****   chSysUnlock();
 401               		.loc 1 134 3 is_stmt 1 view .LVU110
 402 003c 0E94 0000 		call chSchRescheduleS
 403               	.LVL22:
 135:../../../os/rt/src/chcond.c **** }
 404               		.loc 1 135 3 view .LVU111
 405               	.LBB105:
 406               	.LBI105:
 365:../../../os/rt/include/chsys.h **** 
 407               		.loc 3 365 20 view .LVU112
 408               	.LBB106:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 409               		.loc 3 367 22 view .LVU113
 368:../../../os/rt/include/chsys.h **** 
 410               		.loc 3 368 33 view .LVU114
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 411               		.loc 3 374 3 view .LVU115
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 412               		.loc 3 374 3 view .LVU116
 413               		.loc 3 378 3 view .LVU117
 414               	.LBB107:
 415               	.LBI107:
 445:../../../os/common/ports/AVR/chcore.h **** 
 416               		.loc 4 445 20 view .LVU118
 417               	.LBB108:
 418               		.loc 4 447 3 view .LVU119
 419               	/* #APP */
 420               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 421 0040 7894      		sei
 422               	 ;  0 "" 2
 423               	/* #NOAPP */
 424               	/* epilogue start */
 425               	.LBE108:
 426               	.LBE107:
 427               	.LBE106:
 428               	.LBE105:
 136:../../../os/rt/src/chcond.c **** 
 429               		.loc 1 136 1 is_stmt 0 view .LVU120
 430 0042 DF91      		pop r29
 431 0044 CF91      		pop r28
 432               	.LVL23:
 136:../../../os/rt/src/chcond.c **** 
 433               		.loc 1 136 1 view .LVU121
 434 0046 1F91      		pop r17
 435 0048 0F91      		pop r16
 436 004a 0895      		ret
 437               		.cfi_endproc
 438               	.LFE144:
 440               		.section	.text.chCondBroadcastI,"ax",@progbits
 441               	.global	chCondBroadcastI
 443               	chCondBroadcastI:
 444               	.LVL24:
 445               	.LFB145:
 149:../../../os/rt/src/chcond.c **** 
 446               		.loc 1 149 49 is_stmt 1 view -0
 447               		.cfi_startproc
 149:../../../os/rt/src/chcond.c **** 
 448               		.loc 1 149 49 is_stmt 0 view .LVU123
 449 0000 0F93      		push r16
 450               	.LCFI8:
 451               		.cfi_def_cfa_offset 3
 452               		.cfi_offset 16, -2
 453 0002 1F93      		push r17
 454               	.LCFI9:
 455               		.cfi_def_cfa_offset 4
 456               		.cfi_offset 17, -3
 457 0004 CF93      		push r28
 458               	.LCFI10:
 459               		.cfi_def_cfa_offset 5
 460               		.cfi_offset 28, -4
 461 0006 DF93      		push r29
 462               	.LCFI11:
 463               		.cfi_def_cfa_offset 6
 464               		.cfi_offset 29, -5
 465               	/* prologue: function */
 466               	/* frame size = 0 */
 467               	/* stack size = 4 */
 468               	.L__stack_usage = 4
 469 0008 EC01      		movw r28,r24
 151:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 470               		.loc 1 151 21 is_stmt 1 view .LVU124
 152:../../../os/rt/src/chcond.c **** 
 471               		.loc 1 152 3 view .LVU125
 152:../../../os/rt/src/chcond.c **** 
 472               		.loc 1 152 3 view .LVU126
 157:../../../os/rt/src/chcond.c ****     chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 473               		.loc 1 157 3 view .LVU127
 474               	.LVL25:
 475               	.LBB109:
 476               	.LBI109:
 564:../../../os/rt/include/chschd.h **** 
 477               		.loc 2 564 20 view .LVU128
 478               	.LBB110:
 566:../../../os/rt/include/chschd.h **** }
 479               		.loc 2 566 3 view .LVU129
 566:../../../os/rt/include/chschd.h **** }
 480               		.loc 2 566 20 is_stmt 0 view .LVU130
 481 000a 8881      		ld r24,Y
 482 000c 9981      		ldd r25,Y+1
 483               	.LVL26:
 566:../../../os/rt/include/chschd.h **** }
 484               		.loc 2 566 20 view .LVU131
 485               	.LBE110:
 486               	.LBE109:
 157:../../../os/rt/src/chcond.c ****     chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 487               		.loc 1 157 9 view .LVU132
 488 000e C817      		cp r28,r24
 489 0010 D907      		cpc r29,r25
 490 0012 01F0      		breq .L11
 491               		.loc 1 158 58 view .LVU133
 492 0014 0EEF      		ldi r16,lo8(-2)
 493 0016 1FEF      		ldi r17,lo8(-1)
 494               	.L13:
 495               		.loc 1 158 5 is_stmt 1 view .LVU134
 496               	.LVL27:
 497               	.LBB112:
 498               	.LBI112:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 499               		.loc 2 606 25 view .LVU135
 500               	.LBB113:
 607:../../../os/rt/include/chschd.h **** 
 501               		.loc 2 607 3 view .LVU136
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 502               		.loc 2 609 3 view .LVU137
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 503               		.loc 2 609 36 is_stmt 0 view .LVU138
 504 0018 DC01      		movw r26,r24
 505 001a ED91      		ld r30,X+
 506 001c FC91      		ld r31,X
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 507               		.loc 2 609 25 view .LVU139
 508 001e F983      		std Y+1,r31
 509 0020 E883      		st Y,r30
 610:../../../os/rt/include/chschd.h **** 
 510               		.loc 2 610 3 is_stmt 1 view .LVU140
 610:../../../os/rt/include/chschd.h **** 
 511               		.loc 2 610 25 is_stmt 0 view .LVU141
 512 0022 D383      		std Z+3,r29
 513 0024 C283      		std Z+2,r28
 514               		.loc 2 612 3 is_stmt 1 view .LVU142
 515               	.LVL28:
 516               		.loc 2 612 3 is_stmt 0 view .LVU143
 517               	.LBE113:
 518               	.LBE112:
 519               		.loc 1 158 5 view .LVU144
 520 0026 0E94 0000 		call chSchReadyI
 521               	.LVL29:
 522               		.loc 1 158 58 view .LVU145
 523 002a FC01      		movw r30,r24
 524 002c 118B      		std Z+17,r17
 525 002e 008B      		std Z+16,r16
 526               	.LVL30:
 527               	.LBB114:
 564:../../../os/rt/include/chschd.h **** 
 528               		.loc 2 564 20 is_stmt 1 view .LVU146
 529               	.LBB111:
 566:../../../os/rt/include/chschd.h **** }
 530               		.loc 2 566 3 view .LVU147
 566:../../../os/rt/include/chschd.h **** }
 531               		.loc 2 566 20 is_stmt 0 view .LVU148
 532 0030 8881      		ld r24,Y
 533 0032 9981      		ldd r25,Y+1
 534               	.LVL31:
 566:../../../os/rt/include/chschd.h **** }
 535               		.loc 2 566 20 view .LVU149
 536               	.LBE111:
 537               	.LBE114:
 157:../../../os/rt/src/chcond.c ****     chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 538               		.loc 1 157 9 view .LVU150
 539 0034 8C17      		cp r24,r28
 540 0036 9D07      		cpc r25,r29
 541 0038 01F4      		brne .L13
 542               	.L11:
 543               	/* epilogue start */
 159:../../../os/rt/src/chcond.c ****   }
 160:../../../os/rt/src/chcond.c **** }
 544               		.loc 1 160 1 view .LVU151
 545 003a DF91      		pop r29
 546 003c CF91      		pop r28
 547               	.LVL32:
 548               		.loc 1 160 1 view .LVU152
 549 003e 1F91      		pop r17
 550 0040 0F91      		pop r16
 551 0042 0895      		ret
 552               		.cfi_endproc
 553               	.LFE145:
 555               		.section	.text.chCondWaitS,"ax",@progbits
 556               	.global	chCondWaitS
 558               	chCondWaitS:
 559               	.LVL33:
 560               	.LFB147:
 161:../../../os/rt/src/chcond.c **** 
 162:../../../os/rt/src/chcond.c **** /**
 163:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 164:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 165:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 166:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 167:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 168:../../../os/rt/src/chcond.c ****  *
 169:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 170:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 171:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 172:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 173:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 174:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 175:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 176:../../../os/rt/src/chcond.c ****  *
 177:../../../os/rt/src/chcond.c ****  * @api
 178:../../../os/rt/src/chcond.c ****  */
 179:../../../os/rt/src/chcond.c **** msg_t chCondWait(condition_variable_t *cp) {
 180:../../../os/rt/src/chcond.c ****   msg_t msg;
 181:../../../os/rt/src/chcond.c **** 
 182:../../../os/rt/src/chcond.c ****   chSysLock();
 183:../../../os/rt/src/chcond.c ****   msg = chCondWaitS(cp);
 184:../../../os/rt/src/chcond.c ****   chSysUnlock();
 185:../../../os/rt/src/chcond.c ****   return msg;
 186:../../../os/rt/src/chcond.c **** }
 187:../../../os/rt/src/chcond.c **** 
 188:../../../os/rt/src/chcond.c **** /**
 189:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 190:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 191:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 192:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 193:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 194:../../../os/rt/src/chcond.c ****  *
 195:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 196:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 197:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 198:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 199:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 200:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 201:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 202:../../../os/rt/src/chcond.c ****  *
 203:../../../os/rt/src/chcond.c ****  * @sclass
 204:../../../os/rt/src/chcond.c ****  */
 205:../../../os/rt/src/chcond.c **** msg_t chCondWaitS(condition_variable_t *cp) {
 561               		.loc 1 205 45 is_stmt 1 view -0
 562               		.cfi_startproc
 563               		.loc 1 205 45 is_stmt 0 view .LVU154
 564 0000 EF92      		push r14
 565               	.LCFI12:
 566               		.cfi_def_cfa_offset 3
 567               		.cfi_offset 14, -2
 568 0002 FF92      		push r15
 569               	.LCFI13:
 570               		.cfi_def_cfa_offset 4
 571               		.cfi_offset 15, -3
 572 0004 0F93      		push r16
 573               	.LCFI14:
 574               		.cfi_def_cfa_offset 5
 575               		.cfi_offset 16, -4
 576 0006 1F93      		push r17
 577               	.LCFI15:
 578               		.cfi_def_cfa_offset 6
 579               		.cfi_offset 17, -5
 580 0008 CF93      		push r28
 581               	.LCFI16:
 582               		.cfi_def_cfa_offset 7
 583               		.cfi_offset 28, -6
 584 000a DF93      		push r29
 585               	.LCFI17:
 586               		.cfi_def_cfa_offset 8
 587               		.cfi_offset 29, -7
 588               	/* prologue: function */
 589               	/* frame size = 0 */
 590               	/* stack size = 6 */
 591               	.L__stack_usage = 6
 592 000c 8C01      		movw r16,r24
 206:../../../os/rt/src/chcond.c ****   thread_t *ctp = currp;
 593               		.loc 1 206 3 is_stmt 1 view .LVU155
 594               		.loc 1 206 13 is_stmt 0 view .LVU156
 595 000e C091 0000 		lds r28,ch+11
 596 0012 D091 0000 		lds r29,ch+11+1
 597               	.LVL34:
 207:../../../os/rt/src/chcond.c ****   mutex_t *mp;
 598               		.loc 1 207 3 is_stmt 1 view .LVU157
 208:../../../os/rt/src/chcond.c ****   msg_t msg;
 599               		.loc 1 208 3 view .LVU158
 209:../../../os/rt/src/chcond.c **** 
 210:../../../os/rt/src/chcond.c ****   chDbgCheckClassS();
 600               		.loc 1 210 21 view .LVU159
 211:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 601               		.loc 1 211 3 view .LVU160
 602               		.loc 1 211 3 view .LVU161
 212:../../../os/rt/src/chcond.c ****   chDbgAssert(ctp->mtxlist != NULL, "not owning a mutex");
 603               		.loc 1 212 3 view .LVU162
 604               		.loc 1 212 3 view .LVU163
 213:../../../os/rt/src/chcond.c **** 
 214:../../../os/rt/src/chcond.c ****   /* Getting "current" mutex and releasing it.*/
 215:../../../os/rt/src/chcond.c ****   mp = chMtxGetNextMutexS();
 605               		.loc 1 215 3 view .LVU164
 606               	.LBB115:
 607               	.LBI115:
 608               		.file 5 "../../../os/rt/include/chmtx.h"
   1:../../../os/rt/include/chmtx.h **** /*
   2:../../../os/rt/include/chmtx.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chmtx.h **** 
   4:../../../os/rt/include/chmtx.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chmtx.h **** 
   6:../../../os/rt/include/chmtx.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chmtx.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chmtx.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chmtx.h ****     (at your option) any later version.
  10:../../../os/rt/include/chmtx.h **** 
  11:../../../os/rt/include/chmtx.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chmtx.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chmtx.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chmtx.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chmtx.h **** 
  16:../../../os/rt/include/chmtx.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chmtx.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chmtx.h **** */
  19:../../../os/rt/include/chmtx.h **** 
  20:../../../os/rt/include/chmtx.h **** /**
  21:../../../os/rt/include/chmtx.h ****  * @file    chmtx.h
  22:../../../os/rt/include/chmtx.h ****  * @brief   Mutexes macros and structures.
  23:../../../os/rt/include/chmtx.h ****  *
  24:../../../os/rt/include/chmtx.h ****  * @addtogroup mutexes
  25:../../../os/rt/include/chmtx.h ****  * @{
  26:../../../os/rt/include/chmtx.h ****  */
  27:../../../os/rt/include/chmtx.h **** 
  28:../../../os/rt/include/chmtx.h **** #ifndef CHMTX_H
  29:../../../os/rt/include/chmtx.h **** #define CHMTX_H
  30:../../../os/rt/include/chmtx.h **** 
  31:../../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chmtx.h **** 
  33:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  34:../../../os/rt/include/chmtx.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  36:../../../os/rt/include/chmtx.h **** 
  37:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  38:../../../os/rt/include/chmtx.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  40:../../../os/rt/include/chmtx.h **** 
  41:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  42:../../../os/rt/include/chmtx.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  44:../../../os/rt/include/chmtx.h **** 
  45:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  46:../../../os/rt/include/chmtx.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  48:../../../os/rt/include/chmtx.h **** 
  49:../../../os/rt/include/chmtx.h **** /**
  50:../../../os/rt/include/chmtx.h ****  * @brief   Type of a mutex structure.
  51:../../../os/rt/include/chmtx.h ****  */
  52:../../../os/rt/include/chmtx.h **** typedef struct ch_mutex mutex_t;
  53:../../../os/rt/include/chmtx.h **** 
  54:../../../os/rt/include/chmtx.h **** /**
  55:../../../os/rt/include/chmtx.h ****  * @brief   Mutex structure.
  56:../../../os/rt/include/chmtx.h ****  */
  57:../../../os/rt/include/chmtx.h **** struct ch_mutex {
  58:../../../os/rt/include/chmtx.h ****   threads_queue_t       queue;      /**< @brief Queue of the threads sleeping
  59:../../../os/rt/include/chmtx.h ****                                                 on this mutex.              */
  60:../../../os/rt/include/chmtx.h ****   thread_t              *owner;     /**< @brief Owner @p thread_t pointer or
  61:../../../os/rt/include/chmtx.h ****                                                 @p NULL.                    */
  62:../../../os/rt/include/chmtx.h ****   mutex_t               *next;      /**< @brief Next @p mutex_t into an
  63:../../../os/rt/include/chmtx.h ****                                                 owner-list or @p NULL.      */
  64:../../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  65:../../../os/rt/include/chmtx.h ****   cnt_t                 cnt;        /**< @brief Mutex recursion counter.    */
  66:../../../os/rt/include/chmtx.h **** #endif
  67:../../../os/rt/include/chmtx.h **** };
  68:../../../os/rt/include/chmtx.h **** 
  69:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  70:../../../os/rt/include/chmtx.h **** /* Module macros.                                                            */
  71:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  72:../../../os/rt/include/chmtx.h **** 
  73:../../../os/rt/include/chmtx.h **** /**
  74:../../../os/rt/include/chmtx.h ****  * @brief   Data part of a static mutex initializer.
  75:../../../os/rt/include/chmtx.h ****  * @details This macro should be used when statically initializing a mutex
  76:../../../os/rt/include/chmtx.h ****  *          that is part of a bigger structure.
  77:../../../os/rt/include/chmtx.h ****  *
  78:../../../os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  79:../../../os/rt/include/chmtx.h ****  */
  80:../../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  81:../../../os/rt/include/chmtx.h **** #define _MUTEX_DATA(name) {_THREADS_QUEUE_DATA(name.queue), NULL, NULL, 0}
  82:../../../os/rt/include/chmtx.h **** #else
  83:../../../os/rt/include/chmtx.h **** #define _MUTEX_DATA(name) {_THREADS_QUEUE_DATA(name.queue), NULL, NULL}
  84:../../../os/rt/include/chmtx.h **** #endif
  85:../../../os/rt/include/chmtx.h **** 
  86:../../../os/rt/include/chmtx.h **** /**
  87:../../../os/rt/include/chmtx.h ****  * @brief   Static mutex initializer.
  88:../../../os/rt/include/chmtx.h ****  * @details Statically initialized mutexes require no explicit initialization
  89:../../../os/rt/include/chmtx.h ****  *          using @p chMtxInit().
  90:../../../os/rt/include/chmtx.h ****  *
  91:../../../os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  92:../../../os/rt/include/chmtx.h ****  */
  93:../../../os/rt/include/chmtx.h **** #define MUTEX_DECL(name) mutex_t name = _MUTEX_DATA(name)
  94:../../../os/rt/include/chmtx.h **** 
  95:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  96:../../../os/rt/include/chmtx.h **** /* External declarations.                                                    */
  97:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  98:../../../os/rt/include/chmtx.h **** 
  99:../../../os/rt/include/chmtx.h **** #ifdef __cplusplus
 100:../../../os/rt/include/chmtx.h **** extern "C" {
 101:../../../os/rt/include/chmtx.h **** #endif
 102:../../../os/rt/include/chmtx.h ****   void chMtxObjectInit(mutex_t *mp);
 103:../../../os/rt/include/chmtx.h ****   void chMtxLock(mutex_t *mp);
 104:../../../os/rt/include/chmtx.h ****   void chMtxLockS(mutex_t *mp);
 105:../../../os/rt/include/chmtx.h ****   bool chMtxTryLock(mutex_t *mp);
 106:../../../os/rt/include/chmtx.h ****   bool chMtxTryLockS(mutex_t *mp);
 107:../../../os/rt/include/chmtx.h ****   void chMtxUnlock(mutex_t *mp);
 108:../../../os/rt/include/chmtx.h ****   void chMtxUnlockS(mutex_t *mp);
 109:../../../os/rt/include/chmtx.h ****   void chMtxUnlockAll(void);
 110:../../../os/rt/include/chmtx.h ****   void chMtxUnlockAllS(void);
 111:../../../os/rt/include/chmtx.h **** #ifdef __cplusplus
 112:../../../os/rt/include/chmtx.h **** }
 113:../../../os/rt/include/chmtx.h **** #endif
 114:../../../os/rt/include/chmtx.h **** 
 115:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
 116:../../../os/rt/include/chmtx.h **** /* Module inline functions.                                                  */
 117:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
 118:../../../os/rt/include/chmtx.h **** 
 119:../../../os/rt/include/chmtx.h **** /**
 120:../../../os/rt/include/chmtx.h ****  * @brief   Returns @p true if the mutex queue contains at least a waiting
 121:../../../os/rt/include/chmtx.h ****  *          thread.
 122:../../../os/rt/include/chmtx.h ****  *
 123:../../../os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t structure
 124:../../../os/rt/include/chmtx.h ****  * @return              The mutex queue status.
 125:../../../os/rt/include/chmtx.h ****  *
 126:../../../os/rt/include/chmtx.h ****  * @deprecated
 127:../../../os/rt/include/chmtx.h ****  * @sclass
 128:../../../os/rt/include/chmtx.h ****  */
 129:../../../os/rt/include/chmtx.h **** static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 130:../../../os/rt/include/chmtx.h **** 
 131:../../../os/rt/include/chmtx.h ****   chDbgCheckClassS();
 132:../../../os/rt/include/chmtx.h **** 
 133:../../../os/rt/include/chmtx.h ****   return queue_notempty(&mp->queue);
 134:../../../os/rt/include/chmtx.h **** }
 135:../../../os/rt/include/chmtx.h **** 
 136:../../../os/rt/include/chmtx.h **** /**
 137:../../../os/rt/include/chmtx.h ****  * @brief   Returns the next mutex in the mutexes stack of the current thread.
 138:../../../os/rt/include/chmtx.h ****  *
 139:../../../os/rt/include/chmtx.h ****  * @return              A pointer to the next mutex in the stack.
 140:../../../os/rt/include/chmtx.h ****  * @retval NULL         if the stack is empty.
 141:../../../os/rt/include/chmtx.h ****  *
 142:../../../os/rt/include/chmtx.h ****  * @sclass
 143:../../../os/rt/include/chmtx.h ****  */
 144:../../../os/rt/include/chmtx.h **** static inline mutex_t *chMtxGetNextMutexS(void) {
 609               		.loc 5 144 24 view .LVU165
 610               	.LBB116:
 145:../../../os/rt/include/chmtx.h **** 
 146:../../../os/rt/include/chmtx.h ****   return chThdGetSelfX()->mtxlist;
 611               		.loc 5 146 3 view .LVU166
 612               	.LBE116:
 613               	.LBE115:
 614               		.file 6 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chthreads.h **** 
   4:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chthreads.h **** 
   6:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chthreads.h ****     (at your option) any later version.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   End of the working area.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  83:../../../os/rt/include/chthreads.h **** 
  84:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  85:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  86:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  87:../../../os/rt/include/chthreads.h **** 
  88:../../../os/rt/include/chthreads.h **** /**
  89:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
  90:../../../os/rt/include/chthreads.h ****  */
  91:../../../os/rt/include/chthreads.h **** /**
  92:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
  93:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
  94:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
  95:../../../os/rt/include/chthreads.h ****  *
  96:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
  97:../../../os/rt/include/chthreads.h ****  */
  98:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
  99:../../../os/rt/include/chthreads.h **** 
 100:../../../os/rt/include/chthreads.h **** /**
 101:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 102:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 103:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 104:../../../os/rt/include/chthreads.h ****  *
 105:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 106:../../../os/rt/include/chthreads.h ****  */
 107:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 108:../../../os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 109:../../../os/rt/include/chthreads.h **** /** @} */
 110:../../../os/rt/include/chthreads.h **** 
 111:../../../os/rt/include/chthreads.h **** /**
 112:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 113:../../../os/rt/include/chthreads.h ****  */
 114:../../../os/rt/include/chthreads.h **** /**
 115:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 116:../../../os/rt/include/chthreads.h ****  *
 117:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 118:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 119:../../../os/rt/include/chthreads.h ****  *
 120:../../../os/rt/include/chthreads.h ****  * @api
 121:../../../os/rt/include/chthreads.h ****  */
 122:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 123:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 124:../../../os/rt/include/chthreads.h **** 
 125:../../../os/rt/include/chthreads.h **** /**
 126:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 127:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 128:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 129:../../../os/rt/include/chthreads.h ****  *
 130:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 131:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @api
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 139:../../../os/rt/include/chthreads.h ****  *
 140:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 141:../../../os/rt/include/chthreads.h ****  */
 142:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 143:../../../os/rt/include/chthreads.h **** 
 144:../../../os/rt/include/chthreads.h **** /**
 145:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 146:../../../os/rt/include/chthreads.h ****  *
 147:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 148:../../../os/rt/include/chthreads.h ****  */
 149:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 150:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 151:../../../os/rt/include/chthreads.h **** /** @} */
 152:../../../os/rt/include/chthreads.h **** 
 153:../../../os/rt/include/chthreads.h **** /**
 154:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 155:../../../os/rt/include/chthreads.h ****  */
 156:../../../os/rt/include/chthreads.h **** /**
 157:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 158:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 159:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 160:../../../os/rt/include/chthreads.h ****  */
 161:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 162:../../../os/rt/include/chthreads.h **** /** @} */
 163:../../../os/rt/include/chthreads.h **** 
 164:../../../os/rt/include/chthreads.h **** /**
 165:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 166:../../../os/rt/include/chthreads.h ****  * @{
 167:../../../os/rt/include/chthreads.h ****  */
 168:../../../os/rt/include/chthreads.h **** /**
 169:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 170:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 171:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 172:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 173:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 174:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 175:../../../os/rt/include/chthreads.h ****  *          converted.
 176:../../../os/rt/include/chthreads.h ****  *
 177:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 178:../../../os/rt/include/chthreads.h ****  *
 179:../../../os/rt/include/chthreads.h ****  * @api
 180:../../../os/rt/include/chthreads.h ****  */
 181:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 182:../../../os/rt/include/chthreads.h **** 
 183:../../../os/rt/include/chthreads.h **** /**
 184:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 185:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 186:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 187:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 188:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 189:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 190:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 191:../../../os/rt/include/chthreads.h ****  *          converted.
 192:../../../os/rt/include/chthreads.h ****  *
 193:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 194:../../../os/rt/include/chthreads.h ****  *
 195:../../../os/rt/include/chthreads.h ****  * @api
 196:../../../os/rt/include/chthreads.h ****  */
 197:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 198:../../../os/rt/include/chthreads.h **** 
 199:../../../os/rt/include/chthreads.h **** /**
 200:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 201:../../../os/rt/include/chthreads.h ****  *          microseconds.
 202:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 203:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 204:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 205:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 206:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 207:../../../os/rt/include/chthreads.h ****  *          converted.
 208:../../../os/rt/include/chthreads.h ****  *
 209:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @api
 212:../../../os/rt/include/chthreads.h ****  */
 213:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 214:../../../os/rt/include/chthreads.h **** /** @} */
 215:../../../os/rt/include/chthreads.h **** 
 216:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 217:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 218:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 219:../../../os/rt/include/chthreads.h **** 
 220:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 221:../../../os/rt/include/chthreads.h **** extern "C" {
 222:../../../os/rt/include/chthreads.h **** #endif
 223:../../../os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 224:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 226:../../../os/rt/include/chthreads.h **** #endif
 227:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 228:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 229:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 230:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 231:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 232:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 233:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 234:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 235:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 236:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 237:../../../os/rt/include/chthreads.h **** #endif
 238:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 239:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 240:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 241:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 242:../../../os/rt/include/chthreads.h **** #endif
 243:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 244:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 245:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 246:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 247:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 248:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 249:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 250:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 251:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 252:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 253:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 254:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 255:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 256:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 257:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 258:../../../os/rt/include/chthreads.h **** }
 259:../../../os/rt/include/chthreads.h **** #endif
 260:../../../os/rt/include/chthreads.h **** 
 261:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 262:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 263:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 264:../../../os/rt/include/chthreads.h **** 
 265:../../../os/rt/include/chthreads.h ****  /**
 266:../../../os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 267:../../../os/rt/include/chthreads.h ****   *
 268:../../../os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 269:../../../os/rt/include/chthreads.h ****   *
 270:../../../os/rt/include/chthreads.h ****   * @xclass
 271:../../../os/rt/include/chthreads.h ****   */
 272:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 273:../../../os/rt/include/chthreads.h **** 
 274:../../../os/rt/include/chthreads.h ****   return ch.rlist.current;
 615               		.loc 6 274 3 view .LVU167
 616               	.LBB118:
 617               	.LBB117:
 618               		.loc 5 146 25 is_stmt 0 view .LVU168
 619 0016 E98C      		ldd r14,Y+25
 620 0018 FA8C      		ldd r15,Y+26
 621               	.LVL35:
 622               		.loc 5 146 25 view .LVU169
 623               	.LBE117:
 624               	.LBE118:
 216:../../../os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 625               		.loc 1 216 3 is_stmt 1 view .LVU170
 626 001a C701      		movw r24,r14
 627               	.LVL36:
 628               		.loc 1 216 3 is_stmt 0 view .LVU171
 629 001c 0E94 0000 		call chMtxUnlockS
 630               	.LVL37:
 217:../../../os/rt/src/chcond.c **** 
 218:../../../os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 219:../../../os/rt/src/chcond.c ****      again.*/
 220:../../../os/rt/src/chcond.c ****   ctp->u.wtobjp = cp;
 631               		.loc 1 220 3 is_stmt 1 view .LVU172
 632               		.loc 1 220 17 is_stmt 0 view .LVU173
 633 0020 198B      		std Y+17,r17
 634 0022 088B      		std Y+16,r16
 221:../../../os/rt/src/chcond.c ****   queue_prio_insert(ctp, &cp->queue);
 635               		.loc 1 221 3 is_stmt 1 view .LVU174
 636               	.LVL38:
 637               	.LBB119:
 638               	.LBI119:
 586:../../../os/rt/include/chschd.h **** 
 639               		.loc 2 586 20 view .LVU175
 640               	.LBB120:
 588:../../../os/rt/include/chschd.h ****   do {
 641               		.loc 2 588 13 is_stmt 0 view .LVU176
 642 0024 F801      		movw r30,r16
 643 0026 00C0      		rjmp .L17
 644               	.LVL39:
 645               	.L19:
 591:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 646               		.loc 2 591 36 view .LVU177
 647 0028 9481      		ldd r25,Z+4
 648 002a 8C81      		ldd r24,Y+4
 649 002c 9817      		cp r25,r24
 650 002e 00F0      		brlo .L16
 651               	.LVL40:
 652               	.L17:
 589:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 653               		.loc 2 589 3 is_stmt 1 view .LVU178
 590:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 654               		.loc 2 590 5 view .LVU179
 590:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 655               		.loc 2 590 8 is_stmt 0 view .LVU180
 656 0030 0190      		ld __tmp_reg__,Z+
 657 0032 F081      		ld r31,Z
 658 0034 E02D      		mov r30,__tmp_reg__
 659               	.LVL41:
 591:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 660               		.loc 2 591 3 view .LVU181
 661 0036 0E17      		cp r16,r30
 662 0038 1F07      		cpc r17,r31
 663 003a 01F4      		brne .L19
 664               	.L16:
 592:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 665               		.loc 2 592 3 is_stmt 1 view .LVU182
 592:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 666               		.loc 2 592 30 is_stmt 0 view .LVU183
 667 003c F983      		std Y+1,r31
 668 003e E883      		st Y,r30
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 669               		.loc 2 593 3 is_stmt 1 view .LVU184
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 670               		.loc 2 593 41 is_stmt 0 view .LVU185
 671 0040 A281      		ldd r26,Z+2
 672 0042 B381      		ldd r27,Z+3
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 673               		.loc 2 593 30 view .LVU186
 674 0044 BB83      		std Y+3,r27
 675 0046 AA83      		std Y+2,r26
 594:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 676               		.loc 2 594 3 is_stmt 1 view .LVU187
 594:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 677               		.loc 2 594 30 is_stmt 0 view .LVU188
 678 0048 CD93      		st X+,r28
 679 004a DC93      		st X,r29
 595:../../../os/rt/include/chschd.h **** }
 680               		.loc 2 595 3 is_stmt 1 view .LVU189
 595:../../../os/rt/include/chschd.h **** }
 681               		.loc 2 595 30 is_stmt 0 view .LVU190
 682 004c D383      		std Z+3,r29
 683 004e C283      		std Z+2,r28
 684               	.LVL42:
 595:../../../os/rt/include/chschd.h **** }
 685               		.loc 2 595 30 view .LVU191
 686               	.LBE120:
 687               	.LBE119:
 222:../../../os/rt/src/chcond.c ****   chSchGoSleepS(CH_STATE_WTCOND);
 688               		.loc 1 222 3 is_stmt 1 view .LVU192
 689 0050 87E0      		ldi r24,lo8(7)
 690 0052 0E94 0000 		call chSchGoSleepS
 691               	.LVL43:
 223:../../../os/rt/src/chcond.c ****   msg = ctp->u.rdymsg;
 692               		.loc 1 223 3 view .LVU193
 693               		.loc 1 223 7 is_stmt 0 view .LVU194
 694 0056 0888      		ldd __tmp_reg__,Y+16
 695 0058 D989      		ldd r29,Y+17
 696 005a C02D      		mov r28,__tmp_reg__
 697               	.LVL44:
 224:../../../os/rt/src/chcond.c ****   chMtxLockS(mp);
 698               		.loc 1 224 3 is_stmt 1 view .LVU195
 699 005c C701      		movw r24,r14
 700 005e 0E94 0000 		call chMtxLockS
 701               	.LVL45:
 225:../../../os/rt/src/chcond.c **** 
 226:../../../os/rt/src/chcond.c ****   return msg;
 702               		.loc 1 226 3 view .LVU196
 227:../../../os/rt/src/chcond.c **** }
 703               		.loc 1 227 1 is_stmt 0 view .LVU197
 704 0062 CE01      		movw r24,r28
 705               	/* epilogue start */
 706 0064 DF91      		pop r29
 707 0066 CF91      		pop r28
 708               	.LVL46:
 709               		.loc 1 227 1 view .LVU198
 710 0068 1F91      		pop r17
 711 006a 0F91      		pop r16
 712               	.LVL47:
 713               		.loc 1 227 1 view .LVU199
 714 006c FF90      		pop r15
 715 006e EF90      		pop r14
 716               	.LVL48:
 717               		.loc 1 227 1 view .LVU200
 718 0070 0895      		ret
 719               		.cfi_endproc
 720               	.LFE147:
 722               		.section	.text.chCondWait,"ax",@progbits
 723               	.global	chCondWait
 725               	chCondWait:
 726               	.LVL49:
 727               	.LFB146:
 179:../../../os/rt/src/chcond.c ****   msg_t msg;
 728               		.loc 1 179 44 is_stmt 1 view -0
 729               		.cfi_startproc
 730               	/* prologue: function */
 731               	/* frame size = 0 */
 732               	/* stack size = 0 */
 733               	.L__stack_usage = 0
 180:../../../os/rt/src/chcond.c **** 
 734               		.loc 1 180 3 view .LVU202
 182:../../../os/rt/src/chcond.c ****   msg = chCondWaitS(cp);
 735               		.loc 1 182 3 view .LVU203
 736               	.LBB121:
 737               	.LBI121:
 353:../../../os/rt/include/chsys.h **** 
 738               		.loc 3 353 20 view .LVU204
 739               	.LBE121:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 740               		.loc 3 355 3 view .LVU205
 741               	.LBB124:
 742               	.LBB122:
 743               	.LBI122:
 435:../../../os/common/ports/AVR/chcore.h **** 
 744               		.loc 4 435 20 view .LVU206
 745               	.LBB123:
 437:../../../os/common/ports/AVR/chcore.h **** }
 746               		.loc 4 437 3 view .LVU207
 747               	/* #APP */
 748               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 749 0000 F894      		cli
 750               	 ;  0 "" 2
 751               	/* #NOAPP */
 752               	.LBE123:
 753               	.LBE122:
 754               	.LBE124:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 755               		.loc 3 356 34 view .LVU208
 357:../../../os/rt/include/chsys.h **** }
 756               		.loc 3 357 20 view .LVU209
 183:../../../os/rt/src/chcond.c ****   chSysUnlock();
 757               		.loc 1 183 3 view .LVU210
 183:../../../os/rt/src/chcond.c ****   chSysUnlock();
 758               		.loc 1 183 9 is_stmt 0 view .LVU211
 759 0002 0E94 0000 		call chCondWaitS
 760               	.LVL50:
 184:../../../os/rt/src/chcond.c ****   return msg;
 761               		.loc 1 184 3 is_stmt 1 view .LVU212
 762               	.LBB125:
 763               	.LBI125:
 365:../../../os/rt/include/chsys.h **** 
 764               		.loc 3 365 20 view .LVU213
 765               	.LBB126:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 766               		.loc 3 367 22 view .LVU214
 368:../../../os/rt/include/chsys.h **** 
 767               		.loc 3 368 33 view .LVU215
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 768               		.loc 3 374 3 view .LVU216
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 769               		.loc 3 374 3 view .LVU217
 770               		.loc 3 378 3 view .LVU218
 771               	.LBB127:
 772               	.LBI127:
 445:../../../os/common/ports/AVR/chcore.h **** 
 773               		.loc 4 445 20 view .LVU219
 774               	.LBB128:
 775               		.loc 4 447 3 view .LVU220
 776               	/* #APP */
 777               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 778 0006 7894      		sei
 779               	 ;  0 "" 2
 780               	/* #NOAPP */
 781               	.LBE128:
 782               	.LBE127:
 783               	.LBE126:
 784               	.LBE125:
 185:../../../os/rt/src/chcond.c **** }
 785               		.loc 1 185 3 view .LVU221
 786               	/* epilogue start */
 186:../../../os/rt/src/chcond.c **** 
 787               		.loc 1 186 1 is_stmt 0 view .LVU222
 788 0008 0895      		ret
 789               		.cfi_endproc
 790               	.LFE146:
 792               		.section	.text.chCondWaitTimeoutS,"ax",@progbits
 793               	.global	chCondWaitTimeoutS
 795               	chCondWaitTimeoutS:
 796               	.LVL51:
 797               	.LFB149:
 228:../../../os/rt/src/chcond.c **** 
 229:../../../os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 230:../../../os/rt/src/chcond.c **** /**
 231:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 232:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 233:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 234:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 235:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 236:../../../os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 237:../../../os/rt/src/chcond.c ****  *          in order to use this function.
 238:../../../os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 239:../../../os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 240:../../../os/rt/src/chcond.c ****  *
 241:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 242:../../../os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 243:../../../os/rt/src/chcond.c ****  *                      special values are handled as follow:
 244:../../../os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 245:../../../os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 246:../../../os/rt/src/chcond.c ****  *                      .
 247:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 248:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 249:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 250:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 251:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 252:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 253:../../../os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 254:../../../os/rt/src/chcond.c ****  *                      the specified timeout.
 255:../../../os/rt/src/chcond.c ****  *
 256:../../../os/rt/src/chcond.c ****  * @api
 257:../../../os/rt/src/chcond.c ****  */
 258:../../../os/rt/src/chcond.c **** msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 259:../../../os/rt/src/chcond.c ****   msg_t msg;
 260:../../../os/rt/src/chcond.c **** 
 261:../../../os/rt/src/chcond.c ****   chSysLock();
 262:../../../os/rt/src/chcond.c ****   msg = chCondWaitTimeoutS(cp, timeout);
 263:../../../os/rt/src/chcond.c ****   chSysUnlock();
 264:../../../os/rt/src/chcond.c **** 
 265:../../../os/rt/src/chcond.c ****   return msg;
 266:../../../os/rt/src/chcond.c **** }
 267:../../../os/rt/src/chcond.c **** 
 268:../../../os/rt/src/chcond.c **** /**
 269:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 270:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 271:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 272:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 273:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 274:../../../os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 275:../../../os/rt/src/chcond.c ****  *          in order to use this function.
 276:../../../os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 277:../../../os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 278:../../../os/rt/src/chcond.c ****  *
 279:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 280:../../../os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 281:../../../os/rt/src/chcond.c ****  *                      special values are handled as follow:
 282:../../../os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 283:../../../os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 284:../../../os/rt/src/chcond.c ****  *                      .
 285:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 286:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 287:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 288:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 289:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 290:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 291:../../../os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 292:../../../os/rt/src/chcond.c ****  *                      the specified timeout.
 293:../../../os/rt/src/chcond.c ****  *
 294:../../../os/rt/src/chcond.c ****  * @sclass
 295:../../../os/rt/src/chcond.c ****  */
 296:../../../os/rt/src/chcond.c **** msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 798               		.loc 1 296 75 is_stmt 1 view -0
 799               		.cfi_startproc
 800               		.loc 1 296 75 is_stmt 0 view .LVU224
 801 0000 CF92      		push r12
 802               	.LCFI18:
 803               		.cfi_def_cfa_offset 3
 804               		.cfi_offset 12, -2
 805 0002 DF92      		push r13
 806               	.LCFI19:
 807               		.cfi_def_cfa_offset 4
 808               		.cfi_offset 13, -3
 809 0004 EF92      		push r14
 810               	.LCFI20:
 811               		.cfi_def_cfa_offset 5
 812               		.cfi_offset 14, -4
 813 0006 FF92      		push r15
 814               	.LCFI21:
 815               		.cfi_def_cfa_offset 6
 816               		.cfi_offset 15, -5
 817 0008 0F93      		push r16
 818               	.LCFI22:
 819               		.cfi_def_cfa_offset 7
 820               		.cfi_offset 16, -6
 821 000a 1F93      		push r17
 822               	.LCFI23:
 823               		.cfi_def_cfa_offset 8
 824               		.cfi_offset 17, -7
 825 000c CF93      		push r28
 826               	.LCFI24:
 827               		.cfi_def_cfa_offset 9
 828               		.cfi_offset 28, -8
 829 000e DF93      		push r29
 830               	.LCFI25:
 831               		.cfi_def_cfa_offset 10
 832               		.cfi_offset 29, -9
 833               	/* prologue: function */
 834               	/* frame size = 0 */
 835               	/* stack size = 8 */
 836               	.L__stack_usage = 8
 837 0010 7C01      		movw r14,r24
 838 0012 8B01      		movw r16,r22
 297:../../../os/rt/src/chcond.c ****   mutex_t *mp;
 839               		.loc 1 297 3 is_stmt 1 view .LVU225
 298:../../../os/rt/src/chcond.c ****   msg_t msg;
 840               		.loc 1 298 3 view .LVU226
 299:../../../os/rt/src/chcond.c **** 
 300:../../../os/rt/src/chcond.c ****   chDbgCheckClassS();
 841               		.loc 1 300 21 view .LVU227
 301:../../../os/rt/src/chcond.c ****   chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
 842               		.loc 1 301 3 view .LVU228
 843               		.loc 1 301 3 view .LVU229
 302:../../../os/rt/src/chcond.c ****   chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");
 844               		.loc 1 302 3 view .LVU230
 845               		.loc 1 302 3 view .LVU231
 303:../../../os/rt/src/chcond.c **** 
 304:../../../os/rt/src/chcond.c ****   /* Getting "current" mutex and releasing it.*/
 305:../../../os/rt/src/chcond.c ****   mp = chMtxGetNextMutexS();
 846               		.loc 1 305 3 view .LVU232
 847               	.LBB129:
 848               	.LBI129:
 144:../../../os/rt/include/chmtx.h **** 
 849               		.loc 5 144 24 view .LVU233
 850               	.LBB130:
 851               		.loc 5 146 3 view .LVU234
 852               	.LBB131:
 853               	.LBI131:
 272:../../../os/rt/include/chthreads.h **** 
 854               		.loc 6 272 25 view .LVU235
 855               	.LBB132:
 856               		.loc 6 274 3 view .LVU236
 857               	.LBE132:
 858               	.LBE131:
 859               		.loc 5 146 25 is_stmt 0 view .LVU237
 860 0014 E091 0000 		lds r30,ch+11
 861 0018 F091 0000 		lds r31,ch+11+1
 862 001c C18C      		ldd r12,Z+25
 863 001e D28C      		ldd r13,Z+26
 864               	.LVL52:
 865               		.loc 5 146 25 view .LVU238
 866               	.LBE130:
 867               	.LBE129:
 306:../../../os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 868               		.loc 1 306 3 is_stmt 1 view .LVU239
 869 0020 C601      		movw r24,r12
 870               	.LVL53:
 871               		.loc 1 306 3 is_stmt 0 view .LVU240
 872 0022 0E94 0000 		call chMtxUnlockS
 873               	.LVL54:
 307:../../../os/rt/src/chcond.c **** 
 308:../../../os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 309:../../../os/rt/src/chcond.c ****      again.*/
 310:../../../os/rt/src/chcond.c ****   currp->u.wtobjp = cp;
 874               		.loc 1 310 3 is_stmt 1 view .LVU241
 875 0026 A091 0000 		lds r26,ch+11
 876 002a B091 0000 		lds r27,ch+11+1
 877               		.loc 1 310 19 is_stmt 0 view .LVU242
 878 002e 5196      		adiw r26,16+1
 879 0030 FC92      		st X,r15
 880 0032 EE92      		st -X,r14
 881 0034 5097      		sbiw r26,16
 311:../../../os/rt/src/chcond.c ****   queue_prio_insert(currp, &cp->queue);
 882               		.loc 1 311 3 is_stmt 1 view .LVU243
 883               	.LVL55:
 884               	.LBB133:
 885               	.LBI133:
 586:../../../os/rt/include/chschd.h **** 
 886               		.loc 2 586 20 view .LVU244
 887               	.LBB134:
 588:../../../os/rt/include/chschd.h ****   do {
 888               		.loc 2 588 13 is_stmt 0 view .LVU245
 889 0036 F701      		movw r30,r14
 890 0038 00C0      		rjmp .L23
 891               	.LVL56:
 892               	.L29:
 591:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 893               		.loc 2 591 36 view .LVU246
 894 003a 9481      		ldd r25,Z+4
 895 003c 1496      		adiw r26,4
 896 003e 8C91      		ld r24,X
 897 0040 1497      		sbiw r26,4
 898 0042 9817      		cp r25,r24
 899 0044 00F0      		brlo .L22
 900               	.LVL57:
 901               	.L23:
 589:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 902               		.loc 2 589 3 is_stmt 1 view .LVU247
 590:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 903               		.loc 2 590 5 view .LVU248
 590:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 904               		.loc 2 590 8 is_stmt 0 view .LVU249
 905 0046 0190      		ld __tmp_reg__,Z+
 906 0048 F081      		ld r31,Z
 907 004a E02D      		mov r30,__tmp_reg__
 908               	.LVL58:
 591:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 909               		.loc 2 591 3 view .LVU250
 910 004c EE16      		cp r14,r30
 911 004e FF06      		cpc r15,r31
 912 0050 01F4      		brne .L29
 913               	.L22:
 592:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 914               		.loc 2 592 3 is_stmt 1 view .LVU251
 592:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 915               		.loc 2 592 30 is_stmt 0 view .LVU252
 916 0052 1196      		adiw r26,1
 917 0054 FC93      		st X,r31
 918 0056 EE93      		st -X,r30
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 919               		.loc 2 593 3 is_stmt 1 view .LVU253
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 920               		.loc 2 593 41 is_stmt 0 view .LVU254
 921 0058 8281      		ldd r24,Z+2
 922 005a 9381      		ldd r25,Z+3
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 923               		.loc 2 593 30 view .LVU255
 924 005c 1396      		adiw r26,2+1
 925 005e 9C93      		st X,r25
 926 0060 8E93      		st -X,r24
 927 0062 1297      		sbiw r26,2
 594:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 928               		.loc 2 594 3 is_stmt 1 view .LVU256
 594:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 929               		.loc 2 594 30 is_stmt 0 view .LVU257
 930 0064 EC01      		movw r28,r24
 931 0066 B983      		std Y+1,r27
 932 0068 A883      		st Y,r26
 595:../../../os/rt/include/chschd.h **** }
 933               		.loc 2 595 3 is_stmt 1 view .LVU258
 595:../../../os/rt/include/chschd.h **** }
 934               		.loc 2 595 30 is_stmt 0 view .LVU259
 935 006a B383      		std Z+3,r27
 936 006c A283      		std Z+2,r26
 937               	.LVL59:
 595:../../../os/rt/include/chschd.h **** }
 938               		.loc 2 595 30 view .LVU260
 939               	.LBE134:
 940               	.LBE133:
 312:../../../os/rt/src/chcond.c ****   msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 941               		.loc 1 312 3 is_stmt 1 view .LVU261
 942               		.loc 1 312 9 is_stmt 0 view .LVU262
 943 006e B801      		movw r22,r16
 944 0070 87E0      		ldi r24,lo8(7)
 945 0072 0E94 0000 		call chSchGoSleepTimeoutS
 946               	.LVL60:
 947 0076 8C01      		movw r16,r24
 948               	.LVL61:
 313:../../../os/rt/src/chcond.c ****   if (msg != MSG_TIMEOUT) {
 949               		.loc 1 313 3 is_stmt 1 view .LVU263
 950               		.loc 1 313 6 is_stmt 0 view .LVU264
 951 0078 0196      		adiw r24,1
 952 007a 01F0      		breq .L21
 314:../../../os/rt/src/chcond.c ****     chMtxLockS(mp);
 953               		.loc 1 314 5 is_stmt 1 view .LVU265
 954 007c C601      		movw r24,r12
 955 007e 0E94 0000 		call chMtxLockS
 956               	.LVL62:
 315:../../../os/rt/src/chcond.c ****   }
 316:../../../os/rt/src/chcond.c **** 
 317:../../../os/rt/src/chcond.c ****   return msg;
 957               		.loc 1 317 3 view .LVU266
 958               	.L21:
 318:../../../os/rt/src/chcond.c **** }
 959               		.loc 1 318 1 is_stmt 0 view .LVU267
 960 0082 C801      		movw r24,r16
 961               	/* epilogue start */
 962 0084 DF91      		pop r29
 963 0086 CF91      		pop r28
 964 0088 1F91      		pop r17
 965 008a 0F91      		pop r16
 966               	.LVL63:
 967               		.loc 1 318 1 view .LVU268
 968 008c FF90      		pop r15
 969 008e EF90      		pop r14
 970               	.LVL64:
 971               		.loc 1 318 1 view .LVU269
 972 0090 DF90      		pop r13
 973 0092 CF90      		pop r12
 974               	.LVL65:
 975               		.loc 1 318 1 view .LVU270
 976 0094 0895      		ret
 977               		.cfi_endproc
 978               	.LFE149:
 980               		.section	.text.chCondWaitTimeout,"ax",@progbits
 981               	.global	chCondWaitTimeout
 983               	chCondWaitTimeout:
 984               	.LVL66:
 985               	.LFB148:
 258:../../../os/rt/src/chcond.c ****   msg_t msg;
 986               		.loc 1 258 74 is_stmt 1 view -0
 987               		.cfi_startproc
 988               	/* prologue: function */
 989               	/* frame size = 0 */
 990               	/* stack size = 0 */
 991               	.L__stack_usage = 0
 259:../../../os/rt/src/chcond.c **** 
 992               		.loc 1 259 3 view .LVU272
 261:../../../os/rt/src/chcond.c ****   msg = chCondWaitTimeoutS(cp, timeout);
 993               		.loc 1 261 3 view .LVU273
 994               	.LBB135:
 995               	.LBI135:
 353:../../../os/rt/include/chsys.h **** 
 996               		.loc 3 353 20 view .LVU274
 997               	.LBE135:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 998               		.loc 3 355 3 view .LVU275
 999               	.LBB138:
 1000               	.LBB136:
 1001               	.LBI136:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1002               		.loc 4 435 20 view .LVU276
 1003               	.LBB137:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1004               		.loc 4 437 3 view .LVU277
 1005               	/* #APP */
 1006               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1007 0000 F894      		cli
 1008               	 ;  0 "" 2
 1009               	/* #NOAPP */
 1010               	.LBE137:
 1011               	.LBE136:
 1012               	.LBE138:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1013               		.loc 3 356 34 view .LVU278
 357:../../../os/rt/include/chsys.h **** }
 1014               		.loc 3 357 20 view .LVU279
 262:../../../os/rt/src/chcond.c ****   chSysUnlock();
 1015               		.loc 1 262 3 view .LVU280
 262:../../../os/rt/src/chcond.c ****   chSysUnlock();
 1016               		.loc 1 262 9 is_stmt 0 view .LVU281
 1017 0002 0E94 0000 		call chCondWaitTimeoutS
 1018               	.LVL67:
 263:../../../os/rt/src/chcond.c **** 
 1019               		.loc 1 263 3 is_stmt 1 view .LVU282
 1020               	.LBB139:
 1021               	.LBI139:
 365:../../../os/rt/include/chsys.h **** 
 1022               		.loc 3 365 20 view .LVU283
 1023               	.LBB140:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1024               		.loc 3 367 22 view .LVU284
 368:../../../os/rt/include/chsys.h **** 
 1025               		.loc 3 368 33 view .LVU285
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1026               		.loc 3 374 3 view .LVU286
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1027               		.loc 3 374 3 view .LVU287
 1028               		.loc 3 378 3 view .LVU288
 1029               	.LBB141:
 1030               	.LBI141:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1031               		.loc 4 445 20 view .LVU289
 1032               	.LBB142:
 1033               		.loc 4 447 3 view .LVU290
 1034               	/* #APP */
 1035               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1036 0006 7894      		sei
 1037               	 ;  0 "" 2
 1038               	/* #NOAPP */
 1039               	.LBE142:
 1040               	.LBE141:
 1041               	.LBE140:
 1042               	.LBE139:
 265:../../../os/rt/src/chcond.c **** }
 1043               		.loc 1 265 3 view .LVU291
 1044               	/* epilogue start */
 266:../../../os/rt/src/chcond.c **** 
 1045               		.loc 1 266 1 is_stmt 0 view .LVU292
 1046 0008 0895      		ret
 1047               		.cfi_endproc
 1048               	.LFE148:
 1050               		.text
 1051               	.Letext0:
 1052               		.file 7 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 1053               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1054               		.file 9 "../../../os/rt/include/chsystypes.h"
 1055               		.file 10 "../../../os/rt/include/chtime.h"
 1056               		.file 11 "../../../os/rt/include/chsem.h"
 1057               		.file 12 "../../../os/rt/include/chregistry.h"
 1058               		.file 13 "../../../os/rt/include/chcond.h"
 1059               		.file 14 "../../../os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chcond.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:13     .text.chCondObjectInit:0000000000000000 chCondObjectInit
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:53     .text.chCondSignal:0000000000000000 chCondSignal
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:183    .text.chCondSignalI:0000000000000000 chCondSignalI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:278    .text.chCondBroadcast:0000000000000000 chCondBroadcast
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:443    .text.chCondBroadcastI:0000000000000000 chCondBroadcastI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:558    .text.chCondWaitS:0000000000000000 chCondWaitS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:725    .text.chCondWait:0000000000000000 chCondWait
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:795    .text.chCondWaitTimeoutS:0000000000000000 chCondWaitTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccJAIzK8.s:983    .text.chCondWaitTimeout:0000000000000000 chCondWaitTimeout

UNDEFINED SYMBOLS
chSchWakeupS
chSchReadyI
chSchRescheduleS
ch
chMtxUnlockS
chSchGoSleepS
chMtxLockS
chSchGoSleepTimeoutS
