   1               		.file	"hal_pal.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.palReadBus,"ax",@progbits
  11               	.global	palReadBus
  13               	palReadBus:
  14               	.LVL0:
  15               	.LFB173:
  16               		.file 1 "../../../os/hal/src/hal_pal.c"
   1:../../../os/hal/src/hal_pal.c **** /*
   2:../../../os/hal/src/hal_pal.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_pal.c **** 
   4:../../../os/hal/src/hal_pal.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_pal.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_pal.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_pal.c **** 
   8:../../../os/hal/src/hal_pal.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_pal.c **** 
  10:../../../os/hal/src/hal_pal.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_pal.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_pal.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_pal.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_pal.c ****     limitations under the License.
  15:../../../os/hal/src/hal_pal.c **** */
  16:../../../os/hal/src/hal_pal.c **** 
  17:../../../os/hal/src/hal_pal.c **** /**
  18:../../../os/hal/src/hal_pal.c ****  * @file    hal_pal.c
  19:../../../os/hal/src/hal_pal.c ****  * @brief   I/O Ports Abstraction Layer code.
  20:../../../os/hal/src/hal_pal.c ****  *
  21:../../../os/hal/src/hal_pal.c ****  * @addtogroup PAL
  22:../../../os/hal/src/hal_pal.c ****  * @{
  23:../../../os/hal/src/hal_pal.c ****  */
  24:../../../os/hal/src/hal_pal.c **** 
  25:../../../os/hal/src/hal_pal.c **** #include "hal.h"
  26:../../../os/hal/src/hal_pal.c **** 
  27:../../../os/hal/src/hal_pal.c **** #if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_pal.c **** 
  29:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_pal.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_pal.c **** 
  33:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_pal.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_pal.c **** 
  37:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_pal.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_pal.c **** 
  41:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_pal.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_pal.c **** 
  45:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_pal.c **** /* Driver exported functions.                                                */
  47:../../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_pal.c **** 
  49:../../../os/hal/src/hal_pal.c **** /**
  50:../../../os/hal/src/hal_pal.c ****  * @brief   Read from an I/O bus.
  51:../../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  52:../../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  53:../../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  54:../../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
  55:../../../os/hal/src/hal_pal.c ****  * @note    The function internally uses the @p palReadGroup() macro. The use
  56:../../../os/hal/src/hal_pal.c ****  *          of this function is preferred when you value code size, readability
  57:../../../os/hal/src/hal_pal.c ****  *          and error checking over speed.
  58:../../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
  59:../../../os/hal/src/hal_pal.c ****  *
  60:../../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  61:../../../os/hal/src/hal_pal.c ****  * @return              The bus logical states.
  62:../../../os/hal/src/hal_pal.c ****  *
  63:../../../os/hal/src/hal_pal.c ****  * @special
  64:../../../os/hal/src/hal_pal.c ****  */
  65:../../../os/hal/src/hal_pal.c **** ioportmask_t palReadBus(const IOBus *bus) {
  17               		.loc 1 65 43 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 65 43 is_stmt 0 view .LVU1
  24 0000 FC01      		movw r30,r24
  66:../../../os/hal/src/hal_pal.c **** 
  67:../../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  25               		.loc 1 67 3 is_stmt 1 view .LVU2
  26               		.loc 1 67 3 view .LVU3
  68:../../../os/hal/src/hal_pal.c **** 
  69:../../../os/hal/src/hal_pal.c ****   return palReadGroup(bus->portid, bus->mask, bus->offset);
  27               		.loc 1 69 3 view .LVU4
  28               		.loc 1 69 10 is_stmt 0 view .LVU5
  29 0002 A081      		ld r26,Z
  30 0004 B181      		ldd r27,Z+1
  31 0006 2C91      		ld r18,X
  32 0008 30E0      		ldi r19,0
  33 000a 8381      		ldd r24,Z+3
  34               	.LVL1:
  35               		.loc 1 69 10 view .LVU6
  36 000c 00C0      		rjmp 2f
  37               		1:
  38 000e 3595      		asr r19
  39 0010 2795      		ror r18
  40               		2:
  41 0012 8A95      		dec r24
  42 0014 02F4      		brpl 1b
  43 0016 8281      		ldd r24,Z+2
  70:../../../os/hal/src/hal_pal.c **** }
  44               		.loc 1 70 1 view .LVU7
  45 0018 8223      		and r24,r18
  46               	/* epilogue start */
  47 001a 0895      		ret
  48               		.cfi_endproc
  49               	.LFE173:
  51               		.section	.text.palWriteBus,"ax",@progbits
  52               	.global	palWriteBus
  54               	palWriteBus:
  55               	.LVL2:
  56               	.LFB174:
  71:../../../os/hal/src/hal_pal.c **** 
  72:../../../os/hal/src/hal_pal.c **** /**
  73:../../../os/hal/src/hal_pal.c ****  * @brief   Write to an I/O bus.
  74:../../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  75:../../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  76:../../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  77:../../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
  78:../../../os/hal/src/hal_pal.c ****  * @note    The default implementation is non atomic and not necessarily
  79:../../../os/hal/src/hal_pal.c ****  *          optimal. Low level drivers may  optimize the function by using
  80:../../../os/hal/src/hal_pal.c ****  *          specific hardware or coding.
  81:../../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
  82:../../../os/hal/src/hal_pal.c ****  *
  83:../../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  84:../../../os/hal/src/hal_pal.c ****  * @param[in] bits      the bits to be written on the I/O bus. Values exceeding
  85:../../../os/hal/src/hal_pal.c ****  *                      the bus width are masked so most significant bits are
  86:../../../os/hal/src/hal_pal.c ****  *                      lost.
  87:../../../os/hal/src/hal_pal.c ****  *
  88:../../../os/hal/src/hal_pal.c ****  * @special
  89:../../../os/hal/src/hal_pal.c ****  */
  90:../../../os/hal/src/hal_pal.c **** void palWriteBus(const IOBus *bus, ioportmask_t bits) {
  57               		.loc 1 90 55 is_stmt 1 view -0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  63               		.loc 1 90 55 is_stmt 0 view .LVU9
  64 0000 FC01      		movw r30,r24
  91:../../../os/hal/src/hal_pal.c **** 
  92:../../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  65               		.loc 1 92 3 is_stmt 1 view .LVU10
  66               		.loc 1 92 3 view .LVU11
  93:../../../os/hal/src/hal_pal.c **** 
  94:../../../os/hal/src/hal_pal.c ****   palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
  67               		.loc 1 94 3 view .LVU12
  68 0002 A081      		ld r26,Z
  69 0004 B181      		ldd r27,Z+1
  70 0006 1296      		adiw r26,2
  71 0008 4C91      		ld r20,X
  72 000a 1297      		sbiw r26,2
  73 000c 2281      		ldd r18,Z+2
  74 000e 3381      		ldd r19,Z+3
  75 0010 822F      		mov r24,r18
  76               	.LVL3:
  77               		.loc 1 94 3 is_stmt 0 view .LVU13
  78 0012 032E      		mov r0,r19
  79 0014 00C0      		rjmp 2f
  80               		1:
  81 0016 880F      		lsl r24
  82               		2:
  83 0018 0A94      		dec r0
  84 001a 02F4      		brpl 1b
  85 001c 8095      		com r24
  86 001e 8423      		and r24,r20
  87 0020 6223      		and r22,r18
  88               	.LVL4:
  89               		.loc 1 94 3 view .LVU14
  90 0022 00C0      		rjmp 2f
  91               		1:
  92 0024 660F      		lsl r22
  93               		2:
  94 0026 3A95      		dec r19
  95 0028 02F4      		brpl 1b
  96 002a 862B      		or r24,r22
  97 002c 1296      		adiw r26,2
  98 002e 8C93      		st X,r24
  99               	/* epilogue start */
  95:../../../os/hal/src/hal_pal.c **** }
 100               		.loc 1 95 1 view .LVU15
 101 0030 0895      		ret
 102               		.cfi_endproc
 103               	.LFE174:
 105               		.section	.text.palSetBusMode,"ax",@progbits
 106               	.global	palSetBusMode
 108               	palSetBusMode:
 109               	.LVL5:
 110               	.LFB175:
  96:../../../os/hal/src/hal_pal.c **** 
  97:../../../os/hal/src/hal_pal.c **** /**
  98:../../../os/hal/src/hal_pal.c ****  * @brief   Programs a bus with the specified mode.
  99:../../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
 100:../../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
 101:../../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
 102:../../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
 103:../../../os/hal/src/hal_pal.c ****  * @note    The default implementation is non atomic and not necessarily
 104:../../../os/hal/src/hal_pal.c ****  *          optimal. Low level drivers may  optimize the function by using
 105:../../../os/hal/src/hal_pal.c ****  *          specific hardware or coding.
 106:../../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
 107:../../../os/hal/src/hal_pal.c ****  *
 108:../../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 109:../../../os/hal/src/hal_pal.c ****  * @param[in] mode      the mode
 110:../../../os/hal/src/hal_pal.c ****  *
 111:../../../os/hal/src/hal_pal.c ****  * @special
 112:../../../os/hal/src/hal_pal.c ****  */
 113:../../../os/hal/src/hal_pal.c **** void palSetBusMode(const IOBus *bus, iomode_t mode) {
 111               		.loc 1 113 53 is_stmt 1 view -0
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 117               		.loc 1 113 53 is_stmt 0 view .LVU17
 118 0000 FC01      		movw r30,r24
 119 0002 462F      		mov r20,r22
 114:../../../os/hal/src/hal_pal.c **** 
 115:../../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 120               		.loc 1 115 3 is_stmt 1 view .LVU18
 121               		.loc 1 115 3 view .LVU19
 116:../../../os/hal/src/hal_pal.c **** 
 117:../../../os/hal/src/hal_pal.c ****   palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
 122               		.loc 1 117 3 view .LVU20
 123 0004 2281      		ldd r18,Z+2
 124 0006 8381      		ldd r24,Z+3
 125               	.LVL6:
 126               		.loc 1 117 3 is_stmt 0 view .LVU21
 127 0008 00C0      		rjmp 2f
 128               		1:
 129 000a 220F      		lsl r18
 130               		2:
 131 000c 8A95      		dec r24
 132 000e 02F4      		brpl 1b
 133 0010 622F      		mov r22,r18
 134               	.LVL7:
 135               		.loc 1 117 3 view .LVU22
 136 0012 8081      		ld r24,Z
 137 0014 9181      		ldd r25,Z+1
 138 0016 0C94 0000 		jmp _pal_lld_setgroupmode
 139               	.LVL8:
 140               		.loc 1 117 3 view .LVU23
 141               		.cfi_endproc
 142               	.LFE175:
 144               		.text
 145               	.Letext0:
 146               		.file 2 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 147               		.file 3 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 148               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 149               		.file 5 "../../../os/rt/include/chsystypes.h"
 150               		.file 6 "../../../os/rt/include/chschd.h"
 151               		.file 7 "../../../os/rt/include/chtime.h"
 152               		.file 8 "../../../os/common/ports/AVR/chcore.h"
 153               		.file 9 "../../../os/rt/include/chsem.h"
 154               		.file 10 "../../../os/rt/include/chmtx.h"
 155               		.file 11 "../../../os/rt/include/chsys.h"
 156               		.file 12 "../../../os/rt/include/chregistry.h"
 157               		.file 13 "../../../os/rt/include/chevents.h"
 158               		.file 14 "../../../os/common/oslib/include/chmemcore.h"
 159               		.file 15 "../../../os/hal/include/hal_queues.h"
 160               		.file 16 "../../../os/hal/include/hal_pal.h"
 161               		.file 17 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 162               		.file 18 "../../../os/hal/include/hal_adc.h"
 163               		.file 19 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.h"
 164               		.file 20 "../../../os/hal/include/hal_serial.h"
 165               		.file 21 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_pal.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:13     .text.palReadBus:0000000000000000 palReadBus
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:54     .text.palWriteBus:0000000000000000 palWriteBus
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccoCwtBt.s:108    .text.palSetBusMode:0000000000000000 palSetBusMode

UNDEFINED SYMBOLS
_pal_lld_setgroupmode
