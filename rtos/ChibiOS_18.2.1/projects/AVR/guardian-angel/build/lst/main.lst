   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.adc_cb,"ax",@progbits
  11               	.global	adc_cb
  13               	adc_cb:
  14               	.LVL0:
  15               	.LFB175:
  16               		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        ****  * Guardian Angel Project
   3:main.c        ****  * Authors: Bianca Lisle
   4:main.c        ****  *          Geraldo Braz
   5:main.c        ****  **/
   6:main.c        **** #include "ch.h"
   7:main.c        **** #include "hal.h"
   8:main.c        **** #include <chprintf.h>
   9:main.c        **** #include <string.h>
  10:main.c        **** 
  11:main.c        **** /* Definition of input ports */
  12:main.c        **** #define RAIN_PORT 2 //PD2
  13:main.c        **** #define DOOR_PORT 3 //PD3
  14:main.c        **** #define SPEED_ANALOG_PORT 0 // IOPORT3
  15:main.c        **** 
  16:main.c        **** /* Definition of output ports */
  17:main.c        **** #define BUZZER_PORT 4 //PD4
  18:main.c        **** #define MOTOR_PORT 1 //IOPORT2 - PB1 = Pin 9 (PWM)
  19:main.c        **** 
  20:main.c        **** /* ADC ports */
  21:main.c        **** #define NBR_CHANNELS 1
  22:main.c        **** #define DEPTH 5
  23:main.c        **** #define ADC_CONVERTER_FACTOR 0.00477922077922078 // ((2,5*1.0552519480519482)/552)
  24:main.c        **** 
  25:main.c        **** /* Structures and variables */
  26:main.c        **** volatile uint8_t flag;
  27:main.c        **** uint8_t maxSpeed;
  28:main.c        **** uint8_t speed = 0;
  29:main.c        **** bool isRanning;
  30:main.c        **** bool doorOpened;
  31:main.c        **** bool overSpeed;
  32:main.c        **** 
  33:main.c        **** // State Machine
  34:main.c        **** typedef enum{
  35:main.c        ****     normal_state,
  36:main.c        ****     is_door_opened,
  37:main.c        ****     bus_overspeed,
  38:main.c        ****     bus_stopped,
  39:main.c        ****     is_raining
  40:main.c        **** }states;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** /* Threads */
  44:main.c        **** 
  45:main.c        ****  //FIXME: Study the possibility to create a thread for each sensor event
  46:main.c        **** 
  47:main.c        **** /* Thread for reading sensors.
  48:main.c        ****  * Read primary sensors:
  49:main.c        ****  * 1. (HP) Velocity speed. -> check speed and speed limit and then activate or not buzzer.
  50:main.c        ****  * 2. (HP) Door sensor. -> check door sensor and if it is opened it is not possible to speed the bu
  51:main.c        ****  * 3. Rain sensor. -> check raining sensor and reduces limit speed.
  52:main.c        ****  * 4. Ultrasonic sensor -> check ???
  53:main.c        ****  */
  54:main.c        **** static THD_WORKING_AREA(waThread1, 32);
  55:main.c        **** static THD_FUNCTION(Thread1, arg) {
  56:main.c        ****   (void)arg;
  57:main.c        **** 
  58:main.c        ****   char buffer[200];
  59:main.c        **** 
  60:main.c        ****   chRegSetThreadName("read-high-priority-sensors");
  61:main.c        ****   while (true) {
  62:main.c        ****     /* Read velocity speed */
  63:main.c        ****       //This will determine wether the bus has stoped or not. 
  64:main.c        ****       //Do analog reading here
  65:main.c        **** 
  66:main.c        ****     /* Read Door sensor */
  67:main.c        ****     palReadPad(IOPORT4, RAIN_PORT) == PAL_HIGH ? serial_write("High!\r\n") : serial_write("Low!\r\n
  68:main.c        ****     chnWrite(&SD1, (const uint8_t *)buffer, strlen(buffer));
  69:main.c        ****     chThdSleepMilliseconds(1000);
  70:main.c        ****   }
  71:main.c        **** }
  72:main.c        **** 
  73:main.c        **** /* Functions */
  74:main.c        **** void serial_write(char *data) {
  75:main.c        ****   chnWriteTimeout(&SD1, (const uint8_t *)data, strlen(data), TIME_INFINITE);
  76:main.c        **** }
  77:main.c        **** 
  78:main.c        **** void adc_cb(ADCDriver *adcp, adcsample_t *buffer, size_t n){
  17               		.loc 1 78 60 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  79:main.c        ****   flag = 1;
  23               		.loc 1 79 3 view .LVU1
  24               		.loc 1 79 8 is_stmt 0 view .LVU2
  25 0000 81E0      		ldi r24,lo8(1)
  26               	.LVL1:
  27               		.loc 1 79 8 view .LVU3
  28 0002 8093 0000 		sts flag,r24
  29               	/* epilogue start */
  80:main.c        **** }
  30               		.loc 1 80 1 view .LVU4
  31 0006 0895      		ret
  32               		.cfi_endproc
  33               	.LFE175:
  35               		.section	.text.serial_write,"ax",@progbits
  36               	.global	serial_write
  38               	serial_write:
  39               	.LVL2:
  40               	.LFB174:
  74:main.c        ****   chnWriteTimeout(&SD1, (const uint8_t *)data, strlen(data), TIME_INFINITE);
  41               		.loc 1 74 31 is_stmt 1 view -0
  42               		.cfi_startproc
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
  75:main.c        **** }
  47               		.loc 1 75 3 view .LVU6
  48 0000 FC01      		movw r30,r24
  49               		0:
  50 0002 0190      		ld __tmp_reg__,Z+
  51 0004 0020      		tst __tmp_reg__
  52 0006 01F4      		brne 0b
  53 0008 3197      		sbiw r30,1
  54 000a AF01      		movw r20,r30
  55 000c 481B      		sub r20,r24
  56 000e 590B      		sbc r21,r25
  57 0010 E091 0000 		lds r30,SD1
  58 0014 F091 0000 		lds r31,SD1+1
  59 0018 0684      		ldd __tmp_reg__,Z+14
  60 001a F785      		ldd r31,Z+15
  61 001c E02D      		mov r30,__tmp_reg__
  62 001e 2FEF      		ldi r18,lo8(-1)
  63 0020 3FEF      		ldi r19,lo8(-1)
  64 0022 BC01      		movw r22,r24
  65 0024 80E0      		ldi r24,lo8(SD1)
  66 0026 90E0      		ldi r25,hi8(SD1)
  67               	.LVL3:
  75:main.c        **** }
  68               		.loc 1 75 3 is_stmt 0 view .LVU7
  69 0028 0994      		ijmp
  70               	.LVL4:
  75:main.c        **** }
  71               		.loc 1 75 3 view .LVU8
  72               		.cfi_endproc
  73               	.LFE174:
  75               		.section	.rodata.Thread1.str1.1,"aMS",@progbits,1
  76               	.LC1:
  77 0000 7265 6164 		.string	"read-high-priority-sensors"
  77      2D68 6967 
  77      682D 7072 
  77      696F 7269 
  77      7479 2D73 
  78               	.LC2:
  79 001b 4869 6768 		.string	"High!\r\n"
  79      210D 0A00 
  80               	.LC3:
  81 0023 4C6F 7721 		.string	"Low!\r\n"
  81      0D0A 00
  82               		.section	.text.Thread1,"ax",@progbits
  84               	Thread1:
  85               	.LVL5:
  86               	.LFB173:
  55:main.c        ****   (void)arg;
  87               		.loc 1 55 35 is_stmt 1 view -0
  88               		.cfi_startproc
  55:main.c        ****   (void)arg;
  89               		.loc 1 55 35 is_stmt 0 view .LVU10
  90 0000 CF93      		push r28
  91               	.LCFI0:
  92               		.cfi_def_cfa_offset 3
  93               		.cfi_offset 28, -2
  94 0002 DF93      		push r29
  95               	.LCFI1:
  96               		.cfi_def_cfa_offset 4
  97               		.cfi_offset 29, -3
  98 0004 CDB7      		in r28,__SP_L__
  99 0006 DEB7      		in r29,__SP_H__
 100               	.LCFI2:
 101               		.cfi_def_cfa_register 28
 102 0008 C85C      		subi r28,-56
 103 000a D109      		sbc r29,__zero_reg__
 104               	.LCFI3:
 105               		.cfi_def_cfa_offset 204
 106 000c 0FB6      		in __tmp_reg__,__SREG__
 107 000e F894      		cli
 108 0010 DEBF      		out __SP_H__,r29
 109 0012 0FBE      		out __SREG__,__tmp_reg__
 110 0014 CDBF      		out __SP_L__,r28
 111               	/* prologue: function */
 112               	/* frame size = 200 */
 113               	/* stack size = 202 */
 114               	.L__stack_usage = 202
  56:main.c        **** 
 115               		.loc 1 56 3 is_stmt 1 view .LVU11
  58:main.c        **** 
 116               		.loc 1 58 3 view .LVU12
  60:main.c        ****   while (true) {
 117               		.loc 1 60 3 view .LVU13
 118               	.LVL6:
 119               	.LBB21:
 120               	.LBI21:
 121               		.file 2 "../../../os/rt/include/chregistry.h"
   1:../../../os/rt/include/chregistry.h **** /*
   2:../../../os/rt/include/chregistry.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chregistry.h **** 
   4:../../../os/rt/include/chregistry.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chregistry.h **** 
   6:../../../os/rt/include/chregistry.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chregistry.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chregistry.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chregistry.h ****     (at your option) any later version.
  10:../../../os/rt/include/chregistry.h **** 
  11:../../../os/rt/include/chregistry.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chregistry.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chregistry.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chregistry.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chregistry.h **** 
  16:../../../os/rt/include/chregistry.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chregistry.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chregistry.h **** */
  19:../../../os/rt/include/chregistry.h **** 
  20:../../../os/rt/include/chregistry.h **** /**
  21:../../../os/rt/include/chregistry.h ****  * @file    chregistry.h
  22:../../../os/rt/include/chregistry.h ****  * @brief   Threads registry macros and structures.
  23:../../../os/rt/include/chregistry.h ****  *
  24:../../../os/rt/include/chregistry.h ****  * @addtogroup registry
  25:../../../os/rt/include/chregistry.h ****  * @{
  26:../../../os/rt/include/chregistry.h ****  */
  27:../../../os/rt/include/chregistry.h **** 
  28:../../../os/rt/include/chregistry.h **** #ifndef CHREGISTRY_H
  29:../../../os/rt/include/chregistry.h **** #define CHREGISTRY_H
  30:../../../os/rt/include/chregistry.h **** 
  31:../../../os/rt/include/chregistry.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chregistry.h **** 
  33:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  34:../../../os/rt/include/chregistry.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  36:../../../os/rt/include/chregistry.h **** 
  37:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  38:../../../os/rt/include/chregistry.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  40:../../../os/rt/include/chregistry.h **** 
  41:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  42:../../../os/rt/include/chregistry.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  44:../../../os/rt/include/chregistry.h **** 
  45:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  46:../../../os/rt/include/chregistry.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  48:../../../os/rt/include/chregistry.h **** 
  49:../../../os/rt/include/chregistry.h **** /**
  50:../../../os/rt/include/chregistry.h ****  * @brief   ChibiOS/RT memory signature record.
  51:../../../os/rt/include/chregistry.h ****  */
  52:../../../os/rt/include/chregistry.h **** typedef struct {
  53:../../../os/rt/include/chregistry.h ****   char      identifier[4];          /**< @brief Always set to "main".       */
  54:../../../os/rt/include/chregistry.h ****   uint8_t   zero;                   /**< @brief Must be zero.               */
  55:../../../os/rt/include/chregistry.h ****   uint8_t   size;                   /**< @brief Size of this structure.     */
  56:../../../os/rt/include/chregistry.h ****   uint16_t  version;                /**< @brief Encoded ChibiOS/RT version. */
  57:../../../os/rt/include/chregistry.h ****   uint8_t   ptrsize;                /**< @brief Size of a pointer.          */
  58:../../../os/rt/include/chregistry.h ****   uint8_t   timesize;               /**< @brief Size of a @p systime_t.     */
  59:../../../os/rt/include/chregistry.h ****   uint8_t   threadsize;             /**< @brief Size of a @p thread_t.      */
  60:../../../os/rt/include/chregistry.h ****   uint8_t   off_prio;               /**< @brief Offset of @p prio field.    */
  61:../../../os/rt/include/chregistry.h ****   uint8_t   off_ctx;                /**< @brief Offset of @p ctx field.     */
  62:../../../os/rt/include/chregistry.h ****   uint8_t   off_newer;              /**< @brief Offset of @p newer field.   */
  63:../../../os/rt/include/chregistry.h ****   uint8_t   off_older;              /**< @brief Offset of @p older field.   */
  64:../../../os/rt/include/chregistry.h ****   uint8_t   off_name;               /**< @brief Offset of @p name field.    */
  65:../../../os/rt/include/chregistry.h ****   uint8_t   off_stklimit;           /**< @brief Offset of @p stklimit field.*/
  66:../../../os/rt/include/chregistry.h ****   uint8_t   off_state;              /**< @brief Offset of @p state field.   */
  67:../../../os/rt/include/chregistry.h ****   uint8_t   off_flags;              /**< @brief Offset of @p flags field.   */
  68:../../../os/rt/include/chregistry.h ****   uint8_t   off_refs;               /**< @brief Offset of @p refs field.    */
  69:../../../os/rt/include/chregistry.h ****   uint8_t   off_preempt;            /**< @brief Offset of @p preempt field. */
  70:../../../os/rt/include/chregistry.h ****   uint8_t   off_time;               /**< @brief Offset of @p time field.    */
  71:../../../os/rt/include/chregistry.h **** } chdebug_t;
  72:../../../os/rt/include/chregistry.h **** 
  73:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  74:../../../os/rt/include/chregistry.h **** /* Module macros.                                                            */
  75:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  76:../../../os/rt/include/chregistry.h **** 
  77:../../../os/rt/include/chregistry.h **** /**
  78:../../../os/rt/include/chregistry.h ****  * @brief   Removes a thread from the registry list.
  79:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  80:../../../os/rt/include/chregistry.h ****  *
  81:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to remove from the registry
  82:../../../os/rt/include/chregistry.h ****  */
  83:../../../os/rt/include/chregistry.h **** #define REG_REMOVE(tp) {                                                    \
  84:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp)->newer;                                         \
  85:../../../os/rt/include/chregistry.h ****   (tp)->newer->older = (tp)->older;                                         \
  86:../../../os/rt/include/chregistry.h **** }
  87:../../../os/rt/include/chregistry.h **** 
  88:../../../os/rt/include/chregistry.h **** /**
  89:../../../os/rt/include/chregistry.h ****  * @brief   Adds a thread to the registry list.
  90:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  91:../../../os/rt/include/chregistry.h ****  *
  92:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to add to the registry
  93:../../../os/rt/include/chregistry.h ****  */
  94:../../../os/rt/include/chregistry.h **** #define REG_INSERT(tp) {                                                    \
  95:../../../os/rt/include/chregistry.h ****   (tp)->newer = (thread_t *)&ch.rlist;                                      \
  96:../../../os/rt/include/chregistry.h ****   (tp)->older = ch.rlist.older;                                           \
  97:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp);                                                \
  98:../../../os/rt/include/chregistry.h ****   ch.rlist.older = (tp);                                                  \
  99:../../../os/rt/include/chregistry.h **** }
 100:../../../os/rt/include/chregistry.h **** 
 101:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 102:../../../os/rt/include/chregistry.h **** /* External declarations.                                                    */
 103:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 104:../../../os/rt/include/chregistry.h **** 
 105:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 106:../../../os/rt/include/chregistry.h **** extern "C" {
 107:../../../os/rt/include/chregistry.h **** #endif
 108:../../../os/rt/include/chregistry.h ****   extern ROMCONST chdebug_t ch_debug;
 109:../../../os/rt/include/chregistry.h ****   thread_t *chRegFirstThread(void);
 110:../../../os/rt/include/chregistry.h ****   thread_t *chRegNextThread(thread_t *tp);
 111:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByName(const char *name);
 112:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByPointer(thread_t *tp);
 113:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa);
 114:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 115:../../../os/rt/include/chregistry.h **** }
 116:../../../os/rt/include/chregistry.h **** #endif
 117:../../../os/rt/include/chregistry.h **** 
 118:../../../os/rt/include/chregistry.h **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 119:../../../os/rt/include/chregistry.h **** 
 120:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 121:../../../os/rt/include/chregistry.h **** /* Module inline functions.                                                  */
 122:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 123:../../../os/rt/include/chregistry.h **** 
 124:../../../os/rt/include/chregistry.h **** /**
 125:../../../os/rt/include/chregistry.h ****  * @brief   Sets the current thread name.
 126:../../../os/rt/include/chregistry.h ****  * @pre     This function only stores the pointer to the name if the option
 127:../../../os/rt/include/chregistry.h ****  *          @p CH_CFG_USE_REGISTRY is enabled else no action is performed.
 128:../../../os/rt/include/chregistry.h ****  *
 129:../../../os/rt/include/chregistry.h ****  * @param[in] name      thread name as a zero terminated string
 130:../../../os/rt/include/chregistry.h ****  *
 131:../../../os/rt/include/chregistry.h ****  * @api
 132:../../../os/rt/include/chregistry.h ****  */
 133:../../../os/rt/include/chregistry.h **** static inline void chRegSetThreadName(const char *name) {
 122               		.loc 2 133 20 view .LVU14
 123               	.LBB22:
 134:../../../os/rt/include/chregistry.h **** 
 135:../../../os/rt/include/chregistry.h **** #if CH_CFG_USE_REGISTRY == TRUE
 136:../../../os/rt/include/chregistry.h ****   ch.rlist.current->name = name;
 124               		.loc 2 136 3 view .LVU15
 125               		.loc 2 136 26 is_stmt 0 view .LVU16
 126 0016 E091 0000 		lds r30,ch+11
 127 001a F091 0000 		lds r31,ch+11+1
 128 001e 80E0      		ldi r24,lo8(.LC1)
 129 0020 90E0      		ldi r25,hi8(.LC1)
 130               	.LVL7:
 131               		.loc 2 136 26 view .LVU17
 132 0022 9487      		std Z+12,r25
 133 0024 8387      		std Z+11,r24
 134 0026 8E01      		movw r16,r28
 135 0028 0F5F      		subi r16,-1
 136 002a 1F4F      		sbci r17,-1
 137 002c 00C0      		rjmp .L7
 138               	.L8:
 139               	.LBE22:
 140               	.LBE21:
 141               	.LBB23:
  67:main.c        ****     chnWrite(&SD1, (const uint8_t *)buffer, strlen(buffer));
 142               		.loc 1 67 50 discriminator 1 view .LVU18
 143 002e 80E0      		ldi r24,lo8(.LC2)
 144 0030 90E0      		ldi r25,hi8(.LC2)
 145 0032 0E94 0000 		call serial_write
 146               	.LVL8:
 147               	.L6:
  68:main.c        ****     chThdSleepMilliseconds(1000);
 148               		.loc 1 68 5 is_stmt 1 view .LVU19
 149 0036 F801      		movw r30,r16
 150               		0:
 151 0038 0190      		ld __tmp_reg__,Z+
 152 003a 0020      		tst __tmp_reg__
 153 003c 01F4      		brne 0b
 154 003e 3197      		sbiw r30,1
 155 0040 AF01      		movw r20,r30
 156 0042 401B      		sub r20,r16
 157 0044 510B      		sbc r21,r17
 158 0046 E091 0000 		lds r30,SD1
 159 004a F091 0000 		lds r31,SD1+1
 160 004e 0280      		ldd __tmp_reg__,Z+2
 161 0050 F381      		ldd r31,Z+3
 162 0052 E02D      		mov r30,__tmp_reg__
 163 0054 B801      		movw r22,r16
 164 0056 80E0      		ldi r24,lo8(SD1)
 165 0058 90E0      		ldi r25,hi8(SD1)
 166 005a 0995      		icall
 167               	.LVL9:
  69:main.c        ****   }
 168               		.loc 1 69 5 view .LVU20
 169 005c 88E0      		ldi r24,lo8(8)
 170 005e 9DE3      		ldi r25,lo8(61)
 171 0060 0E94 0000 		call chThdSleep
 172               	.LVL10:
 173               	.L7:
 174               	.LBE23:
  61:main.c        ****     /* Read velocity speed */
 175               		.loc 1 61 3 view .LVU21
 176               	.LBB24:
  67:main.c        ****     chnWrite(&SD1, (const uint8_t *)buffer, strlen(buffer));
 177               		.loc 1 67 5 view .LVU22
  67:main.c        ****     chnWrite(&SD1, (const uint8_t *)buffer, strlen(buffer));
 178               		.loc 1 67 76 is_stmt 0 view .LVU23
 179 0064 4A99      		sbic 0x9,2
 180 0066 00C0      		rjmp .L8
  67:main.c        ****     chnWrite(&SD1, (const uint8_t *)buffer, strlen(buffer));
 181               		.loc 1 67 78 discriminator 2 view .LVU24
 182 0068 80E0      		ldi r24,lo8(.LC3)
 183 006a 90E0      		ldi r25,hi8(.LC3)
 184 006c 0E94 0000 		call serial_write
 185               	.LVL11:
 186 0070 00C0      		rjmp .L6
 187               	.LBE24:
 188               		.cfi_endproc
 189               	.LFE173:
 191               		.section	.text.initPorts,"ax",@progbits
 192               	.global	initPorts
 194               	initPorts:
 195               	.LFB176:
  81:main.c        **** 
  82:main.c        **** void initPorts() {
 196               		.loc 1 82 18 is_stmt 1 view -0
 197               		.cfi_startproc
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
  83:main.c        **** 
  84:main.c        ****   /* Initialize input ports */
  85:main.c        ****   palSetPadMode(IOPORT4, RAIN_PORT, PAL_MODE_INPUT);
 202               		.loc 1 85 3 view .LVU26
 203 0000 42E0      		ldi r20,lo8(2)
 204 0002 64E0      		ldi r22,lo8(4)
 205 0004 89E2      		ldi r24,lo8(41)
 206 0006 90E0      		ldi r25,0
 207 0008 0E94 0000 		call _pal_lld_setgroupmode
 208               	.LVL12:
  86:main.c        ****   palSetPadMode(IOPORT4, DOOR_PORT, PAL_MODE_INPUT);
 209               		.loc 1 86 3 view .LVU27
 210 000c 42E0      		ldi r20,lo8(2)
 211 000e 68E0      		ldi r22,lo8(8)
 212 0010 89E2      		ldi r24,lo8(41)
 213 0012 90E0      		ldi r25,0
 214 0014 0E94 0000 		call _pal_lld_setgroupmode
 215               	.LVL13:
  87:main.c        ****   /* Initialize output ports */
  88:main.c        ****   palSetPadMode(IOPORT4, BUZZER_PORT, PAL_MODE_OUTPUT_PUSHPULL); //open drain?
 216               		.loc 1 88 3 view .LVU28
 217 0018 46E0      		ldi r20,lo8(6)
 218 001a 60E1      		ldi r22,lo8(16)
 219 001c 89E2      		ldi r24,lo8(41)
 220 001e 90E0      		ldi r25,0
 221 0020 0E94 0000 		call _pal_lld_setgroupmode
 222               	.LVL14:
  89:main.c        ****   palSetPadMode(IOPORT2, MOTOR_PORT, PAL_MODE_OUTPUT_PUSHPULL); //open drain?
 223               		.loc 1 89 3 view .LVU29
 224 0024 46E0      		ldi r20,lo8(6)
 225 0026 62E0      		ldi r22,lo8(2)
 226 0028 83E2      		ldi r24,lo8(35)
 227 002a 90E0      		ldi r25,0
 228 002c 0C94 0000 		jmp _pal_lld_setgroupmode
 229               	.LVL15:
 230               		.cfi_endproc
 231               	.LFE176:
 233               		.section	.text.getSpeed,"ax",@progbits
 234               	.global	getSpeed
 236               	getSpeed:
 237               	.LFB177:
  90:main.c        **** 
  91:main.c        **** }
  92:main.c        **** 
  93:main.c        **** 
  94:main.c        **** int getSpeed(){
 238               		.loc 1 94 15 view -0
 239               		.cfi_startproc
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
  95:main.c        ****   // FIXME: Implement this methode
  96:main.c        ****   return 10;
 244               		.loc 1 96 3 view .LVU31
  97:main.c        **** }
 245               		.loc 1 97 1 is_stmt 0 view .LVU32
 246 0000 8AE0      		ldi r24,lo8(10)
 247 0002 90E0      		ldi r25,0
 248               	/* epilogue start */
 249 0004 0895      		ret
 250               		.cfi_endproc
 251               	.LFE177:
 253               		.section	.text.speed2DutyCycle,"ax",@progbits
 254               	.global	speed2DutyCycle
 256               	speed2DutyCycle:
 257               	.LVL16:
 258               	.LFB178:
  98:main.c        **** 
  99:main.c        **** float speed2DutyCycle(int speed){
 259               		.loc 1 99 33 is_stmt 1 view -0
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 100:main.c        ****   // FIXME: Implement this methode
 101:main.c        ****   return 0.5;
 265               		.loc 1 101 3 view .LVU34
 102:main.c        **** }
 266               		.loc 1 102 1 is_stmt 0 view .LVU35
 267 0000 60E0      		ldi r22,0
 268 0002 70E0      		ldi r23,0
 269 0004 80E0      		ldi r24,0
 270 0006 9FE3      		ldi r25,lo8(63)
 271               	/* epilogue start */
 272 0008 0895      		ret
 273               		.cfi_endproc
 274               	.LFE178:
 276               		.section	.text.motor_output,"ax",@progbits
 277               	.global	motor_output
 279               	motor_output:
 280               	.LVL17:
 281               	.LFB179:
 103:main.c        **** void motor_output(float dutyCycle){
 282               		.loc 1 103 35 is_stmt 1 view -0
 283               		.cfi_startproc
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
 104:main.c        ****   // FIXME: Implement this methode
 105:main.c        **** }
 288               		.loc 1 105 1 view .LVU37
 289               	/* epilogue start */
 290 0000 0895      		ret
 291               		.cfi_endproc
 292               	.LFE179:
 294               		.section	.text.buzzer_output,"ax",@progbits
 295               	.global	buzzer_output
 297               	buzzer_output:
 298               	.LVL18:
 299               	.LFB180:
 106:main.c        **** 
 107:main.c        **** void buzzer_output(int state){
 300               		.loc 1 107 30 view -0
 301               		.cfi_startproc
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 0 */
 305               	.L__stack_usage = 0
 108:main.c        ****   // FIXME: Implement this methode
 109:main.c        ****   //  If state is:
 110:main.c        ****   //  1: Play the song number 1 (Door Opened )
 111:main.c        ****   //  2: Play the song number 2 (Over Speed)
 112:main.c        **** }
 306               		.loc 1 112 1 view .LVU39
 307               	/* epilogue start */
 308 0000 0895      		ret
 309               		.cfi_endproc
 310               	.LFE180:
 312               		.section	.rodata.main.str1.1,"aMS",@progbits,1
 313               	.LC4:
 314 0000 2053 7461 		.string	" Starting Guardian Angel...\r\n"
 314      7274 696E 
 314      6720 4775 
 314      6172 6469 
 314      616E 2041 
 315               	.LC5:
 316 001e 4275 7320 		.string	"Bus Stopped - Door is Open\r\n"
 316      5374 6F70 
 316      7065 6420 
 316      2D20 446F 
 316      6F72 2069 
 317               		.section	.rodata
 318               	.LC0:
 319 0000 00        		.byte	0
 320 0001 0100      		.word	1
 321 0003 0000      		.word	gs(adc_cb)
 322 0005 07        		.byte	7
 323               		.section	.text.startup.main,"ax",@progbits
 324               	.global	main
 326               	main:
 327               	.LFB181:
 113:main.c        **** 
 114:main.c        **** /*
 115:main.c        ****  * Application entry point.
 116:main.c        ****  */
 117:main.c        **** int main(void) {
 328               		.loc 1 117 16 view -0
 329               		.cfi_startproc
 330 0000 CDB7      		in r28,__SP_L__
 331 0002 DEB7      		in r29,__SP_H__
 332               	.LCFI4:
 333               		.cfi_def_cfa_register 28
 334 0004 6197      		sbiw r28,17
 335               	.LCFI5:
 336               		.cfi_def_cfa_offset 19
 337 0006 0FB6      		in __tmp_reg__,__SREG__
 338 0008 F894      		cli
 339 000a DEBF      		out __SP_H__,r29
 340 000c 0FBE      		out __SREG__,__tmp_reg__
 341 000e CDBF      		out __SP_L__,r28
 342               	/* prologue: function */
 343               	/* frame size = 17 */
 344               	/* stack size = 17 */
 345               	.L__stack_usage = 17
 118:main.c        **** 
 119:main.c        ****   /*
 120:main.c        ****    * System initializations.
 121:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
 122:main.c        ****    *   and performs the board-specific initializations.
 123:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
 124:main.c        ****    *   RTOS is active.
 125:main.c        ****    */
 126:main.c        ****   halInit();
 346               		.loc 1 126 3 view .LVU41
 347 0010 0E94 0000 		call halInit
 348               	.LVL19:
 127:main.c        ****   chSysInit();
 349               		.loc 1 127 3 view .LVU42
 350 0014 0E94 0000 		call chSysInit
 351               	.LVL20:
 128:main.c        ****   initPorts();
 352               		.loc 1 128 3 view .LVU43
 353 0018 0E94 0000 		call initPorts
 354               	.LVL21:
 129:main.c        ****   /*
 130:main.c        ****    * Activates the serial driver 1 using the driver default configuration.
 131:main.c        ****    */
 132:main.c        ****   sdStart(&SD1, NULL);
 355               		.loc 1 132 3 view .LVU44
 356 001c 70E0      		ldi r23,0
 357 001e 60E0      		ldi r22,0
 358 0020 80E0      		ldi r24,lo8(SD1)
 359 0022 90E0      		ldi r25,hi8(SD1)
 360 0024 0E94 0000 		call sdStart
 361               	.LVL22:
 133:main.c        **** 
 134:main.c        ****   serial_write(" Starting Guardian Angel...\r\n");
 362               		.loc 1 134 3 view .LVU45
 363 0028 80E0      		ldi r24,lo8(.LC4)
 364 002a 90E0      		ldi r25,hi8(.LC4)
 365 002c 0E94 0000 		call serial_write
 366               	.LVL23:
 135:main.c        **** 
 136:main.c        ****   /* ADC configuration */
 137:main.c        ****   ADCConfig cfg = {ANALOG_REFERENCE_AVCC};
 367               		.loc 1 137 3 view .LVU46
 368               		.loc 1 137 13 is_stmt 0 view .LVU47
 369 0030 81E0      		ldi r24,lo8(1)
 370 0032 898B      		std Y+17,r24
 138:main.c        ****   ADCConversionGroup group = {0, NBR_CHANNELS, adc_cb, 0x7};
 371               		.loc 1 138 3 is_stmt 1 view .LVU48
 372               		.loc 1 138 22 is_stmt 0 view .LVU49
 373 0034 86E0      		ldi r24,lo8(6)
 374 0036 E0E0      		ldi r30,lo8(.LC0)
 375 0038 F0E0      		ldi r31,hi8(.LC0)
 376 003a DE01      		movw r26,r28
 377 003c 1B96      		adiw r26,11
 378               		0:
 379 003e 0190      		ld r0,Z+
 380 0040 0D92      		st X+,r0
 381 0042 8A95      		dec r24
 382 0044 01F4      		brne 0b
 139:main.c        ****   adcsample_t buffer[DEPTH*NBR_CHANNELS];
 383               		.loc 1 139 3 is_stmt 1 view .LVU50
 140:main.c        ****   adcStart(&ADCD1, &cfg);
 384               		.loc 1 140 3 view .LVU51
 385 0046 BE01      		movw r22,r28
 386 0048 6F5E      		subi r22,-17
 387 004a 7F4F      		sbci r23,-1
 388 004c 80E0      		ldi r24,lo8(ADCD1)
 389 004e 90E0      		ldi r25,hi8(ADCD1)
 390 0050 0E94 0000 		call adcStart
 391               	.LVL24:
 141:main.c        **** 
 142:main.c        ****   /*
 143:main.c        ****    * Starts the reading sensors thread.
 144:main.c        ****    */
 145:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 392               		.loc 1 145 3 view .LVU52
 393 0054 10E0      		ldi r17,0
 394 0056 00E0      		ldi r16,0
 395 0058 20E0      		ldi r18,lo8(gs(Thread1))
 396 005a 30E0      		ldi r19,hi8(gs(Thread1))
 397 005c 40E8      		ldi r20,lo8(-128)
 398 005e 61E8      		ldi r22,lo8(-127)
 399 0060 70E0      		ldi r23,0
 400 0062 80E0      		ldi r24,lo8(waThread1)
 401 0064 90E0      		ldi r25,hi8(waThread1)
 402 0066 0E94 0000 		call chThdCreateStatic
 403               	.LVL25:
 404               	.LBB25:
 146:main.c        **** 
 147:main.c        **** 
 148:main.c        ****   while(TRUE) {
 149:main.c        ****     adcStartConversion(&ADCD1, &group, buffer, DEPTH);
 150:main.c        ****     states state = bus_stopped; // state default
 151:main.c        ****     doorOpened = true;
 405               		.loc 1 151 16 is_stmt 0 view .LVU53
 406 006a 11E0      		ldi r17,lo8(1)
 407               	.L15:
 408               	.LBE25:
 148:main.c        ****     adcStartConversion(&ADCD1, &group, buffer, DEPTH);
 409               		.loc 1 148 3 is_stmt 1 view .LVU54
 410               	.LBB27:
 149:main.c        ****     states state = bus_stopped; // state default
 411               		.loc 1 149 5 view .LVU55
 412 006c 25E0      		ldi r18,lo8(5)
 413 006e 30E0      		ldi r19,0
 414 0070 AE01      		movw r20,r28
 415 0072 4F5F      		subi r20,-1
 416 0074 5F4F      		sbci r21,-1
 417 0076 BE01      		movw r22,r28
 418 0078 655F      		subi r22,-11
 419 007a 7F4F      		sbci r23,-1
 420 007c 80E0      		ldi r24,lo8(ADCD1)
 421 007e 90E0      		ldi r25,hi8(ADCD1)
 422 0080 0E94 0000 		call adcStartConversion
 423               	.LVL26:
 150:main.c        ****     doorOpened = true;
 424               		.loc 1 150 5 view .LVU56
 425               		.loc 1 151 5 view .LVU57
 426               		.loc 1 151 16 is_stmt 0 view .LVU58
 427 0084 1093 0000 		sts doorOpened,r17
 152:main.c        ****     
 153:main.c        ****       // State Machine
 154:main.c        ****       switch(state){
 428               		.loc 1 154 7 is_stmt 1 view .LVU59
 429               	.LBB26:
 155:main.c        ****         case bus_stopped:
 156:main.c        ****           if (doorOpened){
 430               		.loc 1 156 11 view .LVU60
 157:main.c        ****              serial_write("Bus Stopped - Door is Open\r\n");
 431               		.loc 1 157 14 view .LVU61
 432 0088 80E0      		ldi r24,lo8(.LC5)
 433 008a 90E0      		ldi r25,hi8(.LC5)
 434 008c 0E94 0000 		call serial_write
 435               	.LVL27:
 436 0090 00C0      		rjmp .L15
 437               	.LBE26:
 438               	.LBE27:
 439               		.cfi_endproc
 440               	.LFE181:
 442               		.section	.bss.waThread1,"aw",@nobits
 445               	waThread1:
 446 0000 0000 0000 		.zero	129
 446      0000 0000 
 446      0000 0000 
 446      0000 0000 
 446      0000 0000 
 447               		.comm	overSpeed,1,1
 448               		.comm	doorOpened,1,1
 449               		.comm	isRanning,1,1
 450               	.global	speed
 451               		.section	.bss.speed,"aw",@nobits
 454               	speed:
 455 0000 00        		.zero	1
 456               		.comm	maxSpeed,1,1
 457               		.comm	flag,1,1
 458               		.text
 459               	.Letext0:
 460               		.file 3 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 461               		.file 4 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 462               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 463               		.file 6 "../../../os/rt/include/chsystypes.h"
 464               		.file 7 "../../../os/rt/include/chschd.h"
 465               		.file 8 "../../../os/rt/include/chtime.h"
 466               		.file 9 "../../../os/common/ports/AVR/chcore.h"
 467               		.file 10 "../../../os/rt/include/chsem.h"
 468               		.file 11 "../../../os/rt/include/chmtx.h"
 469               		.file 12 "../../../os/rt/include/chsys.h"
 470               		.file 13 "../../../os/rt/include/chevents.h"
 471               		.file 14 "../../../os/common/oslib/include/chmemcore.h"
 472               		.file 15 "../../../os/hal/include/hal_queues.h"
 473               		.file 16 "../../../os/hal/include/hal_pal.h"
 474               		.file 17 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 475               		.file 18 "../../../os/hal/include/hal_adc.h"
 476               		.file 19 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.h"
 477               		.file 20 "../../../os/hal/include/hal_serial.h"
 478               		.file 21 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 479               		.file 22 "../../../os/hal/include/hal.h"
 480               		.file 23 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:13     .text.adc_cb:0000000000000000 adc_cb
                            *COM*:0000000000000001 flag
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:38     .text.serial_write:0000000000000000 serial_write
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:84     .text.Thread1:0000000000000000 Thread1
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:194    .text.initPorts:0000000000000000 initPorts
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:236    .text.getSpeed:0000000000000000 getSpeed
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:256    .text.speed2DutyCycle:0000000000000000 speed2DutyCycle
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:279    .text.motor_output:0000000000000000 motor_output
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:297    .text.buzzer_output:0000000000000000 buzzer_output
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:326    .text.startup.main:0000000000000000 main
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:445    .bss.waThread1:0000000000000000 waThread1
                            *COM*:0000000000000001 doorOpened
                            *COM*:0000000000000001 overSpeed
                            *COM*:0000000000000001 isRanning
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccjsPss7.s:454    .bss.speed:0000000000000000 speed
                            *COM*:0000000000000001 maxSpeed

UNDEFINED SYMBOLS
SD1
ch
chThdSleep
_pal_lld_setgroupmode
halInit
chSysInit
sdStart
ADCD1
adcStart
chThdCreateStatic
adcStartConversion
__do_copy_data
__do_clear_bss
