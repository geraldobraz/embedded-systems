   1               		.file	"chmempools.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chPoolAllocI.part.0,"ax",@progbits
  12               	chPoolAllocI.part.0:
  13               	.LVL0:
  14               	.LFB153:
  15               		.file 1 "../../../os/common/oslib/src/chmempools.c"
   1:../../../os/common/oslib/src/chmempools.c **** /*
   2:../../../os/common/oslib/src/chmempools.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/oslib/src/chmempools.c **** 
   4:../../../os/common/oslib/src/chmempools.c ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/src/chmempools.c **** 
   6:../../../os/common/oslib/src/chmempools.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/src/chmempools.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/src/chmempools.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/src/chmempools.c ****     (at your option) any later version.
  10:../../../os/common/oslib/src/chmempools.c **** 
  11:../../../os/common/oslib/src/chmempools.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/src/chmempools.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/src/chmempools.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/src/chmempools.c ****     GNU General Public License for more details.
  15:../../../os/common/oslib/src/chmempools.c **** 
  16:../../../os/common/oslib/src/chmempools.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/src/chmempools.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/src/chmempools.c **** */
  19:../../../os/common/oslib/src/chmempools.c **** 
  20:../../../os/common/oslib/src/chmempools.c **** /**
  21:../../../os/common/oslib/src/chmempools.c ****  * @file    chmempools.c
  22:../../../os/common/oslib/src/chmempools.c ****  * @brief   Memory Pools code.
  23:../../../os/common/oslib/src/chmempools.c ****  *
  24:../../../os/common/oslib/src/chmempools.c ****  * @addtogroup pools
  25:../../../os/common/oslib/src/chmempools.c ****  * @details Memory Pools related APIs and services.
  26:../../../os/common/oslib/src/chmempools.c ****  *          <h2>Operation mode</h2>
  27:../../../os/common/oslib/src/chmempools.c ****  *          The Memory Pools APIs allow to allocate/free fixed size objects in
  28:../../../os/common/oslib/src/chmempools.c ****  *          <b>constant time</b> and reliably without memory fragmentation
  29:../../../os/common/oslib/src/chmempools.c ****  *          problems.<br>
  30:../../../os/common/oslib/src/chmempools.c ****  *          Memory Pools do not enforce any alignment constraint on the
  31:../../../os/common/oslib/src/chmempools.c ****  *          contained object however the objects must be properly aligned
  32:../../../os/common/oslib/src/chmempools.c ****  *          to contain a pointer to void.
  33:../../../os/common/oslib/src/chmempools.c ****  * @pre     In order to use the memory pools APIs the @p CH_CFG_USE_MEMPOOLS option
  34:../../../os/common/oslib/src/chmempools.c ****  *          must be enabled in @p chconf.h.
  35:../../../os/common/oslib/src/chmempools.c ****  * @note    Compatible with RT and NIL.
  36:../../../os/common/oslib/src/chmempools.c ****  * @{
  37:../../../os/common/oslib/src/chmempools.c ****  */
  38:../../../os/common/oslib/src/chmempools.c **** 
  39:../../../os/common/oslib/src/chmempools.c **** #include "ch.h"
  40:../../../os/common/oslib/src/chmempools.c **** 
  41:../../../os/common/oslib/src/chmempools.c **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  42:../../../os/common/oslib/src/chmempools.c **** 
  43:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  44:../../../os/common/oslib/src/chmempools.c **** /* Module exported variables.                                                */
  45:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  46:../../../os/common/oslib/src/chmempools.c **** 
  47:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  48:../../../os/common/oslib/src/chmempools.c **** /* Module local types.                                                       */
  49:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  50:../../../os/common/oslib/src/chmempools.c **** 
  51:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  52:../../../os/common/oslib/src/chmempools.c **** /* Module local variables.                                                   */
  53:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  54:../../../os/common/oslib/src/chmempools.c **** 
  55:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  56:../../../os/common/oslib/src/chmempools.c **** /* Module local functions.                                                   */
  57:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  58:../../../os/common/oslib/src/chmempools.c **** 
  59:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  60:../../../os/common/oslib/src/chmempools.c **** /* Module exported functions.                                                */
  61:../../../os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  62:../../../os/common/oslib/src/chmempools.c **** 
  63:../../../os/common/oslib/src/chmempools.c **** /**
  64:../../../os/common/oslib/src/chmempools.c ****  * @brief   Initializes an empty memory pool.
  65:../../../os/common/oslib/src/chmempools.c ****  *
  66:../../../os/common/oslib/src/chmempools.c ****  * @param[out] mp       pointer to a @p memory_pool_t structure
  67:../../../os/common/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this memory pool,
  68:../../../os/common/oslib/src/chmempools.c ****  *                      the minimum accepted size is the size of a pointer to
  69:../../../os/common/oslib/src/chmempools.c ****  *                      void.
  70:../../../os/common/oslib/src/chmempools.c ****  * @param[in] align     required memory alignment
  71:../../../os/common/oslib/src/chmempools.c ****  * @param[in] provider  memory provider function for the memory pool or
  72:../../../os/common/oslib/src/chmempools.c ****  *                      @p NULL if the pool is not allowed to grow
  73:../../../os/common/oslib/src/chmempools.c ****  *                      automatically
  74:../../../os/common/oslib/src/chmempools.c ****  *
  75:../../../os/common/oslib/src/chmempools.c ****  * @init
  76:../../../os/common/oslib/src/chmempools.c ****  */
  77:../../../os/common/oslib/src/chmempools.c **** void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
  78:../../../os/common/oslib/src/chmempools.c ****                              unsigned align, memgetfunc_t provider) {
  79:../../../os/common/oslib/src/chmempools.c **** 
  80:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (size >= sizeof(void *)));
  81:../../../os/common/oslib/src/chmempools.c **** 
  82:../../../os/common/oslib/src/chmempools.c ****   mp->next = NULL;
  83:../../../os/common/oslib/src/chmempools.c ****   mp->object_size = size;
  84:../../../os/common/oslib/src/chmempools.c ****   mp->align = align;
  85:../../../os/common/oslib/src/chmempools.c ****   mp->provider = provider;
  86:../../../os/common/oslib/src/chmempools.c **** }
  87:../../../os/common/oslib/src/chmempools.c **** 
  88:../../../os/common/oslib/src/chmempools.c **** /**
  89:../../../os/common/oslib/src/chmempools.c ****  * @brief   Loads a memory pool with an array of static objects.
  90:../../../os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
  91:../../../os/common/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
  92:../../../os/common/oslib/src/chmempools.c ****  *          memory pool.
  93:../../../os/common/oslib/src/chmempools.c ****  * @pre     The array elements size must be a multiple of the alignment
  94:../../../os/common/oslib/src/chmempools.c ****  *          requirement for the pool.
  95:../../../os/common/oslib/src/chmempools.c ****  * @post    The memory pool contains the elements of the input array.
  96:../../../os/common/oslib/src/chmempools.c ****  *
  97:../../../os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
  98:../../../os/common/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
  99:../../../os/common/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 100:../../../os/common/oslib/src/chmempools.c ****  *
 101:../../../os/common/oslib/src/chmempools.c ****  * @api
 102:../../../os/common/oslib/src/chmempools.c ****  */
 103:../../../os/common/oslib/src/chmempools.c **** void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 104:../../../os/common/oslib/src/chmempools.c **** 
 105:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (n != 0U));
 106:../../../os/common/oslib/src/chmempools.c **** 
 107:../../../os/common/oslib/src/chmempools.c ****   while (n != 0U) {
 108:../../../os/common/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 109:../../../os/common/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 110:../../../os/common/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + mp->object_size);
 111:../../../os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 112:../../../os/common/oslib/src/chmempools.c ****     n--;
 113:../../../os/common/oslib/src/chmempools.c ****   }
 114:../../../os/common/oslib/src/chmempools.c **** }
 115:../../../os/common/oslib/src/chmempools.c **** 
 116:../../../os/common/oslib/src/chmempools.c **** /**
 117:../../../os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 118:../../../os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 119:../../../os/common/oslib/src/chmempools.c ****  *
 120:../../../os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 121:../../../os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 122:../../../os/common/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 123:../../../os/common/oslib/src/chmempools.c ****  *
 124:../../../os/common/oslib/src/chmempools.c ****  * @iclass
 125:../../../os/common/oslib/src/chmempools.c ****  */
 126:../../../os/common/oslib/src/chmempools.c **** void *chPoolAllocI(memory_pool_t *mp) {
  16               		.loc 1 126 7 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 126 7 is_stmt 0 view .LVU1
  23 0000 DC01      		movw r26,r24
 127:../../../os/common/oslib/src/chmempools.c ****   void *objp;
 128:../../../os/common/oslib/src/chmempools.c **** 
 129:../../../os/common/oslib/src/chmempools.c ****   chDbgCheckClassI();
 130:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
 131:../../../os/common/oslib/src/chmempools.c **** 
 132:../../../os/common/oslib/src/chmempools.c ****   objp = mp->next;
 133:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 134:../../../os/common/oslib/src/chmempools.c ****   if (objp != NULL) {
 135:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 136:../../../os/common/oslib/src/chmempools.c ****   }
 137:../../../os/common/oslib/src/chmempools.c ****   else if (mp->provider != NULL) {
  24               		.loc 1 137 8 is_stmt 1 view .LVU2
  25               		.loc 1 137 14 is_stmt 0 view .LVU3
  26 0002 1696      		adiw r26,6
  27 0004 ED91      		ld r30,X+
  28 0006 FC91      		ld r31,X
  29 0008 1797      		sbiw r26,6+1
  30               		.loc 1 137 11 view .LVU4
  31 000a 3097      		sbiw r30,0
  32 000c 01F0      		breq .L2
 138:../../../os/common/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, mp->align);
  33               		.loc 1 138 5 is_stmt 1 view .LVU5
  34               		.loc 1 138 12 is_stmt 0 view .LVU6
  35 000e 1496      		adiw r26,4
  36 0010 6D91      		ld r22,X+
  37 0012 7C91      		ld r23,X
  38 0014 1597      		sbiw r26,4+1
  39 0016 1296      		adiw r26,2
  40 0018 8D91      		ld r24,X+
  41 001a 9C91      		ld r25,X
  42               	.LVL1:
  43               		.loc 1 138 12 view .LVU7
  44 001c 0994      		ijmp
  45               	.LVL2:
  46               	.L2:
 139:../../../os/common/oslib/src/chmempools.c ****   }
 140:../../../os/common/oslib/src/chmempools.c ****   /*lint -restore*/
 141:../../../os/common/oslib/src/chmempools.c **** 
 142:../../../os/common/oslib/src/chmempools.c ****   return objp;
  47               		.loc 1 142 3 is_stmt 1 view .LVU8
 143:../../../os/common/oslib/src/chmempools.c **** }
  48               		.loc 1 143 1 is_stmt 0 view .LVU9
  49 001e 90E0      		ldi r25,0
  50 0020 80E0      		ldi r24,0
  51               	.LVL3:
  52               	/* epilogue start */
  53               		.loc 1 143 1 view .LVU10
  54 0022 0895      		ret
  55               		.cfi_endproc
  56               	.LFE153:
  58               		.section	.text.chPoolObjectInitAligned,"ax",@progbits
  59               	.global	chPoolObjectInitAligned
  61               	chPoolObjectInitAligned:
  62               	.LVL4:
  63               	.LFB141:
  78:../../../os/common/oslib/src/chmempools.c **** 
  64               		.loc 1 78 69 is_stmt 1 view -0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  78:../../../os/common/oslib/src/chmempools.c **** 
  70               		.loc 1 78 69 is_stmt 0 view .LVU12
  71 0000 FC01      		movw r30,r24
  80:../../../os/common/oslib/src/chmempools.c **** 
  72               		.loc 1 80 3 is_stmt 1 view .LVU13
  80:../../../os/common/oslib/src/chmempools.c **** 
  73               		.loc 1 80 3 view .LVU14
  82:../../../os/common/oslib/src/chmempools.c ****   mp->object_size = size;
  74               		.loc 1 82 3 view .LVU15
  82:../../../os/common/oslib/src/chmempools.c ****   mp->object_size = size;
  75               		.loc 1 82 12 is_stmt 0 view .LVU16
  76 0002 1182      		std Z+1,__zero_reg__
  77 0004 1082      		st Z,__zero_reg__
  83:../../../os/common/oslib/src/chmempools.c ****   mp->align = align;
  78               		.loc 1 83 3 is_stmt 1 view .LVU17
  83:../../../os/common/oslib/src/chmempools.c ****   mp->align = align;
  79               		.loc 1 83 19 is_stmt 0 view .LVU18
  80 0006 7383      		std Z+3,r23
  81 0008 6283      		std Z+2,r22
  84:../../../os/common/oslib/src/chmempools.c ****   mp->provider = provider;
  82               		.loc 1 84 3 is_stmt 1 view .LVU19
  84:../../../os/common/oslib/src/chmempools.c ****   mp->provider = provider;
  83               		.loc 1 84 13 is_stmt 0 view .LVU20
  84 000a 5583      		std Z+5,r21
  85 000c 4483      		std Z+4,r20
  85:../../../os/common/oslib/src/chmempools.c **** }
  86               		.loc 1 85 3 is_stmt 1 view .LVU21
  85:../../../os/common/oslib/src/chmempools.c **** }
  87               		.loc 1 85 16 is_stmt 0 view .LVU22
  88 000e 3783      		std Z+7,r19
  89 0010 2683      		std Z+6,r18
  90               	/* epilogue start */
  86:../../../os/common/oslib/src/chmempools.c **** 
  91               		.loc 1 86 1 view .LVU23
  92 0012 0895      		ret
  93               		.cfi_endproc
  94               	.LFE141:
  96               		.section	.text.chPoolLoadArray,"ax",@progbits
  97               	.global	chPoolLoadArray
  99               	chPoolLoadArray:
 100               	.LVL5:
 101               	.LFB142:
 103:../../../os/common/oslib/src/chmempools.c **** 
 102               		.loc 1 103 60 is_stmt 1 view -0
 103               		.cfi_startproc
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 103:../../../os/common/oslib/src/chmempools.c **** 
 108               		.loc 1 103 60 is_stmt 0 view .LVU25
 109 0000 DC01      		movw r26,r24
 110 0002 FB01      		movw r30,r22
 105:../../../os/common/oslib/src/chmempools.c **** 
 111               		.loc 1 105 3 is_stmt 1 view .LVU26
 105:../../../os/common/oslib/src/chmempools.c **** 
 112               		.loc 1 105 3 view .LVU27
 107:../../../os/common/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 113               		.loc 1 107 3 view .LVU28
 107:../../../os/common/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 114               		.loc 1 107 9 is_stmt 0 view .LVU29
 115 0004 4115      		cp r20,__zero_reg__
 116 0006 5105      		cpc r21,__zero_reg__
 117 0008 01F0      		breq .L5
 118               	.LVL6:
 119               	.L7:
 108:../../../os/common/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 120               		.loc 1 108 5 is_stmt 1 view .LVU30
 121               	.LBB113:
 122               	.LBI113:
 123               		.file 2 "../../../os/common/oslib/include/chmempools.h"
   1:../../../os/common/oslib/include/chmempools.h **** /*
   2:../../../os/common/oslib/include/chmempools.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/oslib/include/chmempools.h **** 
   4:../../../os/common/oslib/include/chmempools.h ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/include/chmempools.h **** 
   6:../../../os/common/oslib/include/chmempools.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/include/chmempools.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/include/chmempools.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/include/chmempools.h ****     (at your option) any later version.
  10:../../../os/common/oslib/include/chmempools.h **** 
  11:../../../os/common/oslib/include/chmempools.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/include/chmempools.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/include/chmempools.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/include/chmempools.h ****     GNU General Public License for more details.
  15:../../../os/common/oslib/include/chmempools.h **** 
  16:../../../os/common/oslib/include/chmempools.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/include/chmempools.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/include/chmempools.h **** */
  19:../../../os/common/oslib/include/chmempools.h **** 
  20:../../../os/common/oslib/include/chmempools.h **** /**
  21:../../../os/common/oslib/include/chmempools.h ****  * @file    chmempools.h
  22:../../../os/common/oslib/include/chmempools.h ****  * @brief   Memory Pools macros and structures.
  23:../../../os/common/oslib/include/chmempools.h ****  *
  24:../../../os/common/oslib/include/chmempools.h ****  * @addtogroup pools
  25:../../../os/common/oslib/include/chmempools.h ****  * @{
  26:../../../os/common/oslib/include/chmempools.h ****  */
  27:../../../os/common/oslib/include/chmempools.h **** 
  28:../../../os/common/oslib/include/chmempools.h **** #ifndef CHMEMPOOLS_H
  29:../../../os/common/oslib/include/chmempools.h **** #define CHMEMPOOLS_H
  30:../../../os/common/oslib/include/chmempools.h **** 
  31:../../../os/common/oslib/include/chmempools.h **** #if !defined(CH_CFG_USE_MEMPOOLS)
  32:../../../os/common/oslib/include/chmempools.h **** #define CH_CFG_USE_MEMPOOLS                 FALSE
  33:../../../os/common/oslib/include/chmempools.h **** #endif
  34:../../../os/common/oslib/include/chmempools.h **** 
  35:../../../os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  36:../../../os/common/oslib/include/chmempools.h **** 
  37:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  38:../../../os/common/oslib/include/chmempools.h **** /* Module constants.                                                         */
  39:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  40:../../../os/common/oslib/include/chmempools.h **** 
  41:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  42:../../../os/common/oslib/include/chmempools.h **** /* Module pre-compile time settings.                                         */
  43:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  44:../../../os/common/oslib/include/chmempools.h **** 
  45:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  46:../../../os/common/oslib/include/chmempools.h **** /* Derived constants and error checks.                                       */
  47:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  48:../../../os/common/oslib/include/chmempools.h **** 
  49:../../../os/common/oslib/include/chmempools.h **** #if CH_CFG_USE_MEMCORE == FALSE
  50:../../../os/common/oslib/include/chmempools.h **** #error "CH_CFG_USE_MEMPOOLS requires CH_CFG_USE_MEMCORE"
  51:../../../os/common/oslib/include/chmempools.h **** #endif
  52:../../../os/common/oslib/include/chmempools.h **** 
  53:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  54:../../../os/common/oslib/include/chmempools.h **** /* Module data structures and types.                                         */
  55:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  56:../../../os/common/oslib/include/chmempools.h **** 
  57:../../../os/common/oslib/include/chmempools.h **** /**
  58:../../../os/common/oslib/include/chmempools.h ****  * @brief   Memory pool free object header.
  59:../../../os/common/oslib/include/chmempools.h ****  */
  60:../../../os/common/oslib/include/chmempools.h **** struct pool_header {
  61:../../../os/common/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the next pool
  62:../../../os/common/oslib/include/chmempools.h ****                                                     header in the list.     */
  63:../../../os/common/oslib/include/chmempools.h **** };
  64:../../../os/common/oslib/include/chmempools.h **** 
  65:../../../os/common/oslib/include/chmempools.h **** /**
  66:../../../os/common/oslib/include/chmempools.h ****  * @brief   Memory pool descriptor.
  67:../../../os/common/oslib/include/chmempools.h ****  */
  68:../../../os/common/oslib/include/chmempools.h **** typedef struct {
  69:../../../os/common/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the header.  */
  70:../../../os/common/oslib/include/chmempools.h ****   size_t                object_size;    /**< @brief Memory pool objects
  71:../../../os/common/oslib/include/chmempools.h ****                                                     size.                   */
  72:../../../os/common/oslib/include/chmempools.h ****   unsigned              align;          /**< @brief Required alignment.     */
  73:../../../os/common/oslib/include/chmempools.h ****   memgetfunc_t          provider;       /**< @brief Memory blocks provider
  74:../../../os/common/oslib/include/chmempools.h ****                                                     for this pool.          */
  75:../../../os/common/oslib/include/chmempools.h **** } memory_pool_t;
  76:../../../os/common/oslib/include/chmempools.h **** 
  77:../../../os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  78:../../../os/common/oslib/include/chmempools.h **** /**
  79:../../../os/common/oslib/include/chmempools.h ****  * @brief   Guarded memory pool descriptor.
  80:../../../os/common/oslib/include/chmempools.h ****  */
  81:../../../os/common/oslib/include/chmempools.h **** typedef struct {
  82:../../../os/common/oslib/include/chmempools.h ****   semaphore_t           sem;            /**< @brief Counter semaphore guarding
  83:../../../os/common/oslib/include/chmempools.h ****                                                     the memory pool.        */
  84:../../../os/common/oslib/include/chmempools.h ****   memory_pool_t         pool;           /**< @brief The memory pool itself. */
  85:../../../os/common/oslib/include/chmempools.h **** } guarded_memory_pool_t;
  86:../../../os/common/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
  87:../../../os/common/oslib/include/chmempools.h **** 
  88:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  89:../../../os/common/oslib/include/chmempools.h **** /* Module macros.                                                            */
  90:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  91:../../../os/common/oslib/include/chmempools.h **** 
  92:../../../os/common/oslib/include/chmempools.h **** /**
  93:../../../os/common/oslib/include/chmempools.h ****  * @brief   Data part of a static memory pool initializer.
  94:../../../os/common/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
  95:../../../os/common/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
  96:../../../os/common/oslib/include/chmempools.h ****  *
  97:../../../os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
  98:../../../os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
  99:../../../os/common/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 100:../../../os/common/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool
 101:../../../os/common/oslib/include/chmempools.h ****  */
 102:../../../os/common/oslib/include/chmempools.h **** #define _MEMORYPOOL_DATA(name, size, align, provider)                       \
 103:../../../os/common/oslib/include/chmempools.h ****   {NULL, size, align, provider}
 104:../../../os/common/oslib/include/chmempools.h **** 
 105:../../../os/common/oslib/include/chmempools.h **** /**
 106:../../../os/common/oslib/include/chmempools.h ****  * @brief   Static memory pool initializer.
 107:../../../os/common/oslib/include/chmempools.h ****  * @details Statically initialized memory pools require no explicit
 108:../../../os/common/oslib/include/chmempools.h ****  *          initialization using @p chPoolInit().
 109:../../../os/common/oslib/include/chmempools.h ****  *
 110:../../../os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 111:../../../os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 112:../../../os/common/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 113:../../../os/common/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or @p NULL
 114:../../../os/common/oslib/include/chmempools.h ****  *                      if the pool is not allowed to grow automatically
 115:../../../os/common/oslib/include/chmempools.h ****  */
 116:../../../os/common/oslib/include/chmempools.h **** #define MEMORYPOOL_DECL(name, size, align, provider)                        \
 117:../../../os/common/oslib/include/chmempools.h ****   memory_pool_t name = _MEMORYPOOL_DATA(name, size, align, provider)
 118:../../../os/common/oslib/include/chmempools.h **** 
 119:../../../os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 120:../../../os/common/oslib/include/chmempools.h **** /**
 121:../../../os/common/oslib/include/chmempools.h ****  * @brief   Data part of a static guarded memory pool initializer.
 122:../../../os/common/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
 123:../../../os/common/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
 124:../../../os/common/oslib/include/chmempools.h ****  *
 125:../../../os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 126:../../../os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 127:../../../os/common/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 128:../../../os/common/oslib/include/chmempools.h ****  */
 129:../../../os/common/oslib/include/chmempools.h **** #define _GUARDEDMEMORYPOOL_DATA(name, size, align) {                        \
 130:../../../os/common/oslib/include/chmempools.h ****   _SEMAPHORE_DATA(name.sem, (cnt_t)0),                                      \
 131:../../../os/common/oslib/include/chmempools.h ****   _MEMORYPOOL_DATA(NULL, size, align, NULL)                                 \
 132:../../../os/common/oslib/include/chmempools.h **** }
 133:../../../os/common/oslib/include/chmempools.h **** 
 134:../../../os/common/oslib/include/chmempools.h **** /**
 135:../../../os/common/oslib/include/chmempools.h ****  * @brief   Static guarded memory pool initializer.
 136:../../../os/common/oslib/include/chmempools.h ****  * @details Statically initialized guarded memory pools require no explicit
 137:../../../os/common/oslib/include/chmempools.h ****  *          initialization using @p chGuardedPoolInit().
 138:../../../os/common/oslib/include/chmempools.h ****  *
 139:../../../os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the guarded memory pool variable
 140:../../../os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 141:../../../os/common/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 142:../../../os/common/oslib/include/chmempools.h ****  */
 143:../../../os/common/oslib/include/chmempools.h **** #define GUARDEDMEMORYPOOL_DECL(name, size, align)                           \
 144:../../../os/common/oslib/include/chmempools.h ****   guarded_memory_pool_t name = _GUARDEDMEMORYPOOL_DATA(name, size, align)
 145:../../../os/common/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
 146:../../../os/common/oslib/include/chmempools.h **** 
 147:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 148:../../../os/common/oslib/include/chmempools.h **** /* External declarations.                                                    */
 149:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 150:../../../os/common/oslib/include/chmempools.h **** 
 151:../../../os/common/oslib/include/chmempools.h **** #ifdef __cplusplus
 152:../../../os/common/oslib/include/chmempools.h **** extern "C" {
 153:../../../os/common/oslib/include/chmempools.h **** #endif
 154:../../../os/common/oslib/include/chmempools.h ****   void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
 155:../../../os/common/oslib/include/chmempools.h ****                                unsigned align, memgetfunc_t provider);
 156:../../../os/common/oslib/include/chmempools.h ****   void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n);
 157:../../../os/common/oslib/include/chmempools.h ****   void *chPoolAllocI(memory_pool_t *mp);
 158:../../../os/common/oslib/include/chmempools.h ****   void *chPoolAlloc(memory_pool_t *mp);
 159:../../../os/common/oslib/include/chmempools.h ****   void chPoolFreeI(memory_pool_t *mp, void *objp);
 160:../../../os/common/oslib/include/chmempools.h ****   void chPoolFree(memory_pool_t *mp, void *objp);
 161:../../../os/common/oslib/include/chmempools.h **** #if CH_CFG_USE_SEMAPHORES == TRUE
 162:../../../os/common/oslib/include/chmempools.h ****   void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
 163:../../../os/common/oslib/include/chmempools.h ****                                       size_t size,
 164:../../../os/common/oslib/include/chmempools.h ****                                       unsigned align);
 165:../../../os/common/oslib/include/chmempools.h ****   void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n);
 166:../../../os/common/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 167:../../../os/common/oslib/include/chmempools.h ****                                    sysinterval_t timeout);
 168:../../../os/common/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 169:../../../os/common/oslib/include/chmempools.h ****                                   sysinterval_t timeout);
 170:../../../os/common/oslib/include/chmempools.h ****   void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp);
 171:../../../os/common/oslib/include/chmempools.h ****   void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp);
 172:../../../os/common/oslib/include/chmempools.h **** #endif
 173:../../../os/common/oslib/include/chmempools.h **** #ifdef __cplusplus
 174:../../../os/common/oslib/include/chmempools.h **** }
 175:../../../os/common/oslib/include/chmempools.h **** #endif
 176:../../../os/common/oslib/include/chmempools.h **** 
 177:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 178:../../../os/common/oslib/include/chmempools.h **** /* Module inline functions.                                                  */
 179:../../../os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 180:../../../os/common/oslib/include/chmempools.h **** 
 181:../../../os/common/oslib/include/chmempools.h **** /**
 182:../../../os/common/oslib/include/chmempools.h ****  * @brief   Initializes an empty memory pool.
 183:../../../os/common/oslib/include/chmempools.h ****  *
 184:../../../os/common/oslib/include/chmempools.h ****  * @param[out] mp       pointer to a @p memory_pool_t structure
 185:../../../os/common/oslib/include/chmempools.h ****  * @param[in] size      the size of the objects contained in this memory pool,
 186:../../../os/common/oslib/include/chmempools.h ****  *                      the minimum accepted size is the size of a pointer to
 187:../../../os/common/oslib/include/chmempools.h ****  *                      void.
 188:../../../os/common/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or
 189:../../../os/common/oslib/include/chmempools.h ****  *                      @p NULL if the pool is not allowed to grow
 190:../../../os/common/oslib/include/chmempools.h ****  *                      automatically
 191:../../../os/common/oslib/include/chmempools.h ****  *
 192:../../../os/common/oslib/include/chmempools.h ****  * @init
 193:../../../os/common/oslib/include/chmempools.h ****  */
 194:../../../os/common/oslib/include/chmempools.h **** static inline void chPoolObjectInit(memory_pool_t *mp,
 195:../../../os/common/oslib/include/chmempools.h ****                                     size_t size,
 196:../../../os/common/oslib/include/chmempools.h ****                                     memgetfunc_t provider) {
 197:../../../os/common/oslib/include/chmempools.h **** 
 198:../../../os/common/oslib/include/chmempools.h ****   chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 199:../../../os/common/oslib/include/chmempools.h **** }
 200:../../../os/common/oslib/include/chmempools.h **** 
 201:../../../os/common/oslib/include/chmempools.h **** /**
 202:../../../os/common/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 203:../../../os/common/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 204:../../../os/common/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 205:../../../os/common/oslib/include/chmempools.h ****  *          memory pool.
 206:../../../os/common/oslib/include/chmempools.h ****  * @pre     The added object must be memory aligned to the size of
 207:../../../os/common/oslib/include/chmempools.h ****  *          @p stkalign_t type.
 208:../../../os/common/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFree() and has been
 209:../../../os/common/oslib/include/chmempools.h ****  *          added for clarity.
 210:../../../os/common/oslib/include/chmempools.h ****  *
 211:../../../os/common/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 212:../../../os/common/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 213:../../../os/common/oslib/include/chmempools.h ****  *
 214:../../../os/common/oslib/include/chmempools.h ****  * @api
 215:../../../os/common/oslib/include/chmempools.h ****  */
 216:../../../os/common/oslib/include/chmempools.h **** static inline void chPoolAdd(memory_pool_t *mp, void *objp) {
 124               		.loc 2 216 20 view .LVU31
 125               		.loc 2 216 20 is_stmt 0 view .LVU32
 126               	.LBE113:
 217:../../../os/common/oslib/include/chmempools.h **** 
 218:../../../os/common/oslib/include/chmempools.h ****   chPoolFree(mp, objp);
 127               		.loc 2 218 3 is_stmt 1 view .LVU33
 128               	.LBB129:
 129               	.LBB114:
 130               	.LBI114:
 144:../../../os/common/oslib/src/chmempools.c **** 
 145:../../../os/common/oslib/src/chmempools.c **** /**
 146:../../../os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 147:../../../os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 148:../../../os/common/oslib/src/chmempools.c ****  *
 149:../../../os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 150:../../../os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 151:../../../os/common/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 152:../../../os/common/oslib/src/chmempools.c ****  *
 153:../../../os/common/oslib/src/chmempools.c ****  * @api
 154:../../../os/common/oslib/src/chmempools.c ****  */
 155:../../../os/common/oslib/src/chmempools.c **** void *chPoolAlloc(memory_pool_t *mp) {
 156:../../../os/common/oslib/src/chmempools.c ****   void *objp;
 157:../../../os/common/oslib/src/chmempools.c **** 
 158:../../../os/common/oslib/src/chmempools.c ****   chSysLock();
 159:../../../os/common/oslib/src/chmempools.c ****   objp = chPoolAllocI(mp);
 160:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 161:../../../os/common/oslib/src/chmempools.c **** 
 162:../../../os/common/oslib/src/chmempools.c ****   return objp;
 163:../../../os/common/oslib/src/chmempools.c **** }
 164:../../../os/common/oslib/src/chmempools.c **** 
 165:../../../os/common/oslib/src/chmempools.c **** /**
 166:../../../os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 167:../../../os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 168:../../../os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 169:../../../os/common/oslib/src/chmempools.c ****  *          memory pool.
 170:../../../os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 171:../../../os/common/oslib/src/chmempools.c ****  *
 172:../../../os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 173:../../../os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 174:../../../os/common/oslib/src/chmempools.c ****  *
 175:../../../os/common/oslib/src/chmempools.c ****  * @iclass
 176:../../../os/common/oslib/src/chmempools.c ****  */
 177:../../../os/common/oslib/src/chmempools.c **** void chPoolFreeI(memory_pool_t *mp, void *objp) {
 178:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 179:../../../os/common/oslib/src/chmempools.c **** 
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheckClassI();
 181:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 182:../../../os/common/oslib/src/chmempools.c **** 
 183:../../../os/common/oslib/src/chmempools.c ****   chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 184:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 185:../../../os/common/oslib/src/chmempools.c **** 
 186:../../../os/common/oslib/src/chmempools.c ****   php->next = mp->next;
 187:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 188:../../../os/common/oslib/src/chmempools.c **** }
 189:../../../os/common/oslib/src/chmempools.c **** 
 190:../../../os/common/oslib/src/chmempools.c **** /**
 191:../../../os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 192:../../../os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 193:../../../os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 194:../../../os/common/oslib/src/chmempools.c ****  *          memory pool.
 195:../../../os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 196:../../../os/common/oslib/src/chmempools.c ****  *
 197:../../../os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 198:../../../os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 199:../../../os/common/oslib/src/chmempools.c ****  *
 200:../../../os/common/oslib/src/chmempools.c ****  * @api
 201:../../../os/common/oslib/src/chmempools.c ****  */
 202:../../../os/common/oslib/src/chmempools.c **** void chPoolFree(memory_pool_t *mp, void *objp) {
 131               		.loc 1 202 6 view .LVU34
 132               	.LBE114:
 133               	.LBE129:
 203:../../../os/common/oslib/src/chmempools.c **** 
 204:../../../os/common/oslib/src/chmempools.c ****   chSysLock();
 134               		.loc 1 204 3 view .LVU35
 135               	.LBB130:
 136               	.LBB125:
 137               	.LBB115:
 138               	.LBI115:
 139               		.file 3 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 140               		.loc 3 353 20 view .LVU36
 141               	.LBE115:
 142               	.LBE125:
 143               	.LBE130:
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 144               		.loc 3 355 3 view .LVU37
 145               	.LBB131:
 146               	.LBB126:
 147               	.LBB118:
 148               	.LBB116:
 149               	.LBI116:
 150               		.file 4 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 151               		.loc 4 435 20 view .LVU38
 152               	.LBB117:
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 153               		.loc 4 437 3 view .LVU39
 154               	/* #APP */
 155               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 156 000a F894      		cli
 157               	 ;  0 "" 2
 158               	/* #NOAPP */
 159               	.LBE117:
 160               	.LBE116:
 161               	.LBE118:
 162               	.LBE126:
 163               	.LBE131:
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 164               		.loc 3 356 34 view .LVU40
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 165               		.loc 3 357 20 view .LVU41
 205:../../../os/common/oslib/src/chmempools.c ****   chPoolFreeI(mp, objp);
 166               		.loc 1 205 3 view .LVU42
 167               	.LVL7:
 168               	.LBB132:
 169               	.LBB127:
 170               	.LBB119:
 171               	.LBI119:
 177:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 172               		.loc 1 177 6 view .LVU43
 173               	.LBB120:
 178:../../../os/common/oslib/src/chmempools.c **** 
 174               		.loc 1 178 3 view .LVU44
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 175               		.loc 1 180 21 view .LVU45
 181:../../../os/common/oslib/src/chmempools.c **** 
 176               		.loc 1 181 3 view .LVU46
 181:../../../os/common/oslib/src/chmempools.c **** 
 177               		.loc 1 181 3 view .LVU47
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 178               		.loc 1 183 3 view .LVU48
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 179               		.loc 1 183 3 view .LVU49
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 180               		.loc 1 186 3 view .LVU50
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 181               		.loc 1 186 17 is_stmt 0 view .LVU51
 182 000c 8D91      		ld r24,X+
 183 000e 9C91      		ld r25,X
 184 0010 1197      		sbiw r26,1
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 185               		.loc 1 186 13 view .LVU52
 186 0012 9183      		std Z+1,r25
 187 0014 8083      		st Z,r24
 187:../../../os/common/oslib/src/chmempools.c **** }
 188               		.loc 1 187 3 is_stmt 1 view .LVU53
 187:../../../os/common/oslib/src/chmempools.c **** }
 189               		.loc 1 187 12 is_stmt 0 view .LVU54
 190 0016 1196      		adiw r26,1
 191 0018 FC93      		st X,r31
 192 001a EE93      		st -X,r30
 193               	.LVL8:
 187:../../../os/common/oslib/src/chmempools.c **** }
 194               		.loc 1 187 12 view .LVU55
 195               	.LBE120:
 196               	.LBE119:
 197               	.LBE127:
 198               	.LBE132:
 206:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 199               		.loc 1 206 3 is_stmt 1 view .LVU56
 200               	.LBB133:
 201               	.LBB128:
 202               	.LBB121:
 203               	.LBI121:
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 204               		.loc 3 365 20 view .LVU57
 205               	.LBB122:
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 206               		.loc 3 367 22 view .LVU58
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 207               		.loc 3 368 33 view .LVU59
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 208               		.loc 3 374 3 view .LVU60
 209               		.loc 3 374 3 view .LVU61
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 210               		.loc 3 378 3 view .LVU62
 211               	.LBB123:
 212               	.LBI123:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 213               		.loc 4 445 20 view .LVU63
 214               	.LBB124:
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 215               		.loc 4 447 3 view .LVU64
 216               	/* #APP */
 217               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 218 001c 7894      		sei
 219               	 ;  0 "" 2
 220               	.LVL9:
 221               		.loc 4 447 3 is_stmt 0 view .LVU65
 222               	/* #NOAPP */
 223               	.LBE124:
 224               	.LBE123:
 225               	.LBE122:
 226               	.LBE121:
 227               	.LBE128:
 228               	.LBE133:
 110:../../../os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 229               		.loc 1 110 5 is_stmt 1 view .LVU66
 110:../../../os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 230               		.loc 1 110 7 is_stmt 0 view .LVU67
 231 001e 1296      		adiw r26,2
 232 0020 8D91      		ld r24,X+
 233 0022 9C91      		ld r25,X
 234 0024 1397      		sbiw r26,2+1
 235 0026 E80F      		add r30,r24
 236 0028 F91F      		adc r31,r25
 237               	.LVL10:
 112:../../../os/common/oslib/src/chmempools.c ****   }
 238               		.loc 1 112 5 is_stmt 1 view .LVU68
 112:../../../os/common/oslib/src/chmempools.c ****   }
 239               		.loc 1 112 6 is_stmt 0 view .LVU69
 240 002a 4150      		subi r20,1
 241 002c 5109      		sbc r21,__zero_reg__
 242               	.LVL11:
 107:../../../os/common/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 243               		.loc 1 107 9 view .LVU70
 244 002e 01F4      		brne .L7
 245               	.LVL12:
 246               	.L5:
 247               	/* epilogue start */
 114:../../../os/common/oslib/src/chmempools.c **** 
 248               		.loc 1 114 1 view .LVU71
 249 0030 0895      		ret
 250               		.cfi_endproc
 251               	.LFE142:
 253               		.section	.text.chPoolAllocI,"ax",@progbits
 254               	.global	chPoolAllocI
 256               	chPoolAllocI:
 257               	.LVL13:
 258               	.LFB143:
 126:../../../os/common/oslib/src/chmempools.c ****   void *objp;
 259               		.loc 1 126 39 is_stmt 1 view -0
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 127:../../../os/common/oslib/src/chmempools.c **** 
 265               		.loc 1 127 3 view .LVU73
 129:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
 266               		.loc 1 129 21 view .LVU74
 130:../../../os/common/oslib/src/chmempools.c **** 
 267               		.loc 1 130 3 view .LVU75
 130:../../../os/common/oslib/src/chmempools.c **** 
 268               		.loc 1 130 3 view .LVU76
 132:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 269               		.loc 1 132 3 view .LVU77
 132:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 270               		.loc 1 132 8 is_stmt 0 view .LVU78
 271 0000 DC01      		movw r26,r24
 272 0002 ED91      		ld r30,X+
 273 0004 FC91      		ld r31,X
 274 0006 1197      		sbiw r26,1
 275               	.LVL14:
 134:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 276               		.loc 1 134 3 is_stmt 1 view .LVU79
 134:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 277               		.loc 1 134 6 is_stmt 0 view .LVU80
 278 0008 3097      		sbiw r30,0
 279 000a 01F0      		breq .L17
 135:../../../os/common/oslib/src/chmempools.c ****   }
 280               		.loc 1 135 5 is_stmt 1 view .LVU81
 135:../../../os/common/oslib/src/chmempools.c ****   }
 281               		.loc 1 135 14 is_stmt 0 view .LVU82
 282 000c 2081      		ld r18,Z
 283 000e 3181      		ldd r19,Z+1
 284 0010 2D93      		st X+,r18
 285 0012 3C93      		st X,r19
 143:../../../os/common/oslib/src/chmempools.c **** 
 286               		.loc 1 143 1 view .LVU83
 287 0014 CF01      		movw r24,r30
 288               	.LVL15:
 289               	/* epilogue start */
 143:../../../os/common/oslib/src/chmempools.c **** 
 290               		.loc 1 143 1 view .LVU84
 291 0016 0895      		ret
 292               	.LVL16:
 293               	.L17:
 143:../../../os/common/oslib/src/chmempools.c **** 
 294               		.loc 1 143 1 view .LVU85
 295 0018 0C94 0000 		jmp chPoolAllocI.part.0
 296               	.LVL17:
 143:../../../os/common/oslib/src/chmempools.c **** 
 297               		.loc 1 143 1 view .LVU86
 298               		.cfi_endproc
 299               	.LFE143:
 301               		.section	.text.chPoolAlloc,"ax",@progbits
 302               	.global	chPoolAlloc
 304               	chPoolAlloc:
 305               	.LVL18:
 306               	.LFB144:
 155:../../../os/common/oslib/src/chmempools.c ****   void *objp;
 307               		.loc 1 155 38 is_stmt 1 view -0
 308               		.cfi_startproc
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
 156:../../../os/common/oslib/src/chmempools.c **** 
 313               		.loc 1 156 3 view .LVU88
 158:../../../os/common/oslib/src/chmempools.c ****   objp = chPoolAllocI(mp);
 314               		.loc 1 158 3 view .LVU89
 315               	.LBB134:
 316               	.LBI134:
 353:../../../os/rt/include/chsys.h **** 
 317               		.loc 3 353 20 view .LVU90
 318               	.LBE134:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 319               		.loc 3 355 3 view .LVU91
 320               	.LBB137:
 321               	.LBB135:
 322               	.LBI135:
 435:../../../os/common/ports/AVR/chcore.h **** 
 323               		.loc 4 435 20 view .LVU92
 324               	.LBB136:
 437:../../../os/common/ports/AVR/chcore.h **** }
 325               		.loc 4 437 3 view .LVU93
 326               	/* #APP */
 327               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 328 0000 F894      		cli
 329               	 ;  0 "" 2
 330               	/* #NOAPP */
 331               	.LBE136:
 332               	.LBE135:
 333               	.LBE137:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 334               		.loc 3 356 34 view .LVU94
 357:../../../os/rt/include/chsys.h **** }
 335               		.loc 3 357 20 view .LVU95
 159:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 336               		.loc 1 159 3 view .LVU96
 337               	.LVL19:
 338               	.LBB138:
 339               	.LBI138:
 126:../../../os/common/oslib/src/chmempools.c ****   void *objp;
 340               		.loc 1 126 7 view .LVU97
 341               	.LBB139:
 127:../../../os/common/oslib/src/chmempools.c **** 
 342               		.loc 1 127 3 view .LVU98
 129:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
 343               		.loc 1 129 21 view .LVU99
 130:../../../os/common/oslib/src/chmempools.c **** 
 344               		.loc 1 130 3 view .LVU100
 130:../../../os/common/oslib/src/chmempools.c **** 
 345               		.loc 1 130 3 view .LVU101
 132:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 346               		.loc 1 132 3 view .LVU102
 132:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 347               		.loc 1 132 8 is_stmt 0 view .LVU103
 348 0002 DC01      		movw r26,r24
 349 0004 ED91      		ld r30,X+
 350 0006 FC91      		ld r31,X
 351 0008 1197      		sbiw r26,1
 352               	.LVL20:
 134:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 353               		.loc 1 134 3 is_stmt 1 view .LVU104
 134:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 354               		.loc 1 134 6 is_stmt 0 view .LVU105
 355 000a 3097      		sbiw r30,0
 356 000c 01F0      		breq .L19
 135:../../../os/common/oslib/src/chmempools.c ****   }
 357               		.loc 1 135 5 is_stmt 1 view .LVU106
 135:../../../os/common/oslib/src/chmempools.c ****   }
 358               		.loc 1 135 14 is_stmt 0 view .LVU107
 359 000e 2081      		ld r18,Z
 360 0010 3181      		ldd r19,Z+1
 361 0012 2D93      		st X+,r18
 362 0014 3C93      		st X,r19
 142:../../../os/common/oslib/src/chmempools.c **** }
 363               		.loc 1 142 3 is_stmt 1 view .LVU108
 364               	.LVL21:
 142:../../../os/common/oslib/src/chmempools.c **** }
 365               		.loc 1 142 3 is_stmt 0 view .LVU109
 366               	.LBE139:
 367               	.LBE138:
 160:../../../os/common/oslib/src/chmempools.c **** 
 368               		.loc 1 160 3 is_stmt 1 view .LVU110
 369               	.LBB141:
 370               	.LBI141:
 365:../../../os/rt/include/chsys.h **** 
 371               		.loc 3 365 20 view .LVU111
 372               	.LBB142:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 373               		.loc 3 367 22 view .LVU112
 368:../../../os/rt/include/chsys.h **** 
 374               		.loc 3 368 33 view .LVU113
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 375               		.loc 3 374 3 view .LVU114
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376               		.loc 3 374 3 view .LVU115
 377               		.loc 3 378 3 view .LVU116
 378               	.LBB143:
 379               	.LBI143:
 445:../../../os/common/ports/AVR/chcore.h **** 
 380               		.loc 4 445 20 view .LVU117
 381               	.LBB144:
 382               		.loc 4 447 3 view .LVU118
 383               	/* #APP */
 384               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 385 0016 7894      		sei
 386               	 ;  0 "" 2
 387               	/* #NOAPP */
 388               	.LBE144:
 389               	.LBE143:
 390               	.LBE142:
 391               	.LBE141:
 162:../../../os/common/oslib/src/chmempools.c **** }
 392               		.loc 1 162 3 view .LVU119
 163:../../../os/common/oslib/src/chmempools.c **** 
 393               		.loc 1 163 1 is_stmt 0 view .LVU120
 394 0018 CF01      		movw r24,r30
 395               	.LVL22:
 396               	/* epilogue start */
 163:../../../os/common/oslib/src/chmempools.c **** 
 397               		.loc 1 163 1 view .LVU121
 398 001a 0895      		ret
 399               	.LVL23:
 400               	.L19:
 401               	.LBB148:
 402               	.LBB140:
 163:../../../os/common/oslib/src/chmempools.c **** 
 403               		.loc 1 163 1 view .LVU122
 404 001c 0E94 0000 		call chPoolAllocI.part.0
 405               	.LVL24:
 163:../../../os/common/oslib/src/chmempools.c **** 
 406               		.loc 1 163 1 view .LVU123
 407 0020 FC01      		movw r30,r24
 408               	.LVL25:
 142:../../../os/common/oslib/src/chmempools.c **** }
 409               		.loc 1 142 3 is_stmt 1 view .LVU124
 142:../../../os/common/oslib/src/chmempools.c **** }
 410               		.loc 1 142 3 is_stmt 0 view .LVU125
 411               	.LBE140:
 412               	.LBE148:
 160:../../../os/common/oslib/src/chmempools.c **** 
 413               		.loc 1 160 3 is_stmt 1 view .LVU126
 414               	.LBB149:
 365:../../../os/rt/include/chsys.h **** 
 415               		.loc 3 365 20 view .LVU127
 416               	.LBB147:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 417               		.loc 3 367 22 view .LVU128
 368:../../../os/rt/include/chsys.h **** 
 418               		.loc 3 368 33 view .LVU129
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 419               		.loc 3 374 3 view .LVU130
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 420               		.loc 3 374 3 view .LVU131
 421               		.loc 3 378 3 view .LVU132
 422               	.LBB146:
 445:../../../os/common/ports/AVR/chcore.h **** 
 423               		.loc 4 445 20 view .LVU133
 424               	.LBB145:
 425               		.loc 4 447 3 view .LVU134
 426               	/* #APP */
 427               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 428 0022 7894      		sei
 429               	 ;  0 "" 2
 430               	/* #NOAPP */
 431               	.LBE145:
 432               	.LBE146:
 433               	.LBE147:
 434               	.LBE149:
 162:../../../os/common/oslib/src/chmempools.c **** }
 435               		.loc 1 162 3 view .LVU135
 163:../../../os/common/oslib/src/chmempools.c **** 
 436               		.loc 1 163 1 is_stmt 0 view .LVU136
 437 0024 CF01      		movw r24,r30
 438               	/* epilogue start */
 163:../../../os/common/oslib/src/chmempools.c **** 
 439               		.loc 1 163 1 view .LVU137
 440 0026 0895      		ret
 441               		.cfi_endproc
 442               	.LFE144:
 444               		.section	.text.chPoolFreeI,"ax",@progbits
 445               	.global	chPoolFreeI
 447               	chPoolFreeI:
 448               	.LVL26:
 449               	.LFB145:
 177:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 450               		.loc 1 177 49 is_stmt 1 view -0
 451               		.cfi_startproc
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 178:../../../os/common/oslib/src/chmempools.c **** 
 456               		.loc 1 178 3 view .LVU139
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 457               		.loc 1 180 21 view .LVU140
 181:../../../os/common/oslib/src/chmempools.c **** 
 458               		.loc 1 181 3 view .LVU141
 181:../../../os/common/oslib/src/chmempools.c **** 
 459               		.loc 1 181 3 view .LVU142
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 460               		.loc 1 183 3 view .LVU143
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 461               		.loc 1 183 3 view .LVU144
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 462               		.loc 1 186 3 view .LVU145
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 463               		.loc 1 186 13 is_stmt 0 view .LVU146
 464 0000 FC01      		movw r30,r24
 465 0002 2081      		ld r18,Z
 466 0004 3181      		ldd r19,Z+1
 467 0006 FB01      		movw r30,r22
 468 0008 3183      		std Z+1,r19
 469 000a 2083      		st Z,r18
 187:../../../os/common/oslib/src/chmempools.c **** }
 470               		.loc 1 187 3 is_stmt 1 view .LVU147
 187:../../../os/common/oslib/src/chmempools.c **** }
 471               		.loc 1 187 12 is_stmt 0 view .LVU148
 472 000c FC01      		movw r30,r24
 473 000e 7183      		std Z+1,r23
 474 0010 6083      		st Z,r22
 475               	/* epilogue start */
 188:../../../os/common/oslib/src/chmempools.c **** 
 476               		.loc 1 188 1 view .LVU149
 477 0012 0895      		ret
 478               		.cfi_endproc
 479               	.LFE145:
 481               		.section	.text.chPoolFree,"ax",@progbits
 482               	.global	chPoolFree
 484               	chPoolFree:
 485               	.LVL27:
 486               	.LFB146:
 202:../../../os/common/oslib/src/chmempools.c **** 
 487               		.loc 1 202 48 is_stmt 1 view -0
 488               		.cfi_startproc
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 0 */
 492               	.L__stack_usage = 0
 204:../../../os/common/oslib/src/chmempools.c ****   chPoolFreeI(mp, objp);
 493               		.loc 1 204 3 view .LVU151
 494               	.LBB150:
 495               	.LBI150:
 353:../../../os/rt/include/chsys.h **** 
 496               		.loc 3 353 20 view .LVU152
 497               	.LBE150:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 498               		.loc 3 355 3 view .LVU153
 499               	.LBB153:
 500               	.LBB151:
 501               	.LBI151:
 435:../../../os/common/ports/AVR/chcore.h **** 
 502               		.loc 4 435 20 view .LVU154
 503               	.LBB152:
 437:../../../os/common/ports/AVR/chcore.h **** }
 504               		.loc 4 437 3 view .LVU155
 505               	/* #APP */
 506               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 507 0000 F894      		cli
 508               	 ;  0 "" 2
 509               	/* #NOAPP */
 510               	.LBE152:
 511               	.LBE151:
 512               	.LBE153:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 513               		.loc 3 356 34 view .LVU156
 357:../../../os/rt/include/chsys.h **** }
 514               		.loc 3 357 20 view .LVU157
 205:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 515               		.loc 1 205 3 view .LVU158
 516               	.LVL28:
 517               	.LBB154:
 518               	.LBI154:
 177:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 519               		.loc 1 177 6 view .LVU159
 520               	.LBB155:
 178:../../../os/common/oslib/src/chmempools.c **** 
 521               		.loc 1 178 3 view .LVU160
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 522               		.loc 1 180 21 view .LVU161
 181:../../../os/common/oslib/src/chmempools.c **** 
 523               		.loc 1 181 3 view .LVU162
 181:../../../os/common/oslib/src/chmempools.c **** 
 524               		.loc 1 181 3 view .LVU163
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 525               		.loc 1 183 3 view .LVU164
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 526               		.loc 1 183 3 view .LVU165
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 527               		.loc 1 186 3 view .LVU166
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 528               		.loc 1 186 13 is_stmt 0 view .LVU167
 529 0002 FC01      		movw r30,r24
 530 0004 2081      		ld r18,Z
 531 0006 3181      		ldd r19,Z+1
 532 0008 FB01      		movw r30,r22
 533 000a 3183      		std Z+1,r19
 534 000c 2083      		st Z,r18
 187:../../../os/common/oslib/src/chmempools.c **** }
 535               		.loc 1 187 3 is_stmt 1 view .LVU168
 187:../../../os/common/oslib/src/chmempools.c **** }
 536               		.loc 1 187 12 is_stmt 0 view .LVU169
 537 000e FC01      		movw r30,r24
 538 0010 7183      		std Z+1,r23
 539 0012 6083      		st Z,r22
 540               	.LVL29:
 187:../../../os/common/oslib/src/chmempools.c **** }
 541               		.loc 1 187 12 view .LVU170
 542               	.LBE155:
 543               	.LBE154:
 544               		.loc 1 206 3 is_stmt 1 view .LVU171
 545               	.LBB156:
 546               	.LBI156:
 365:../../../os/rt/include/chsys.h **** 
 547               		.loc 3 365 20 view .LVU172
 548               	.LBB157:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 549               		.loc 3 367 22 view .LVU173
 368:../../../os/rt/include/chsys.h **** 
 550               		.loc 3 368 33 view .LVU174
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 551               		.loc 3 374 3 view .LVU175
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 552               		.loc 3 374 3 view .LVU176
 553               		.loc 3 378 3 view .LVU177
 554               	.LBB158:
 555               	.LBI158:
 445:../../../os/common/ports/AVR/chcore.h **** 
 556               		.loc 4 445 20 view .LVU178
 557               	.LBB159:
 558               		.loc 4 447 3 view .LVU179
 559               	/* #APP */
 560               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 561 0014 7894      		sei
 562               	 ;  0 "" 2
 563               	/* #NOAPP */
 564               	/* epilogue start */
 565               	.LBE159:
 566               	.LBE158:
 567               	.LBE157:
 568               	.LBE156:
 207:../../../os/common/oslib/src/chmempools.c **** }
 569               		.loc 1 207 1 is_stmt 0 view .LVU180
 570 0016 0895      		ret
 571               		.cfi_endproc
 572               	.LFE146:
 574               		.section	.text.chGuardedPoolObjectInitAligned,"ax",@progbits
 575               	.global	chGuardedPoolObjectInitAligned
 577               	chGuardedPoolObjectInitAligned:
 578               	.LVL30:
 579               	.LFB147:
 208:../../../os/common/oslib/src/chmempools.c **** 
 209:../../../os/common/oslib/src/chmempools.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 210:../../../os/common/oslib/src/chmempools.c **** /**
 211:../../../os/common/oslib/src/chmempools.c ****  * @brief   Initializes an empty guarded memory pool.
 212:../../../os/common/oslib/src/chmempools.c ****  *
 213:../../../os/common/oslib/src/chmempools.c ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 214:../../../os/common/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this guarded
 215:../../../os/common/oslib/src/chmempools.c ****  *                      memory pool, the minimum accepted size is the size
 216:../../../os/common/oslib/src/chmempools.c ****  *                      of a pointer to void.
 217:../../../os/common/oslib/src/chmempools.c ****  * @param[in] align     required memory alignment
 218:../../../os/common/oslib/src/chmempools.c ****  *
 219:../../../os/common/oslib/src/chmempools.c ****  * @init
 220:../../../os/common/oslib/src/chmempools.c ****  */
 221:../../../os/common/oslib/src/chmempools.c **** void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
 222:../../../os/common/oslib/src/chmempools.c ****                                     size_t size,
 223:../../../os/common/oslib/src/chmempools.c ****                                     unsigned align) {
 580               		.loc 1 223 53 is_stmt 1 view -0
 581               		.cfi_startproc
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 224:../../../os/common/oslib/src/chmempools.c **** 
 225:../../../os/common/oslib/src/chmempools.c ****   chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 586               		.loc 1 225 3 view .LVU182
 587               	.LBB160:
 588               	.LBI160:
  77:../../../os/common/oslib/src/chmempools.c ****                              unsigned align, memgetfunc_t provider) {
 589               		.loc 1 77 6 view .LVU183
 590               	.LBB161:
  80:../../../os/common/oslib/src/chmempools.c **** 
 591               		.loc 1 80 3 view .LVU184
  80:../../../os/common/oslib/src/chmempools.c **** 
 592               		.loc 1 80 3 view .LVU185
  82:../../../os/common/oslib/src/chmempools.c ****   mp->object_size = size;
 593               		.loc 1 82 3 view .LVU186
  82:../../../os/common/oslib/src/chmempools.c ****   mp->object_size = size;
 594               		.loc 1 82 12 is_stmt 0 view .LVU187
 595 0000 FC01      		movw r30,r24
 596 0002 1682      		std Z+6,__zero_reg__
 597 0004 1582      		std Z+5,__zero_reg__
  83:../../../os/common/oslib/src/chmempools.c ****   mp->align = align;
 598               		.loc 1 83 3 is_stmt 1 view .LVU188
  83:../../../os/common/oslib/src/chmempools.c ****   mp->align = align;
 599               		.loc 1 83 19 is_stmt 0 view .LVU189
 600 0006 7087      		std Z+8,r23
 601 0008 6783      		std Z+7,r22
  84:../../../os/common/oslib/src/chmempools.c ****   mp->provider = provider;
 602               		.loc 1 84 3 is_stmt 1 view .LVU190
  84:../../../os/common/oslib/src/chmempools.c ****   mp->provider = provider;
 603               		.loc 1 84 13 is_stmt 0 view .LVU191
 604 000a 5287      		std Z+10,r21
 605 000c 4187      		std Z+9,r20
  85:../../../os/common/oslib/src/chmempools.c **** }
 606               		.loc 1 85 3 is_stmt 1 view .LVU192
  85:../../../os/common/oslib/src/chmempools.c **** }
 607               		.loc 1 85 16 is_stmt 0 view .LVU193
 608 000e 1486      		std Z+12,__zero_reg__
 609 0010 1386      		std Z+11,__zero_reg__
 610               	.LVL31:
  85:../../../os/common/oslib/src/chmempools.c **** }
 611               		.loc 1 85 16 view .LVU194
 612               	.LBE161:
 613               	.LBE160:
 226:../../../os/common/oslib/src/chmempools.c ****   chSemObjectInit(&gmp->sem, (cnt_t)0);
 614               		.loc 1 226 3 is_stmt 1 view .LVU195
 615 0012 60E0      		ldi r22,0
 616               	.LVL32:
 617               		.loc 1 226 3 is_stmt 0 view .LVU196
 618 0014 0C94 0000 		jmp chSemObjectInit
 619               	.LVL33:
 620               		.loc 1 226 3 view .LVU197
 621               		.cfi_endproc
 622               	.LFE147:
 624               		.section	.text.chGuardedPoolLoadArray,"ax",@progbits
 625               	.global	chGuardedPoolLoadArray
 627               	chGuardedPoolLoadArray:
 628               	.LVL34:
 629               	.LFB148:
 227:../../../os/common/oslib/src/chmempools.c **** }
 228:../../../os/common/oslib/src/chmempools.c **** 
 229:../../../os/common/oslib/src/chmempools.c **** /**
 230:../../../os/common/oslib/src/chmempools.c ****  * @brief   Loads a guarded memory pool with an array of static objects.
 231:../../../os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 232:../../../os/common/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
 233:../../../os/common/oslib/src/chmempools.c ****  *          guarded memory pool.
 234:../../../os/common/oslib/src/chmempools.c ****  * @post    The guarded memory pool contains the elements of the input array.
 235:../../../os/common/oslib/src/chmempools.c ****  *
 236:../../../os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 237:../../../os/common/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
 238:../../../os/common/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 239:../../../os/common/oslib/src/chmempools.c ****  *
 240:../../../os/common/oslib/src/chmempools.c ****  * @api
 241:../../../os/common/oslib/src/chmempools.c ****  */
 242:../../../os/common/oslib/src/chmempools.c **** void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 630               		.loc 1 242 76 is_stmt 1 view -0
 631               		.cfi_startproc
 632               		.loc 1 242 76 is_stmt 0 view .LVU199
 633 0000 EF92      		push r14
 634               	.LCFI0:
 635               		.cfi_def_cfa_offset 3
 636               		.cfi_offset 14, -2
 637 0002 FF92      		push r15
 638               	.LCFI1:
 639               		.cfi_def_cfa_offset 4
 640               		.cfi_offset 15, -3
 641 0004 0F93      		push r16
 642               	.LCFI2:
 643               		.cfi_def_cfa_offset 5
 644               		.cfi_offset 16, -4
 645 0006 1F93      		push r17
 646               	.LCFI3:
 647               		.cfi_def_cfa_offset 6
 648               		.cfi_offset 17, -5
 649 0008 CF93      		push r28
 650               	.LCFI4:
 651               		.cfi_def_cfa_offset 7
 652               		.cfi_offset 28, -6
 653 000a DF93      		push r29
 654               	.LCFI5:
 655               		.cfi_def_cfa_offset 8
 656               		.cfi_offset 29, -7
 657               	/* prologue: function */
 658               	/* frame size = 0 */
 659               	/* stack size = 6 */
 660               	.L__stack_usage = 6
 661 000c 8C01      		movw r16,r24
 662 000e EB01      		movw r28,r22
 663 0010 7A01      		movw r14,r20
 243:../../../os/common/oslib/src/chmempools.c **** 
 244:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((gmp != NULL) && (n != 0U));
 664               		.loc 1 244 3 is_stmt 1 view .LVU200
 665               		.loc 1 244 3 view .LVU201
 245:../../../os/common/oslib/src/chmempools.c **** 
 246:../../../os/common/oslib/src/chmempools.c ****   while (n != 0U) {
 666               		.loc 1 246 3 view .LVU202
 667               		.loc 1 246 9 is_stmt 0 view .LVU203
 668 0012 452B      		or r20,r21
 669 0014 01F0      		breq .L24
 670               	.LVL35:
 671               	.L26:
 247:../../../os/common/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 672               		.loc 1 247 5 is_stmt 1 view .LVU204
 673               	.LBB162:
 674               	.LBI162:
 219:../../../os/common/oslib/include/chmempools.h **** }
 220:../../../os/common/oslib/include/chmempools.h **** 
 221:../../../os/common/oslib/include/chmempools.h **** /**
 222:../../../os/common/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 223:../../../os/common/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 224:../../../os/common/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 225:../../../os/common/oslib/include/chmempools.h ****  *          memory pool.
 226:../../../os/common/oslib/include/chmempools.h ****  * @pre     The added object must be memory aligned to the size of
 227:../../../os/common/oslib/include/chmempools.h ****  *          @p stkalign_t type.
 228:../../../os/common/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFreeI() and has been
 229:../../../os/common/oslib/include/chmempools.h ****  *          added for clarity.
 230:../../../os/common/oslib/include/chmempools.h ****  *
 231:../../../os/common/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 232:../../../os/common/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 233:../../../os/common/oslib/include/chmempools.h ****  *
 234:../../../os/common/oslib/include/chmempools.h ****  * @iclass
 235:../../../os/common/oslib/include/chmempools.h ****  */
 236:../../../os/common/oslib/include/chmempools.h **** static inline void chPoolAddI(memory_pool_t *mp, void *objp) {
 237:../../../os/common/oslib/include/chmempools.h **** 
 238:../../../os/common/oslib/include/chmempools.h ****   chPoolFreeI(mp, objp);
 239:../../../os/common/oslib/include/chmempools.h **** }
 240:../../../os/common/oslib/include/chmempools.h **** 
 241:../../../os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 242:../../../os/common/oslib/include/chmempools.h **** /**
 243:../../../os/common/oslib/include/chmempools.h ****  * @brief   Initializes an empty guarded memory pool.
 244:../../../os/common/oslib/include/chmempools.h ****  *
 245:../../../os/common/oslib/include/chmempools.h ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 246:../../../os/common/oslib/include/chmempools.h ****  * @param[in] size      the size of the objects contained in this guarded
 247:../../../os/common/oslib/include/chmempools.h ****  *                      memory pool, the minimum accepted size is the size
 248:../../../os/common/oslib/include/chmempools.h ****  *                      of a pointer to void.
 249:../../../os/common/oslib/include/chmempools.h ****  *
 250:../../../os/common/oslib/include/chmempools.h ****  * @init
 251:../../../os/common/oslib/include/chmempools.h ****  */
 252:../../../os/common/oslib/include/chmempools.h **** static inline void chGuardedPoolObjectInit(guarded_memory_pool_t *gmp,
 253:../../../os/common/oslib/include/chmempools.h ****                                            size_t size) {
 254:../../../os/common/oslib/include/chmempools.h **** 
 255:../../../os/common/oslib/include/chmempools.h ****   chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 256:../../../os/common/oslib/include/chmempools.h **** }
 257:../../../os/common/oslib/include/chmempools.h **** 
 258:../../../os/common/oslib/include/chmempools.h **** /**
 259:../../../os/common/oslib/include/chmempools.h ****  * @brief   Adds an object to a guarded memory pool.
 260:../../../os/common/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 261:../../../os/common/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 262:../../../os/common/oslib/include/chmempools.h ****  *          guarded memory pool.
 263:../../../os/common/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 264:../../../os/common/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chGuardedPoolFree() and
 265:../../../os/common/oslib/include/chmempools.h ****  *          has been added for clarity.
 266:../../../os/common/oslib/include/chmempools.h ****  *
 267:../../../os/common/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 268:../../../os/common/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 269:../../../os/common/oslib/include/chmempools.h ****  *
 270:../../../os/common/oslib/include/chmempools.h ****  * @api
 271:../../../os/common/oslib/include/chmempools.h ****  */
 272:../../../os/common/oslib/include/chmempools.h **** static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {
 675               		.loc 2 272 20 view .LVU205
 676               	.LBE162:
 273:../../../os/common/oslib/include/chmempools.h **** 
 274:../../../os/common/oslib/include/chmempools.h ****   chGuardedPoolFree(gmp, objp);
 677               		.loc 2 274 3 view .LVU206
 678               	.LBB181:
 679               	.LBB163:
 680               	.LBI163:
 248:../../../os/common/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 249:../../../os/common/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 250:../../../os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 251:../../../os/common/oslib/src/chmempools.c ****     n--;
 252:../../../os/common/oslib/src/chmempools.c ****   }
 253:../../../os/common/oslib/src/chmempools.c **** }
 254:../../../os/common/oslib/src/chmempools.c **** 
 255:../../../os/common/oslib/src/chmempools.c **** /**
 256:../../../os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 257:../../../os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 258:../../../os/common/oslib/src/chmempools.c ****  *
 259:../../../os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 260:../../../os/common/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 261:../../../os/common/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 262:../../../os/common/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 263:../../../os/common/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 264:../../../os/common/oslib/src/chmempools.c ****  *                      .
 265:../../../os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 266:../../../os/common/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 267:../../../os/common/oslib/src/chmempools.c ****  *
 268:../../../os/common/oslib/src/chmempools.c ****  * @sclass
 269:../../../os/common/oslib/src/chmempools.c ****  */
 270:../../../os/common/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 271:../../../os/common/oslib/src/chmempools.c ****                                  sysinterval_t timeout) {
 272:../../../os/common/oslib/src/chmempools.c ****   msg_t msg;
 273:../../../os/common/oslib/src/chmempools.c **** 
 274:../../../os/common/oslib/src/chmempools.c ****   msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 275:../../../os/common/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 276:../../../os/common/oslib/src/chmempools.c ****     return NULL;
 277:../../../os/common/oslib/src/chmempools.c ****   }
 278:../../../os/common/oslib/src/chmempools.c **** 
 279:../../../os/common/oslib/src/chmempools.c ****   return chPoolAllocI(&gmp->pool);
 280:../../../os/common/oslib/src/chmempools.c **** }
 281:../../../os/common/oslib/src/chmempools.c **** 
 282:../../../os/common/oslib/src/chmempools.c **** /**
 283:../../../os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 284:../../../os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 285:../../../os/common/oslib/src/chmempools.c ****  *
 286:../../../os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 287:../../../os/common/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 288:../../../os/common/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 289:../../../os/common/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 290:../../../os/common/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 291:../../../os/common/oslib/src/chmempools.c ****  *                      .
 292:../../../os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 293:../../../os/common/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 294:../../../os/common/oslib/src/chmempools.c ****  *
 295:../../../os/common/oslib/src/chmempools.c ****  * @api
 296:../../../os/common/oslib/src/chmempools.c ****  */
 297:../../../os/common/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 298:../../../os/common/oslib/src/chmempools.c ****                                 sysinterval_t timeout) {
 299:../../../os/common/oslib/src/chmempools.c ****   void *p;
 300:../../../os/common/oslib/src/chmempools.c **** 
 301:../../../os/common/oslib/src/chmempools.c ****   chSysLock();
 302:../../../os/common/oslib/src/chmempools.c ****   p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 303:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 304:../../../os/common/oslib/src/chmempools.c **** 
 305:../../../os/common/oslib/src/chmempools.c ****   return p;
 306:../../../os/common/oslib/src/chmempools.c **** }
 307:../../../os/common/oslib/src/chmempools.c **** 
 308:../../../os/common/oslib/src/chmempools.c **** /**
 309:../../../os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a guarded memory pool.
 310:../../../os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 311:../../../os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 312:../../../os/common/oslib/src/chmempools.c ****  *          guarded memory pool.
 313:../../../os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 314:../../../os/common/oslib/src/chmempools.c ****  *
 315:../../../os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 316:../../../os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 317:../../../os/common/oslib/src/chmempools.c ****  *
 318:../../../os/common/oslib/src/chmempools.c ****  * @iclass
 319:../../../os/common/oslib/src/chmempools.c ****  */
 320:../../../os/common/oslib/src/chmempools.c **** void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {
 321:../../../os/common/oslib/src/chmempools.c **** 
 322:../../../os/common/oslib/src/chmempools.c ****   chPoolFreeI(&gmp->pool, objp);
 323:../../../os/common/oslib/src/chmempools.c ****   chSemSignalI(&gmp->sem);
 324:../../../os/common/oslib/src/chmempools.c **** }
 325:../../../os/common/oslib/src/chmempools.c **** 
 326:../../../os/common/oslib/src/chmempools.c **** /**
 327:../../../os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a guarded memory pool.
 328:../../../os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 329:../../../os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 330:../../../os/common/oslib/src/chmempools.c ****  *          guarded memory pool.
 331:../../../os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 332:../../../os/common/oslib/src/chmempools.c ****  *
 333:../../../os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 334:../../../os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 335:../../../os/common/oslib/src/chmempools.c ****  *
 336:../../../os/common/oslib/src/chmempools.c ****  * @api
 337:../../../os/common/oslib/src/chmempools.c ****  */
 338:../../../os/common/oslib/src/chmempools.c **** void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 681               		.loc 1 338 6 view .LVU207
 682               	.LBB164:
 339:../../../os/common/oslib/src/chmempools.c **** 
 340:../../../os/common/oslib/src/chmempools.c ****   chSysLock();
 683               		.loc 1 340 3 view .LVU208
 684               	.LBB165:
 685               	.LBI165:
 353:../../../os/rt/include/chsys.h **** 
 686               		.loc 3 353 20 view .LVU209
 687               	.LBE165:
 688               	.LBE164:
 689               	.LBE163:
 690               	.LBE181:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 691               		.loc 3 355 3 view .LVU210
 692               	.LBB182:
 693               	.LBB179:
 694               	.LBB177:
 695               	.LBB168:
 696               	.LBB166:
 697               	.LBI166:
 435:../../../os/common/ports/AVR/chcore.h **** 
 698               		.loc 4 435 20 view .LVU211
 699               	.LBB167:
 437:../../../os/common/ports/AVR/chcore.h **** }
 700               		.loc 4 437 3 view .LVU212
 701               	/* #APP */
 702               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 703 0016 F894      		cli
 704               	 ;  0 "" 2
 705               	/* #NOAPP */
 706               	.LBE167:
 707               	.LBE166:
 708               	.LBE168:
 709               	.LBE177:
 710               	.LBE179:
 711               	.LBE182:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 712               		.loc 3 356 34 view .LVU213
 357:../../../os/rt/include/chsys.h **** }
 713               		.loc 3 357 20 view .LVU214
 714               	.LBB183:
 715               	.LBB180:
 716               	.LBB178:
 341:../../../os/common/oslib/src/chmempools.c ****   chGuardedPoolFreeI(gmp, objp);
 717               		.loc 1 341 3 view .LVU215
 718               	.LVL36:
 719               	.LBB169:
 720               	.LBI169:
 320:../../../os/common/oslib/src/chmempools.c **** 
 721               		.loc 1 320 6 view .LVU216
 722               	.LBB170:
 322:../../../os/common/oslib/src/chmempools.c ****   chSemSignalI(&gmp->sem);
 723               		.loc 1 322 3 view .LVU217
 724               	.LBB171:
 725               	.LBI171:
 177:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 726               		.loc 1 177 6 view .LVU218
 727               	.LBB172:
 178:../../../os/common/oslib/src/chmempools.c **** 
 728               		.loc 1 178 3 view .LVU219
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 729               		.loc 1 180 21 view .LVU220
 181:../../../os/common/oslib/src/chmempools.c **** 
 730               		.loc 1 181 3 view .LVU221
 181:../../../os/common/oslib/src/chmempools.c **** 
 731               		.loc 1 181 3 view .LVU222
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 732               		.loc 1 183 3 view .LVU223
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 733               		.loc 1 183 3 view .LVU224
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 734               		.loc 1 186 3 view .LVU225
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 735               		.loc 1 186 13 is_stmt 0 view .LVU226
 736 0018 F801      		movw r30,r16
 737 001a 8581      		ldd r24,Z+5
 738 001c 9681      		ldd r25,Z+6
 739 001e 9983      		std Y+1,r25
 740 0020 8883      		st Y,r24
 187:../../../os/common/oslib/src/chmempools.c **** }
 741               		.loc 1 187 3 is_stmt 1 view .LVU227
 187:../../../os/common/oslib/src/chmempools.c **** }
 742               		.loc 1 187 12 is_stmt 0 view .LVU228
 743 0022 D683      		std Z+6,r29
 744 0024 C583      		std Z+5,r28
 745               	.LVL37:
 187:../../../os/common/oslib/src/chmempools.c **** }
 746               		.loc 1 187 12 view .LVU229
 747               	.LBE172:
 748               	.LBE171:
 323:../../../os/common/oslib/src/chmempools.c **** }
 749               		.loc 1 323 3 is_stmt 1 view .LVU230
 750 0026 C801      		movw r24,r16
 751 0028 0E94 0000 		call chSemSignalI
 752               	.LVL38:
 323:../../../os/common/oslib/src/chmempools.c **** }
 753               		.loc 1 323 3 is_stmt 0 view .LVU231
 754               	.LBE170:
 755               	.LBE169:
 342:../../../os/common/oslib/src/chmempools.c ****   chSchRescheduleS();
 756               		.loc 1 342 3 is_stmt 1 view .LVU232
 757 002c 0E94 0000 		call chSchRescheduleS
 758               	.LVL39:
 343:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 759               		.loc 1 343 3 view .LVU233
 760               	.LBB173:
 761               	.LBI173:
 365:../../../os/rt/include/chsys.h **** 
 762               		.loc 3 365 20 view .LVU234
 763               	.LBB174:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 764               		.loc 3 367 22 view .LVU235
 368:../../../os/rt/include/chsys.h **** 
 765               		.loc 3 368 33 view .LVU236
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 766               		.loc 3 374 3 view .LVU237
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 767               		.loc 3 374 3 view .LVU238
 768               		.loc 3 378 3 view .LVU239
 769               	.LBB175:
 770               	.LBI175:
 445:../../../os/common/ports/AVR/chcore.h **** 
 771               		.loc 4 445 20 view .LVU240
 772               	.LBB176:
 773               		.loc 4 447 3 view .LVU241
 774               	/* #APP */
 775               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 776 0030 7894      		sei
 777               	 ;  0 "" 2
 778               	.LVL40:
 779               		.loc 4 447 3 is_stmt 0 view .LVU242
 780               	/* #NOAPP */
 781               	.LBE176:
 782               	.LBE175:
 783               	.LBE174:
 784               	.LBE173:
 785               	.LBE178:
 786               	.LBE180:
 787               	.LBE183:
 249:../../../os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 788               		.loc 1 249 5 is_stmt 1 view .LVU243
 249:../../../os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 789               		.loc 1 249 7 is_stmt 0 view .LVU244
 790 0032 F801      		movw r30,r16
 791 0034 8781      		ldd r24,Z+7
 792 0036 9085      		ldd r25,Z+8
 793 0038 C80F      		add r28,r24
 794 003a D91F      		adc r29,r25
 795               	.LVL41:
 251:../../../os/common/oslib/src/chmempools.c ****   }
 796               		.loc 1 251 5 is_stmt 1 view .LVU245
 251:../../../os/common/oslib/src/chmempools.c ****   }
 797               		.loc 1 251 6 is_stmt 0 view .LVU246
 798 003c F1E0      		ldi r31,1
 799 003e EF1A      		sub r14,r31
 800 0040 F108      		sbc r15,__zero_reg__
 801               	.LVL42:
 246:../../../os/common/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 802               		.loc 1 246 9 view .LVU247
 803 0042 01F4      		brne .L26
 804               	.L24:
 805               	/* epilogue start */
 253:../../../os/common/oslib/src/chmempools.c **** 
 806               		.loc 1 253 1 view .LVU248
 807 0044 DF91      		pop r29
 808 0046 CF91      		pop r28
 809               	.LVL43:
 253:../../../os/common/oslib/src/chmempools.c **** 
 810               		.loc 1 253 1 view .LVU249
 811 0048 1F91      		pop r17
 812 004a 0F91      		pop r16
 813               	.LVL44:
 253:../../../os/common/oslib/src/chmempools.c **** 
 814               		.loc 1 253 1 view .LVU250
 815 004c FF90      		pop r15
 816 004e EF90      		pop r14
 817               	.LVL45:
 253:../../../os/common/oslib/src/chmempools.c **** 
 818               		.loc 1 253 1 view .LVU251
 819 0050 0895      		ret
 820               		.cfi_endproc
 821               	.LFE148:
 823               		.section	.text.chGuardedPoolAllocTimeoutS,"ax",@progbits
 824               	.global	chGuardedPoolAllocTimeoutS
 826               	chGuardedPoolAllocTimeoutS:
 827               	.LVL46:
 828               	.LFB149:
 271:../../../os/common/oslib/src/chmempools.c ****   msg_t msg;
 829               		.loc 1 271 57 is_stmt 1 view -0
 830               		.cfi_startproc
 271:../../../os/common/oslib/src/chmempools.c ****   msg_t msg;
 831               		.loc 1 271 57 is_stmt 0 view .LVU253
 832 0000 CF93      		push r28
 833               	.LCFI6:
 834               		.cfi_def_cfa_offset 3
 835               		.cfi_offset 28, -2
 836 0002 DF93      		push r29
 837               	.LCFI7:
 838               		.cfi_def_cfa_offset 4
 839               		.cfi_offset 29, -3
 840               	/* prologue: function */
 841               	/* frame size = 0 */
 842               	/* stack size = 2 */
 843               	.L__stack_usage = 2
 844 0004 EC01      		movw r28,r24
 272:../../../os/common/oslib/src/chmempools.c **** 
 845               		.loc 1 272 3 is_stmt 1 view .LVU254
 274:../../../os/common/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 846               		.loc 1 274 3 view .LVU255
 274:../../../os/common/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 847               		.loc 1 274 9 is_stmt 0 view .LVU256
 848 0006 0E94 0000 		call chSemWaitTimeoutS
 849               	.LVL47:
 275:../../../os/common/oslib/src/chmempools.c ****     return NULL;
 850               		.loc 1 275 3 is_stmt 1 view .LVU257
 275:../../../os/common/oslib/src/chmempools.c ****     return NULL;
 851               		.loc 1 275 6 is_stmt 0 view .LVU258
 852 000a 892B      		or r24,r25
 853 000c 01F4      		brne .L33
 279:../../../os/common/oslib/src/chmempools.c **** }
 854               		.loc 1 279 3 is_stmt 1 view .LVU259
 855               	.LVL48:
 856               	.LBB184:
 857               	.LBI184:
 126:../../../os/common/oslib/src/chmempools.c ****   void *objp;
 858               		.loc 1 126 7 view .LVU260
 859               	.LBB185:
 127:../../../os/common/oslib/src/chmempools.c **** 
 860               		.loc 1 127 3 view .LVU261
 129:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
 861               		.loc 1 129 21 view .LVU262
 130:../../../os/common/oslib/src/chmempools.c **** 
 862               		.loc 1 130 3 view .LVU263
 130:../../../os/common/oslib/src/chmempools.c **** 
 863               		.loc 1 130 3 view .LVU264
 132:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 864               		.loc 1 132 3 view .LVU265
 132:../../../os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 865               		.loc 1 132 8 is_stmt 0 view .LVU266
 866 000e 8D81      		ldd r24,Y+5
 867 0010 9E81      		ldd r25,Y+6
 868               	.LVL49:
 134:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 869               		.loc 1 134 3 is_stmt 1 view .LVU267
 134:../../../os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 870               		.loc 1 134 6 is_stmt 0 view .LVU268
 871 0012 0097      		sbiw r24,0
 872 0014 01F0      		breq .L32
 135:../../../os/common/oslib/src/chmempools.c ****   }
 873               		.loc 1 135 5 is_stmt 1 view .LVU269
 135:../../../os/common/oslib/src/chmempools.c ****   }
 874               		.loc 1 135 14 is_stmt 0 view .LVU270
 875 0016 FC01      		movw r30,r24
 876 0018 2081      		ld r18,Z
 877 001a 3181      		ldd r19,Z+1
 878 001c 3E83      		std Y+6,r19
 879 001e 2D83      		std Y+5,r18
 880               	/* epilogue start */
 881               	.LBE185:
 882               	.LBE184:
 280:../../../os/common/oslib/src/chmempools.c **** 
 883               		.loc 1 280 1 view .LVU271
 884 0020 DF91      		pop r29
 885 0022 CF91      		pop r28
 886               	.LVL50:
 280:../../../os/common/oslib/src/chmempools.c **** 
 887               		.loc 1 280 1 view .LVU272
 888 0024 0895      		ret
 889               	.LVL51:
 890               	.L32:
 891               	.LBB188:
 892               	.LBB186:
 280:../../../os/common/oslib/src/chmempools.c **** 
 893               		.loc 1 280 1 view .LVU273
 894 0026 CE01      		movw r24,r28
 895               	.LVL52:
 280:../../../os/common/oslib/src/chmempools.c **** 
 896               		.loc 1 280 1 view .LVU274
 897 0028 0596      		adiw r24,5
 898               	/* epilogue start */
 899               	.LBE186:
 900               	.LBE188:
 901 002a DF91      		pop r29
 902 002c CF91      		pop r28
 903               	.LVL53:
 904               	.LBB189:
 905               	.LBB187:
 280:../../../os/common/oslib/src/chmempools.c **** 
 906               		.loc 1 280 1 view .LVU275
 907 002e 0C94 0000 		jmp chPoolAllocI.part.0
 908               	.LVL54:
 909               	.L33:
 280:../../../os/common/oslib/src/chmempools.c **** 
 910               		.loc 1 280 1 view .LVU276
 911               	.LBE187:
 912               	.LBE189:
 276:../../../os/common/oslib/src/chmempools.c ****   }
 913               		.loc 1 276 12 view .LVU277
 914 0032 90E0      		ldi r25,0
 915 0034 80E0      		ldi r24,0
 916               	.LVL55:
 917               	/* epilogue start */
 280:../../../os/common/oslib/src/chmempools.c **** 
 918               		.loc 1 280 1 view .LVU278
 919 0036 DF91      		pop r29
 920 0038 CF91      		pop r28
 921               	.LVL56:
 280:../../../os/common/oslib/src/chmempools.c **** 
 922               		.loc 1 280 1 view .LVU279
 923 003a 0895      		ret
 924               		.cfi_endproc
 925               	.LFE149:
 927               		.section	.text.chGuardedPoolAllocTimeout,"ax",@progbits
 928               	.global	chGuardedPoolAllocTimeout
 930               	chGuardedPoolAllocTimeout:
 931               	.LVL57:
 932               	.LFB150:
 298:../../../os/common/oslib/src/chmempools.c ****   void *p;
 933               		.loc 1 298 56 is_stmt 1 view -0
 934               		.cfi_startproc
 935               	/* prologue: function */
 936               	/* frame size = 0 */
 937               	/* stack size = 0 */
 938               	.L__stack_usage = 0
 299:../../../os/common/oslib/src/chmempools.c **** 
 939               		.loc 1 299 3 view .LVU281
 301:../../../os/common/oslib/src/chmempools.c ****   p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 940               		.loc 1 301 3 view .LVU282
 941               	.LBB190:
 942               	.LBI190:
 353:../../../os/rt/include/chsys.h **** 
 943               		.loc 3 353 20 view .LVU283
 944               	.LBE190:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 945               		.loc 3 355 3 view .LVU284
 946               	.LBB193:
 947               	.LBB191:
 948               	.LBI191:
 435:../../../os/common/ports/AVR/chcore.h **** 
 949               		.loc 4 435 20 view .LVU285
 950               	.LBB192:
 437:../../../os/common/ports/AVR/chcore.h **** }
 951               		.loc 4 437 3 view .LVU286
 952               	/* #APP */
 953               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 954 0000 F894      		cli
 955               	 ;  0 "" 2
 956               	/* #NOAPP */
 957               	.LBE192:
 958               	.LBE191:
 959               	.LBE193:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 960               		.loc 3 356 34 view .LVU287
 357:../../../os/rt/include/chsys.h **** }
 961               		.loc 3 357 20 view .LVU288
 302:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 962               		.loc 1 302 3 view .LVU289
 302:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 963               		.loc 1 302 7 is_stmt 0 view .LVU290
 964 0002 0E94 0000 		call chGuardedPoolAllocTimeoutS
 965               	.LVL58:
 303:../../../os/common/oslib/src/chmempools.c **** 
 966               		.loc 1 303 3 is_stmt 1 view .LVU291
 967               	.LBB194:
 968               	.LBI194:
 365:../../../os/rt/include/chsys.h **** 
 969               		.loc 3 365 20 view .LVU292
 970               	.LBB195:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 971               		.loc 3 367 22 view .LVU293
 368:../../../os/rt/include/chsys.h **** 
 972               		.loc 3 368 33 view .LVU294
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 973               		.loc 3 374 3 view .LVU295
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 974               		.loc 3 374 3 view .LVU296
 975               		.loc 3 378 3 view .LVU297
 976               	.LBB196:
 977               	.LBI196:
 445:../../../os/common/ports/AVR/chcore.h **** 
 978               		.loc 4 445 20 view .LVU298
 979               	.LBB197:
 980               		.loc 4 447 3 view .LVU299
 981               	/* #APP */
 982               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 983 0006 7894      		sei
 984               	 ;  0 "" 2
 985               	/* #NOAPP */
 986               	.LBE197:
 987               	.LBE196:
 988               	.LBE195:
 989               	.LBE194:
 305:../../../os/common/oslib/src/chmempools.c **** }
 990               		.loc 1 305 3 view .LVU300
 991               	/* epilogue start */
 306:../../../os/common/oslib/src/chmempools.c **** 
 992               		.loc 1 306 1 is_stmt 0 view .LVU301
 993 0008 0895      		ret
 994               		.cfi_endproc
 995               	.LFE150:
 997               		.section	.text.chGuardedPoolFreeI,"ax",@progbits
 998               	.global	chGuardedPoolFreeI
 1000               	chGuardedPoolFreeI:
 1001               	.LVL59:
 1002               	.LFB151:
 320:../../../os/common/oslib/src/chmempools.c **** 
 1003               		.loc 1 320 65 is_stmt 1 view -0
 1004               		.cfi_startproc
 1005               	/* prologue: function */
 1006               	/* frame size = 0 */
 1007               	/* stack size = 0 */
 1008               	.L__stack_usage = 0
 322:../../../os/common/oslib/src/chmempools.c ****   chSemSignalI(&gmp->sem);
 1009               		.loc 1 322 3 view .LVU303
 1010               	.LBB198:
 1011               	.LBI198:
 177:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 1012               		.loc 1 177 6 view .LVU304
 1013               	.LBB199:
 178:../../../os/common/oslib/src/chmempools.c **** 
 1014               		.loc 1 178 3 view .LVU305
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 1015               		.loc 1 180 21 view .LVU306
 181:../../../os/common/oslib/src/chmempools.c **** 
 1016               		.loc 1 181 3 view .LVU307
 181:../../../os/common/oslib/src/chmempools.c **** 
 1017               		.loc 1 181 3 view .LVU308
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 1018               		.loc 1 183 3 view .LVU309
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 1019               		.loc 1 183 3 view .LVU310
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 1020               		.loc 1 186 3 view .LVU311
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 1021               		.loc 1 186 13 is_stmt 0 view .LVU312
 1022 0000 FC01      		movw r30,r24
 1023 0002 2581      		ldd r18,Z+5
 1024 0004 3681      		ldd r19,Z+6
 1025 0006 FB01      		movw r30,r22
 1026 0008 3183      		std Z+1,r19
 1027 000a 2083      		st Z,r18
 187:../../../os/common/oslib/src/chmempools.c **** }
 1028               		.loc 1 187 3 is_stmt 1 view .LVU313
 187:../../../os/common/oslib/src/chmempools.c **** }
 1029               		.loc 1 187 12 is_stmt 0 view .LVU314
 1030 000c FC01      		movw r30,r24
 1031 000e 7683      		std Z+6,r23
 1032 0010 6583      		std Z+5,r22
 1033               	.LVL60:
 187:../../../os/common/oslib/src/chmempools.c **** }
 1034               		.loc 1 187 12 view .LVU315
 1035               	.LBE199:
 1036               	.LBE198:
 323:../../../os/common/oslib/src/chmempools.c **** }
 1037               		.loc 1 323 3 is_stmt 1 view .LVU316
 1038 0012 0C94 0000 		jmp chSemSignalI
 1039               	.LVL61:
 323:../../../os/common/oslib/src/chmempools.c **** }
 1040               		.loc 1 323 3 is_stmt 0 view .LVU317
 1041               		.cfi_endproc
 1042               	.LFE151:
 1044               		.section	.text.chGuardedPoolFree,"ax",@progbits
 1045               	.global	chGuardedPoolFree
 1047               	chGuardedPoolFree:
 1048               	.LVL62:
 1049               	.LFB152:
 338:../../../os/common/oslib/src/chmempools.c **** 
 1050               		.loc 1 338 64 is_stmt 1 view -0
 1051               		.cfi_startproc
 1052               	/* prologue: function */
 1053               	/* frame size = 0 */
 1054               	/* stack size = 0 */
 1055               	.L__stack_usage = 0
 340:../../../os/common/oslib/src/chmempools.c ****   chGuardedPoolFreeI(gmp, objp);
 1056               		.loc 1 340 3 view .LVU319
 1057               	.LBB200:
 1058               	.LBI200:
 353:../../../os/rt/include/chsys.h **** 
 1059               		.loc 3 353 20 view .LVU320
 1060               	.LBE200:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1061               		.loc 3 355 3 view .LVU321
 1062               	.LBB203:
 1063               	.LBB201:
 1064               	.LBI201:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1065               		.loc 4 435 20 view .LVU322
 1066               	.LBB202:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1067               		.loc 4 437 3 view .LVU323
 1068               	/* #APP */
 1069               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1070 0000 F894      		cli
 1071               	 ;  0 "" 2
 1072               	/* #NOAPP */
 1073               	.LBE202:
 1074               	.LBE201:
 1075               	.LBE203:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1076               		.loc 3 356 34 view .LVU324
 357:../../../os/rt/include/chsys.h **** }
 1077               		.loc 3 357 20 view .LVU325
 341:../../../os/common/oslib/src/chmempools.c ****   chSchRescheduleS();
 1078               		.loc 1 341 3 view .LVU326
 1079               	.LVL63:
 1080               	.LBB204:
 1081               	.LBI204:
 320:../../../os/common/oslib/src/chmempools.c **** 
 1082               		.loc 1 320 6 view .LVU327
 1083               	.LBB205:
 322:../../../os/common/oslib/src/chmempools.c ****   chSemSignalI(&gmp->sem);
 1084               		.loc 1 322 3 view .LVU328
 1085               	.LBB206:
 1086               	.LBI206:
 177:../../../os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 1087               		.loc 1 177 6 view .LVU329
 1088               	.LBB207:
 178:../../../os/common/oslib/src/chmempools.c **** 
 1089               		.loc 1 178 3 view .LVU330
 180:../../../os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 1090               		.loc 1 180 21 view .LVU331
 181:../../../os/common/oslib/src/chmempools.c **** 
 1091               		.loc 1 181 3 view .LVU332
 181:../../../os/common/oslib/src/chmempools.c **** 
 1092               		.loc 1 181 3 view .LVU333
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 1093               		.loc 1 183 3 view .LVU334
 183:../../../os/common/oslib/src/chmempools.c ****               "unaligned object");
 1094               		.loc 1 183 3 view .LVU335
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 1095               		.loc 1 186 3 view .LVU336
 186:../../../os/common/oslib/src/chmempools.c ****   mp->next = php;
 1096               		.loc 1 186 13 is_stmt 0 view .LVU337
 1097 0002 FC01      		movw r30,r24
 1098 0004 2581      		ldd r18,Z+5
 1099 0006 3681      		ldd r19,Z+6
 1100 0008 FB01      		movw r30,r22
 1101 000a 3183      		std Z+1,r19
 1102 000c 2083      		st Z,r18
 187:../../../os/common/oslib/src/chmempools.c **** }
 1103               		.loc 1 187 3 is_stmt 1 view .LVU338
 187:../../../os/common/oslib/src/chmempools.c **** }
 1104               		.loc 1 187 12 is_stmt 0 view .LVU339
 1105 000e FC01      		movw r30,r24
 1106 0010 7683      		std Z+6,r23
 1107 0012 6583      		std Z+5,r22
 1108               	.LVL64:
 187:../../../os/common/oslib/src/chmempools.c **** }
 1109               		.loc 1 187 12 view .LVU340
 1110               	.LBE207:
 1111               	.LBE206:
 323:../../../os/common/oslib/src/chmempools.c **** }
 1112               		.loc 1 323 3 is_stmt 1 view .LVU341
 1113 0014 0E94 0000 		call chSemSignalI
 1114               	.LVL65:
 323:../../../os/common/oslib/src/chmempools.c **** }
 1115               		.loc 1 323 3 is_stmt 0 view .LVU342
 1116               	.LBE205:
 1117               	.LBE204:
 342:../../../os/common/oslib/src/chmempools.c ****   chSysUnlock();
 1118               		.loc 1 342 3 is_stmt 1 view .LVU343
 1119 0018 0E94 0000 		call chSchRescheduleS
 1120               	.LVL66:
 1121               		.loc 1 343 3 view .LVU344
 1122               	.LBB208:
 1123               	.LBI208:
 365:../../../os/rt/include/chsys.h **** 
 1124               		.loc 3 365 20 view .LVU345
 1125               	.LBB209:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1126               		.loc 3 367 22 view .LVU346
 368:../../../os/rt/include/chsys.h **** 
 1127               		.loc 3 368 33 view .LVU347
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1128               		.loc 3 374 3 view .LVU348
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1129               		.loc 3 374 3 view .LVU349
 1130               		.loc 3 378 3 view .LVU350
 1131               	.LBB210:
 1132               	.LBI210:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1133               		.loc 4 445 20 view .LVU351
 1134               	.LBB211:
 1135               		.loc 4 447 3 view .LVU352
 1136               	/* #APP */
 1137               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1138 001c 7894      		sei
 1139               	 ;  0 "" 2
 1140               	/* #NOAPP */
 1141               	/* epilogue start */
 1142               	.LBE211:
 1143               	.LBE210:
 1144               	.LBE209:
 1145               	.LBE208:
 344:../../../os/common/oslib/src/chmempools.c **** }
 1146               		.loc 1 344 1 is_stmt 0 view .LVU353
 1147 001e 0895      		ret
 1148               		.cfi_endproc
 1149               	.LFE152:
 1151               		.text
 1152               	.Letext0:
 1153               		.file 5 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 1154               		.file 6 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 1155               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1156               		.file 8 "../../../os/rt/include/chsystypes.h"
 1157               		.file 9 "../../../os/rt/include/chschd.h"
 1158               		.file 10 "../../../os/rt/include/chtime.h"
 1159               		.file 11 "../../../os/rt/include/chsem.h"
 1160               		.file 12 "../../../os/rt/include/chmtx.h"
 1161               		.file 13 "../../../os/rt/include/chregistry.h"
 1162               		.file 14 "../../../os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmempools.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:12     .text.chPoolAllocI.part.0:0000000000000000 chPoolAllocI.part.0
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:61     .text.chPoolObjectInitAligned:0000000000000000 chPoolObjectInitAligned
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:99     .text.chPoolLoadArray:0000000000000000 chPoolLoadArray
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:256    .text.chPoolAllocI:0000000000000000 chPoolAllocI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:304    .text.chPoolAlloc:0000000000000000 chPoolAlloc
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:447    .text.chPoolFreeI:0000000000000000 chPoolFreeI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:484    .text.chPoolFree:0000000000000000 chPoolFree
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:577    .text.chGuardedPoolObjectInitAligned:0000000000000000 chGuardedPoolObjectInitAligned
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:627    .text.chGuardedPoolLoadArray:0000000000000000 chGuardedPoolLoadArray
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:826    .text.chGuardedPoolAllocTimeoutS:0000000000000000 chGuardedPoolAllocTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:930    .text.chGuardedPoolAllocTimeout:0000000000000000 chGuardedPoolAllocTimeout
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:1000   .text.chGuardedPoolFreeI:0000000000000000 chGuardedPoolFreeI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccLPNWD7.s:1047   .text.chGuardedPoolFree:0000000000000000 chGuardedPoolFree

UNDEFINED SYMBOLS
chSemObjectInit
chSemSignalI
chSchRescheduleS
chSemWaitTimeoutS
