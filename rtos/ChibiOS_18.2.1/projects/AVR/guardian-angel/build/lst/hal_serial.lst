   1               		.file	"hal_serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._readt,"ax",@progbits
  12               	_readt:
  13               	.LVL0:
  14               	.LFB180:
  15               		.file 1 "../../../os/hal/src/hal_serial.c"
   1:../../../os/hal/src/hal_serial.c **** /*
   2:../../../os/hal/src/hal_serial.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_serial.c **** 
   4:../../../os/hal/src/hal_serial.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_serial.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_serial.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_serial.c **** 
   8:../../../os/hal/src/hal_serial.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_serial.c **** 
  10:../../../os/hal/src/hal_serial.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_serial.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_serial.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_serial.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_serial.c ****     limitations under the License.
  15:../../../os/hal/src/hal_serial.c **** */
  16:../../../os/hal/src/hal_serial.c **** 
  17:../../../os/hal/src/hal_serial.c **** /**
  18:../../../os/hal/src/hal_serial.c ****  * @file    hal_serial.c
  19:../../../os/hal/src/hal_serial.c ****  * @brief   Serial Driver code.
  20:../../../os/hal/src/hal_serial.c ****  *
  21:../../../os/hal/src/hal_serial.c ****  * @addtogroup SERIAL
  22:../../../os/hal/src/hal_serial.c ****  * @{
  23:../../../os/hal/src/hal_serial.c ****  */
  24:../../../os/hal/src/hal_serial.c **** 
  25:../../../os/hal/src/hal_serial.c **** #include "hal.h"
  26:../../../os/hal/src/hal_serial.c **** 
  27:../../../os/hal/src/hal_serial.c **** #if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  28:../../../os/hal/src/hal_serial.c **** 
  29:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  30:../../../os/hal/src/hal_serial.c **** /* Driver local definitions.                                                 */
  31:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  32:../../../os/hal/src/hal_serial.c **** 
  33:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  34:../../../os/hal/src/hal_serial.c **** /* Driver exported variables.                                                */
  35:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  36:../../../os/hal/src/hal_serial.c **** 
  37:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  38:../../../os/hal/src/hal_serial.c **** /* Driver local variables and types.                                         */
  39:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  40:../../../os/hal/src/hal_serial.c **** 
  41:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  42:../../../os/hal/src/hal_serial.c **** /* Driver local functions.                                                   */
  43:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_serial.c **** 
  45:../../../os/hal/src/hal_serial.c **** /*
  46:../../../os/hal/src/hal_serial.c ****  * Interface implementation, the following functions just invoke the equivalent
  47:../../../os/hal/src/hal_serial.c ****  * queue-level function or macro.
  48:../../../os/hal/src/hal_serial.c ****  */
  49:../../../os/hal/src/hal_serial.c **** 
  50:../../../os/hal/src/hal_serial.c **** static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  51:../../../os/hal/src/hal_serial.c **** 
  52:../../../os/hal/src/hal_serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  53:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  54:../../../os/hal/src/hal_serial.c **** }
  55:../../../os/hal/src/hal_serial.c **** 
  56:../../../os/hal/src/hal_serial.c **** static size_t _read(void *ip, uint8_t *bp, size_t n) {
  57:../../../os/hal/src/hal_serial.c **** 
  58:../../../os/hal/src/hal_serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  59:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  60:../../../os/hal/src/hal_serial.c **** }
  61:../../../os/hal/src/hal_serial.c **** 
  62:../../../os/hal/src/hal_serial.c **** static msg_t _put(void *ip, uint8_t b) {
  63:../../../os/hal/src/hal_serial.c **** 
  64:../../../os/hal/src/hal_serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  65:../../../os/hal/src/hal_serial.c **** }
  66:../../../os/hal/src/hal_serial.c **** 
  67:../../../os/hal/src/hal_serial.c **** static msg_t _get(void *ip) {
  68:../../../os/hal/src/hal_serial.c **** 
  69:../../../os/hal/src/hal_serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  70:../../../os/hal/src/hal_serial.c **** }
  71:../../../os/hal/src/hal_serial.c **** 
  72:../../../os/hal/src/hal_serial.c **** static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
  73:../../../os/hal/src/hal_serial.c **** 
  74:../../../os/hal/src/hal_serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  75:../../../os/hal/src/hal_serial.c **** }
  76:../../../os/hal/src/hal_serial.c **** 
  77:../../../os/hal/src/hal_serial.c **** static msg_t _gett(void *ip, sysinterval_t timeout) {
  78:../../../os/hal/src/hal_serial.c **** 
  79:../../../os/hal/src/hal_serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  80:../../../os/hal/src/hal_serial.c **** }
  81:../../../os/hal/src/hal_serial.c **** 
  82:../../../os/hal/src/hal_serial.c **** static size_t _writet(void *ip, const uint8_t *bp, size_t n,
  83:../../../os/hal/src/hal_serial.c ****                       sysinterval_t timeout) {
  84:../../../os/hal/src/hal_serial.c **** 
  85:../../../os/hal/src/hal_serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  86:../../../os/hal/src/hal_serial.c **** }
  87:../../../os/hal/src/hal_serial.c **** 
  88:../../../os/hal/src/hal_serial.c **** static size_t _readt(void *ip, uint8_t *bp, size_t n,
  89:../../../os/hal/src/hal_serial.c ****                      sysinterval_t timeout) {
  16               		.loc 1 89 45 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  90:../../../os/hal/src/hal_serial.c **** 
  91:../../../os/hal/src/hal_serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  22               		.loc 1 91 3 view .LVU1
  23               		.loc 1 91 10 is_stmt 0 view .LVU2
  24 0000 0596      		adiw r24,5
  25               	.LVL1:
  26               		.loc 1 91 10 view .LVU3
  27 0002 0C94 0000 		jmp iqReadTimeout
  28               	.LVL2:
  29               		.loc 1 91 10 view .LVU4
  30               		.cfi_endproc
  31               	.LFE180:
  33               		.section	.text._read,"ax",@progbits
  35               	_read:
  36               	.LVL3:
  37               	.LFB174:
  56:../../../os/hal/src/hal_serial.c **** 
  38               		.loc 1 56 54 is_stmt 1 view -0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
  58:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  44               		.loc 1 58 3 view .LVU6
  58:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  45               		.loc 1 58 10 is_stmt 0 view .LVU7
  46 0000 2FEF      		ldi r18,lo8(-1)
  47 0002 3FEF      		ldi r19,lo8(-1)
  48 0004 0596      		adiw r24,5
  49               	.LVL4:
  58:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  50               		.loc 1 58 10 view .LVU8
  51 0006 0C94 0000 		jmp iqReadTimeout
  52               	.LVL5:
  58:../../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  53               		.loc 1 58 10 view .LVU9
  54               		.cfi_endproc
  55               	.LFE174:
  57               		.section	.text._writet,"ax",@progbits
  59               	_writet:
  60               	.LVL6:
  61               	.LFB179:
  83:../../../os/hal/src/hal_serial.c **** 
  62               		.loc 1 83 46 is_stmt 1 view -0
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  85:../../../os/hal/src/hal_serial.c **** }
  68               		.loc 1 85 3 view .LVU11
  85:../../../os/hal/src/hal_serial.c **** }
  69               		.loc 1 85 10 is_stmt 0 view .LVU12
  70 0000 4796      		adiw r24,23
  71               	.LVL7:
  85:../../../os/hal/src/hal_serial.c **** }
  72               		.loc 1 85 10 view .LVU13
  73 0002 0C94 0000 		jmp oqWriteTimeout
  74               	.LVL8:
  85:../../../os/hal/src/hal_serial.c **** }
  75               		.loc 1 85 10 view .LVU14
  76               		.cfi_endproc
  77               	.LFE179:
  79               		.section	.text._write,"ax",@progbits
  81               	_write:
  82               	.LVL9:
  83               	.LFB173:
  50:../../../os/hal/src/hal_serial.c **** 
  84               		.loc 1 50 61 is_stmt 1 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  52:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  90               		.loc 1 52 3 view .LVU16
  52:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  91               		.loc 1 52 10 is_stmt 0 view .LVU17
  92 0000 2FEF      		ldi r18,lo8(-1)
  93 0002 3FEF      		ldi r19,lo8(-1)
  94 0004 4796      		adiw r24,23
  95               	.LVL10:
  52:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  96               		.loc 1 52 10 view .LVU18
  97 0006 0C94 0000 		jmp oqWriteTimeout
  98               	.LVL11:
  52:../../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  99               		.loc 1 52 10 view .LVU19
 100               		.cfi_endproc
 101               	.LFE173:
 103               		.section	.text._gett,"ax",@progbits
 105               	_gett:
 106               	.LVL12:
 107               	.LFB178:
  77:../../../os/hal/src/hal_serial.c **** 
 108               		.loc 1 77 53 is_stmt 1 view -0
 109               		.cfi_startproc
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  79:../../../os/hal/src/hal_serial.c **** }
 114               		.loc 1 79 3 view .LVU21
  79:../../../os/hal/src/hal_serial.c **** }
 115               		.loc 1 79 10 is_stmt 0 view .LVU22
 116 0000 0596      		adiw r24,5
 117               	.LVL13:
  79:../../../os/hal/src/hal_serial.c **** }
 118               		.loc 1 79 10 view .LVU23
 119 0002 0C94 0000 		jmp iqGetTimeout
 120               	.LVL14:
  79:../../../os/hal/src/hal_serial.c **** }
 121               		.loc 1 79 10 view .LVU24
 122               		.cfi_endproc
 123               	.LFE178:
 125               		.section	.text._get,"ax",@progbits
 127               	_get:
 128               	.LVL15:
 129               	.LFB176:
  67:../../../os/hal/src/hal_serial.c **** 
 130               		.loc 1 67 29 is_stmt 1 view -0
 131               		.cfi_startproc
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 0 */
 135               	.L__stack_usage = 0
  69:../../../os/hal/src/hal_serial.c **** }
 136               		.loc 1 69 3 view .LVU26
  69:../../../os/hal/src/hal_serial.c **** }
 137               		.loc 1 69 10 is_stmt 0 view .LVU27
 138 0000 6FEF      		ldi r22,lo8(-1)
 139 0002 7FEF      		ldi r23,lo8(-1)
 140 0004 0596      		adiw r24,5
 141               	.LVL16:
  69:../../../os/hal/src/hal_serial.c **** }
 142               		.loc 1 69 10 view .LVU28
 143 0006 0C94 0000 		jmp iqGetTimeout
 144               	.LVL17:
  69:../../../os/hal/src/hal_serial.c **** }
 145               		.loc 1 69 10 view .LVU29
 146               		.cfi_endproc
 147               	.LFE176:
 149               		.section	.text._putt,"ax",@progbits
 151               	_putt:
 152               	.LVL18:
 153               	.LFB177:
  72:../../../os/hal/src/hal_serial.c **** 
 154               		.loc 1 72 64 is_stmt 1 view -0
 155               		.cfi_startproc
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
  74:../../../os/hal/src/hal_serial.c **** }
 160               		.loc 1 74 3 view .LVU31
  74:../../../os/hal/src/hal_serial.c **** }
 161               		.loc 1 74 10 is_stmt 0 view .LVU32
 162 0000 4796      		adiw r24,23
 163               	.LVL19:
  74:../../../os/hal/src/hal_serial.c **** }
 164               		.loc 1 74 10 view .LVU33
 165 0002 0C94 0000 		jmp oqPutTimeout
 166               	.LVL20:
  74:../../../os/hal/src/hal_serial.c **** }
 167               		.loc 1 74 10 view .LVU34
 168               		.cfi_endproc
 169               	.LFE177:
 171               		.section	.text._put,"ax",@progbits
 173               	_put:
 174               	.LVL21:
 175               	.LFB175:
  62:../../../os/hal/src/hal_serial.c **** 
 176               		.loc 1 62 40 is_stmt 1 view -0
 177               		.cfi_startproc
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 0 */
 181               	.L__stack_usage = 0
  64:../../../os/hal/src/hal_serial.c **** }
 182               		.loc 1 64 3 view .LVU36
  64:../../../os/hal/src/hal_serial.c **** }
 183               		.loc 1 64 10 is_stmt 0 view .LVU37
 184 0000 4FEF      		ldi r20,lo8(-1)
 185 0002 5FEF      		ldi r21,lo8(-1)
 186 0004 4796      		adiw r24,23
 187               	.LVL22:
  64:../../../os/hal/src/hal_serial.c **** }
 188               		.loc 1 64 10 view .LVU38
 189 0006 0C94 0000 		jmp oqPutTimeout
 190               	.LVL23:
  64:../../../os/hal/src/hal_serial.c **** }
 191               		.loc 1 64 10 view .LVU39
 192               		.cfi_endproc
 193               	.LFE175:
 195               		.section	.text._ctl,"ax",@progbits
 197               	_ctl:
 198               	.LFB192:
 199               		.cfi_startproc
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
 204 0000 90E0      		ldi r25,0
 205 0002 80E0      		ldi r24,0
 206               	/* epilogue start */
 207 0004 0895      		ret
 208               		.cfi_endproc
 209               	.LFE192:
 211               		.section	.text.sdInit,"ax",@progbits
 212               	.global	sdInit
 214               	sdInit:
 215               	.LFB182:
  92:../../../os/hal/src/hal_serial.c **** }
  93:../../../os/hal/src/hal_serial.c **** 
  94:../../../os/hal/src/hal_serial.c **** static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
  95:../../../os/hal/src/hal_serial.c ****   SerialDriver *sdp = (SerialDriver *)ip;
  96:../../../os/hal/src/hal_serial.c **** 
  97:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
  98:../../../os/hal/src/hal_serial.c **** 
  99:../../../os/hal/src/hal_serial.c ****   switch (operation) {
 100:../../../os/hal/src/hal_serial.c ****   case CHN_CTL_NOP:
 101:../../../os/hal/src/hal_serial.c ****     osalDbgCheck(arg == NULL);
 102:../../../os/hal/src/hal_serial.c ****     break;
 103:../../../os/hal/src/hal_serial.c ****   case CHN_CTL_INVALID:
 104:../../../os/hal/src/hal_serial.c ****     osalDbgAssert(false, "invalid CTL operation");
 105:../../../os/hal/src/hal_serial.c ****     break;
 106:../../../os/hal/src/hal_serial.c ****   default:
 107:../../../os/hal/src/hal_serial.c **** #if defined(SD_LLD_IMPLEMENTS_CTL)
 108:../../../os/hal/src/hal_serial.c ****     /* Delegating to the LLD if supported.*/
 109:../../../os/hal/src/hal_serial.c ****     return sd_lld_control(sdp, operation, arg);
 110:../../../os/hal/src/hal_serial.c **** #else
 111:../../../os/hal/src/hal_serial.c ****     break;
 112:../../../os/hal/src/hal_serial.c **** #endif
 113:../../../os/hal/src/hal_serial.c ****   }
 114:../../../os/hal/src/hal_serial.c ****   return MSG_OK;
 115:../../../os/hal/src/hal_serial.c **** }
 116:../../../os/hal/src/hal_serial.c **** 
 117:../../../os/hal/src/hal_serial.c **** static const struct SerialDriverVMT vmt = {
 118:../../../os/hal/src/hal_serial.c ****   (size_t)0,
 119:../../../os/hal/src/hal_serial.c ****   _write, _read, _put, _get,
 120:../../../os/hal/src/hal_serial.c ****   _putt, _gett, _writet, _readt,
 121:../../../os/hal/src/hal_serial.c ****   _ctl
 122:../../../os/hal/src/hal_serial.c **** };
 123:../../../os/hal/src/hal_serial.c **** 
 124:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
 125:../../../os/hal/src/hal_serial.c **** /* Driver exported functions.                                                */
 126:../../../os/hal/src/hal_serial.c **** /*===========================================================================*/
 127:../../../os/hal/src/hal_serial.c **** 
 128:../../../os/hal/src/hal_serial.c **** /**
 129:../../../os/hal/src/hal_serial.c ****  * @brief   Serial Driver initialization.
 130:../../../os/hal/src/hal_serial.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
 131:../../../os/hal/src/hal_serial.c ****  *          no need to explicitly initialize the driver.
 132:../../../os/hal/src/hal_serial.c ****  *
 133:../../../os/hal/src/hal_serial.c ****  * @init
 134:../../../os/hal/src/hal_serial.c ****  */
 135:../../../os/hal/src/hal_serial.c **** void sdInit(void) {
 216               		.loc 1 135 19 is_stmt 1 view -0
 217               		.cfi_startproc
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
 136:../../../os/hal/src/hal_serial.c **** 
 137:../../../os/hal/src/hal_serial.c ****   sd_lld_init();
 222               		.loc 1 137 3 view .LVU41
 223 0000 0C94 0000 		jmp sd_lld_init
 224               	.LVL24:
 225               		.cfi_endproc
 226               	.LFE182:
 228               		.section	.text.sdObjectInit,"ax",@progbits
 229               	.global	sdObjectInit
 231               	sdObjectInit:
 232               	.LVL25:
 233               	.LFB183:
 138:../../../os/hal/src/hal_serial.c **** }
 139:../../../os/hal/src/hal_serial.c **** 
 140:../../../os/hal/src/hal_serial.c **** /**
 141:../../../os/hal/src/hal_serial.c ****  * @brief   Initializes a generic full duplex driver object.
 142:../../../os/hal/src/hal_serial.c ****  * @details The HW dependent part of the initialization has to be performed
 143:../../../os/hal/src/hal_serial.c ****  *          outside, usually in the hardware initialization code.
 144:../../../os/hal/src/hal_serial.c ****  *
 145:../../../os/hal/src/hal_serial.c ****  * @param[out] sdp      pointer to a @p SerialDriver structure
 146:../../../os/hal/src/hal_serial.c ****  * @param[in] inotify   pointer to a callback function that is invoked when
 147:../../../os/hal/src/hal_serial.c ****  *                      some data is read from the Queue. The value can be
 148:../../../os/hal/src/hal_serial.c ****  *                      @p NULL.
 149:../../../os/hal/src/hal_serial.c ****  * @param[in] onotify   pointer to a callback function that is invoked when
 150:../../../os/hal/src/hal_serial.c ****  *                      some data is written in the Queue. The value can be
 151:../../../os/hal/src/hal_serial.c ****  *                      @p NULL.
 152:../../../os/hal/src/hal_serial.c ****  *
 153:../../../os/hal/src/hal_serial.c ****  * @init
 154:../../../os/hal/src/hal_serial.c ****  */
 155:../../../os/hal/src/hal_serial.c **** #if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
 156:../../../os/hal/src/hal_serial.c ****     (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
 157:../../../os/hal/src/hal_serial.c ****     defined(__DOXYGEN__)
 158:../../../os/hal/src/hal_serial.c **** void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 234               		.loc 1 158 76 view -0
 235               		.cfi_startproc
 236               		.loc 1 158 76 is_stmt 0 view .LVU43
 237 0000 EF92      		push r14
 238               	.LCFI0:
 239               		.cfi_def_cfa_offset 3
 240               		.cfi_offset 14, -2
 241 0002 FF92      		push r15
 242               	.LCFI1:
 243               		.cfi_def_cfa_offset 4
 244               		.cfi_offset 15, -3
 245 0004 0F93      		push r16
 246               	.LCFI2:
 247               		.cfi_def_cfa_offset 5
 248               		.cfi_offset 16, -4
 249 0006 1F93      		push r17
 250               	.LCFI3:
 251               		.cfi_def_cfa_offset 6
 252               		.cfi_offset 17, -5
 253 0008 CF93      		push r28
 254               	.LCFI4:
 255               		.cfi_def_cfa_offset 7
 256               		.cfi_offset 28, -6
 257 000a DF93      		push r29
 258               	.LCFI5:
 259               		.cfi_def_cfa_offset 8
 260               		.cfi_offset 29, -7
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 6 */
 264               	.L__stack_usage = 6
 265 000c EC01      		movw r28,r24
 266 000e 9B01      		movw r18,r22
 267 0010 7A01      		movw r14,r20
 159:../../../os/hal/src/hal_serial.c **** 
 160:../../../os/hal/src/hal_serial.c ****   sdp->vmt = &vmt;
 268               		.loc 1 160 3 is_stmt 1 view .LVU44
 269               		.loc 1 160 12 is_stmt 0 view .LVU45
 270 0012 FC01      		movw r30,r24
 271 0014 80E0      		ldi r24,lo8(vmt)
 272 0016 90E0      		ldi r25,hi8(vmt)
 273               	.LVL26:
 274               		.loc 1 160 12 view .LVU46
 275 0018 8193      		st Z+,r24
 276 001a 9193      		st Z+,r25
 161:../../../os/hal/src/hal_serial.c ****   osalEventObjectInit(&sdp->event);
 277               		.loc 1 161 3 is_stmt 1 view .LVU47
 278               	.LVL27:
 279               	.LBB74:
 280               	.LBI74:
 281               		.file 2 "../../../os/hal/osal/rt/osal.h"
   1:../../../os/hal/osal/rt/osal.h **** /*
   2:../../../os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt/osal.h **** 
   4:../../../os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt/osal.h **** 
   8:../../../os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt/osal.h **** 
  10:../../../os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt/osal.h **** */
  16:../../../os/hal/osal/rt/osal.h **** 
  17:../../../os/hal/osal/rt/osal.h **** /**
  18:../../../os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt/osal.h ****  *
  21:../../../os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt/osal.h ****  * @{
  23:../../../os/hal/osal/rt/osal.h ****  */
  24:../../../os/hal/osal/rt/osal.h **** 
  25:../../../os/hal/osal/rt/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt/osal.h **** 
  28:../../../os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt/osal.h **** 
  32:../../../os/hal/osal/rt/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt/osal.h **** 
  34:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt/osal.h **** 
  38:../../../os/hal/osal/rt/osal.h **** /**
  39:../../../os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt/osal.h ****  * @{
  41:../../../os/hal/osal/rt/osal.h ****  */
  42:../../../os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt/osal.h **** #endif
  45:../../../os/hal/osal/rt/osal.h **** 
  46:../../../os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt/osal.h **** #endif
  49:../../../os/hal/osal/rt/osal.h **** 
  50:../../../os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt/osal.h **** /** @} */
  53:../../../os/hal/osal/rt/osal.h **** 
  54:../../../os/hal/osal/rt/osal.h **** #if 0
  55:../../../os/hal/osal/rt/osal.h **** /**
  56:../../../os/hal/osal/rt/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt/osal.h ****  * @{
  58:../../../os/hal/osal/rt/osal.h ****  */
  59:../../../os/hal/osal/rt/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt/osal.h **** /** @} */
  63:../../../os/hal/osal/rt/osal.h **** #endif
  64:../../../os/hal/osal/rt/osal.h **** 
  65:../../../os/hal/osal/rt/osal.h **** #if 0
  66:../../../os/hal/osal/rt/osal.h **** /**
  67:../../../os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt/osal.h ****  * @{
  69:../../../os/hal/osal/rt/osal.h ****  */
  70:../../../os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt/osal.h **** /** @} */
  73:../../../os/hal/osal/rt/osal.h **** #endif
  74:../../../os/hal/osal/rt/osal.h **** 
  75:../../../os/hal/osal/rt/osal.h **** /**
  76:../../../os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt/osal.h ****  * @{
  78:../../../os/hal/osal/rt/osal.h ****  */
  79:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt/osal.h **** /** @} */
  83:../../../os/hal/osal/rt/osal.h **** 
  84:../../../os/hal/osal/rt/osal.h **** /**
  85:../../../os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt/osal.h ****  * @{
  87:../../../os/hal/osal/rt/osal.h ****  */
  88:../../../os/hal/osal/rt/osal.h **** /**
  89:../../../os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt/osal.h ****  */
  91:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt/osal.h **** 
  93:../../../os/hal/osal/rt/osal.h **** /**
  94:../../../os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt/osal.h ****  */
  96:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt/osal.h **** 
  98:../../../os/hal/osal/rt/osal.h **** /**
  99:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt/osal.h ****  */
 101:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt/osal.h **** #else
 104:../../../os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt/osal.h **** #endif
 106:../../../os/hal/osal/rt/osal.h **** /** @} */
 107:../../../os/hal/osal/rt/osal.h **** 
 108:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt/osal.h **** 
 112:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt/osal.h **** 
 116:../../../os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt/osal.h **** #endif
 121:../../../os/hal/osal/rt/osal.h **** 
 122:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:../../../os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:../../../os/hal/osal/rt/osal.h **** #endif
 125:../../../os/hal/osal/rt/osal.h **** 
 126:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:../../../os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:../../../os/hal/osal/rt/osal.h **** 
 130:../../../os/hal/osal/rt/osal.h **** #if 0
 131:../../../os/hal/osal/rt/osal.h **** /**
 132:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:../../../os/hal/osal/rt/osal.h ****  */
 134:../../../os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:../../../os/hal/osal/rt/osal.h **** #endif
 136:../../../os/hal/osal/rt/osal.h **** 
 137:../../../os/hal/osal/rt/osal.h **** #if 0
 138:../../../os/hal/osal/rt/osal.h **** /**
 139:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:../../../os/hal/osal/rt/osal.h ****  */
 141:../../../os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:../../../os/hal/osal/rt/osal.h **** #endif
 143:../../../os/hal/osal/rt/osal.h **** 
 144:../../../os/hal/osal/rt/osal.h **** #if 0
 145:../../../os/hal/osal/rt/osal.h **** /**
 146:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:../../../os/hal/osal/rt/osal.h ****  */
 148:../../../os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:../../../os/hal/osal/rt/osal.h **** #endif
 150:../../../os/hal/osal/rt/osal.h **** 
 151:../../../os/hal/osal/rt/osal.h **** #if 0
 152:../../../os/hal/osal/rt/osal.h **** /**
 153:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of system time interval.
 154:../../../os/hal/osal/rt/osal.h ****  */
 155:../../../os/hal/osal/rt/osal.h **** typedef uint32_t sysinterval_t;
 156:../../../os/hal/osal/rt/osal.h **** #endif
 157:../../../os/hal/osal/rt/osal.h **** 
 158:../../../os/hal/osal/rt/osal.h **** #if 0
 159:../../../os/hal/osal/rt/osal.h **** /**
 160:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 161:../../../os/hal/osal/rt/osal.h ****  */
 162:../../../os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 163:../../../os/hal/osal/rt/osal.h **** #endif
 164:../../../os/hal/osal/rt/osal.h **** 
 165:../../../os/hal/osal/rt/osal.h **** #if 0
 166:../../../os/hal/osal/rt/osal.h **** /**
 167:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 168:../../../os/hal/osal/rt/osal.h ****  */
 169:../../../os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 170:../../../os/hal/osal/rt/osal.h **** #endif
 171:../../../os/hal/osal/rt/osal.h **** 
 172:../../../os/hal/osal/rt/osal.h **** #if 0
 173:../../../os/hal/osal/rt/osal.h **** /**
 174:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 175:../../../os/hal/osal/rt/osal.h ****  */
 176:../../../os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 177:../../../os/hal/osal/rt/osal.h **** #endif
 178:../../../os/hal/osal/rt/osal.h **** 
 179:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 180:../../../os/hal/osal/rt/osal.h **** /**
 181:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 182:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 183:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 184:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 185:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 186:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 187:../../../os/hal/osal/rt/osal.h ****  */
 188:../../../os/hal/osal/rt/osal.h **** typedef struct event_source event_source_t;
 189:../../../os/hal/osal/rt/osal.h **** 
 190:../../../os/hal/osal/rt/osal.h **** /**
 191:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of an event source callback.
 192:../../../os/hal/osal/rt/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 193:../../../os/hal/osal/rt/osal.h ****  *          exclusively as an example and for convenience.
 194:../../../os/hal/osal/rt/osal.h ****  */
 195:../../../os/hal/osal/rt/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 196:../../../os/hal/osal/rt/osal.h **** 
 197:../../../os/hal/osal/rt/osal.h **** /**
 198:../../../os/hal/osal/rt/osal.h ****  * @brief   Events source object.
 199:../../../os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 200:../../../os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 201:../../../os/hal/osal/rt/osal.h ****  *          an entirely different way.
 202:../../../os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 203:../../../os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 204:../../../os/hal/osal/rt/osal.h ****  */
 205:../../../os/hal/osal/rt/osal.h **** struct event_source {
 206:../../../os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 207:../../../os/hal/osal/rt/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 208:../../../os/hal/osal/rt/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 209:../../../os/hal/osal/rt/osal.h **** };
 210:../../../os/hal/osal/rt/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 211:../../../os/hal/osal/rt/osal.h **** 
 212:../../../os/hal/osal/rt/osal.h **** /**
 213:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 214:../../../os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 215:../../../os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 216:../../../os/hal/osal/rt/osal.h ****  */
 217:../../../os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 218:../../../os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 219:../../../os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 220:../../../os/hal/osal/rt/osal.h **** #else
 221:../../../os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 222:../../../os/hal/osal/rt/osal.h **** #endif
 223:../../../os/hal/osal/rt/osal.h **** 
 224:../../../os/hal/osal/rt/osal.h **** #if 0
 225:../../../os/hal/osal/rt/osal.h **** /**
 226:../../../os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 227:../../../os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 228:../../../os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 229:../../../os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 230:../../../os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 231:../../../os/hal/osal/rt/osal.h ****  */
 232:../../../os/hal/osal/rt/osal.h **** typedef struct {
 233:../../../os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 234:../../../os/hal/osal/rt/osal.h **** } threads_queue_t;
 235:../../../os/hal/osal/rt/osal.h **** #endif
 236:../../../os/hal/osal/rt/osal.h **** 
 237:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 238:../../../os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 239:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 240:../../../os/hal/osal/rt/osal.h **** 
 241:../../../os/hal/osal/rt/osal.h **** /**
 242:../../../os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 243:../../../os/hal/osal/rt/osal.h ****  * @{
 244:../../../os/hal/osal/rt/osal.h ****  */
 245:../../../os/hal/osal/rt/osal.h **** /**
 246:../../../os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 247:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 248:../../../os/hal/osal/rt/osal.h ****  *          message and halts.
 249:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 250:../../../os/hal/osal/rt/osal.h ****  *          switch is enabled.
 251:../../../os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 252:../../../os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 253:../../../os/hal/osal/rt/osal.h ****  *
 254:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 255:../../../os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 256:../../../os/hal/osal/rt/osal.h ****  *
 257:../../../os/hal/osal/rt/osal.h ****  * @api
 258:../../../os/hal/osal/rt/osal.h ****  */
 259:../../../os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 260:../../../os/hal/osal/rt/osal.h **** 
 261:../../../os/hal/osal/rt/osal.h **** /**
 262:../../../os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 263:../../../os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 264:../../../os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 265:../../../os/hal/osal/rt/osal.h ****  *          is enabled.
 266:../../../os/hal/osal/rt/osal.h ****  *
 267:../../../os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 268:../../../os/hal/osal/rt/osal.h ****  *
 269:../../../os/hal/osal/rt/osal.h ****  * @api
 270:../../../os/hal/osal/rt/osal.h ****  */
 271:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 272:../../../os/hal/osal/rt/osal.h **** 
 273:../../../os/hal/osal/rt/osal.h **** /**
 274:../../../os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 275:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 276:../../../os/hal/osal/rt/osal.h ****  */
 277:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 278:../../../os/hal/osal/rt/osal.h **** 
 279:../../../os/hal/osal/rt/osal.h **** /**
 280:../../../os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 281:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 282:../../../os/hal/osal/rt/osal.h ****  */
 283:../../../os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 284:../../../os/hal/osal/rt/osal.h **** /** @} */
 285:../../../os/hal/osal/rt/osal.h **** 
 286:../../../os/hal/osal/rt/osal.h **** /**
 287:../../../os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 288:../../../os/hal/osal/rt/osal.h ****  * @{
 289:../../../os/hal/osal/rt/osal.h ****  */
 290:../../../os/hal/osal/rt/osal.h **** /**
 291:../../../os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 292:../../../os/hal/osal/rt/osal.h ****  */
 293:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 294:../../../os/hal/osal/rt/osal.h **** 
 295:../../../os/hal/osal/rt/osal.h **** /**
 296:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 297:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 298:../../../os/hal/osal/rt/osal.h ****  */
 299:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 300:../../../os/hal/osal/rt/osal.h **** 
 301:../../../os/hal/osal/rt/osal.h **** /**
 302:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 303:../../../os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 304:../../../os/hal/osal/rt/osal.h ****  */
 305:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 306:../../../os/hal/osal/rt/osal.h **** 
 307:../../../os/hal/osal/rt/osal.h **** /**
 308:../../../os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 309:../../../os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 310:../../../os/hal/osal/rt/osal.h ****  *
 311:../../../os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 312:../../../os/hal/osal/rt/osal.h ****  */
 313:../../../os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 314:../../../os/hal/osal/rt/osal.h **** /** @} */
 315:../../../os/hal/osal/rt/osal.h **** 
 316:../../../os/hal/osal/rt/osal.h **** /**
 317:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 318:../../../os/hal/osal/rt/osal.h ****  * @{
 319:../../../os/hal/osal/rt/osal.h ****  */
 320:../../../os/hal/osal/rt/osal.h **** /**
 321:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 322:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 323:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/hal/osal/rt/osal.h ****  *
 325:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      number of seconds
 326:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 327:../../../os/hal/osal/rt/osal.h ****  *
 328:../../../os/hal/osal/rt/osal.h ****  * @api
 329:../../../os/hal/osal/rt/osal.h ****  */
 330:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 331:../../../os/hal/osal/rt/osal.h **** 
 332:../../../os/hal/osal/rt/osal.h **** /**
 333:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 334:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 335:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 336:../../../os/hal/osal/rt/osal.h ****  *
 337:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     number of milliseconds
 338:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 339:../../../os/hal/osal/rt/osal.h ****  *
 340:../../../os/hal/osal/rt/osal.h ****  * @api
 341:../../../os/hal/osal/rt/osal.h ****  */
 342:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 343:../../../os/hal/osal/rt/osal.h **** 
 344:../../../os/hal/osal/rt/osal.h **** /**
 345:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 346:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 347:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 348:../../../os/hal/osal/rt/osal.h ****  *
 349:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     number of microseconds
 350:../../../os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 351:../../../os/hal/osal/rt/osal.h ****  *
 352:../../../os/hal/osal/rt/osal.h ****  * @api
 353:../../../os/hal/osal/rt/osal.h ****  */
 354:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 355:../../../os/hal/osal/rt/osal.h **** /** @} */
 356:../../../os/hal/osal/rt/osal.h **** 
 357:../../../os/hal/osal/rt/osal.h **** /**
 358:../../../os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 359:../../../os/hal/osal/rt/osal.h ****  * @{
 360:../../../os/hal/osal/rt/osal.h ****  */
 361:../../../os/hal/osal/rt/osal.h **** /**
 362:../../../os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 363:../../../os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 364:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 365:../../../os/hal/osal/rt/osal.h ****  *
 366:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 367:../../../os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 368:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 369:../../../os/hal/osal/rt/osal.h ****  *
 370:../../../os/hal/osal/rt/osal.h ****  * @api
 371:../../../os/hal/osal/rt/osal.h ****  */
 372:../../../os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 373:../../../os/hal/osal/rt/osal.h **** 
 374:../../../os/hal/osal/rt/osal.h **** /**
 375:../../../os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 376:../../../os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 377:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 378:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 379:../../../os/hal/osal/rt/osal.h ****  *
 380:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 381:../../../os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 382:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 383:../../../os/hal/osal/rt/osal.h ****  *
 384:../../../os/hal/osal/rt/osal.h ****  * @api
 385:../../../os/hal/osal/rt/osal.h ****  */
 386:../../../os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 387:../../../os/hal/osal/rt/osal.h **** 
 388:../../../os/hal/osal/rt/osal.h **** /**
 389:../../../os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 390:../../../os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 391:../../../os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 392:../../../os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 393:../../../os/hal/osal/rt/osal.h ****  *
 394:../../../os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 395:../../../os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 396:../../../os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 397:../../../os/hal/osal/rt/osal.h ****  *
 398:../../../os/hal/osal/rt/osal.h ****  * @api
 399:../../../os/hal/osal/rt/osal.h ****  */
 400:../../../os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 401:../../../os/hal/osal/rt/osal.h **** /** @} */
 402:../../../os/hal/osal/rt/osal.h **** 
 403:../../../os/hal/osal/rt/osal.h **** /**
 404:../../../os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 405:../../../os/hal/osal/rt/osal.h ****  * @{
 406:../../../os/hal/osal/rt/osal.h ****  */
 407:../../../os/hal/osal/rt/osal.h **** /**
 408:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 409:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 410:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 411:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 412:../../../os/hal/osal/rt/osal.h ****  *
 413:../../../os/hal/osal/rt/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 414:../../../os/hal/osal/rt/osal.h ****  *
 415:../../../os/hal/osal/rt/osal.h ****  * @api
 416:../../../os/hal/osal/rt/osal.h ****  */
 417:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 418:../../../os/hal/osal/rt/osal.h **** 
 419:../../../os/hal/osal/rt/osal.h **** /**
 420:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 421:../../../os/hal/osal/rt/osal.h ****  *          milliseconds.
 422:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 423:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 424:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 425:../../../os/hal/osal/rt/osal.h ****  *
 426:../../../os/hal/osal/rt/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 427:../../../os/hal/osal/rt/osal.h ****  *
 428:../../../os/hal/osal/rt/osal.h ****  * @api
 429:../../../os/hal/osal/rt/osal.h ****  */
 430:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 431:../../../os/hal/osal/rt/osal.h **** 
 432:../../../os/hal/osal/rt/osal.h **** /**
 433:../../../os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 434:../../../os/hal/osal/rt/osal.h ****  *          microseconds.
 435:../../../os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 436:../../../os/hal/osal/rt/osal.h ****  *          system tick clock.
 437:../../../os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 438:../../../os/hal/osal/rt/osal.h ****  *
 439:../../../os/hal/osal/rt/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 440:../../../os/hal/osal/rt/osal.h ****  *
 441:../../../os/hal/osal/rt/osal.h ****  * @api
 442:../../../os/hal/osal/rt/osal.h ****  */
 443:../../../os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 444:../../../os/hal/osal/rt/osal.h **** /** @} */
 445:../../../os/hal/osal/rt/osal.h **** 
 446:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 447:../../../os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 448:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 449:../../../os/hal/osal/rt/osal.h **** 
 450:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 451:../../../os/hal/osal/rt/osal.h **** extern "C" {
 452:../../../os/hal/osal/rt/osal.h **** #endif
 453:../../../os/hal/osal/rt/osal.h **** 
 454:../../../os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 455:../../../os/hal/osal/rt/osal.h **** }
 456:../../../os/hal/osal/rt/osal.h **** #endif
 457:../../../os/hal/osal/rt/osal.h **** 
 458:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 459:../../../os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 460:../../../os/hal/osal/rt/osal.h **** /*===========================================================================*/
 461:../../../os/hal/osal/rt/osal.h **** 
 462:../../../os/hal/osal/rt/osal.h **** /**
 463:../../../os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 464:../../../os/hal/osal/rt/osal.h ****  *
 465:../../../os/hal/osal/rt/osal.h ****  * @api
 466:../../../os/hal/osal/rt/osal.h ****  */
 467:../../../os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 468:../../../os/hal/osal/rt/osal.h **** 
 469:../../../os/hal/osal/rt/osal.h **** }
 470:../../../os/hal/osal/rt/osal.h **** 
 471:../../../os/hal/osal/rt/osal.h **** /**
 472:../../../os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 473:../../../os/hal/osal/rt/osal.h ****  *
 474:../../../os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 475:../../../os/hal/osal/rt/osal.h ****  *
 476:../../../os/hal/osal/rt/osal.h ****  * @api
 477:../../../os/hal/osal/rt/osal.h ****  */
 478:../../../os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 479:../../../os/hal/osal/rt/osal.h **** 
 480:../../../os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 481:../../../os/hal/osal/rt/osal.h **** }
 482:../../../os/hal/osal/rt/osal.h **** 
 483:../../../os/hal/osal/rt/osal.h **** /**
 484:../../../os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 485:../../../os/hal/osal/rt/osal.h ****  *
 486:../../../os/hal/osal/rt/osal.h ****  * @special
 487:../../../os/hal/osal/rt/osal.h ****  */
 488:../../../os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 489:../../../os/hal/osal/rt/osal.h **** 
 490:../../../os/hal/osal/rt/osal.h ****   chSysDisable();
 491:../../../os/hal/osal/rt/osal.h **** }
 492:../../../os/hal/osal/rt/osal.h **** 
 493:../../../os/hal/osal/rt/osal.h **** /**
 494:../../../os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 495:../../../os/hal/osal/rt/osal.h ****  *
 496:../../../os/hal/osal/rt/osal.h ****  * @special
 497:../../../os/hal/osal/rt/osal.h ****  */
 498:../../../os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 499:../../../os/hal/osal/rt/osal.h **** 
 500:../../../os/hal/osal/rt/osal.h ****   chSysEnable();
 501:../../../os/hal/osal/rt/osal.h **** }
 502:../../../os/hal/osal/rt/osal.h **** 
 503:../../../os/hal/osal/rt/osal.h **** /**
 504:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 505:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 506:../../../os/hal/osal/rt/osal.h ****  *
 507:../../../os/hal/osal/rt/osal.h ****  * @special
 508:../../../os/hal/osal/rt/osal.h ****  */
 509:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 510:../../../os/hal/osal/rt/osal.h **** 
 511:../../../os/hal/osal/rt/osal.h ****   chSysLock();
 512:../../../os/hal/osal/rt/osal.h **** }
 513:../../../os/hal/osal/rt/osal.h **** 
 514:../../../os/hal/osal/rt/osal.h **** /**
 515:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 516:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 517:../../../os/hal/osal/rt/osal.h ****  *
 518:../../../os/hal/osal/rt/osal.h ****  * @special
 519:../../../os/hal/osal/rt/osal.h ****  */
 520:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 521:../../../os/hal/osal/rt/osal.h **** 
 522:../../../os/hal/osal/rt/osal.h ****   chSysUnlock();
 523:../../../os/hal/osal/rt/osal.h **** }
 524:../../../os/hal/osal/rt/osal.h **** 
 525:../../../os/hal/osal/rt/osal.h **** /**
 526:../../../os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 527:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 528:../../../os/hal/osal/rt/osal.h ****  *
 529:../../../os/hal/osal/rt/osal.h ****  * @special
 530:../../../os/hal/osal/rt/osal.h ****  */
 531:../../../os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 532:../../../os/hal/osal/rt/osal.h **** 
 533:../../../os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 534:../../../os/hal/osal/rt/osal.h **** }
 535:../../../os/hal/osal/rt/osal.h **** 
 536:../../../os/hal/osal/rt/osal.h **** /**
 537:../../../os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 538:../../../os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 539:../../../os/hal/osal/rt/osal.h ****  *
 540:../../../os/hal/osal/rt/osal.h ****  * @special
 541:../../../os/hal/osal/rt/osal.h ****  */
 542:../../../os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 543:../../../os/hal/osal/rt/osal.h **** 
 544:../../../os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 545:../../../os/hal/osal/rt/osal.h **** }
 546:../../../os/hal/osal/rt/osal.h **** 
 547:../../../os/hal/osal/rt/osal.h **** /**
 548:../../../os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 549:../../../os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 550:../../../os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 551:../../../os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 552:../../../os/hal/osal/rt/osal.h ****  *          is known.
 553:../../../os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 554:../../../os/hal/osal/rt/osal.h ****  *
 555:../../../os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 556:../../../os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 557:../../../os/hal/osal/rt/osal.h ****  *
 558:../../../os/hal/osal/rt/osal.h ****  * @xclass
 559:../../../os/hal/osal/rt/osal.h ****  */
 560:../../../os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 561:../../../os/hal/osal/rt/osal.h **** 
 562:../../../os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 563:../../../os/hal/osal/rt/osal.h **** }
 564:../../../os/hal/osal/rt/osal.h **** 
 565:../../../os/hal/osal/rt/osal.h **** /**
 566:../../../os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 567:../../../os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 568:../../../os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 569:../../../os/hal/osal/rt/osal.h ****  *
 570:../../../os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 571:../../../os/hal/osal/rt/osal.h ****  *
 572:../../../os/hal/osal/rt/osal.h ****  * @xclass
 573:../../../os/hal/osal/rt/osal.h ****  */
 574:../../../os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 575:../../../os/hal/osal/rt/osal.h **** 
 576:../../../os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 577:../../../os/hal/osal/rt/osal.h **** }
 578:../../../os/hal/osal/rt/osal.h **** 
 579:../../../os/hal/osal/rt/osal.h **** /**
 580:../../../os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 581:../../../os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 582:../../../os/hal/osal/rt/osal.h ****  *          value.
 583:../../../os/hal/osal/rt/osal.h ****  *
 584:../../../os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 585:../../../os/hal/osal/rt/osal.h ****  *
 586:../../../os/hal/osal/rt/osal.h ****  * @xclass
 587:../../../os/hal/osal/rt/osal.h ****  */
 588:../../../os/hal/osal/rt/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 589:../../../os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 590:../../../os/hal/osal/rt/osal.h **** 
 591:../../../os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 592:../../../os/hal/osal/rt/osal.h **** }
 593:../../../os/hal/osal/rt/osal.h **** #endif
 594:../../../os/hal/osal/rt/osal.h **** 
 595:../../../os/hal/osal/rt/osal.h **** /**
 596:../../../os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 597:../../../os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 598:../../../os/hal/osal/rt/osal.h ****  *          service from the HAL.
 599:../../../os/hal/osal/rt/osal.h ****  */
 600:../../../os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 601:../../../os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 602:../../../os/hal/osal/rt/osal.h **** 
 603:../../../os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 604:../../../os/hal/osal/rt/osal.h **** }
 605:../../../os/hal/osal/rt/osal.h **** #endif
 606:../../../os/hal/osal/rt/osal.h **** 
 607:../../../os/hal/osal/rt/osal.h **** /**
 608:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 609:../../../os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 610:../../../os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 611:../../../os/hal/osal/rt/osal.h ****  *          required in this scenario.
 612:../../../os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 613:../../../os/hal/osal/rt/osal.h ****  *
 614:../../../os/hal/osal/rt/osal.h ****  * @sclass
 615:../../../os/hal/osal/rt/osal.h ****  */
 616:../../../os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 617:../../../os/hal/osal/rt/osal.h **** 
 618:../../../os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 619:../../../os/hal/osal/rt/osal.h **** }
 620:../../../os/hal/osal/rt/osal.h **** 
 621:../../../os/hal/osal/rt/osal.h **** /**
 622:../../../os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 623:../../../os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 624:../../../os/hal/osal/rt/osal.h ****  *          invocation.
 625:../../../os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 626:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 627:../../../os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 628:../../../os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 629:../../../os/hal/osal/rt/osal.h ****  *
 630:../../../os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 631:../../../os/hal/osal/rt/osal.h ****  *
 632:../../../os/hal/osal/rt/osal.h ****  * @xclass
 633:../../../os/hal/osal/rt/osal.h ****  */
 634:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 635:../../../os/hal/osal/rt/osal.h **** 
 636:../../../os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 637:../../../os/hal/osal/rt/osal.h **** }
 638:../../../os/hal/osal/rt/osal.h **** 
 639:../../../os/hal/osal/rt/osal.h **** /**
 640:../../../os/hal/osal/rt/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 641:../../../os/hal/osal/rt/osal.h ****  *
 642:../../../os/hal/osal/rt/osal.h ****  * @param[in] systime   base system time
 643:../../../os/hal/osal/rt/osal.h ****  * @param[in] interval  interval to be added
 644:../../../os/hal/osal/rt/osal.h ****  * @return              The new system time.
 645:../../../os/hal/osal/rt/osal.h ****  *
 646:../../../os/hal/osal/rt/osal.h ****  * @xclass
 647:../../../os/hal/osal/rt/osal.h ****  */
 648:../../../os/hal/osal/rt/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 649:../../../os/hal/osal/rt/osal.h ****                                      sysinterval_t interval) {
 650:../../../os/hal/osal/rt/osal.h **** 
 651:../../../os/hal/osal/rt/osal.h ****   return chTimeAddX(systime, interval);
 652:../../../os/hal/osal/rt/osal.h **** }
 653:../../../os/hal/osal/rt/osal.h **** 
 654:../../../os/hal/osal/rt/osal.h **** /**
 655:../../../os/hal/osal/rt/osal.h ****  * @brief   Subtracts two system times returning an interval.
 656:../../../os/hal/osal/rt/osal.h ****  *
 657:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     first system time
 658:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       second system time
 659:../../../os/hal/osal/rt/osal.h ****  * @return              The interval representing the time difference.
 660:../../../os/hal/osal/rt/osal.h ****  *
 661:../../../os/hal/osal/rt/osal.h ****  * @xclass
 662:../../../os/hal/osal/rt/osal.h ****  */
 663:../../../os/hal/osal/rt/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 664:../../../os/hal/osal/rt/osal.h **** 
 665:../../../os/hal/osal/rt/osal.h ****   return chTimeDiffX(start, end);
 666:../../../os/hal/osal/rt/osal.h **** }
 667:../../../os/hal/osal/rt/osal.h **** 
 668:../../../os/hal/osal/rt/osal.h **** /**
 669:../../../os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 670:../../../os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 671:../../../os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 672:../../../os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 673:../../../os/hal/osal/rt/osal.h ****  *
 674:../../../os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 675:../../../os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 676:../../../os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 677:../../../os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 678:../../../os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 679:../../../os/hal/osal/rt/osal.h ****  *
 680:../../../os/hal/osal/rt/osal.h ****  * @xclass
 681:../../../os/hal/osal/rt/osal.h ****  */
 682:../../../os/hal/osal/rt/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 683:../../../os/hal/osal/rt/osal.h ****                                       systime_t start,
 684:../../../os/hal/osal/rt/osal.h ****                                       systime_t end) {
 685:../../../os/hal/osal/rt/osal.h **** 
 686:../../../os/hal/osal/rt/osal.h ****   return chTimeIsInRangeX(time, start, end);
 687:../../../os/hal/osal/rt/osal.h **** }
 688:../../../os/hal/osal/rt/osal.h **** 
 689:../../../os/hal/osal/rt/osal.h **** /**
 690:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 691:../../../os/hal/osal/rt/osal.h ****  *
 692:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 693:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 694:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 695:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 696:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 697:../../../os/hal/osal/rt/osal.h ****  *                      .
 698:../../../os/hal/osal/rt/osal.h ****  *
 699:../../../os/hal/osal/rt/osal.h ****  * @sclass
 700:../../../os/hal/osal/rt/osal.h ****  */
 701:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 702:../../../os/hal/osal/rt/osal.h **** 
 703:../../../os/hal/osal/rt/osal.h ****   chThdSleepS(delay);
 704:../../../os/hal/osal/rt/osal.h **** }
 705:../../../os/hal/osal/rt/osal.h **** 
 706:../../../os/hal/osal/rt/osal.h **** /**
 707:../../../os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 708:../../../os/hal/osal/rt/osal.h ****  *
 709:../../../os/hal/osal/rt/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 710:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 711:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 712:../../../os/hal/osal/rt/osal.h ****  *                        normal time specification.
 713:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 714:../../../os/hal/osal/rt/osal.h ****  *                      .
 715:../../../os/hal/osal/rt/osal.h ****  *
 716:../../../os/hal/osal/rt/osal.h ****  * @api
 717:../../../os/hal/osal/rt/osal.h ****  */
 718:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 719:../../../os/hal/osal/rt/osal.h **** 
 720:../../../os/hal/osal/rt/osal.h ****   chThdSleep(delay);
 721:../../../os/hal/osal/rt/osal.h **** }
 722:../../../os/hal/osal/rt/osal.h **** 
 723:../../../os/hal/osal/rt/osal.h **** /**
 724:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 726:../../../os/hal/osal/rt/osal.h ****  *          context.
 727:../../../os/hal/osal/rt/osal.h ****  *
 728:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 729:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 730:../../../os/hal/osal/rt/osal.h ****  *
 731:../../../os/hal/osal/rt/osal.h ****  * @sclass
 732:../../../os/hal/osal/rt/osal.h ****  */
 733:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 734:../../../os/hal/osal/rt/osal.h **** 
 735:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 736:../../../os/hal/osal/rt/osal.h **** }
 737:../../../os/hal/osal/rt/osal.h **** 
 738:../../../os/hal/osal/rt/osal.h **** /**
 739:../../../os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 740:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 741:../../../os/hal/osal/rt/osal.h ****  *          context.
 742:../../../os/hal/osal/rt/osal.h ****  *
 743:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 744:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 745:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 746:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 747:../../../os/hal/osal/rt/osal.h ****  *                        state.
 748:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 749:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 750:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 751:../../../os/hal/osal/rt/osal.h ****  *                      .
 752:../../../os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 753:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 754:../../../os/hal/osal/rt/osal.h ****  *
 755:../../../os/hal/osal/rt/osal.h ****  * @sclass
 756:../../../os/hal/osal/rt/osal.h ****  */
 757:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 758:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 759:../../../os/hal/osal/rt/osal.h **** 
 760:../../../os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 761:../../../os/hal/osal/rt/osal.h **** }
 762:../../../os/hal/osal/rt/osal.h **** 
 763:../../../os/hal/osal/rt/osal.h **** /**
 764:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 765:../../../os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 766:../../../os/hal/osal/rt/osal.h ****  *          ISR context.
 767:../../../os/hal/osal/rt/osal.h ****  *
 768:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 769:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 770:../../../os/hal/osal/rt/osal.h ****  *
 771:../../../os/hal/osal/rt/osal.h ****  * @iclass
 772:../../../os/hal/osal/rt/osal.h ****  */
 773:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 774:../../../os/hal/osal/rt/osal.h **** 
 775:../../../os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 776:../../../os/hal/osal/rt/osal.h **** }
 777:../../../os/hal/osal/rt/osal.h **** 
 778:../../../os/hal/osal/rt/osal.h **** /**
 779:../../../os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 780:../../../os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 781:../../../os/hal/osal/rt/osal.h ****  *          context.
 782:../../../os/hal/osal/rt/osal.h ****  *
 783:../../../os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 784:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 785:../../../os/hal/osal/rt/osal.h ****  *
 786:../../../os/hal/osal/rt/osal.h ****  * @iclass
 787:../../../os/hal/osal/rt/osal.h ****  */
 788:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 789:../../../os/hal/osal/rt/osal.h **** 
 790:../../../os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 791:../../../os/hal/osal/rt/osal.h **** }
 792:../../../os/hal/osal/rt/osal.h **** 
 793:../../../os/hal/osal/rt/osal.h **** /**
 794:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 795:../../../os/hal/osal/rt/osal.h ****  *
 796:../../../os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 797:../../../os/hal/osal/rt/osal.h ****  *
 798:../../../os/hal/osal/rt/osal.h ****  * @init
 799:../../../os/hal/osal/rt/osal.h ****  */
 800:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 801:../../../os/hal/osal/rt/osal.h **** 
 802:../../../os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 803:../../../os/hal/osal/rt/osal.h **** }
 804:../../../os/hal/osal/rt/osal.h **** 
 805:../../../os/hal/osal/rt/osal.h **** /**
 806:../../../os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 807:../../../os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 808:../../../os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 809:../../../os/hal/osal/rt/osal.h ****  *
 810:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 811:../../../os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 812:../../../os/hal/osal/rt/osal.h ****  *                      handled as follow:
 813:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 814:../../../os/hal/osal/rt/osal.h ****  *                        state.
 815:../../../os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 816:../../../os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 817:../../../os/hal/osal/rt/osal.h ****  *                        occurred.
 818:../../../os/hal/osal/rt/osal.h ****  *                      .
 819:../../../os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 820:../../../os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 821:../../../os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 822:../../../os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 823:../../../os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 824:../../../os/hal/osal/rt/osal.h ****  *                      specification.
 825:../../../os/hal/osal/rt/osal.h ****  *
 826:../../../os/hal/osal/rt/osal.h ****  * @sclass
 827:../../../os/hal/osal/rt/osal.h ****  */
 828:../../../os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 829:../../../os/hal/osal/rt/osal.h ****                                               sysinterval_t timeout) {
 830:../../../os/hal/osal/rt/osal.h **** 
 831:../../../os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 832:../../../os/hal/osal/rt/osal.h **** }
 833:../../../os/hal/osal/rt/osal.h **** 
 834:../../../os/hal/osal/rt/osal.h **** /**
 835:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 836:../../../os/hal/osal/rt/osal.h ****  *
 837:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 838:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 839:../../../os/hal/osal/rt/osal.h ****  *
 840:../../../os/hal/osal/rt/osal.h ****  * @iclass
 841:../../../os/hal/osal/rt/osal.h ****  */
 842:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 843:../../../os/hal/osal/rt/osal.h **** 
 844:../../../os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 845:../../../os/hal/osal/rt/osal.h **** }
 846:../../../os/hal/osal/rt/osal.h **** 
 847:../../../os/hal/osal/rt/osal.h **** /**
 848:../../../os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 849:../../../os/hal/osal/rt/osal.h ****  *
 850:../../../os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 851:../../../os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 852:../../../os/hal/osal/rt/osal.h ****  *
 853:../../../os/hal/osal/rt/osal.h ****  * @iclass
 854:../../../os/hal/osal/rt/osal.h ****  */
 855:../../../os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 856:../../../os/hal/osal/rt/osal.h **** 
 857:../../../os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 858:../../../os/hal/osal/rt/osal.h **** }
 859:../../../os/hal/osal/rt/osal.h **** 
 860:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 861:../../../os/hal/osal/rt/osal.h **** /**
 862:../../../os/hal/osal/rt/osal.h ****  * @brief   Initializes an event source object.
 863:../../../os/hal/osal/rt/osal.h ****  *
 864:../../../os/hal/osal/rt/osal.h ****  * @param[out] esp      pointer to the event source object
 865:../../../os/hal/osal/rt/osal.h ****  *
 866:../../../os/hal/osal/rt/osal.h ****  * @init
 867:../../../os/hal/osal/rt/osal.h ****  */
 868:../../../os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 282               		.loc 2 868 20 view .LVU48
 283               	.LBE74:
 869:../../../os/hal/osal/rt/osal.h **** 
 870:../../../os/hal/osal/rt/osal.h ****   chEvtObjectInit(esp);
 284               		.loc 2 870 3 view .LVU49
 285               	.LBB77:
 286               	.LBB75:
 287               	.LBI75:
 288               		.file 3 "../../../os/rt/include/chevents.h"
   1:../../../os/rt/include/chevents.h **** /*
   2:../../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chevents.h **** 
   4:../../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chevents.h **** 
   6:../../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chevents.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chevents.h ****     (at your option) any later version.
  10:../../../os/rt/include/chevents.h **** 
  11:../../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chevents.h **** 
  16:../../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chevents.h **** */
  19:../../../os/rt/include/chevents.h **** /*
  20:../../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/include/chevents.h ****  */
  22:../../../os/rt/include/chevents.h **** 
  23:../../../os/rt/include/chevents.h **** /**
  24:../../../os/rt/include/chevents.h ****  * @file    chevents.h
  25:../../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../../os/rt/include/chevents.h ****  *
  27:../../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../../os/rt/include/chevents.h ****  * @{
  29:../../../os/rt/include/chevents.h ****  */
  30:../../../os/rt/include/chevents.h **** 
  31:../../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../../os/rt/include/chevents.h **** 
  34:../../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../../os/rt/include/chevents.h **** 
  36:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../../os/rt/include/chevents.h **** 
  40:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../../os/rt/include/chevents.h **** 
  44:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../../os/rt/include/chevents.h **** 
  48:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../../os/rt/include/chevents.h **** 
  52:../../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:../../../os/rt/include/chevents.h **** 
  54:../../../os/rt/include/chevents.h **** /**
  55:../../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:../../../os/rt/include/chevents.h ****  */
  57:../../../os/rt/include/chevents.h **** struct event_listener {
  58:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:../../../os/rt/include/chevents.h ****                                                     registered on the event
  60:../../../os/rt/include/chevents.h ****                                                     source.                 */
  61:../../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:../../../os/rt/include/chevents.h ****                                                     event source.           */
  63:../../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:../../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:../../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:../../../os/rt/include/chevents.h ****                                                     by the event source.    */
  67:../../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:../../../os/rt/include/chevents.h ****                                                     interested in.          */
  69:../../../os/rt/include/chevents.h **** };
  70:../../../os/rt/include/chevents.h **** 
  71:../../../os/rt/include/chevents.h **** /**
  72:../../../os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:../../../os/rt/include/chevents.h ****  */
  74:../../../os/rt/include/chevents.h **** typedef struct event_source {
  75:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:../../../os/rt/include/chevents.h ****                                                     registered on the Event
  77:../../../os/rt/include/chevents.h ****                                                     Source.                 */
  78:../../../os/rt/include/chevents.h **** } event_source_t;
  79:../../../os/rt/include/chevents.h **** 
  80:../../../os/rt/include/chevents.h **** /**
  81:../../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:../../../os/rt/include/chevents.h ****  */
  83:../../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:../../../os/rt/include/chevents.h **** 
  85:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  86:../../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  88:../../../os/rt/include/chevents.h **** 
  89:../../../os/rt/include/chevents.h **** /**
  90:../../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:../../../os/rt/include/chevents.h ****  */
  92:../../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:../../../os/rt/include/chevents.h **** 
  94:../../../os/rt/include/chevents.h **** /**
  95:../../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:../../../os/rt/include/chevents.h ****  */
  97:../../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:../../../os/rt/include/chevents.h **** 
  99:../../../os/rt/include/chevents.h **** /**
 100:../../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:../../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:../../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:../../../os/rt/include/chevents.h ****  */
 105:../../../os/rt/include/chevents.h **** #define _EVENTSOURCE_DATA(name) {(event_listener_t *)(&name)}
 106:../../../os/rt/include/chevents.h **** 
 107:../../../os/rt/include/chevents.h **** /**
 108:../../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:../../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:../../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:../../../os/rt/include/chevents.h ****  *
 112:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:../../../os/rt/include/chevents.h ****  */
 114:../../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = _EVENTSOURCE_DATA(name)
 115:../../../os/rt/include/chevents.h **** 
 116:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 117:../../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 119:../../../os/rt/include/chevents.h **** 
 120:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 121:../../../os/rt/include/chevents.h **** extern "C" {
 122:../../../os/rt/include/chevents.h **** #endif
 123:../../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 124:../../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 125:../../../os/rt/include/chevents.h ****                                   eventmask_t events,
 126:../../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 127:../../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 128:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEventsI(eventmask_t events);
 129:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 130:../../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 131:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 132:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 133:../../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 134:../../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 135:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 136:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 137:../../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 138:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 139:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 140:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 141:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 142:../../../os/rt/include/chevents.h **** #endif
 143:../../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 144:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout);
 145:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout);
 146:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout);
 147:../../../os/rt/include/chevents.h **** #endif
 148:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 149:../../../os/rt/include/chevents.h **** }
 150:../../../os/rt/include/chevents.h **** #endif
 151:../../../os/rt/include/chevents.h **** 
 152:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 153:../../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 154:../../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 155:../../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 156:../../../os/rt/include/chevents.h **** #endif
 157:../../../os/rt/include/chevents.h **** 
 158:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 159:../../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 160:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 161:../../../os/rt/include/chevents.h **** 
 162:../../../os/rt/include/chevents.h **** /**
 163:../../../os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 164:../../../os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 165:../../../os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 166:../../../os/rt/include/chevents.h ****  *
 167:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 168:../../../os/rt/include/chevents.h ****  *
 169:../../../os/rt/include/chevents.h ****  * @init
 170:../../../os/rt/include/chevents.h ****  */
 171:../../../os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 289               		.loc 3 171 20 view .LVU50
 290               	.LBB76:
 172:../../../os/rt/include/chevents.h **** 
 173:../../../os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 291               		.loc 3 173 3 view .LVU51
 292               		.loc 3 173 13 is_stmt 0 view .LVU52
 293 001c FB83      		std Y+3,r31
 294 001e EA83      		std Y+2,r30
 295               	.LVL28:
 296               		.loc 3 173 13 view .LVU53
 297               	.LBE76:
 298               	.LBE75:
 299               	.LBE77:
 162:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 300               		.loc 1 162 3 is_stmt 1 view .LVU54
 301               		.loc 1 162 14 is_stmt 0 view .LVU55
 302 0020 81E0      		ldi r24,lo8(1)
 303 0022 8C83      		std Y+4,r24
 163:../../../os/hal/src/hal_serial.c ****   iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 304               		.loc 1 163 3 is_stmt 1 view .LVU56
 305               		.loc 1 163 33 is_stmt 0 view .LVU57
 306 0024 BE01      		movw r22,r28
 307               	.LVL29:
 308               		.loc 1 163 33 view .LVU58
 309 0026 675D      		subi r22,-41
 310 0028 7F4F      		sbci r23,-1
 311               		.loc 1 163 3 view .LVU59
 312 002a 8E01      		movw r16,r28
 313 002c 40E1      		ldi r20,lo8(16)
 314 002e 50E0      		ldi r21,0
 315               	.LVL30:
 316               		.loc 1 163 3 view .LVU60
 317 0030 CE01      		movw r24,r28
 318 0032 0596      		adiw r24,5
 319 0034 0E94 0000 		call iqObjectInit
 320               	.LVL31:
 164:../../../os/hal/src/hal_serial.c ****   oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 321               		.loc 1 164 3 is_stmt 1 view .LVU61
 322               		.loc 1 164 33 is_stmt 0 view .LVU62
 323 0038 BE01      		movw r22,r28
 324 003a 675C      		subi r22,-57
 325 003c 7F4F      		sbci r23,-1
 326               		.loc 1 164 3 view .LVU63
 327 003e 9701      		movw r18,r14
 328 0040 40E1      		ldi r20,lo8(16)
 329 0042 50E0      		ldi r21,0
 330 0044 CE01      		movw r24,r28
 331 0046 4796      		adiw r24,23
 332 0048 0E94 0000 		call oqObjectInit
 333               	.LVL32:
 334               	/* epilogue start */
 165:../../../os/hal/src/hal_serial.c **** }
 335               		.loc 1 165 1 view .LVU64
 336 004c DF91      		pop r29
 337 004e CF91      		pop r28
 338               	.LVL33:
 339               		.loc 1 165 1 view .LVU65
 340 0050 1F91      		pop r17
 341 0052 0F91      		pop r16
 342               	.LVL34:
 343               		.loc 1 165 1 view .LVU66
 344 0054 FF90      		pop r15
 345 0056 EF90      		pop r14
 346               	.LVL35:
 347               		.loc 1 165 1 view .LVU67
 348 0058 0895      		ret
 349               		.cfi_endproc
 350               	.LFE183:
 352               		.section	.text.sdStart,"ax",@progbits
 353               	.global	sdStart
 355               	sdStart:
 356               	.LVL36:
 357               	.LFB184:
 166:../../../os/hal/src/hal_serial.c **** #else
 167:../../../os/hal/src/hal_serial.c **** void sdObjectInit(SerialDriver *sdp) {
 168:../../../os/hal/src/hal_serial.c **** 
 169:../../../os/hal/src/hal_serial.c ****   sdp->vmt = &vmt;
 170:../../../os/hal/src/hal_serial.c ****   osalEventObjectInit(&sdp->event);
 171:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 172:../../../os/hal/src/hal_serial.c **** }
 173:../../../os/hal/src/hal_serial.c **** #endif
 174:../../../os/hal/src/hal_serial.c **** 
 175:../../../os/hal/src/hal_serial.c **** /**
 176:../../../os/hal/src/hal_serial.c ****  * @brief   Configures and starts the driver.
 177:../../../os/hal/src/hal_serial.c ****  *
 178:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 179:../../../os/hal/src/hal_serial.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 180:../../../os/hal/src/hal_serial.c ****  *                      If this parameter is set to @p NULL then a default
 181:../../../os/hal/src/hal_serial.c ****  *                      configuration is used.
 182:../../../os/hal/src/hal_serial.c ****  *
 183:../../../os/hal/src/hal_serial.c ****  * @api
 184:../../../os/hal/src/hal_serial.c ****  */
 185:../../../os/hal/src/hal_serial.c **** void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 358               		.loc 1 185 61 is_stmt 1 view -0
 359               		.cfi_startproc
 360               		.loc 1 185 61 is_stmt 0 view .LVU69
 361 0000 CF93      		push r28
 362               	.LCFI6:
 363               		.cfi_def_cfa_offset 3
 364               		.cfi_offset 28, -2
 365 0002 DF93      		push r29
 366               	.LCFI7:
 367               		.cfi_def_cfa_offset 4
 368               		.cfi_offset 29, -3
 369               	/* prologue: function */
 370               	/* frame size = 0 */
 371               	/* stack size = 2 */
 372               	.L__stack_usage = 2
 373 0004 EC01      		movw r28,r24
 186:../../../os/hal/src/hal_serial.c **** 
 187:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 374               		.loc 1 187 3 is_stmt 1 view .LVU70
 375               		.loc 1 187 3 view .LVU71
 188:../../../os/hal/src/hal_serial.c **** 
 189:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 376               		.loc 1 189 3 view .LVU72
 377               	.LBB78:
 378               	.LBI78:
 509:../../../os/hal/osal/rt/osal.h **** 
 379               		.loc 2 509 20 view .LVU73
 380               	.LBE78:
 511:../../../os/hal/osal/rt/osal.h **** }
 381               		.loc 2 511 3 view .LVU74
 382               	.LBB83:
 383               	.LBB79:
 384               	.LBI79:
 385               		.file 4 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 386               		.loc 4 353 20 view .LVU75
 387               	.LBE79:
 388               	.LBE83:
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 389               		.loc 4 355 3 view .LVU76
 390               	.LBB84:
 391               	.LBB82:
 392               	.LBB80:
 393               	.LBI80:
 394               		.file 5 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 395               		.loc 5 435 20 view .LVU77
 396               	.LBB81:
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 397               		.loc 5 437 3 view .LVU78
 398               	/* #APP */
 399               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 400 0006 F894      		cli
 401               	 ;  0 "" 2
 402               	/* #NOAPP */
 403               	.LBE81:
 404               	.LBE80:
 405               	.LBE82:
 406               	.LBE84:
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 407               		.loc 4 356 34 view .LVU79
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 408               		.loc 4 357 20 view .LVU80
 190:../../../os/hal/src/hal_serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 409               		.loc 1 190 3 view .LVU81
 410               		.loc 1 190 3 view .LVU82
 191:../../../os/hal/src/hal_serial.c ****                 "invalid state");
 192:../../../os/hal/src/hal_serial.c ****   sd_lld_start(sdp, config);
 411               		.loc 1 192 3 view .LVU83
 412 0008 0E94 0000 		call sd_lld_start
 413               	.LVL37:
 193:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_READY;
 414               		.loc 1 193 3 view .LVU84
 415               		.loc 1 193 14 is_stmt 0 view .LVU85
 416 000c 82E0      		ldi r24,lo8(2)
 417 000e 8C83      		std Y+4,r24
 194:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 418               		.loc 1 194 3 is_stmt 1 view .LVU86
 419               	.LBB85:
 420               	.LBI85:
 520:../../../os/hal/osal/rt/osal.h **** 
 421               		.loc 2 520 20 view .LVU87
 422               	.LBE85:
 522:../../../os/hal/osal/rt/osal.h **** }
 423               		.loc 2 522 3 view .LVU88
 424               	.LBB90:
 425               	.LBB86:
 426               	.LBI86:
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 427               		.loc 4 365 20 view .LVU89
 428               	.LBB87:
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 429               		.loc 4 367 22 view .LVU90
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 430               		.loc 4 368 33 view .LVU91
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 431               		.loc 4 374 3 view .LVU92
 432               		.loc 4 374 3 view .LVU93
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 433               		.loc 4 378 3 view .LVU94
 434               	.LBB88:
 435               	.LBI88:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 436               		.loc 5 445 20 view .LVU95
 437               	.LBB89:
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 438               		.loc 5 447 3 view .LVU96
 439               	/* #APP */
 440               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 441 0010 7894      		sei
 442               	 ;  0 "" 2
 443               	/* #NOAPP */
 444               	/* epilogue start */
 445               	.LBE89:
 446               	.LBE88:
 447               	.LBE87:
 448               	.LBE86:
 449               	.LBE90:
 195:../../../os/hal/src/hal_serial.c **** }
 450               		.loc 1 195 1 is_stmt 0 view .LVU97
 451 0012 DF91      		pop r29
 452 0014 CF91      		pop r28
 453               	.LVL38:
 454               		.loc 1 195 1 view .LVU98
 455 0016 0895      		ret
 456               		.cfi_endproc
 457               	.LFE184:
 459               		.section	.text.sdStop,"ax",@progbits
 460               	.global	sdStop
 462               	sdStop:
 463               	.LVL39:
 464               	.LFB185:
 196:../../../os/hal/src/hal_serial.c **** 
 197:../../../os/hal/src/hal_serial.c **** /**
 198:../../../os/hal/src/hal_serial.c ****  * @brief   Stops the driver.
 199:../../../os/hal/src/hal_serial.c ****  * @details Any thread waiting on the driver's queues will be awakened with
 200:../../../os/hal/src/hal_serial.c ****  *          the message @p MSG_RESET.
 201:../../../os/hal/src/hal_serial.c ****  *
 202:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 203:../../../os/hal/src/hal_serial.c ****  *
 204:../../../os/hal/src/hal_serial.c ****  * @api
 205:../../../os/hal/src/hal_serial.c ****  */
 206:../../../os/hal/src/hal_serial.c **** void sdStop(SerialDriver *sdp) {
 465               		.loc 1 206 32 is_stmt 1 view -0
 466               		.cfi_startproc
 467               		.loc 1 206 32 is_stmt 0 view .LVU100
 468 0000 CF93      		push r28
 469               	.LCFI8:
 470               		.cfi_def_cfa_offset 3
 471               		.cfi_offset 28, -2
 472 0002 DF93      		push r29
 473               	.LCFI9:
 474               		.cfi_def_cfa_offset 4
 475               		.cfi_offset 29, -3
 476               	/* prologue: function */
 477               	/* frame size = 0 */
 478               	/* stack size = 2 */
 479               	.L__stack_usage = 2
 480 0004 EC01      		movw r28,r24
 207:../../../os/hal/src/hal_serial.c **** 
 208:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 481               		.loc 1 208 3 is_stmt 1 view .LVU101
 482               		.loc 1 208 3 view .LVU102
 209:../../../os/hal/src/hal_serial.c **** 
 210:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 483               		.loc 1 210 3 view .LVU103
 484               	.LBB91:
 485               	.LBI91:
 509:../../../os/hal/osal/rt/osal.h **** 
 486               		.loc 2 509 20 view .LVU104
 487               	.LBE91:
 511:../../../os/hal/osal/rt/osal.h **** }
 488               		.loc 2 511 3 view .LVU105
 489               	.LBB96:
 490               	.LBB92:
 491               	.LBI92:
 353:../../../os/rt/include/chsys.h **** 
 492               		.loc 4 353 20 view .LVU106
 493               	.LBE92:
 494               	.LBE96:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 495               		.loc 4 355 3 view .LVU107
 496               	.LBB97:
 497               	.LBB95:
 498               	.LBB93:
 499               	.LBI93:
 435:../../../os/common/ports/AVR/chcore.h **** 
 500               		.loc 5 435 20 view .LVU108
 501               	.LBB94:
 437:../../../os/common/ports/AVR/chcore.h **** }
 502               		.loc 5 437 3 view .LVU109
 503               	/* #APP */
 504               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 505 0006 F894      		cli
 506               	 ;  0 "" 2
 507               	/* #NOAPP */
 508               	.LBE94:
 509               	.LBE93:
 510               	.LBE95:
 511               	.LBE97:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 512               		.loc 4 356 34 view .LVU110
 357:../../../os/rt/include/chsys.h **** }
 513               		.loc 4 357 20 view .LVU111
 211:../../../os/hal/src/hal_serial.c **** 
 212:../../../os/hal/src/hal_serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 514               		.loc 1 212 3 view .LVU112
 515               		.loc 1 212 3 view .LVU113
 213:../../../os/hal/src/hal_serial.c ****                 "invalid state");
 214:../../../os/hal/src/hal_serial.c **** 
 215:../../../os/hal/src/hal_serial.c ****   sd_lld_stop(sdp);
 516               		.loc 1 215 3 view .LVU114
 517 0008 0E94 0000 		call sd_lld_stop
 518               	.LVL40:
 216:../../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 519               		.loc 1 216 3 view .LVU115
 520               		.loc 1 216 14 is_stmt 0 view .LVU116
 521 000c 81E0      		ldi r24,lo8(1)
 522 000e 8C83      		std Y+4,r24
 217:../../../os/hal/src/hal_serial.c ****   oqResetI(&sdp->oqueue);
 523               		.loc 1 217 3 is_stmt 1 view .LVU117
 524 0010 CE01      		movw r24,r28
 525 0012 4796      		adiw r24,23
 526 0014 0E94 0000 		call oqResetI
 527               	.LVL41:
 218:../../../os/hal/src/hal_serial.c ****   iqResetI(&sdp->iqueue);
 528               		.loc 1 218 3 view .LVU118
 529 0018 CE01      		movw r24,r28
 530 001a 0596      		adiw r24,5
 531 001c 0E94 0000 		call iqResetI
 532               	.LVL42:
 219:../../../os/hal/src/hal_serial.c ****   osalOsRescheduleS();
 533               		.loc 1 219 3 view .LVU119
 534               	.LBB98:
 535               	.LBI98:
 616:../../../os/hal/osal/rt/osal.h **** 
 536               		.loc 2 616 20 view .LVU120
 537               	.LBB99:
 618:../../../os/hal/osal/rt/osal.h **** }
 538               		.loc 2 618 3 view .LVU121
 539 0020 0E94 0000 		call chSchRescheduleS
 540               	.LVL43:
 541               	.LBE99:
 542               	.LBE98:
 220:../../../os/hal/src/hal_serial.c **** 
 221:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 543               		.loc 1 221 3 view .LVU122
 544               	.LBB100:
 545               	.LBI100:
 520:../../../os/hal/osal/rt/osal.h **** 
 546               		.loc 2 520 20 view .LVU123
 547               	.LBE100:
 522:../../../os/hal/osal/rt/osal.h **** }
 548               		.loc 2 522 3 view .LVU124
 549               	.LBB105:
 550               	.LBB101:
 551               	.LBI101:
 365:../../../os/rt/include/chsys.h **** 
 552               		.loc 4 365 20 view .LVU125
 553               	.LBB102:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 554               		.loc 4 367 22 view .LVU126
 368:../../../os/rt/include/chsys.h **** 
 555               		.loc 4 368 33 view .LVU127
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 556               		.loc 4 374 3 view .LVU128
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 557               		.loc 4 374 3 view .LVU129
 558               		.loc 4 378 3 view .LVU130
 559               	.LBB103:
 560               	.LBI103:
 445:../../../os/common/ports/AVR/chcore.h **** 
 561               		.loc 5 445 20 view .LVU131
 562               	.LBB104:
 563               		.loc 5 447 3 view .LVU132
 564               	/* #APP */
 565               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 566 0024 7894      		sei
 567               	 ;  0 "" 2
 568               	/* #NOAPP */
 569               	/* epilogue start */
 570               	.LBE104:
 571               	.LBE103:
 572               	.LBE102:
 573               	.LBE101:
 574               	.LBE105:
 222:../../../os/hal/src/hal_serial.c **** }
 575               		.loc 1 222 1 is_stmt 0 view .LVU133
 576 0026 DF91      		pop r29
 577 0028 CF91      		pop r28
 578               	.LVL44:
 579               		.loc 1 222 1 view .LVU134
 580 002a 0895      		ret
 581               		.cfi_endproc
 582               	.LFE185:
 584               		.section	.text.sdIncomingDataI,"ax",@progbits
 585               	.global	sdIncomingDataI
 587               	sdIncomingDataI:
 588               	.LVL45:
 589               	.LFB186:
 223:../../../os/hal/src/hal_serial.c **** 
 224:../../../os/hal/src/hal_serial.c **** /**
 225:../../../os/hal/src/hal_serial.c ****  * @brief   Handles incoming data.
 226:../../../os/hal/src/hal_serial.c ****  * @details This function must be called from the input interrupt service
 227:../../../os/hal/src/hal_serial.c ****  *          routine in order to enqueue incoming data and generate the
 228:../../../os/hal/src/hal_serial.c ****  *          related events.
 229:../../../os/hal/src/hal_serial.c ****  * @note    The incoming data event is only generated when the input queue
 230:../../../os/hal/src/hal_serial.c ****  *          becomes non-empty.
 231:../../../os/hal/src/hal_serial.c ****  * @note    In order to gain some performance it is suggested to not use
 232:../../../os/hal/src/hal_serial.c ****  *          this function directly but copy this code directly into the
 233:../../../os/hal/src/hal_serial.c ****  *          interrupt service routine.
 234:../../../os/hal/src/hal_serial.c ****  *
 235:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 236:../../../os/hal/src/hal_serial.c ****  * @param[in] b         the byte to be written in the driver's Input Queue
 237:../../../os/hal/src/hal_serial.c ****  *
 238:../../../os/hal/src/hal_serial.c ****  * @iclass
 239:../../../os/hal/src/hal_serial.c ****  */
 240:../../../os/hal/src/hal_serial.c **** void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 590               		.loc 1 240 52 is_stmt 1 view -0
 591               		.cfi_startproc
 592               		.loc 1 240 52 is_stmt 0 view .LVU136
 593 0000 1F93      		push r17
 594               	.LCFI10:
 595               		.cfi_def_cfa_offset 3
 596               		.cfi_offset 17, -2
 597 0002 CF93      		push r28
 598               	.LCFI11:
 599               		.cfi_def_cfa_offset 4
 600               		.cfi_offset 28, -3
 601 0004 DF93      		push r29
 602               	.LCFI12:
 603               		.cfi_def_cfa_offset 5
 604               		.cfi_offset 29, -4
 605               	/* prologue: function */
 606               	/* frame size = 0 */
 607               	/* stack size = 3 */
 608               	.L__stack_usage = 3
 609 0006 EC01      		movw r28,r24
 610 0008 162F      		mov r17,r22
 241:../../../os/hal/src/hal_serial.c **** 
 242:../../../os/hal/src/hal_serial.c ****   osalDbgCheckClassI();
 611               		.loc 1 242 23 is_stmt 1 view .LVU137
 243:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 612               		.loc 1 243 3 view .LVU138
 613               		.loc 1 243 3 view .LVU139
 244:../../../os/hal/src/hal_serial.c **** 
 245:../../../os/hal/src/hal_serial.c ****   if (iqIsEmptyI(&sdp->iqueue))
 614               		.loc 1 245 3 view .LVU140
 615               		.loc 1 245 7 is_stmt 0 view .LVU141
 616 000a 8985      		ldd r24,Y+9
 617 000c 9A85      		ldd r25,Y+10
 618               	.LVL46:
 619               		.loc 1 245 6 view .LVU142
 620 000e 892B      		or r24,r25
 621 0010 01F0      		breq .L18
 246:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 622               		.loc 1 246 43 is_stmt 1 discriminator 1 view .LVU143
 247:../../../os/hal/src/hal_serial.c ****   if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 623               		.loc 1 247 3 discriminator 1 view .LVU144
 624               		.loc 1 247 7 is_stmt 0 discriminator 1 view .LVU145
 625 0012 612F      		mov r22,r17
 626               	.LVL47:
 627               		.loc 1 247 7 discriminator 1 view .LVU146
 628 0014 CE01      		movw r24,r28
 629 0016 0596      		adiw r24,5
 630 0018 0E94 0000 		call iqPutI
 631               	.LVL48:
 632               		.loc 1 247 6 discriminator 1 view .LVU147
 633 001c 97FD      		sbrc r25,7
 634 001e 00C0      		rjmp .L19
 635               	.L15:
 636               	/* epilogue start */
 248:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 249:../../../os/hal/src/hal_serial.c **** }
 637               		.loc 1 249 1 view .LVU148
 638 0020 DF91      		pop r29
 639 0022 CF91      		pop r28
 640               	.LVL49:
 641               		.loc 1 249 1 view .LVU149
 642 0024 1F91      		pop r17
 643               	.LVL50:
 644               		.loc 1 249 1 view .LVU150
 645 0026 0895      		ret
 646               	.LVL51:
 647               	.L18:
 246:../../../os/hal/src/hal_serial.c ****   if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 648               		.loc 1 246 5 is_stmt 1 view .LVU151
 649               	.LBB106:
 650               	.LBI106:
 871:../../../os/hal/osal/rt/osal.h **** }
 872:../../../os/hal/osal/rt/osal.h **** #else
 873:../../../os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 874:../../../os/hal/osal/rt/osal.h **** 
 875:../../../os/hal/osal/rt/osal.h ****   osalDbgCheck(esp != NULL);
 876:../../../os/hal/osal/rt/osal.h **** 
 877:../../../os/hal/osal/rt/osal.h ****   esp->flags = (eventflags_t)0;
 878:../../../os/hal/osal/rt/osal.h ****   esp->cb    = NULL;
 879:../../../os/hal/osal/rt/osal.h ****   esp->param = NULL;
 880:../../../os/hal/osal/rt/osal.h **** }
 881:../../../os/hal/osal/rt/osal.h **** #endif
 882:../../../os/hal/osal/rt/osal.h **** 
 883:../../../os/hal/osal/rt/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 884:../../../os/hal/osal/rt/osal.h **** /**
 885:../../../os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 886:../../../os/hal/osal/rt/osal.h ****  *
 887:../../../os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 888:../../../os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 889:../../../os/hal/osal/rt/osal.h ****  *
 890:../../../os/hal/osal/rt/osal.h ****  * @iclass
 891:../../../os/hal/osal/rt/osal.h ****  */
 892:../../../os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 651               		.loc 2 892 20 view .LVU152
 652               	.LBB107:
 893:../../../os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 894:../../../os/hal/osal/rt/osal.h **** 
 895:../../../os/hal/osal/rt/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 653               		.loc 2 895 3 view .LVU153
 654 0028 64E0      		ldi r22,lo8(4)
 655 002a CE01      		movw r24,r28
 656 002c 0296      		adiw r24,2
 657               	.LVL52:
 658               		.loc 2 895 3 is_stmt 0 view .LVU154
 659 002e 0E94 0000 		call chEvtBroadcastFlagsI
 660               	.LVL53:
 661               		.loc 2 895 3 view .LVU155
 662               	.LBE107:
 663               	.LBE106:
 246:../../../os/hal/src/hal_serial.c ****   if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 664               		.loc 1 246 43 is_stmt 1 view .LVU156
 247:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 665               		.loc 1 247 3 view .LVU157
 247:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 666               		.loc 1 247 7 is_stmt 0 view .LVU158
 667 0032 612F      		mov r22,r17
 668 0034 CE01      		movw r24,r28
 669 0036 0596      		adiw r24,5
 670 0038 0E94 0000 		call iqPutI
 671               	.LVL54:
 247:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 672               		.loc 1 247 6 view .LVU159
 673 003c 97FF      		sbrs r25,7
 674 003e 00C0      		rjmp .L15
 675               	.LVL55:
 676               	.L19:
 248:../../../os/hal/src/hal_serial.c **** }
 677               		.loc 1 248 5 is_stmt 1 view .LVU160
 678               	.LBB108:
 679               	.LBI108:
 892:../../../os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 680               		.loc 2 892 20 view .LVU161
 681               	.LBB109:
 682               		.loc 2 895 3 view .LVU162
 683 0040 60E0      		ldi r22,0
 684 0042 CE01      		movw r24,r28
 685 0044 0296      		adiw r24,2
 686               	.LVL56:
 687               	/* epilogue start */
 688               		.loc 2 895 3 is_stmt 0 view .LVU163
 689               	.LBE109:
 690               	.LBE108:
 691               		.loc 1 249 1 view .LVU164
 692 0046 DF91      		pop r29
 693 0048 CF91      		pop r28
 694               	.LVL57:
 695               		.loc 1 249 1 view .LVU165
 696 004a 1F91      		pop r17
 697               	.LVL58:
 698               	.LBB111:
 699               	.LBB110:
 700               		.loc 2 895 3 view .LVU166
 701 004c 0C94 0000 		jmp chEvtBroadcastFlagsI
 702               	.LVL59:
 703               		.loc 2 895 3 view .LVU167
 704               	.LBE110:
 705               	.LBE111:
 706               		.cfi_endproc
 707               	.LFE186:
 709               		.section	.text.sdRequestDataI,"ax",@progbits
 710               	.global	sdRequestDataI
 712               	sdRequestDataI:
 713               	.LVL60:
 714               	.LFB187:
 250:../../../os/hal/src/hal_serial.c **** 
 251:../../../os/hal/src/hal_serial.c **** /**
 252:../../../os/hal/src/hal_serial.c ****  * @brief   Handles outgoing data.
 253:../../../os/hal/src/hal_serial.c ****  * @details Must be called from the output interrupt service routine in order
 254:../../../os/hal/src/hal_serial.c ****  *          to get the next byte to be transmitted.
 255:../../../os/hal/src/hal_serial.c ****  * @note    In order to gain some performance it is suggested to not use
 256:../../../os/hal/src/hal_serial.c ****  *          this function directly but copy this code directly into the
 257:../../../os/hal/src/hal_serial.c ****  *          interrupt service routine.
 258:../../../os/hal/src/hal_serial.c ****  *
 259:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 260:../../../os/hal/src/hal_serial.c ****  * @return              The byte value read from the driver's output queue.
 261:../../../os/hal/src/hal_serial.c ****  * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 262:../../../os/hal/src/hal_serial.c ****  *                      disables the interrupt source when this happens).
 263:../../../os/hal/src/hal_serial.c ****  *
 264:../../../os/hal/src/hal_serial.c ****  * @iclass
 265:../../../os/hal/src/hal_serial.c ****  */
 266:../../../os/hal/src/hal_serial.c **** msg_t sdRequestDataI(SerialDriver *sdp) {
 715               		.loc 1 266 41 is_stmt 1 view -0
 716               		.cfi_startproc
 717               		.loc 1 266 41 is_stmt 0 view .LVU169
 718 0000 0F93      		push r16
 719               	.LCFI13:
 720               		.cfi_def_cfa_offset 3
 721               		.cfi_offset 16, -2
 722 0002 1F93      		push r17
 723               	.LCFI14:
 724               		.cfi_def_cfa_offset 4
 725               		.cfi_offset 17, -3
 726 0004 CF93      		push r28
 727               	.LCFI15:
 728               		.cfi_def_cfa_offset 5
 729               		.cfi_offset 28, -4
 730 0006 DF93      		push r29
 731               	.LCFI16:
 732               		.cfi_def_cfa_offset 6
 733               		.cfi_offset 29, -5
 734               	/* prologue: function */
 735               	/* frame size = 0 */
 736               	/* stack size = 4 */
 737               	.L__stack_usage = 4
 738 0008 8C01      		movw r16,r24
 267:../../../os/hal/src/hal_serial.c ****   msg_t  b;
 739               		.loc 1 267 3 is_stmt 1 view .LVU170
 268:../../../os/hal/src/hal_serial.c **** 
 269:../../../os/hal/src/hal_serial.c ****   osalDbgCheckClassI();
 740               		.loc 1 269 23 view .LVU171
 270:../../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 741               		.loc 1 270 3 view .LVU172
 742               		.loc 1 270 3 view .LVU173
 271:../../../os/hal/src/hal_serial.c **** 
 272:../../../os/hal/src/hal_serial.c ****   b = oqGetI(&sdp->oqueue);
 743               		.loc 1 272 3 view .LVU174
 744               		.loc 1 272 7 is_stmt 0 view .LVU175
 745 000a 4796      		adiw r24,23
 746               	.LVL61:
 747               		.loc 1 272 7 view .LVU176
 748 000c 0E94 0000 		call oqGetI
 749               	.LVL62:
 750 0010 EC01      		movw r28,r24
 751               	.LVL63:
 273:../../../os/hal/src/hal_serial.c ****   if (b < MSG_OK)
 752               		.loc 1 273 3 is_stmt 1 view .LVU177
 753               		.loc 1 273 6 is_stmt 0 view .LVU178
 754 0012 97FD      		sbrc r25,7
 755 0014 00C0      		rjmp .L22
 274:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 275:../../../os/hal/src/hal_serial.c ****   return b;
 276:../../../os/hal/src/hal_serial.c **** }
 756               		.loc 1 276 1 view .LVU179
 757 0016 CE01      		movw r24,r28
 758               	/* epilogue start */
 759               		.loc 1 276 1 view .LVU180
 760 0018 DF91      		pop r29
 761 001a CF91      		pop r28
 762 001c 1F91      		pop r17
 763 001e 0F91      		pop r16
 764               	.LVL64:
 765               		.loc 1 276 1 view .LVU181
 766 0020 0895      		ret
 767               	.LVL65:
 768               	.L22:
 274:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 769               		.loc 1 274 5 is_stmt 1 view .LVU182
 770               	.LBB112:
 771               	.LBI112:
 892:../../../os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 772               		.loc 2 892 20 view .LVU183
 773               	.LBB113:
 774               		.loc 2 895 3 view .LVU184
 775 0022 68E0      		ldi r22,lo8(8)
 776 0024 C801      		movw r24,r16
 777               	.LVL66:
 778               		.loc 2 895 3 is_stmt 0 view .LVU185
 779 0026 0296      		adiw r24,2
 780               	.LVL67:
 781               		.loc 2 895 3 view .LVU186
 782 0028 0E94 0000 		call chEvtBroadcastFlagsI
 783               	.LVL68:
 784               		.loc 2 895 3 view .LVU187
 785               	.LBE113:
 786               	.LBE112:
 274:../../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 787               		.loc 1 274 40 is_stmt 1 view .LVU188
 275:../../../os/hal/src/hal_serial.c **** }
 788               		.loc 1 275 3 view .LVU189
 789               		.loc 1 276 1 is_stmt 0 view .LVU190
 790 002c CE01      		movw r24,r28
 791               	/* epilogue start */
 792 002e DF91      		pop r29
 793 0030 CF91      		pop r28
 794               	.LVL69:
 795               		.loc 1 276 1 view .LVU191
 796 0032 1F91      		pop r17
 797 0034 0F91      		pop r16
 798               	.LVL70:
 799               		.loc 1 276 1 view .LVU192
 800 0036 0895      		ret
 801               		.cfi_endproc
 802               	.LFE187:
 804               		.section	.text.sdPutWouldBlock,"ax",@progbits
 805               	.global	sdPutWouldBlock
 807               	sdPutWouldBlock:
 808               	.LVL71:
 809               	.LFB188:
 277:../../../os/hal/src/hal_serial.c **** 
 278:../../../os/hal/src/hal_serial.c **** /**
 279:../../../os/hal/src/hal_serial.c ****  * @brief   Direct output check on a @p SerialDriver.
 280:../../../os/hal/src/hal_serial.c ****  * @note    This function bypasses the indirect access to the channel and
 281:../../../os/hal/src/hal_serial.c ****  *          checks directly the output queue. This is faster but cannot
 282:../../../os/hal/src/hal_serial.c ****  *          be used to check different channels implementations.
 283:../../../os/hal/src/hal_serial.c ****  *
 284:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 285:../../../os/hal/src/hal_serial.c ****  * @return              The queue status.
 286:../../../os/hal/src/hal_serial.c ****  * @retval false        if the next write operation would not block.
 287:../../../os/hal/src/hal_serial.c ****  * @retval true         if the next write operation would block.
 288:../../../os/hal/src/hal_serial.c ****  *
 289:../../../os/hal/src/hal_serial.c ****  * @deprecated
 290:../../../os/hal/src/hal_serial.c ****  *
 291:../../../os/hal/src/hal_serial.c ****  * @api
 292:../../../os/hal/src/hal_serial.c ****  */
 293:../../../os/hal/src/hal_serial.c **** bool sdPutWouldBlock(SerialDriver *sdp) {
 810               		.loc 1 293 41 is_stmt 1 view -0
 811               		.cfi_startproc
 812               	/* prologue: function */
 813               	/* frame size = 0 */
 814               	/* stack size = 0 */
 815               	.L__stack_usage = 0
 294:../../../os/hal/src/hal_serial.c ****   bool b;
 816               		.loc 1 294 3 view .LVU194
 295:../../../os/hal/src/hal_serial.c **** 
 296:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 817               		.loc 1 296 3 view .LVU195
 818               	.LBB114:
 819               	.LBI114:
 509:../../../os/hal/osal/rt/osal.h **** 
 820               		.loc 2 509 20 view .LVU196
 821               	.LBE114:
 511:../../../os/hal/osal/rt/osal.h **** }
 822               		.loc 2 511 3 view .LVU197
 823               	.LBB119:
 824               	.LBB115:
 825               	.LBI115:
 353:../../../os/rt/include/chsys.h **** 
 826               		.loc 4 353 20 view .LVU198
 827               	.LBE115:
 828               	.LBE119:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 829               		.loc 4 355 3 view .LVU199
 830               	.LBB120:
 831               	.LBB118:
 832               	.LBB116:
 833               	.LBI116:
 435:../../../os/common/ports/AVR/chcore.h **** 
 834               		.loc 5 435 20 view .LVU200
 835               	.LBB117:
 437:../../../os/common/ports/AVR/chcore.h **** }
 836               		.loc 5 437 3 view .LVU201
 837               	/* #APP */
 838               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 839 0000 F894      		cli
 840               	 ;  0 "" 2
 841               	/* #NOAPP */
 842               	.LBE117:
 843               	.LBE116:
 844               	.LBE118:
 845               	.LBE120:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 846               		.loc 4 356 34 view .LVU202
 357:../../../os/rt/include/chsys.h **** }
 847               		.loc 4 357 20 view .LVU203
 297:../../../os/hal/src/hal_serial.c ****   b = oqIsFullI(&sdp->oqueue);
 848               		.loc 1 297 3 view .LVU204
 849               		.loc 1 297 7 is_stmt 0 view .LVU205
 850 0002 FC01      		movw r30,r24
 851 0004 238D      		ldd r18,Z+27
 852 0006 348D      		ldd r19,Z+28
 853               	.LVL72:
 298:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 854               		.loc 1 298 3 is_stmt 1 view .LVU206
 855               	.LBB121:
 856               	.LBI121:
 520:../../../os/hal/osal/rt/osal.h **** 
 857               		.loc 2 520 20 view .LVU207
 858               	.LBE121:
 522:../../../os/hal/osal/rt/osal.h **** }
 859               		.loc 2 522 3 view .LVU208
 860               	.LBB126:
 861               	.LBB122:
 862               	.LBI122:
 365:../../../os/rt/include/chsys.h **** 
 863               		.loc 4 365 20 view .LVU209
 864               	.LBB123:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 865               		.loc 4 367 22 view .LVU210
 368:../../../os/rt/include/chsys.h **** 
 866               		.loc 4 368 33 view .LVU211
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 867               		.loc 4 374 3 view .LVU212
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 868               		.loc 4 374 3 view .LVU213
 869               		.loc 4 378 3 view .LVU214
 870               	.LBB124:
 871               	.LBI124:
 445:../../../os/common/ports/AVR/chcore.h **** 
 872               		.loc 5 445 20 view .LVU215
 873               	.LBB125:
 874               		.loc 5 447 3 view .LVU216
 875               	/* #APP */
 876               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 877 0008 7894      		sei
 878               	 ;  0 "" 2
 879               	/* #NOAPP */
 880               	.LBE125:
 881               	.LBE124:
 882               	.LBE123:
 883               	.LBE122:
 884               	.LBE126:
 299:../../../os/hal/src/hal_serial.c **** 
 300:../../../os/hal/src/hal_serial.c ****   return b;
 885               		.loc 1 300 3 view .LVU217
 297:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 886               		.loc 1 297 5 is_stmt 0 view .LVU218
 887 000a 81E0      		ldi r24,lo8(1)
 888               	.LVL73:
 297:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 889               		.loc 1 297 5 view .LVU219
 890 000c 232B      		or r18,r19
 891 000e 01F0      		breq .L24
 892 0010 80E0      		ldi r24,0
 893               	.L24:
 894               	/* epilogue start */
 301:../../../os/hal/src/hal_serial.c **** }
 895               		.loc 1 301 1 view .LVU220
 896 0012 0895      		ret
 897               		.cfi_endproc
 898               	.LFE188:
 900               		.section	.text.sdGetWouldBlock,"ax",@progbits
 901               	.global	sdGetWouldBlock
 903               	sdGetWouldBlock:
 904               	.LVL74:
 905               	.LFB189:
 302:../../../os/hal/src/hal_serial.c **** 
 303:../../../os/hal/src/hal_serial.c **** /**
 304:../../../os/hal/src/hal_serial.c ****  * @brief   Direct input check on a @p SerialDriver.
 305:../../../os/hal/src/hal_serial.c ****  * @note    This function bypasses the indirect access to the channel and
 306:../../../os/hal/src/hal_serial.c ****  *          checks directly the input queue. This is faster but cannot
 307:../../../os/hal/src/hal_serial.c ****  *          be used to check different channels implementations.
 308:../../../os/hal/src/hal_serial.c ****  *
 309:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 310:../../../os/hal/src/hal_serial.c ****  * @return              The queue status.
 311:../../../os/hal/src/hal_serial.c ****  * @retval false        if the next write operation would not block.
 312:../../../os/hal/src/hal_serial.c ****  * @retval true         if the next write operation would block.
 313:../../../os/hal/src/hal_serial.c ****  *
 314:../../../os/hal/src/hal_serial.c ****  * @deprecated
 315:../../../os/hal/src/hal_serial.c ****  *
 316:../../../os/hal/src/hal_serial.c ****  * @api
 317:../../../os/hal/src/hal_serial.c ****  */
 318:../../../os/hal/src/hal_serial.c **** bool sdGetWouldBlock(SerialDriver *sdp) {
 906               		.loc 1 318 41 is_stmt 1 view -0
 907               		.cfi_startproc
 908               	/* prologue: function */
 909               	/* frame size = 0 */
 910               	/* stack size = 0 */
 911               	.L__stack_usage = 0
 319:../../../os/hal/src/hal_serial.c ****   bool b;
 912               		.loc 1 319 3 view .LVU222
 320:../../../os/hal/src/hal_serial.c **** 
 321:../../../os/hal/src/hal_serial.c ****   osalSysLock();
 913               		.loc 1 321 3 view .LVU223
 914               	.LBB127:
 915               	.LBI127:
 509:../../../os/hal/osal/rt/osal.h **** 
 916               		.loc 2 509 20 view .LVU224
 917               	.LBE127:
 511:../../../os/hal/osal/rt/osal.h **** }
 918               		.loc 2 511 3 view .LVU225
 919               	.LBB132:
 920               	.LBB128:
 921               	.LBI128:
 353:../../../os/rt/include/chsys.h **** 
 922               		.loc 4 353 20 view .LVU226
 923               	.LBE128:
 924               	.LBE132:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 925               		.loc 4 355 3 view .LVU227
 926               	.LBB133:
 927               	.LBB131:
 928               	.LBB129:
 929               	.LBI129:
 435:../../../os/common/ports/AVR/chcore.h **** 
 930               		.loc 5 435 20 view .LVU228
 931               	.LBB130:
 437:../../../os/common/ports/AVR/chcore.h **** }
 932               		.loc 5 437 3 view .LVU229
 933               	/* #APP */
 934               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 935 0000 F894      		cli
 936               	 ;  0 "" 2
 937               	/* #NOAPP */
 938               	.LBE130:
 939               	.LBE129:
 940               	.LBE131:
 941               	.LBE133:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 942               		.loc 4 356 34 view .LVU230
 357:../../../os/rt/include/chsys.h **** }
 943               		.loc 4 357 20 view .LVU231
 322:../../../os/hal/src/hal_serial.c ****   b = iqIsEmptyI(&sdp->iqueue);
 944               		.loc 1 322 3 view .LVU232
 945               		.loc 1 322 7 is_stmt 0 view .LVU233
 946 0002 FC01      		movw r30,r24
 947 0004 2185      		ldd r18,Z+9
 948 0006 3285      		ldd r19,Z+10
 949               	.LVL75:
 323:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 950               		.loc 1 323 3 is_stmt 1 view .LVU234
 951               	.LBB134:
 952               	.LBI134:
 520:../../../os/hal/osal/rt/osal.h **** 
 953               		.loc 2 520 20 view .LVU235
 954               	.LBE134:
 522:../../../os/hal/osal/rt/osal.h **** }
 955               		.loc 2 522 3 view .LVU236
 956               	.LBB139:
 957               	.LBB135:
 958               	.LBI135:
 365:../../../os/rt/include/chsys.h **** 
 959               		.loc 4 365 20 view .LVU237
 960               	.LBB136:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 961               		.loc 4 367 22 view .LVU238
 368:../../../os/rt/include/chsys.h **** 
 962               		.loc 4 368 33 view .LVU239
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 963               		.loc 4 374 3 view .LVU240
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 964               		.loc 4 374 3 view .LVU241
 965               		.loc 4 378 3 view .LVU242
 966               	.LBB137:
 967               	.LBI137:
 445:../../../os/common/ports/AVR/chcore.h **** 
 968               		.loc 5 445 20 view .LVU243
 969               	.LBB138:
 970               		.loc 5 447 3 view .LVU244
 971               	/* #APP */
 972               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 973 0008 7894      		sei
 974               	 ;  0 "" 2
 975               	/* #NOAPP */
 976               	.LBE138:
 977               	.LBE137:
 978               	.LBE136:
 979               	.LBE135:
 980               	.LBE139:
 324:../../../os/hal/src/hal_serial.c **** 
 325:../../../os/hal/src/hal_serial.c ****   return b;
 981               		.loc 1 325 3 view .LVU245
 322:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 982               		.loc 1 322 5 is_stmt 0 view .LVU246
 983 000a 81E0      		ldi r24,lo8(1)
 984               	.LVL76:
 322:../../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 985               		.loc 1 322 5 view .LVU247
 986 000c 232B      		or r18,r19
 987 000e 01F0      		breq .L29
 988 0010 80E0      		ldi r24,0
 989               	.L29:
 990               	/* epilogue start */
 326:../../../os/hal/src/hal_serial.c **** }
 991               		.loc 1 326 1 view .LVU248
 992 0012 0895      		ret
 993               		.cfi_endproc
 994               	.LFE189:
 996               		.section	.text.sdControl,"ax",@progbits
 997               	.global	sdControl
 999               	sdControl:
 1000               	.LVL77:
 1001               	.LFB190:
 327:../../../os/hal/src/hal_serial.c **** 
 328:../../../os/hal/src/hal_serial.c **** /**
 329:../../../os/hal/src/hal_serial.c ****  * @brief   Control operation on a serial port.
 330:../../../os/hal/src/hal_serial.c ****  *
 331:../../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 332:../../../os/hal/src/hal_serial.c ****  * @param[in] operation control operation code
 333:../../../os/hal/src/hal_serial.c ****  * @param[in,out] arg   operation argument
 334:../../../os/hal/src/hal_serial.c ****  *
 335:../../../os/hal/src/hal_serial.c ****  * @return              The control operation status.
 336:../../../os/hal/src/hal_serial.c ****  * @retval MSG_OK       in case of success.
 337:../../../os/hal/src/hal_serial.c ****  * @retval MSG_TIMEOUT  in case of operation timeout.
 338:../../../os/hal/src/hal_serial.c ****  * @retval MSG_RESET    in case of operation reset.
 339:../../../os/hal/src/hal_serial.c ****  *
 340:../../../os/hal/src/hal_serial.c ****  * @api
 341:../../../os/hal/src/hal_serial.c ****  */
 342:../../../os/hal/src/hal_serial.c **** msg_t sdControl(SerialDriver *sdp, unsigned int operation, void *arg) {
 1002               		.loc 1 342 71 is_stmt 1 view -0
 1003               		.cfi_startproc
 1004               	/* prologue: function */
 1005               	/* frame size = 0 */
 1006               	/* stack size = 0 */
 1007               	.L__stack_usage = 0
 343:../../../os/hal/src/hal_serial.c **** 
 344:../../../os/hal/src/hal_serial.c ****   return _ctl((void *)sdp, operation, arg);
 1008               		.loc 1 344 3 view .LVU250
  95:../../../os/hal/src/hal_serial.c **** 
 1009               		.loc 1 95 3 view .LVU251
  97:../../../os/hal/src/hal_serial.c **** 
 1010               		.loc 1 97 3 view .LVU252
  97:../../../os/hal/src/hal_serial.c **** 
 1011               		.loc 1 97 3 view .LVU253
  99:../../../os/hal/src/hal_serial.c ****   case CHN_CTL_NOP:
 1012               		.loc 1 99 3 view .LVU254
 114:../../../os/hal/src/hal_serial.c **** }
 1013               		.loc 1 114 3 view .LVU255
 345:../../../os/hal/src/hal_serial.c **** }
 1014               		.loc 1 345 1 is_stmt 0 view .LVU256
 1015 0000 90E0      		ldi r25,0
 1016 0002 80E0      		ldi r24,0
 1017               	.LVL78:
 1018               	/* epilogue start */
 1019               		.loc 1 345 1 view .LVU257
 1020 0004 0895      		ret
 1021               		.cfi_endproc
 1022               	.LFE190:
 1024               		.section	.rodata.vmt,"a"
 1027               	vmt:
 1028 0000 0000      		.word	0
 1029 0002 0000      		.word	gs(_write)
 1030 0004 0000      		.word	gs(_read)
 1031 0006 0000      		.word	gs(_put)
 1032 0008 0000      		.word	gs(_get)
 1033 000a 0000      		.word	gs(_putt)
 1034 000c 0000      		.word	gs(_gett)
 1035 000e 0000      		.word	gs(_writet)
 1036 0010 0000      		.word	gs(_readt)
 1037 0012 0000      		.word	gs(_ctl)
 1038               		.text
 1039               	.Letext0:
 1040               		.file 6 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 1041               		.file 7 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 1042               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1043               		.file 9 "../../../os/rt/include/chsystypes.h"
 1044               		.file 10 "../../../os/rt/include/chschd.h"
 1045               		.file 11 "../../../os/rt/include/chtime.h"
 1046               		.file 12 "../../../os/rt/include/chsem.h"
 1047               		.file 13 "../../../os/rt/include/chmtx.h"
 1048               		.file 14 "../../../os/rt/include/chregistry.h"
 1049               		.file 15 "../../../os/common/oslib/include/chmemcore.h"
 1050               		.file 16 "../../../os/hal/include/hal_queues.h"
 1051               		.file 17 "../../../os/hal/include/hal_pal.h"
 1052               		.file 18 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 1053               		.file 19 "../../../os/hal/include/hal_adc.h"
 1054               		.file 20 "../../../os/hal/ports/AVR/MEGA/LLD/ADCv1/hal_adc_lld.h"
 1055               		.file 21 "../../../os/hal/include/hal_serial.h"
 1056               		.file 22 "../../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_serial.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:12     .text._readt:0000000000000000 _readt
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:35     .text._read:0000000000000000 _read
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:59     .text._writet:0000000000000000 _writet
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:81     .text._write:0000000000000000 _write
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:105    .text._gett:0000000000000000 _gett
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:127    .text._get:0000000000000000 _get
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:151    .text._putt:0000000000000000 _putt
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:173    .text._put:0000000000000000 _put
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:197    .text._ctl:0000000000000000 _ctl
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:214    .text.sdInit:0000000000000000 sdInit
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:231    .text.sdObjectInit:0000000000000000 sdObjectInit
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:1027   .rodata.vmt:0000000000000000 vmt
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:355    .text.sdStart:0000000000000000 sdStart
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:462    .text.sdStop:0000000000000000 sdStop
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:587    .text.sdIncomingDataI:0000000000000000 sdIncomingDataI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:712    .text.sdRequestDataI:0000000000000000 sdRequestDataI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:807    .text.sdPutWouldBlock:0000000000000000 sdPutWouldBlock
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:903    .text.sdGetWouldBlock:0000000000000000 sdGetWouldBlock
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cc2Q8fVR.s:999    .text.sdControl:0000000000000000 sdControl

UNDEFINED SYMBOLS
iqReadTimeout
oqWriteTimeout
iqGetTimeout
oqPutTimeout
sd_lld_init
iqObjectInit
oqObjectInit
sd_lld_start
sd_lld_stop
oqResetI
iqResetI
chSchRescheduleS
iqPutI
chEvtBroadcastFlagsI
oqGetI
__do_copy_data
