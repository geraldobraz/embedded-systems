   1               		.file	"chmboxes.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMBObjectInit,"ax",@progbits
  11               	.global	chMBObjectInit
  13               	chMBObjectInit:
  14               	.LVL0:
  15               	.LFB141:
  16               		.file 1 "../../../os/common/oslib/src/chmboxes.c"
   1:../../../os/common/oslib/src/chmboxes.c **** /*
   2:../../../os/common/oslib/src/chmboxes.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/oslib/src/chmboxes.c **** 
   4:../../../os/common/oslib/src/chmboxes.c ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/src/chmboxes.c **** 
   6:../../../os/common/oslib/src/chmboxes.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/src/chmboxes.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/src/chmboxes.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/src/chmboxes.c ****     (at your option) any later version.
  10:../../../os/common/oslib/src/chmboxes.c **** 
  11:../../../os/common/oslib/src/chmboxes.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/src/chmboxes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/src/chmboxes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/src/chmboxes.c ****     GNU General Public License for more details.
  15:../../../os/common/oslib/src/chmboxes.c **** 
  16:../../../os/common/oslib/src/chmboxes.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/src/chmboxes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/src/chmboxes.c **** */
  19:../../../os/common/oslib/src/chmboxes.c **** 
  20:../../../os/common/oslib/src/chmboxes.c **** /**
  21:../../../os/common/oslib/src/chmboxes.c ****  * @file    chmboxes.c
  22:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Mailboxes code.
  23:../../../os/common/oslib/src/chmboxes.c ****  *
  24:../../../os/common/oslib/src/chmboxes.c ****  * @addtogroup mailboxes
  25:../../../os/common/oslib/src/chmboxes.c ****  * @details Asynchronous messages.
  26:../../../os/common/oslib/src/chmboxes.c ****  *          <h2>Operation mode</h2>
  27:../../../os/common/oslib/src/chmboxes.c ****  *          A mailbox is an asynchronous communication mechanism.<br>
  28:../../../os/common/oslib/src/chmboxes.c ****  *          Operations defined for mailboxes:
  29:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Post</b>: Posts a message on the mailbox in FIFO order.
  30:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Post Ahead</b>: Posts a message on the mailbox with urgent
  31:../../../os/common/oslib/src/chmboxes.c ****  *            priority.
  32:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Fetch</b>: A message is fetched from the mailbox and removed
  33:../../../os/common/oslib/src/chmboxes.c ****  *            from the queue.
  34:../../../os/common/oslib/src/chmboxes.c ****  *          - <b>Reset</b>: The mailbox is emptied and all the stored messages
  35:../../../os/common/oslib/src/chmboxes.c ****  *            are lost.
  36:../../../os/common/oslib/src/chmboxes.c ****  *          .
  37:../../../os/common/oslib/src/chmboxes.c ****  *          A message is a variable of type msg_t that is guaranteed to have
  38:../../../os/common/oslib/src/chmboxes.c ****  *          the same size of and be compatible with (data) pointers (anyway an
  39:../../../os/common/oslib/src/chmboxes.c ****  *          explicit cast is needed).
  40:../../../os/common/oslib/src/chmboxes.c ****  *          If larger messages need to be exchanged then a pointer to a
  41:../../../os/common/oslib/src/chmboxes.c ****  *          structure can be posted in the mailbox but the posting side has
  42:../../../os/common/oslib/src/chmboxes.c ****  *          no predefined way to know when the message has been processed. A
  43:../../../os/common/oslib/src/chmboxes.c ****  *          possible approach is to allocate memory (from a memory pool for
  44:../../../os/common/oslib/src/chmboxes.c ****  *          example) from the posting side and free it on the fetching side.
  45:../../../os/common/oslib/src/chmboxes.c ****  *          Another approach is to set a "done" flag into the structure pointed
  46:../../../os/common/oslib/src/chmboxes.c ****  *          by the message.
  47:../../../os/common/oslib/src/chmboxes.c ****  * @pre     In order to use the mailboxes APIs the @p CH_CFG_USE_MAILBOXES
  48:../../../os/common/oslib/src/chmboxes.c ****  *          option must be enabled in @p chconf.h.
  49:../../../os/common/oslib/src/chmboxes.c ****  * @note    Compatible with RT and NIL.
  50:../../../os/common/oslib/src/chmboxes.c ****  * @{
  51:../../../os/common/oslib/src/chmboxes.c ****  */
  52:../../../os/common/oslib/src/chmboxes.c **** 
  53:../../../os/common/oslib/src/chmboxes.c **** #include "ch.h"
  54:../../../os/common/oslib/src/chmboxes.c **** 
  55:../../../os/common/oslib/src/chmboxes.c **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  56:../../../os/common/oslib/src/chmboxes.c **** 
  57:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  58:../../../os/common/oslib/src/chmboxes.c **** /* Module exported variables.                                                */
  59:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  60:../../../os/common/oslib/src/chmboxes.c **** 
  61:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  62:../../../os/common/oslib/src/chmboxes.c **** /* Module local types.                                                       */
  63:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  64:../../../os/common/oslib/src/chmboxes.c **** 
  65:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  66:../../../os/common/oslib/src/chmboxes.c **** /* Module local variables.                                                   */
  67:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  68:../../../os/common/oslib/src/chmboxes.c **** 
  69:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  70:../../../os/common/oslib/src/chmboxes.c **** /* Module local functions.                                                   */
  71:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  72:../../../os/common/oslib/src/chmboxes.c **** 
  73:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  74:../../../os/common/oslib/src/chmboxes.c **** /* Module exported functions.                                                */
  75:../../../os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  76:../../../os/common/oslib/src/chmboxes.c **** 
  77:../../../os/common/oslib/src/chmboxes.c **** /**
  78:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Initializes a @p mailbox_t object.
  79:../../../os/common/oslib/src/chmboxes.c ****  *
  80:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] mbp      the pointer to the @p mailbox_t structure to be
  81:../../../os/common/oslib/src/chmboxes.c ****  *                      initialized
  82:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
  83:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] n         number of elements in the buffer array
  84:../../../os/common/oslib/src/chmboxes.c ****  *
  85:../../../os/common/oslib/src/chmboxes.c ****  * @init
  86:../../../os/common/oslib/src/chmboxes.c ****  */
  87:../../../os/common/oslib/src/chmboxes.c **** void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
  17               		.loc 1 87 59 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 87 59 is_stmt 0 view .LVU1
  24 0000 FC01      		movw r30,r24
  88:../../../os/common/oslib/src/chmboxes.c **** 
  89:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));
  25               		.loc 1 89 3 is_stmt 1 view .LVU2
  26               		.loc 1 89 3 view .LVU3
  90:../../../os/common/oslib/src/chmboxes.c **** 
  91:../../../os/common/oslib/src/chmboxes.c ****   mbp->buffer = buf;
  27               		.loc 1 91 3 view .LVU4
  28               		.loc 1 91 15 is_stmt 0 view .LVU5
  29 0002 7183      		std Z+1,r23
  30 0004 6083      		st Z,r22
  92:../../../os/common/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  31               		.loc 1 92 3 is_stmt 1 view .LVU6
  32               		.loc 1 92 15 is_stmt 0 view .LVU7
  33 0006 7783      		std Z+7,r23
  34 0008 6683      		std Z+6,r22
  93:../../../os/common/oslib/src/chmboxes.c ****   mbp->wrptr  = buf;
  35               		.loc 1 93 3 is_stmt 1 view .LVU8
  36               		.loc 1 93 15 is_stmt 0 view .LVU9
  37 000a 7583      		std Z+5,r23
  38 000c 6483      		std Z+4,r22
  94:../../../os/common/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  39               		.loc 1 94 3 is_stmt 1 view .LVU10
  40               		.loc 1 94 21 is_stmt 0 view .LVU11
  41 000e 440F      		lsl r20
  42 0010 551F      		rol r21
  43               	.LVL1:
  44               		.loc 1 94 17 view .LVU12
  45 0012 640F      		add r22,r20
  46 0014 751F      		adc r23,r21
  47               	.LVL2:
  48               		.loc 1 94 15 view .LVU13
  49 0016 7383      		std Z+3,r23
  50 0018 6283      		std Z+2,r22
  95:../../../os/common/oslib/src/chmboxes.c ****   mbp->cnt    = (size_t)0;
  51               		.loc 1 95 3 is_stmt 1 view .LVU14
  52               		.loc 1 95 15 is_stmt 0 view .LVU15
  53 001a 1186      		std Z+9,__zero_reg__
  54 001c 1086      		std Z+8,__zero_reg__
  96:../../../os/common/oslib/src/chmboxes.c ****   mbp->reset  = false;
  55               		.loc 1 96 3 is_stmt 1 view .LVU16
  56               		.loc 1 96 15 is_stmt 0 view .LVU17
  57 001e 1286      		std Z+10,__zero_reg__
  97:../../../os/common/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qw);
  58               		.loc 1 97 3 is_stmt 1 view .LVU18
  59 0020 0B96      		adiw r24,11
  60               	.LVL3:
  61               	.LBB82:
  62               	.LBI82:
  63               		.file 2 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chthreads.h **** 
   4:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chthreads.h **** 
   6:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chthreads.h ****     (at your option) any later version.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   End of the working area.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  83:../../../os/rt/include/chthreads.h **** 
  84:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  85:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  86:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  87:../../../os/rt/include/chthreads.h **** 
  88:../../../os/rt/include/chthreads.h **** /**
  89:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
  90:../../../os/rt/include/chthreads.h ****  */
  91:../../../os/rt/include/chthreads.h **** /**
  92:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
  93:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
  94:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
  95:../../../os/rt/include/chthreads.h ****  *
  96:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
  97:../../../os/rt/include/chthreads.h ****  */
  98:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
  99:../../../os/rt/include/chthreads.h **** 
 100:../../../os/rt/include/chthreads.h **** /**
 101:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 102:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 103:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 104:../../../os/rt/include/chthreads.h ****  *
 105:../../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 106:../../../os/rt/include/chthreads.h ****  */
 107:../../../os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 108:../../../os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 109:../../../os/rt/include/chthreads.h **** /** @} */
 110:../../../os/rt/include/chthreads.h **** 
 111:../../../os/rt/include/chthreads.h **** /**
 112:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 113:../../../os/rt/include/chthreads.h ****  */
 114:../../../os/rt/include/chthreads.h **** /**
 115:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 116:../../../os/rt/include/chthreads.h ****  *
 117:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 118:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 119:../../../os/rt/include/chthreads.h ****  *
 120:../../../os/rt/include/chthreads.h ****  * @api
 121:../../../os/rt/include/chthreads.h ****  */
 122:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 123:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 124:../../../os/rt/include/chthreads.h **** 
 125:../../../os/rt/include/chthreads.h **** /**
 126:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 127:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 128:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 129:../../../os/rt/include/chthreads.h ****  *
 130:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 131:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @api
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 139:../../../os/rt/include/chthreads.h ****  *
 140:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 141:../../../os/rt/include/chthreads.h ****  */
 142:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 143:../../../os/rt/include/chthreads.h **** 
 144:../../../os/rt/include/chthreads.h **** /**
 145:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 146:../../../os/rt/include/chthreads.h ****  *
 147:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 148:../../../os/rt/include/chthreads.h ****  */
 149:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 150:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 151:../../../os/rt/include/chthreads.h **** /** @} */
 152:../../../os/rt/include/chthreads.h **** 
 153:../../../os/rt/include/chthreads.h **** /**
 154:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 155:../../../os/rt/include/chthreads.h ****  */
 156:../../../os/rt/include/chthreads.h **** /**
 157:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 158:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 159:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 160:../../../os/rt/include/chthreads.h ****  */
 161:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 162:../../../os/rt/include/chthreads.h **** /** @} */
 163:../../../os/rt/include/chthreads.h **** 
 164:../../../os/rt/include/chthreads.h **** /**
 165:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 166:../../../os/rt/include/chthreads.h ****  * @{
 167:../../../os/rt/include/chthreads.h ****  */
 168:../../../os/rt/include/chthreads.h **** /**
 169:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 170:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 171:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 172:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 173:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 174:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 175:../../../os/rt/include/chthreads.h ****  *          converted.
 176:../../../os/rt/include/chthreads.h ****  *
 177:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 178:../../../os/rt/include/chthreads.h ****  *
 179:../../../os/rt/include/chthreads.h ****  * @api
 180:../../../os/rt/include/chthreads.h ****  */
 181:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 182:../../../os/rt/include/chthreads.h **** 
 183:../../../os/rt/include/chthreads.h **** /**
 184:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 185:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 186:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 187:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 188:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 189:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 190:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 191:../../../os/rt/include/chthreads.h ****  *          converted.
 192:../../../os/rt/include/chthreads.h ****  *
 193:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 194:../../../os/rt/include/chthreads.h ****  *
 195:../../../os/rt/include/chthreads.h ****  * @api
 196:../../../os/rt/include/chthreads.h ****  */
 197:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 198:../../../os/rt/include/chthreads.h **** 
 199:../../../os/rt/include/chthreads.h **** /**
 200:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 201:../../../os/rt/include/chthreads.h ****  *          microseconds.
 202:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 203:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 204:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 205:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 206:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 207:../../../os/rt/include/chthreads.h ****  *          converted.
 208:../../../os/rt/include/chthreads.h ****  *
 209:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @api
 212:../../../os/rt/include/chthreads.h ****  */
 213:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 214:../../../os/rt/include/chthreads.h **** /** @} */
 215:../../../os/rt/include/chthreads.h **** 
 216:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 217:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 218:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 219:../../../os/rt/include/chthreads.h **** 
 220:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 221:../../../os/rt/include/chthreads.h **** extern "C" {
 222:../../../os/rt/include/chthreads.h **** #endif
 223:../../../os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 224:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 225:../../../os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 226:../../../os/rt/include/chthreads.h **** #endif
 227:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 228:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 229:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 230:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 231:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 232:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 233:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 234:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 235:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 236:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 237:../../../os/rt/include/chthreads.h **** #endif
 238:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 239:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 240:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 241:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 242:../../../os/rt/include/chthreads.h **** #endif
 243:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 244:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 245:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 246:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 247:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 248:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 249:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 250:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 251:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 252:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 253:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 254:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 255:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 256:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 257:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 258:../../../os/rt/include/chthreads.h **** }
 259:../../../os/rt/include/chthreads.h **** #endif
 260:../../../os/rt/include/chthreads.h **** 
 261:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 262:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 263:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 264:../../../os/rt/include/chthreads.h **** 
 265:../../../os/rt/include/chthreads.h ****  /**
 266:../../../os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 267:../../../os/rt/include/chthreads.h ****   *
 268:../../../os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 269:../../../os/rt/include/chthreads.h ****   *
 270:../../../os/rt/include/chthreads.h ****   * @xclass
 271:../../../os/rt/include/chthreads.h ****   */
 272:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 273:../../../os/rt/include/chthreads.h **** 
 274:../../../os/rt/include/chthreads.h ****   return ch.rlist.current;
 275:../../../os/rt/include/chthreads.h **** }
 276:../../../os/rt/include/chthreads.h **** 
 277:../../../os/rt/include/chthreads.h **** /**
 278:../../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 279:../../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 280:../../../os/rt/include/chthreads.h ****  *
 281:../../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 282:../../../os/rt/include/chthreads.h ****  *
 283:../../../os/rt/include/chthreads.h ****  * @xclass
 284:../../../os/rt/include/chthreads.h ****  */
 285:../../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 286:../../../os/rt/include/chthreads.h **** 
 287:../../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->prio;
 288:../../../os/rt/include/chthreads.h **** }
 289:../../../os/rt/include/chthreads.h **** 
 290:../../../os/rt/include/chthreads.h **** /**
 291:../../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 292:../../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 293:../../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 294:../../../os/rt/include/chthreads.h ****  *
 295:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 296:../../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 297:../../../os/rt/include/chthreads.h ****  *
 298:../../../os/rt/include/chthreads.h ****  * @xclass
 299:../../../os/rt/include/chthreads.h ****  */
 300:../../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 301:../../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 302:../../../os/rt/include/chthreads.h **** 
 303:../../../os/rt/include/chthreads.h ****   return tp->time;
 304:../../../os/rt/include/chthreads.h **** }
 305:../../../os/rt/include/chthreads.h **** #endif
 306:../../../os/rt/include/chthreads.h **** 
 307:../../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 308:../../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 309:../../../os/rt/include/chthreads.h **** /**
 310:../../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 311:../../../os/rt/include/chthreads.h ****  *
 312:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 313:../../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 314:../../../os/rt/include/chthreads.h ****  *
 315:../../../os/rt/include/chthreads.h ****  * @xclass
 316:../../../os/rt/include/chthreads.h ****  */
 317:../../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 318:../../../os/rt/include/chthreads.h **** 
 319:../../../os/rt/include/chthreads.h ****   return tp->wabase;
 320:../../../os/rt/include/chthreads.h **** }
 321:../../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 322:../../../os/rt/include/chthreads.h **** 
 323:../../../os/rt/include/chthreads.h **** /**
 324:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 325:../../../os/rt/include/chthreads.h ****  *
 326:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 327:../../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 328:../../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 329:../../../os/rt/include/chthreads.h ****  *
 330:../../../os/rt/include/chthreads.h ****  * @xclass
 331:../../../os/rt/include/chthreads.h ****  */
 332:../../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 333:../../../os/rt/include/chthreads.h **** 
 334:../../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 335:../../../os/rt/include/chthreads.h **** }
 336:../../../os/rt/include/chthreads.h **** 
 337:../../../os/rt/include/chthreads.h **** /**
 338:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 339:../../../os/rt/include/chthreads.h ****  *
 340:../../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 341:../../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 342:../../../os/rt/include/chthreads.h ****  *
 343:../../../os/rt/include/chthreads.h ****  * @xclass
 344:../../../os/rt/include/chthreads.h ****  */
 345:../../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 346:../../../os/rt/include/chthreads.h **** 
 347:../../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 348:../../../os/rt/include/chthreads.h **** }
 349:../../../os/rt/include/chthreads.h **** 
 350:../../../os/rt/include/chthreads.h **** /**
 351:../../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 352:../../../os/rt/include/chthreads.h ****  *
 353:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 354:../../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 355:../../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 356:../../../os/rt/include/chthreads.h ****  *
 357:../../../os/rt/include/chthreads.h ****  * @iclass
 358:../../../os/rt/include/chthreads.h ****  */
 359:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 360:../../../os/rt/include/chthreads.h **** 
 361:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 362:../../../os/rt/include/chthreads.h **** 
 363:../../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 364:../../../os/rt/include/chthreads.h **** }
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 370:../../../os/rt/include/chthreads.h ****  *                      handled as follow:
 371:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 372:../../../os/rt/include/chthreads.h ****  *                        state.
 373:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 374:../../../os/rt/include/chthreads.h ****  *                      .
 375:../../../os/rt/include/chthreads.h ****  *
 376:../../../os/rt/include/chthreads.h ****  * @sclass
 377:../../../os/rt/include/chthreads.h ****  */
 378:../../../os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 379:../../../os/rt/include/chthreads.h **** 
 380:../../../os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 381:../../../os/rt/include/chthreads.h **** 
 382:../../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 383:../../../os/rt/include/chthreads.h **** }
 384:../../../os/rt/include/chthreads.h **** 
 385:../../../os/rt/include/chthreads.h **** /**
 386:../../../os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 387:../../../os/rt/include/chthreads.h ****  *
 388:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 389:../../../os/rt/include/chthreads.h ****  *
 390:../../../os/rt/include/chthreads.h ****  * @init
 391:../../../os/rt/include/chthreads.h ****  */
 392:../../../os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
  64               		.loc 2 392 20 view .LVU19
  65               	.LBE82:
 393:../../../os/rt/include/chthreads.h **** 
 394:../../../os/rt/include/chthreads.h ****   queue_init(tqp);
  66               		.loc 2 394 3 view .LVU20
  67               	.LBB85:
  68               	.LBB83:
  69               	.LBI83:
  70               		.file 3 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
  71               		.loc 3 537 20 view .LVU21
  72               	.LBB84:
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  73               		.loc 3 539 3 view .LVU22
  74               		.loc 3 539 13 is_stmt 0 view .LVU23
  75 0022 9487      		std Z+12,r25
  76 0024 8387      		std Z+11,r24
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  77               		.loc 3 540 3 is_stmt 1 view .LVU24
  78               		.loc 3 540 13 is_stmt 0 view .LVU25
  79 0026 9687      		std Z+14,r25
  80 0028 8587      		std Z+13,r24
  81               	.LVL4:
  82               		.loc 3 540 13 view .LVU26
  83               	.LBE84:
  84               	.LBE83:
  85               	.LBE85:
  98:../../../os/common/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  86               		.loc 1 98 3 is_stmt 1 view .LVU27
  87 002a 0496      		adiw r24,4
  88               	.LVL5:
  89               	.LBB86:
  90               	.LBI86:
 392:../../../os/rt/include/chthreads.h **** 
  91               		.loc 2 392 20 view .LVU28
  92               	.LBE86:
  93               		.loc 2 394 3 view .LVU29
  94               	.LBB89:
  95               	.LBB87:
  96               	.LBI87:
 537:../../../os/rt/include/chschd.h **** 
  97               		.loc 3 537 20 view .LVU30
  98               	.LBB88:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  99               		.loc 3 539 3 view .LVU31
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 100               		.loc 3 539 13 is_stmt 0 view .LVU32
 101 002c 908B      		std Z+16,r25
 102 002e 8787      		std Z+15,r24
 103               		.loc 3 540 3 is_stmt 1 view .LVU33
 104               		.loc 3 540 13 is_stmt 0 view .LVU34
 105 0030 928B      		std Z+18,r25
 106 0032 818B      		std Z+17,r24
 107               	.LVL6:
 108               	/* epilogue start */
 109               		.loc 3 540 13 view .LVU35
 110               	.LBE88:
 111               	.LBE87:
 112               	.LBE89:
  99:../../../os/common/oslib/src/chmboxes.c **** }
 113               		.loc 1 99 1 view .LVU36
 114 0034 0895      		ret
 115               		.cfi_endproc
 116               	.LFE141:
 118               		.section	.text.chMBResetI,"ax",@progbits
 119               	.global	chMBResetI
 121               	chMBResetI:
 122               	.LVL7:
 123               	.LFB143:
 100:../../../os/common/oslib/src/chmboxes.c **** 
 101:../../../os/common/oslib/src/chmboxes.c **** /**
 102:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 103:../../../os/common/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 104:../../../os/common/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 105:../../../os/common/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 106:../../../os/common/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 107:../../../os/common/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 108:../../../os/common/oslib/src/chmboxes.c ****  *
 109:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 110:../../../os/common/oslib/src/chmboxes.c ****  *
 111:../../../os/common/oslib/src/chmboxes.c ****  * @api
 112:../../../os/common/oslib/src/chmboxes.c ****  */
 113:../../../os/common/oslib/src/chmboxes.c **** void chMBReset(mailbox_t *mbp) {
 114:../../../os/common/oslib/src/chmboxes.c **** 
 115:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 116:../../../os/common/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 117:../../../os/common/oslib/src/chmboxes.c ****   chSchRescheduleS();
 118:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 119:../../../os/common/oslib/src/chmboxes.c **** }
 120:../../../os/common/oslib/src/chmboxes.c **** 
 121:../../../os/common/oslib/src/chmboxes.c **** /**
 122:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 123:../../../os/common/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 124:../../../os/common/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 125:../../../os/common/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 126:../../../os/common/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 127:../../../os/common/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 128:../../../os/common/oslib/src/chmboxes.c ****  *
 129:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 130:../../../os/common/oslib/src/chmboxes.c ****  *
 131:../../../os/common/oslib/src/chmboxes.c ****  * @api
 132:../../../os/common/oslib/src/chmboxes.c ****  */
 133:../../../os/common/oslib/src/chmboxes.c **** void chMBResetI(mailbox_t *mbp) {
 124               		.loc 1 133 33 is_stmt 1 view -0
 125               		.cfi_startproc
 126               		.loc 1 133 33 is_stmt 0 view .LVU38
 127 0000 CF93      		push r28
 128               	.LCFI0:
 129               		.cfi_def_cfa_offset 3
 130               		.cfi_offset 28, -2
 131 0002 DF93      		push r29
 132               	.LCFI1:
 133               		.cfi_def_cfa_offset 4
 134               		.cfi_offset 29, -3
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 2 */
 138               	.L__stack_usage = 2
 139 0004 EC01      		movw r28,r24
 134:../../../os/common/oslib/src/chmboxes.c **** 
 135:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 140               		.loc 1 135 21 is_stmt 1 view .LVU39
 136:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 141               		.loc 1 136 3 view .LVU40
 142               		.loc 1 136 3 view .LVU41
 137:../../../os/common/oslib/src/chmboxes.c **** 
 138:../../../os/common/oslib/src/chmboxes.c ****   mbp->wrptr = mbp->buffer;
 143               		.loc 1 138 3 view .LVU42
 144               		.loc 1 138 19 is_stmt 0 view .LVU43
 145 0006 8881      		ld r24,Y
 146 0008 9981      		ldd r25,Y+1
 147               	.LVL8:
 148               		.loc 1 138 14 view .LVU44
 149 000a 9D83      		std Y+5,r25
 150 000c 8C83      		std Y+4,r24
 139:../../../os/common/oslib/src/chmboxes.c ****   mbp->rdptr = mbp->buffer;
 151               		.loc 1 139 3 is_stmt 1 view .LVU45
 152               		.loc 1 139 14 is_stmt 0 view .LVU46
 153 000e 9F83      		std Y+7,r25
 154 0010 8E83      		std Y+6,r24
 140:../../../os/common/oslib/src/chmboxes.c ****   mbp->cnt   = (size_t)0;
 155               		.loc 1 140 3 is_stmt 1 view .LVU47
 156               		.loc 1 140 14 is_stmt 0 view .LVU48
 157 0012 1986      		std Y+9,__zero_reg__
 158 0014 1886      		std Y+8,__zero_reg__
 141:../../../os/common/oslib/src/chmboxes.c ****   mbp->reset = true;
 159               		.loc 1 141 3 is_stmt 1 view .LVU49
 160               		.loc 1 141 14 is_stmt 0 view .LVU50
 161 0016 81E0      		ldi r24,lo8(1)
 162 0018 8A87      		std Y+10,r24
 142:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qw, MSG_RESET);
 163               		.loc 1 142 3 is_stmt 1 view .LVU51
 164 001a 6EEF      		ldi r22,lo8(-2)
 165 001c 7FEF      		ldi r23,lo8(-1)
 166 001e CE01      		movw r24,r28
 167 0020 0B96      		adiw r24,11
 168 0022 0E94 0000 		call chThdDequeueAllI
 169               	.LVL9:
 143:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 170               		.loc 1 143 3 view .LVU52
 171 0026 6EEF      		ldi r22,lo8(-2)
 172 0028 7FEF      		ldi r23,lo8(-1)
 173 002a CE01      		movw r24,r28
 174 002c 0F96      		adiw r24,15
 175               	/* epilogue start */
 144:../../../os/common/oslib/src/chmboxes.c **** }
 176               		.loc 1 144 1 is_stmt 0 view .LVU53
 177 002e DF91      		pop r29
 178 0030 CF91      		pop r28
 179               	.LVL10:
 143:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 180               		.loc 1 143 3 view .LVU54
 181 0032 0C94 0000 		jmp chThdDequeueAllI
 182               	.LVL11:
 143:../../../os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 183               		.loc 1 143 3 view .LVU55
 184               		.cfi_endproc
 185               	.LFE143:
 187               		.section	.text.chMBReset,"ax",@progbits
 188               	.global	chMBReset
 190               	chMBReset:
 191               	.LVL12:
 192               	.LFB142:
 113:../../../os/common/oslib/src/chmboxes.c **** 
 193               		.loc 1 113 32 is_stmt 1 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
 115:../../../os/common/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 199               		.loc 1 115 3 view .LVU57
 200               	.LBB90:
 201               	.LBI90:
 202               		.file 4 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 203               		.loc 4 353 20 view .LVU58
 204               	.LBE90:
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 205               		.loc 4 355 3 view .LVU59
 206               	.LBB93:
 207               	.LBB91:
 208               	.LBI91:
 209               		.file 5 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 210               		.loc 5 435 20 view .LVU60
 211               	.LBB92:
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 212               		.loc 5 437 3 view .LVU61
 213               	/* #APP */
 214               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 215 0000 F894      		cli
 216               	 ;  0 "" 2
 217               	/* #NOAPP */
 218               	.LBE92:
 219               	.LBE91:
 220               	.LBE93:
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 221               		.loc 4 356 34 view .LVU62
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 222               		.loc 4 357 20 view .LVU63
 116:../../../os/common/oslib/src/chmboxes.c ****   chSchRescheduleS();
 223               		.loc 1 116 3 view .LVU64
 224 0002 0E94 0000 		call chMBResetI
 225               	.LVL13:
 117:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 226               		.loc 1 117 3 view .LVU65
 227 0006 0E94 0000 		call chSchRescheduleS
 228               	.LVL14:
 118:../../../os/common/oslib/src/chmboxes.c **** }
 229               		.loc 1 118 3 view .LVU66
 230               	.LBB94:
 231               	.LBI94:
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 232               		.loc 4 365 20 view .LVU67
 233               	.LBB95:
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 234               		.loc 4 367 22 view .LVU68
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 235               		.loc 4 368 33 view .LVU69
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 236               		.loc 4 374 3 view .LVU70
 237               		.loc 4 374 3 view .LVU71
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 238               		.loc 4 378 3 view .LVU72
 239               	.LBB96:
 240               	.LBI96:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 241               		.loc 5 445 20 view .LVU73
 242               	.LBB97:
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 243               		.loc 5 447 3 view .LVU74
 244               	/* #APP */
 245               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 246 000a 7894      		sei
 247               	 ;  0 "" 2
 248               	/* #NOAPP */
 249               	/* epilogue start */
 250               	.LBE97:
 251               	.LBE96:
 252               	.LBE95:
 253               	.LBE94:
 119:../../../os/common/oslib/src/chmboxes.c **** 
 254               		.loc 1 119 1 is_stmt 0 view .LVU75
 255 000c 0895      		ret
 256               		.cfi_endproc
 257               	.LFE142:
 259               		.section	.text.chMBPostTimeoutS,"ax",@progbits
 260               	.global	chMBPostTimeoutS
 262               	chMBPostTimeoutS:
 263               	.LVL15:
 264               	.LFB145:
 145:../../../os/common/oslib/src/chmboxes.c **** 
 146:../../../os/common/oslib/src/chmboxes.c **** /**
 147:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 148:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 149:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 150:../../../os/common/oslib/src/chmboxes.c ****  *
 151:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 152:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 153:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 154:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 155:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 156:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 157:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 158:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 159:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 160:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 161:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 162:../../../os/common/oslib/src/chmboxes.c ****  *
 163:../../../os/common/oslib/src/chmboxes.c ****  * @api
 164:../../../os/common/oslib/src/chmboxes.c ****  */
 165:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 166:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 167:../../../os/common/oslib/src/chmboxes.c **** 
 168:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 169:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 170:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 171:../../../os/common/oslib/src/chmboxes.c **** 
 172:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 173:../../../os/common/oslib/src/chmboxes.c **** }
 174:../../../os/common/oslib/src/chmboxes.c **** 
 175:../../../os/common/oslib/src/chmboxes.c **** /**
 176:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 177:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 178:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 179:../../../os/common/oslib/src/chmboxes.c ****  *
 180:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 181:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 182:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 183:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 184:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 185:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 186:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 187:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 188:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 189:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 190:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 191:../../../os/common/oslib/src/chmboxes.c ****  *
 192:../../../os/common/oslib/src/chmboxes.c ****  * @sclass
 193:../../../os/common/oslib/src/chmboxes.c ****  */
 194:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 265               		.loc 1 194 74 is_stmt 1 view -0
 266               		.cfi_startproc
 267               		.loc 1 194 74 is_stmt 0 view .LVU77
 268 0000 CF92      		push r12
 269               	.LCFI2:
 270               		.cfi_def_cfa_offset 3
 271               		.cfi_offset 12, -2
 272 0002 DF92      		push r13
 273               	.LCFI3:
 274               		.cfi_def_cfa_offset 4
 275               		.cfi_offset 13, -3
 276 0004 EF92      		push r14
 277               	.LCFI4:
 278               		.cfi_def_cfa_offset 5
 279               		.cfi_offset 14, -4
 280 0006 FF92      		push r15
 281               	.LCFI5:
 282               		.cfi_def_cfa_offset 6
 283               		.cfi_offset 15, -5
 284 0008 0F93      		push r16
 285               	.LCFI6:
 286               		.cfi_def_cfa_offset 7
 287               		.cfi_offset 16, -6
 288 000a 1F93      		push r17
 289               	.LCFI7:
 290               		.cfi_def_cfa_offset 8
 291               		.cfi_offset 17, -7
 292 000c CF93      		push r28
 293               	.LCFI8:
 294               		.cfi_def_cfa_offset 9
 295               		.cfi_offset 28, -8
 296 000e DF93      		push r29
 297               	.LCFI9:
 298               		.cfi_def_cfa_offset 10
 299               		.cfi_offset 29, -9
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 8 */
 303               	.L__stack_usage = 8
 304 0010 EC01      		movw r28,r24
 305 0012 6B01      		movw r12,r22
 306 0014 7A01      		movw r14,r20
 195:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 307               		.loc 1 195 3 is_stmt 1 view .LVU78
 196:../../../os/common/oslib/src/chmboxes.c **** 
 197:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 308               		.loc 1 197 21 view .LVU79
 198:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 309               		.loc 1 198 3 view .LVU80
 310               		.loc 1 198 3 view .LVU81
 199:../../../os/common/oslib/src/chmboxes.c **** 
 200:../../../os/common/oslib/src/chmboxes.c ****   do {
 201:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 202:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 203:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 204:../../../os/common/oslib/src/chmboxes.c ****     }
 205:../../../os/common/oslib/src/chmboxes.c **** 
 206:../../../os/common/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 207:../../../os/common/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 208:../../../os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 209:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 210:../../../os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 211:../../../os/common/oslib/src/chmboxes.c ****       }
 212:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 213:../../../os/common/oslib/src/chmboxes.c **** 
 214:../../../os/common/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 215:../../../os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 216:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 217:../../../os/common/oslib/src/chmboxes.c **** 
 218:../../../os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 219:../../../os/common/oslib/src/chmboxes.c ****     }
 220:../../../os/common/oslib/src/chmboxes.c **** 
 221:../../../os/common/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 222:../../../os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 311               		.loc 1 222 14 is_stmt 0 view .LVU82
 312 0016 8C01      		movw r16,r24
 313 0018 055F      		subi r16,-11
 314 001a 1F4F      		sbci r17,-1
 315 001c 00C0      		rjmp .L9
 316               	.LVL16:
 317               	.L14:
 207:../../../os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 318               		.loc 1 207 5 is_stmt 1 view .LVU83
 319               	.LBB108:
 320               	.LBI108:
 321               		.file 6 "../../../os/common/oslib/include/chmboxes.h"
   1:../../../os/common/oslib/include/chmboxes.h **** /*
   2:../../../os/common/oslib/include/chmboxes.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/oslib/include/chmboxes.h **** 
   4:../../../os/common/oslib/include/chmboxes.h ****     This file is part of ChibiOS.
   5:../../../os/common/oslib/include/chmboxes.h **** 
   6:../../../os/common/oslib/include/chmboxes.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/oslib/include/chmboxes.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/oslib/include/chmboxes.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/oslib/include/chmboxes.h ****     (at your option) any later version.
  10:../../../os/common/oslib/include/chmboxes.h **** 
  11:../../../os/common/oslib/include/chmboxes.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/oslib/include/chmboxes.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/oslib/include/chmboxes.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/oslib/include/chmboxes.h ****     GNU General Public License for more details.
  15:../../../os/common/oslib/include/chmboxes.h **** 
  16:../../../os/common/oslib/include/chmboxes.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/oslib/include/chmboxes.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/oslib/include/chmboxes.h **** */
  19:../../../os/common/oslib/include/chmboxes.h **** 
  20:../../../os/common/oslib/include/chmboxes.h **** /**
  21:../../../os/common/oslib/include/chmboxes.h ****  * @file    chmboxes.h
  22:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Mailboxes macros and structures.
  23:../../../os/common/oslib/include/chmboxes.h ****  *
  24:../../../os/common/oslib/include/chmboxes.h ****  * @addtogroup mailboxes
  25:../../../os/common/oslib/include/chmboxes.h ****  * @{
  26:../../../os/common/oslib/include/chmboxes.h ****  */
  27:../../../os/common/oslib/include/chmboxes.h **** 
  28:../../../os/common/oslib/include/chmboxes.h **** #ifndef CHMBOXES_H
  29:../../../os/common/oslib/include/chmboxes.h **** #define CHMBOXES_H
  30:../../../os/common/oslib/include/chmboxes.h **** 
  31:../../../os/common/oslib/include/chmboxes.h **** #if !defined(CH_CFG_USE_MAILBOXES)
  32:../../../os/common/oslib/include/chmboxes.h **** #define CH_CFG_USE_MAILBOXES                FALSE
  33:../../../os/common/oslib/include/chmboxes.h **** #endif
  34:../../../os/common/oslib/include/chmboxes.h **** 
  35:../../../os/common/oslib/include/chmboxes.h **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  36:../../../os/common/oslib/include/chmboxes.h **** 
  37:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  38:../../../os/common/oslib/include/chmboxes.h **** /* Module constants.                                                         */
  39:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  40:../../../os/common/oslib/include/chmboxes.h **** 
  41:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  42:../../../os/common/oslib/include/chmboxes.h **** /* Module pre-compile time settings.                                         */
  43:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  44:../../../os/common/oslib/include/chmboxes.h **** 
  45:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  46:../../../os/common/oslib/include/chmboxes.h **** /* Derived constants and error checks.                                       */
  47:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  48:../../../os/common/oslib/include/chmboxes.h **** 
  49:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  50:../../../os/common/oslib/include/chmboxes.h **** /* Module data structures and types.                                         */
  51:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  52:../../../os/common/oslib/include/chmboxes.h **** 
  53:../../../os/common/oslib/include/chmboxes.h **** /**
  54:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Structure representing a mailbox object.
  55:../../../os/common/oslib/include/chmboxes.h ****  */
  56:../../../os/common/oslib/include/chmboxes.h **** typedef struct {
  57:../../../os/common/oslib/include/chmboxes.h ****   msg_t                 *buffer;        /**< @brief Pointer to the mailbox
  58:../../../os/common/oslib/include/chmboxes.h ****                                                     buffer.                 */
  59:../../../os/common/oslib/include/chmboxes.h ****   msg_t                 *top;           /**< @brief Pointer to the location
  60:../../../os/common/oslib/include/chmboxes.h ****                                                     after the buffer.       */
  61:../../../os/common/oslib/include/chmboxes.h ****   msg_t                 *wrptr;         /**< @brief Write pointer.          */
  62:../../../os/common/oslib/include/chmboxes.h ****   msg_t                 *rdptr;         /**< @brief Read pointer.           */
  63:../../../os/common/oslib/include/chmboxes.h ****   size_t                cnt;            /**< @brief Messages in queue.      */
  64:../../../os/common/oslib/include/chmboxes.h ****   bool                  reset;          /**< @brief True in reset state.    */
  65:../../../os/common/oslib/include/chmboxes.h ****   threads_queue_t       qw;             /**< @brief Queued writers.         */
  66:../../../os/common/oslib/include/chmboxes.h ****   threads_queue_t       qr;             /**< @brief Queued readers.         */
  67:../../../os/common/oslib/include/chmboxes.h **** } mailbox_t;
  68:../../../os/common/oslib/include/chmboxes.h **** 
  69:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  70:../../../os/common/oslib/include/chmboxes.h **** /* Module macros.                                                            */
  71:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  72:../../../os/common/oslib/include/chmboxes.h **** 
  73:../../../os/common/oslib/include/chmboxes.h **** /**
  74:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Data part of a static mailbox initializer.
  75:../../../os/common/oslib/include/chmboxes.h ****  * @details This macro should be used when statically initializing a
  76:../../../os/common/oslib/include/chmboxes.h ****  *          mailbox that is part of a bigger structure.
  77:../../../os/common/oslib/include/chmboxes.h ****  *
  78:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  79:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  80:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  81:../../../os/common/oslib/include/chmboxes.h ****  */
  82:../../../os/common/oslib/include/chmboxes.h **** #define _MAILBOX_DATA(name, buffer, size) {                                 \
  83:../../../os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  84:../../../os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer) + size,                                                 \
  85:../../../os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  86:../../../os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  87:../../../os/common/oslib/include/chmboxes.h ****   (size_t)0,                                                                \
  88:../../../os/common/oslib/include/chmboxes.h ****   false,                                                                    \
  89:../../../os/common/oslib/include/chmboxes.h ****   _THREADS_QUEUE_DATA(name.qw),                                             \
  90:../../../os/common/oslib/include/chmboxes.h ****   _THREADS_QUEUE_DATA(name.qr),                                             \
  91:../../../os/common/oslib/include/chmboxes.h **** }
  92:../../../os/common/oslib/include/chmboxes.h **** 
  93:../../../os/common/oslib/include/chmboxes.h **** /**
  94:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Static mailbox initializer.
  95:../../../os/common/oslib/include/chmboxes.h ****  * @details Statically initialized mailboxes require no explicit
  96:../../../os/common/oslib/include/chmboxes.h ****  *          initialization using @p chMBObjectInit().
  97:../../../os/common/oslib/include/chmboxes.h ****  *
  98:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  99:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
 100:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
 101:../../../os/common/oslib/include/chmboxes.h ****  */
 102:../../../os/common/oslib/include/chmboxes.h **** #define MAILBOX_DECL(name, buffer, size)                                    \
 103:../../../os/common/oslib/include/chmboxes.h ****   mailbox_t name = _MAILBOX_DATA(name, buffer, size)
 104:../../../os/common/oslib/include/chmboxes.h **** 
 105:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 106:../../../os/common/oslib/include/chmboxes.h **** /* External declarations.                                                    */
 107:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 108:../../../os/common/oslib/include/chmboxes.h **** 
 109:../../../os/common/oslib/include/chmboxes.h **** #ifdef __cplusplus
 110:../../../os/common/oslib/include/chmboxes.h **** extern "C" {
 111:../../../os/common/oslib/include/chmboxes.h **** #endif
 112:../../../os/common/oslib/include/chmboxes.h ****   void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n);
 113:../../../os/common/oslib/include/chmboxes.h ****   void chMBReset(mailbox_t *mbp);
 114:../../../os/common/oslib/include/chmboxes.h ****   void chMBResetI(mailbox_t *mbp);
 115:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 116:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 117:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBPostI(mailbox_t *mbp, msg_t msg);
 118:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 119:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 120:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg);
 121:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout);
 122:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout);
 123:../../../os/common/oslib/include/chmboxes.h ****   msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp);
 124:../../../os/common/oslib/include/chmboxes.h **** #ifdef __cplusplus
 125:../../../os/common/oslib/include/chmboxes.h **** }
 126:../../../os/common/oslib/include/chmboxes.h **** #endif
 127:../../../os/common/oslib/include/chmboxes.h **** 
 128:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 129:../../../os/common/oslib/include/chmboxes.h **** /* Module inline functions.                                                  */
 130:../../../os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 131:../../../os/common/oslib/include/chmboxes.h **** 
 132:../../../os/common/oslib/include/chmboxes.h **** /**
 133:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Returns the mailbox buffer size as number of messages.
 134:../../../os/common/oslib/include/chmboxes.h ****  *
 135:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 136:../../../os/common/oslib/include/chmboxes.h ****  * @return              The size of the mailbox.
 137:../../../os/common/oslib/include/chmboxes.h ****  *
 138:../../../os/common/oslib/include/chmboxes.h ****  * @iclass
 139:../../../os/common/oslib/include/chmboxes.h ****  */
 140:../../../os/common/oslib/include/chmboxes.h **** static inline size_t chMBGetSizeI(const mailbox_t *mbp) {
 141:../../../os/common/oslib/include/chmboxes.h **** 
 142:../../../os/common/oslib/include/chmboxes.h ****   /*lint -save -e9033 [10.8] Perfectly safe pointers
 143:../../../os/common/oslib/include/chmboxes.h ****     arithmetic.*/
 144:../../../os/common/oslib/include/chmboxes.h ****   return (size_t)(mbp->top - mbp->buffer);
 145:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 146:../../../os/common/oslib/include/chmboxes.h **** }
 147:../../../os/common/oslib/include/chmboxes.h **** 
 148:../../../os/common/oslib/include/chmboxes.h **** /**
 149:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Returns the number of used message slots into a mailbox.
 150:../../../os/common/oslib/include/chmboxes.h ****  *
 151:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 152:../../../os/common/oslib/include/chmboxes.h ****  * @return              The number of queued messages.
 153:../../../os/common/oslib/include/chmboxes.h ****  *
 154:../../../os/common/oslib/include/chmboxes.h ****  * @iclass
 155:../../../os/common/oslib/include/chmboxes.h ****  */
 156:../../../os/common/oslib/include/chmboxes.h **** static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {
 157:../../../os/common/oslib/include/chmboxes.h **** 
 158:../../../os/common/oslib/include/chmboxes.h ****   chDbgCheckClassI();
 159:../../../os/common/oslib/include/chmboxes.h **** 
 160:../../../os/common/oslib/include/chmboxes.h ****   return mbp->cnt;
 161:../../../os/common/oslib/include/chmboxes.h **** }
 162:../../../os/common/oslib/include/chmboxes.h **** 
 163:../../../os/common/oslib/include/chmboxes.h **** /**
 164:../../../os/common/oslib/include/chmboxes.h ****  * @brief   Returns the number of free message slots into a mailbox.
 165:../../../os/common/oslib/include/chmboxes.h ****  *
 166:../../../os/common/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 167:../../../os/common/oslib/include/chmboxes.h ****  * @return              The number of empty message slots.
 168:../../../os/common/oslib/include/chmboxes.h ****  *
 169:../../../os/common/oslib/include/chmboxes.h ****  * @iclass
 170:../../../os/common/oslib/include/chmboxes.h ****  */
 171:../../../os/common/oslib/include/chmboxes.h **** static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {
 322               		.loc 6 171 22 view .LVU84
 323               	.LBB109:
 172:../../../os/common/oslib/include/chmboxes.h **** 
 173:../../../os/common/oslib/include/chmboxes.h ****   chDbgCheckClassI();
 324               		.loc 6 173 21 view .LVU85
 174:../../../os/common/oslib/include/chmboxes.h **** 
 175:../../../os/common/oslib/include/chmboxes.h ****   return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 325               		.loc 6 175 3 view .LVU86
 326               		.loc 6 175 10 is_stmt 0 view .LVU87
 327 001e 4881      		ld r20,Y
 328 0020 5981      		ldd r21,Y+1
 329 0022 2A81      		ldd r18,Y+2
 330 0024 3B81      		ldd r19,Y+3
 331               	.LBB110:
 332               	.LBI110:
 140:../../../os/common/oslib/include/chmboxes.h **** 
 333               		.loc 6 140 22 is_stmt 1 view .LVU88
 334               	.LVL17:
 335               	.LBB111:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 336               		.loc 6 144 3 view .LVU89
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 337               		.loc 6 144 3 is_stmt 0 view .LVU90
 338               	.LBE111:
 339               	.LBE110:
 340               	.LBE109:
 341               	.LBE108:
 158:../../../os/common/oslib/include/chmboxes.h **** 
 342               		.loc 6 158 21 is_stmt 1 view .LVU91
 160:../../../os/common/oslib/include/chmboxes.h **** }
 343               		.loc 6 160 3 view .LVU92
 344               	.LBB115:
 345               	.LBB114:
 346               	.LBB113:
 347               	.LBB112:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 348               		.loc 6 144 28 is_stmt 0 view .LVU93
 349 0026 C901      		movw r24,r18
 350 0028 841B      		sub r24,r20
 351 002a 950B      		sbc r25,r21
 352 002c 9595      		asr r25
 353 002e 8795      		ror r24
 354               	.LBE112:
 355               	.LBE113:
 356               	.LBE114:
 357               	.LBE115:
 207:../../../os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 358               		.loc 1 207 8 view .LVU94
 359 0030 6885      		ldd r22,Y+8
 360 0032 7985      		ldd r23,Y+9
 361 0034 8617      		cp r24,r22
 362 0036 9707      		cpc r25,r23
 363 0038 01F4      		brne .L13
 364               		.loc 1 222 5 is_stmt 1 view .LVU95
 365               		.loc 1 222 14 is_stmt 0 view .LVU96
 366 003a B701      		movw r22,r14
 367 003c C801      		movw r24,r16
 368 003e 0E94 0000 		call chThdEnqueueTimeoutS
 369               	.LVL18:
 223:../../../os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 370               		.loc 1 223 3 view .LVU97
 371 0042 0097      		sbiw r24,0
 372 0044 01F4      		brne .L5
 373               	.LVL19:
 374               	.L9:
 200:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 375               		.loc 1 200 3 is_stmt 1 view .LVU98
 202:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 376               		.loc 1 202 5 view .LVU99
 202:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 377               		.loc 1 202 8 is_stmt 0 view .LVU100
 378 0046 8A85      		ldd r24,Y+10
 379 0048 8823      		tst r24
 380 004a 01F0      		breq .L14
 203:../../../os/common/oslib/src/chmboxes.c ****     }
 381               		.loc 1 203 14 view .LVU101
 382 004c 8EEF      		ldi r24,lo8(-2)
 383 004e 9FEF      		ldi r25,lo8(-1)
 384               	.L5:
 385               	/* epilogue start */
 224:../../../os/common/oslib/src/chmboxes.c **** 
 225:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 226:../../../os/common/oslib/src/chmboxes.c **** }
 386               		.loc 1 226 1 view .LVU102
 387 0050 DF91      		pop r29
 388 0052 CF91      		pop r28
 389               	.LVL20:
 390               		.loc 1 226 1 view .LVU103
 391 0054 1F91      		pop r17
 392 0056 0F91      		pop r16
 393               	.LVL21:
 394               		.loc 1 226 1 view .LVU104
 395 0058 FF90      		pop r15
 396 005a EF90      		pop r14
 397               	.LVL22:
 398               		.loc 1 226 1 view .LVU105
 399 005c DF90      		pop r13
 400 005e CF90      		pop r12
 401               	.LVL23:
 402               		.loc 1 226 1 view .LVU106
 403 0060 0895      		ret
 404               	.LVL24:
 405               	.L13:
 208:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 406               		.loc 1 208 7 is_stmt 1 view .LVU107
 208:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 407               		.loc 1 208 11 is_stmt 0 view .LVU108
 408 0062 EC81      		ldd r30,Y+4
 409 0064 FD81      		ldd r31,Y+5
 208:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 410               		.loc 1 208 18 view .LVU109
 411 0066 CF01      		movw r24,r30
 412 0068 0296      		adiw r24,2
 413 006a 9D83      		std Y+5,r25
 414 006c 8C83      		std Y+4,r24
 208:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 415               		.loc 1 208 21 view .LVU110
 416 006e D182      		std Z+1,r13
 417 0070 C082      		st Z,r12
 209:../../../os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 418               		.loc 1 209 7 is_stmt 1 view .LVU111
 209:../../../os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 419               		.loc 1 209 10 is_stmt 0 view .LVU112
 420 0072 8217      		cp r24,r18
 421 0074 9307      		cpc r25,r19
 422 0076 00F0      		brlo .L8
 210:../../../os/common/oslib/src/chmboxes.c ****       }
 423               		.loc 1 210 9 is_stmt 1 view .LVU113
 210:../../../os/common/oslib/src/chmboxes.c ****       }
 424               		.loc 1 210 20 is_stmt 0 view .LVU114
 425 0078 5D83      		std Y+5,r21
 426 007a 4C83      		std Y+4,r20
 427               	.L8:
 428               	.LVL25:
 429               	.LBB116:
 430               	.LBB117:
 212:../../../os/common/oslib/src/chmboxes.c **** 
 431               		.loc 1 212 7 is_stmt 1 view .LVU115
 212:../../../os/common/oslib/src/chmboxes.c **** 
 432               		.loc 1 212 15 is_stmt 0 view .LVU116
 433 007c 8885      		ldd r24,Y+8
 434 007e 9985      		ldd r25,Y+9
 435 0080 0196      		adiw r24,1
 436 0082 9987      		std Y+9,r25
 437 0084 8887      		std Y+8,r24
 215:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 438               		.loc 1 215 7 is_stmt 1 view .LVU117
 439 0086 70E0      		ldi r23,0
 440 0088 60E0      		ldi r22,0
 441 008a CE01      		movw r24,r28
 442 008c 0F96      		adiw r24,15
 443 008e 0E94 0000 		call chThdDequeueNextI
 444               	.LVL26:
 216:../../../os/common/oslib/src/chmboxes.c **** 
 445               		.loc 1 216 7 view .LVU118
 446 0092 0E94 0000 		call chSchRescheduleS
 447               	.LVL27:
 218:../../../os/common/oslib/src/chmboxes.c ****     }
 448               		.loc 1 218 7 view .LVU119
 216:../../../os/common/oslib/src/chmboxes.c **** 
 449               		.loc 1 216 7 is_stmt 0 view .LVU120
 450 0096 90E0      		ldi r25,0
 451 0098 80E0      		ldi r24,0
 452 009a 00C0      		rjmp .L5
 453               	.LBE117:
 454               	.LBE116:
 455               		.cfi_endproc
 456               	.LFE145:
 458               		.section	.text.chMBPostTimeout,"ax",@progbits
 459               	.global	chMBPostTimeout
 461               	chMBPostTimeout:
 462               	.LVL28:
 463               	.LFB144:
 165:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 464               		.loc 1 165 73 is_stmt 1 view -0
 465               		.cfi_startproc
 466               	/* prologue: function */
 467               	/* frame size = 0 */
 468               	/* stack size = 0 */
 469               	.L__stack_usage = 0
 166:../../../os/common/oslib/src/chmboxes.c **** 
 470               		.loc 1 166 3 view .LVU122
 168:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 471               		.loc 1 168 3 view .LVU123
 472               	.LBB118:
 473               	.LBI118:
 353:../../../os/rt/include/chsys.h **** 
 474               		.loc 4 353 20 view .LVU124
 475               	.LBE118:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 476               		.loc 4 355 3 view .LVU125
 477               	.LBB121:
 478               	.LBB119:
 479               	.LBI119:
 435:../../../os/common/ports/AVR/chcore.h **** 
 480               		.loc 5 435 20 view .LVU126
 481               	.LBB120:
 437:../../../os/common/ports/AVR/chcore.h **** }
 482               		.loc 5 437 3 view .LVU127
 483               	/* #APP */
 484               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 485 0000 F894      		cli
 486               	 ;  0 "" 2
 487               	/* #NOAPP */
 488               	.LBE120:
 489               	.LBE119:
 490               	.LBE121:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 491               		.loc 4 356 34 view .LVU128
 357:../../../os/rt/include/chsys.h **** }
 492               		.loc 4 357 20 view .LVU129
 169:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 493               		.loc 1 169 3 view .LVU130
 169:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 494               		.loc 1 169 12 is_stmt 0 view .LVU131
 495 0002 0E94 0000 		call chMBPostTimeoutS
 496               	.LVL29:
 170:../../../os/common/oslib/src/chmboxes.c **** 
 497               		.loc 1 170 3 is_stmt 1 view .LVU132
 498               	.LBB122:
 499               	.LBI122:
 365:../../../os/rt/include/chsys.h **** 
 500               		.loc 4 365 20 view .LVU133
 501               	.LBB123:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 502               		.loc 4 367 22 view .LVU134
 368:../../../os/rt/include/chsys.h **** 
 503               		.loc 4 368 33 view .LVU135
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 504               		.loc 4 374 3 view .LVU136
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 505               		.loc 4 374 3 view .LVU137
 506               		.loc 4 378 3 view .LVU138
 507               	.LBB124:
 508               	.LBI124:
 445:../../../os/common/ports/AVR/chcore.h **** 
 509               		.loc 5 445 20 view .LVU139
 510               	.LBB125:
 511               		.loc 5 447 3 view .LVU140
 512               	/* #APP */
 513               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 514 0006 7894      		sei
 515               	 ;  0 "" 2
 516               	/* #NOAPP */
 517               	.LBE125:
 518               	.LBE124:
 519               	.LBE123:
 520               	.LBE122:
 172:../../../os/common/oslib/src/chmboxes.c **** }
 521               		.loc 1 172 3 view .LVU141
 522               	/* epilogue start */
 173:../../../os/common/oslib/src/chmboxes.c **** 
 523               		.loc 1 173 1 is_stmt 0 view .LVU142
 524 0008 0895      		ret
 525               		.cfi_endproc
 526               	.LFE144:
 528               		.section	.text.chMBPostI,"ax",@progbits
 529               	.global	chMBPostI
 531               	chMBPostI:
 532               	.LVL30:
 533               	.LFB146:
 227:../../../os/common/oslib/src/chmboxes.c **** 
 228:../../../os/common/oslib/src/chmboxes.c **** /**
 229:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 230:../../../os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 231:../../../os/common/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 232:../../../os/common/oslib/src/chmboxes.c ****  *
 233:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 234:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 235:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 236:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 237:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 238:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 239:../../../os/common/oslib/src/chmboxes.c ****  *                      posted.
 240:../../../os/common/oslib/src/chmboxes.c ****  *
 241:../../../os/common/oslib/src/chmboxes.c ****  * @iclass
 242:../../../os/common/oslib/src/chmboxes.c ****  */
 243:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 534               		.loc 1 243 44 is_stmt 1 view -0
 535               		.cfi_startproc
 536               	/* prologue: function */
 537               	/* frame size = 0 */
 538               	/* stack size = 0 */
 539               	.L__stack_usage = 0
 540               		.loc 1 243 44 is_stmt 0 view .LVU144
 541 0000 FC01      		movw r30,r24
 244:../../../os/common/oslib/src/chmboxes.c **** 
 245:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 542               		.loc 1 245 21 is_stmt 1 view .LVU145
 246:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 543               		.loc 1 246 3 view .LVU146
 544               		.loc 1 246 3 view .LVU147
 247:../../../os/common/oslib/src/chmboxes.c **** 
 248:../../../os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 249:../../../os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 545               		.loc 1 249 3 view .LVU148
 546               		.loc 1 249 6 is_stmt 0 view .LVU149
 547 0002 8285      		ldd r24,Z+10
 548               	.LVL31:
 549               		.loc 1 249 6 view .LVU150
 550 0004 8111      		cpse r24,__zero_reg__
 551 0006 00C0      		rjmp .L19
 250:../../../os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 251:../../../os/common/oslib/src/chmboxes.c ****   }
 252:../../../os/common/oslib/src/chmboxes.c **** 
 253:../../../os/common/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 254:../../../os/common/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 552               		.loc 1 254 3 is_stmt 1 view .LVU151
 553               	.LVL32:
 554               	.LBB126:
 555               	.LBI126:
 171:../../../os/common/oslib/include/chmboxes.h **** 
 556               		.loc 6 171 22 view .LVU152
 557               	.LBB127:
 173:../../../os/common/oslib/include/chmboxes.h **** 
 558               		.loc 6 173 21 view .LVU153
 559               		.loc 6 175 3 view .LVU154
 560               		.loc 6 175 10 is_stmt 0 view .LVU155
 561 0008 4081      		ld r20,Z
 562 000a 5181      		ldd r21,Z+1
 563 000c 2281      		ldd r18,Z+2
 564 000e 3381      		ldd r19,Z+3
 565               	.LBB128:
 566               	.LBI128:
 140:../../../os/common/oslib/include/chmboxes.h **** 
 567               		.loc 6 140 22 is_stmt 1 view .LVU156
 568               	.LVL33:
 569               	.LBB129:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 570               		.loc 6 144 3 view .LVU157
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 571               		.loc 6 144 3 is_stmt 0 view .LVU158
 572               	.LBE129:
 573               	.LBE128:
 574               	.LBE127:
 575               	.LBE126:
 158:../../../os/common/oslib/include/chmboxes.h **** 
 576               		.loc 6 158 21 is_stmt 1 view .LVU159
 160:../../../os/common/oslib/include/chmboxes.h **** }
 577               		.loc 6 160 3 view .LVU160
 578               	.LBB133:
 579               	.LBB132:
 580               	.LBB131:
 581               	.LBB130:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 582               		.loc 6 144 28 is_stmt 0 view .LVU161
 583 0010 C901      		movw r24,r18
 584 0012 841B      		sub r24,r20
 585 0014 950B      		sbc r25,r21
 586 0016 9595      		asr r25
 587 0018 8795      		ror r24
 588               	.LBE130:
 589               	.LBE131:
 590               	.LBE132:
 591               	.LBE133:
 592               		.loc 1 254 6 view .LVU162
 593 001a A085      		ldd r26,Z+8
 594 001c B185      		ldd r27,Z+9
 595 001e 8A17      		cp r24,r26
 596 0020 9B07      		cpc r25,r27
 597 0022 01F0      		breq .L20
 255:../../../os/common/oslib/src/chmboxes.c ****     *mbp->wrptr++ = msg;
 598               		.loc 1 255 5 is_stmt 1 view .LVU163
 599               		.loc 1 255 9 is_stmt 0 view .LVU164
 600 0024 A481      		ldd r26,Z+4
 601 0026 B581      		ldd r27,Z+5
 602               		.loc 1 255 16 view .LVU165
 603 0028 CD01      		movw r24,r26
 604 002a 0296      		adiw r24,2
 605 002c 9583      		std Z+5,r25
 606 002e 8483      		std Z+4,r24
 607               		.loc 1 255 19 view .LVU166
 608 0030 6D93      		st X+,r22
 609 0032 7C93      		st X,r23
 256:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->wrptr >= mbp->top) {
 610               		.loc 1 256 5 is_stmt 1 view .LVU167
 611               		.loc 1 256 8 is_stmt 0 view .LVU168
 612 0034 8217      		cp r24,r18
 613 0036 9307      		cpc r25,r19
 614 0038 00F0      		brlo .L18
 257:../../../os/common/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 615               		.loc 1 257 7 is_stmt 1 view .LVU169
 616               		.loc 1 257 18 is_stmt 0 view .LVU170
 617 003a 5583      		std Z+5,r21
 618 003c 4483      		std Z+4,r20
 619               	.L18:
 258:../../../os/common/oslib/src/chmboxes.c ****     }
 259:../../../os/common/oslib/src/chmboxes.c ****     mbp->cnt++;
 620               		.loc 1 259 5 is_stmt 1 view .LVU171
 621               		.loc 1 259 13 is_stmt 0 view .LVU172
 622 003e 8085      		ldd r24,Z+8
 623 0040 9185      		ldd r25,Z+9
 624 0042 0196      		adiw r24,1
 625 0044 9187      		std Z+9,r25
 626 0046 8087      		std Z+8,r24
 260:../../../os/common/oslib/src/chmboxes.c **** 
 261:../../../os/common/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 262:../../../os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 627               		.loc 1 262 5 is_stmt 1 view .LVU173
 628 0048 70E0      		ldi r23,0
 629 004a 60E0      		ldi r22,0
 630               	.LVL34:
 631               		.loc 1 262 5 is_stmt 0 view .LVU174
 632 004c CF01      		movw r24,r30
 633 004e 0F96      		adiw r24,15
 634 0050 0E94 0000 		call chThdDequeueNextI
 635               	.LVL35:
 263:../../../os/common/oslib/src/chmboxes.c **** 
 264:../../../os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 636               		.loc 1 264 5 is_stmt 1 view .LVU175
 637               		.loc 1 264 12 is_stmt 0 view .LVU176
 638 0054 90E0      		ldi r25,0
 639 0056 80E0      		ldi r24,0
 640 0058 0895      		ret
 641               	.LVL36:
 642               	.L20:
 265:../../../os/common/oslib/src/chmboxes.c ****   }
 266:../../../os/common/oslib/src/chmboxes.c **** 
 267:../../../os/common/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 268:../../../os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 643               		.loc 1 268 10 view .LVU177
 644 005a 8FEF      		ldi r24,lo8(-1)
 645 005c 9FEF      		ldi r25,lo8(-1)
 646               	/* epilogue start */
 269:../../../os/common/oslib/src/chmboxes.c **** }
 647               		.loc 1 269 1 view .LVU178
 648 005e 0895      		ret
 649               	.LVL37:
 650               	.L19:
 250:../../../os/common/oslib/src/chmboxes.c ****   }
 651               		.loc 1 250 12 view .LVU179
 652 0060 8EEF      		ldi r24,lo8(-2)
 653 0062 9FEF      		ldi r25,lo8(-1)
 654 0064 0895      		ret
 655               		.cfi_endproc
 656               	.LFE146:
 658               		.section	.text.chMBPostAheadTimeoutS,"ax",@progbits
 659               	.global	chMBPostAheadTimeoutS
 661               	chMBPostAheadTimeoutS:
 662               	.LVL38:
 663               	.LFB148:
 270:../../../os/common/oslib/src/chmboxes.c **** 
 271:../../../os/common/oslib/src/chmboxes.c **** /**
 272:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 273:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 274:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 275:../../../os/common/oslib/src/chmboxes.c ****  *
 276:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 277:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 278:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 279:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 280:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 281:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 282:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 283:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 284:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 285:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 286:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 287:../../../os/common/oslib/src/chmboxes.c ****  *
 288:../../../os/common/oslib/src/chmboxes.c ****  * @api
 289:../../../os/common/oslib/src/chmboxes.c ****  */
 290:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 291:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 292:../../../os/common/oslib/src/chmboxes.c **** 
 293:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 294:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 295:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 296:../../../os/common/oslib/src/chmboxes.c **** 
 297:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 298:../../../os/common/oslib/src/chmboxes.c **** }
 299:../../../os/common/oslib/src/chmboxes.c **** 
 300:../../../os/common/oslib/src/chmboxes.c **** /**
 301:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 302:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 303:../../../os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 304:../../../os/common/oslib/src/chmboxes.c ****  *
 305:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 306:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 307:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 308:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 309:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 310:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 311:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 312:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 313:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 314:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 315:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 316:../../../os/common/oslib/src/chmboxes.c ****  *
 317:../../../os/common/oslib/src/chmboxes.c ****  * @sclass
 318:../../../os/common/oslib/src/chmboxes.c ****  */
 319:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 664               		.loc 1 319 79 is_stmt 1 view -0
 665               		.cfi_startproc
 666               		.loc 1 319 79 is_stmt 0 view .LVU181
 667 0000 CF92      		push r12
 668               	.LCFI10:
 669               		.cfi_def_cfa_offset 3
 670               		.cfi_offset 12, -2
 671 0002 DF92      		push r13
 672               	.LCFI11:
 673               		.cfi_def_cfa_offset 4
 674               		.cfi_offset 13, -3
 675 0004 EF92      		push r14
 676               	.LCFI12:
 677               		.cfi_def_cfa_offset 5
 678               		.cfi_offset 14, -4
 679 0006 FF92      		push r15
 680               	.LCFI13:
 681               		.cfi_def_cfa_offset 6
 682               		.cfi_offset 15, -5
 683 0008 0F93      		push r16
 684               	.LCFI14:
 685               		.cfi_def_cfa_offset 7
 686               		.cfi_offset 16, -6
 687 000a 1F93      		push r17
 688               	.LCFI15:
 689               		.cfi_def_cfa_offset 8
 690               		.cfi_offset 17, -7
 691 000c CF93      		push r28
 692               	.LCFI16:
 693               		.cfi_def_cfa_offset 9
 694               		.cfi_offset 28, -8
 695 000e DF93      		push r29
 696               	.LCFI17:
 697               		.cfi_def_cfa_offset 10
 698               		.cfi_offset 29, -9
 699               	/* prologue: function */
 700               	/* frame size = 0 */
 701               	/* stack size = 8 */
 702               	.L__stack_usage = 8
 703 0010 EC01      		movw r28,r24
 704 0012 6B01      		movw r12,r22
 705 0014 7A01      		movw r14,r20
 320:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 706               		.loc 1 320 3 is_stmt 1 view .LVU182
 321:../../../os/common/oslib/src/chmboxes.c **** 
 322:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 707               		.loc 1 322 21 view .LVU183
 323:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 708               		.loc 1 323 3 view .LVU184
 709               		.loc 1 323 3 view .LVU185
 324:../../../os/common/oslib/src/chmboxes.c **** 
 325:../../../os/common/oslib/src/chmboxes.c ****   do {
 326:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 327:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 328:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 329:../../../os/common/oslib/src/chmboxes.c ****     }
 330:../../../os/common/oslib/src/chmboxes.c **** 
 331:../../../os/common/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 332:../../../os/common/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 333:../../../os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 334:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 335:../../../os/common/oslib/src/chmboxes.c ****       }
 336:../../../os/common/oslib/src/chmboxes.c ****       *mbp->rdptr = msg;
 337:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 338:../../../os/common/oslib/src/chmboxes.c **** 
 339:../../../os/common/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 340:../../../os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 341:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 342:../../../os/common/oslib/src/chmboxes.c **** 
 343:../../../os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 344:../../../os/common/oslib/src/chmboxes.c ****     }
 345:../../../os/common/oslib/src/chmboxes.c **** 
 346:../../../os/common/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 347:../../../os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 710               		.loc 1 347 14 is_stmt 0 view .LVU186
 711 0016 8C01      		movw r16,r24
 712 0018 055F      		subi r16,-11
 713 001a 1F4F      		sbci r17,-1
 714 001c 00C0      		rjmp .L26
 715               	.LVL39:
 716               	.L32:
 332:../../../os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 717               		.loc 1 332 5 is_stmt 1 view .LVU187
 718               	.LBB144:
 719               	.LBI144:
 171:../../../os/common/oslib/include/chmboxes.h **** 
 720               		.loc 6 171 22 view .LVU188
 721               	.LBB145:
 173:../../../os/common/oslib/include/chmboxes.h **** 
 722               		.loc 6 173 21 view .LVU189
 723               		.loc 6 175 3 view .LVU190
 724               		.loc 6 175 10 is_stmt 0 view .LVU191
 725 001e 2881      		ld r18,Y
 726 0020 3981      		ldd r19,Y+1
 727 0022 4A81      		ldd r20,Y+2
 728 0024 5B81      		ldd r21,Y+3
 729               	.LBB146:
 730               	.LBI146:
 140:../../../os/common/oslib/include/chmboxes.h **** 
 731               		.loc 6 140 22 is_stmt 1 view .LVU192
 732               	.LVL40:
 733               	.LBB147:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 734               		.loc 6 144 3 view .LVU193
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 735               		.loc 6 144 3 is_stmt 0 view .LVU194
 736               	.LBE147:
 737               	.LBE146:
 738               	.LBE145:
 739               	.LBE144:
 158:../../../os/common/oslib/include/chmboxes.h **** 
 740               		.loc 6 158 21 is_stmt 1 view .LVU195
 160:../../../os/common/oslib/include/chmboxes.h **** }
 741               		.loc 6 160 3 view .LVU196
 742               	.LBB151:
 743               	.LBB150:
 744               	.LBB149:
 745               	.LBB148:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 746               		.loc 6 144 28 is_stmt 0 view .LVU197
 747 0026 CA01      		movw r24,r20
 748 0028 821B      		sub r24,r18
 749 002a 930B      		sbc r25,r19
 750 002c 9595      		asr r25
 751 002e 8795      		ror r24
 752               	.LBE148:
 753               	.LBE149:
 754               	.LBE150:
 755               	.LBE151:
 332:../../../os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 756               		.loc 1 332 8 view .LVU198
 757 0030 6885      		ldd r22,Y+8
 758 0032 7985      		ldd r23,Y+9
 759 0034 8617      		cp r24,r22
 760 0036 9707      		cpc r25,r23
 761 0038 01F4      		brne .L31
 762               		.loc 1 347 5 is_stmt 1 view .LVU199
 763               		.loc 1 347 14 is_stmt 0 view .LVU200
 764 003a B701      		movw r22,r14
 765 003c C801      		movw r24,r16
 766 003e 0E94 0000 		call chThdEnqueueTimeoutS
 767               	.LVL41:
 348:../../../os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 768               		.loc 1 348 3 view .LVU201
 769 0042 0097      		sbiw r24,0
 770 0044 01F4      		brne .L21
 771               	.LVL42:
 772               	.L26:
 325:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 773               		.loc 1 325 3 is_stmt 1 view .LVU202
 327:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 774               		.loc 1 327 5 view .LVU203
 327:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 775               		.loc 1 327 8 is_stmt 0 view .LVU204
 776 0046 8A85      		ldd r24,Y+10
 777 0048 8823      		tst r24
 778 004a 01F0      		breq .L32
 328:../../../os/common/oslib/src/chmboxes.c ****     }
 779               		.loc 1 328 14 view .LVU205
 780 004c 8EEF      		ldi r24,lo8(-2)
 781 004e 9FEF      		ldi r25,lo8(-1)
 782               	.L21:
 783               	/* epilogue start */
 349:../../../os/common/oslib/src/chmboxes.c **** 
 350:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 351:../../../os/common/oslib/src/chmboxes.c **** }
 784               		.loc 1 351 1 view .LVU206
 785 0050 DF91      		pop r29
 786 0052 CF91      		pop r28
 787               	.LVL43:
 788               		.loc 1 351 1 view .LVU207
 789 0054 1F91      		pop r17
 790 0056 0F91      		pop r16
 791               	.LVL44:
 792               		.loc 1 351 1 view .LVU208
 793 0058 FF90      		pop r15
 794 005a EF90      		pop r14
 795               	.LVL45:
 796               		.loc 1 351 1 view .LVU209
 797 005c DF90      		pop r13
 798 005e CF90      		pop r12
 799               	.LVL46:
 800               		.loc 1 351 1 view .LVU210
 801 0060 0895      		ret
 802               	.LVL47:
 803               	.L31:
 333:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 804               		.loc 1 333 7 is_stmt 1 view .LVU211
 333:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 805               		.loc 1 333 11 is_stmt 0 view .LVU212
 806 0062 EE81      		ldd r30,Y+6
 807 0064 FF81      		ldd r31,Y+7
 808 0066 3297      		sbiw r30,2
 333:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 809               		.loc 1 333 10 view .LVU213
 810 0068 E217      		cp r30,r18
 811 006a F307      		cpc r31,r19
 812 006c 00F4      		brsh .L30
 334:../../../os/common/oslib/src/chmboxes.c ****       }
 813               		.loc 1 334 9 is_stmt 1 view .LVU214
 334:../../../os/common/oslib/src/chmboxes.c ****       }
 814               		.loc 1 334 31 is_stmt 0 view .LVU215
 815 006e FA01      		movw r30,r20
 816 0070 3297      		sbiw r30,2
 817               	.L30:
 334:../../../os/common/oslib/src/chmboxes.c ****       }
 818               		.loc 1 334 20 view .LVU216
 819 0072 FF83      		std Y+7,r31
 820 0074 EE83      		std Y+6,r30
 821               	.LVL48:
 822               	.LBB152:
 823               	.LBB153:
 336:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 824               		.loc 1 336 7 is_stmt 1 view .LVU217
 336:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 825               		.loc 1 336 19 is_stmt 0 view .LVU218
 826 0076 D182      		std Z+1,r13
 827 0078 C082      		st Z,r12
 337:../../../os/common/oslib/src/chmboxes.c **** 
 828               		.loc 1 337 7 is_stmt 1 view .LVU219
 337:../../../os/common/oslib/src/chmboxes.c **** 
 829               		.loc 1 337 15 is_stmt 0 view .LVU220
 830 007a 8885      		ldd r24,Y+8
 831 007c 9985      		ldd r25,Y+9
 832 007e 0196      		adiw r24,1
 833 0080 9987      		std Y+9,r25
 834 0082 8887      		std Y+8,r24
 340:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 835               		.loc 1 340 7 is_stmt 1 view .LVU221
 836 0084 70E0      		ldi r23,0
 837 0086 60E0      		ldi r22,0
 838 0088 CE01      		movw r24,r28
 839 008a 0F96      		adiw r24,15
 840 008c 0E94 0000 		call chThdDequeueNextI
 841               	.LVL49:
 341:../../../os/common/oslib/src/chmboxes.c **** 
 842               		.loc 1 341 7 view .LVU222
 843 0090 0E94 0000 		call chSchRescheduleS
 844               	.LVL50:
 343:../../../os/common/oslib/src/chmboxes.c ****     }
 845               		.loc 1 343 7 view .LVU223
 341:../../../os/common/oslib/src/chmboxes.c **** 
 846               		.loc 1 341 7 is_stmt 0 view .LVU224
 847 0094 90E0      		ldi r25,0
 848 0096 80E0      		ldi r24,0
 849 0098 00C0      		rjmp .L21
 850               	.LBE153:
 851               	.LBE152:
 852               		.cfi_endproc
 853               	.LFE148:
 855               		.section	.text.chMBPostAheadTimeout,"ax",@progbits
 856               	.global	chMBPostAheadTimeout
 858               	chMBPostAheadTimeout:
 859               	.LVL51:
 860               	.LFB147:
 290:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 861               		.loc 1 290 78 is_stmt 1 view -0
 862               		.cfi_startproc
 863               	/* prologue: function */
 864               	/* frame size = 0 */
 865               	/* stack size = 0 */
 866               	.L__stack_usage = 0
 291:../../../os/common/oslib/src/chmboxes.c **** 
 867               		.loc 1 291 3 view .LVU226
 293:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 868               		.loc 1 293 3 view .LVU227
 869               	.LBB154:
 870               	.LBI154:
 353:../../../os/rt/include/chsys.h **** 
 871               		.loc 4 353 20 view .LVU228
 872               	.LBE154:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 873               		.loc 4 355 3 view .LVU229
 874               	.LBB157:
 875               	.LBB155:
 876               	.LBI155:
 435:../../../os/common/ports/AVR/chcore.h **** 
 877               		.loc 5 435 20 view .LVU230
 878               	.LBB156:
 437:../../../os/common/ports/AVR/chcore.h **** }
 879               		.loc 5 437 3 view .LVU231
 880               	/* #APP */
 881               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 882 0000 F894      		cli
 883               	 ;  0 "" 2
 884               	/* #NOAPP */
 885               	.LBE156:
 886               	.LBE155:
 887               	.LBE157:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 888               		.loc 4 356 34 view .LVU232
 357:../../../os/rt/include/chsys.h **** }
 889               		.loc 4 357 20 view .LVU233
 294:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 890               		.loc 1 294 3 view .LVU234
 294:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 891               		.loc 1 294 12 is_stmt 0 view .LVU235
 892 0002 0E94 0000 		call chMBPostAheadTimeoutS
 893               	.LVL52:
 295:../../../os/common/oslib/src/chmboxes.c **** 
 894               		.loc 1 295 3 is_stmt 1 view .LVU236
 895               	.LBB158:
 896               	.LBI158:
 365:../../../os/rt/include/chsys.h **** 
 897               		.loc 4 365 20 view .LVU237
 898               	.LBB159:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 899               		.loc 4 367 22 view .LVU238
 368:../../../os/rt/include/chsys.h **** 
 900               		.loc 4 368 33 view .LVU239
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 901               		.loc 4 374 3 view .LVU240
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 902               		.loc 4 374 3 view .LVU241
 903               		.loc 4 378 3 view .LVU242
 904               	.LBB160:
 905               	.LBI160:
 445:../../../os/common/ports/AVR/chcore.h **** 
 906               		.loc 5 445 20 view .LVU243
 907               	.LBB161:
 908               		.loc 5 447 3 view .LVU244
 909               	/* #APP */
 910               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 911 0006 7894      		sei
 912               	 ;  0 "" 2
 913               	/* #NOAPP */
 914               	.LBE161:
 915               	.LBE160:
 916               	.LBE159:
 917               	.LBE158:
 297:../../../os/common/oslib/src/chmboxes.c **** }
 918               		.loc 1 297 3 view .LVU245
 919               	/* epilogue start */
 298:../../../os/common/oslib/src/chmboxes.c **** 
 920               		.loc 1 298 1 is_stmt 0 view .LVU246
 921 0008 0895      		ret
 922               		.cfi_endproc
 923               	.LFE147:
 925               		.section	.text.chMBPostAheadI,"ax",@progbits
 926               	.global	chMBPostAheadI
 928               	chMBPostAheadI:
 929               	.LVL53:
 930               	.LFB149:
 352:../../../os/common/oslib/src/chmboxes.c **** 
 353:../../../os/common/oslib/src/chmboxes.c **** /**
 354:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 355:../../../os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 356:../../../os/common/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 357:../../../os/common/oslib/src/chmboxes.c ****  *
 358:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 359:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 360:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 361:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 362:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 363:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 364:../../../os/common/oslib/src/chmboxes.c ****  *                      posted.
 365:../../../os/common/oslib/src/chmboxes.c ****  *
 366:../../../os/common/oslib/src/chmboxes.c ****  * @iclass
 367:../../../os/common/oslib/src/chmboxes.c ****  */
 368:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 931               		.loc 1 368 49 is_stmt 1 view -0
 932               		.cfi_startproc
 933               	/* prologue: function */
 934               	/* frame size = 0 */
 935               	/* stack size = 0 */
 936               	.L__stack_usage = 0
 937               		.loc 1 368 49 is_stmt 0 view .LVU248
 938 0000 FC01      		movw r30,r24
 369:../../../os/common/oslib/src/chmboxes.c **** 
 370:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 939               		.loc 1 370 21 is_stmt 1 view .LVU249
 371:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 940               		.loc 1 371 3 view .LVU250
 941               		.loc 1 371 3 view .LVU251
 372:../../../os/common/oslib/src/chmboxes.c **** 
 373:../../../os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 374:../../../os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 942               		.loc 1 374 3 view .LVU252
 943               		.loc 1 374 6 is_stmt 0 view .LVU253
 944 0002 8285      		ldd r24,Z+10
 945               	.LVL54:
 946               		.loc 1 374 6 view .LVU254
 947 0004 8111      		cpse r24,__zero_reg__
 948 0006 00C0      		rjmp .L38
 375:../../../os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 376:../../../os/common/oslib/src/chmboxes.c ****   }
 377:../../../os/common/oslib/src/chmboxes.c **** 
 378:../../../os/common/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 379:../../../os/common/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 949               		.loc 1 379 3 is_stmt 1 view .LVU255
 950               	.LVL55:
 951               	.LBB162:
 952               	.LBI162:
 171:../../../os/common/oslib/include/chmboxes.h **** 
 953               		.loc 6 171 22 view .LVU256
 954               	.LBB163:
 173:../../../os/common/oslib/include/chmboxes.h **** 
 955               		.loc 6 173 21 view .LVU257
 956               		.loc 6 175 3 view .LVU258
 957               		.loc 6 175 10 is_stmt 0 view .LVU259
 958 0008 2081      		ld r18,Z
 959 000a 3181      		ldd r19,Z+1
 960 000c 4281      		ldd r20,Z+2
 961 000e 5381      		ldd r21,Z+3
 962               	.LBB164:
 963               	.LBI164:
 140:../../../os/common/oslib/include/chmboxes.h **** 
 964               		.loc 6 140 22 is_stmt 1 view .LVU260
 965               	.LVL56:
 966               	.LBB165:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 967               		.loc 6 144 3 view .LVU261
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 968               		.loc 6 144 3 is_stmt 0 view .LVU262
 969               	.LBE165:
 970               	.LBE164:
 971               	.LBE163:
 972               	.LBE162:
 158:../../../os/common/oslib/include/chmboxes.h **** 
 973               		.loc 6 158 21 is_stmt 1 view .LVU263
 160:../../../os/common/oslib/include/chmboxes.h **** }
 974               		.loc 6 160 3 view .LVU264
 975               	.LBB169:
 976               	.LBB168:
 977               	.LBB167:
 978               	.LBB166:
 144:../../../os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 979               		.loc 6 144 28 is_stmt 0 view .LVU265
 980 0010 CA01      		movw r24,r20
 981 0012 821B      		sub r24,r18
 982 0014 930B      		sbc r25,r19
 983 0016 9595      		asr r25
 984 0018 8795      		ror r24
 985               	.LBE166:
 986               	.LBE167:
 987               	.LBE168:
 988               	.LBE169:
 989               		.loc 1 379 6 view .LVU266
 990 001a A085      		ldd r26,Z+8
 991 001c B185      		ldd r27,Z+9
 992 001e 8A17      		cp r24,r26
 993 0020 9B07      		cpc r25,r27
 994 0022 01F0      		breq .L39
 380:../../../os/common/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 995               		.loc 1 380 5 is_stmt 1 view .LVU267
 996               		.loc 1 380 9 is_stmt 0 view .LVU268
 997 0024 A681      		ldd r26,Z+6
 998 0026 B781      		ldd r27,Z+7
 999 0028 1297      		sbiw r26,2
 1000               		.loc 1 380 8 view .LVU269
 1001 002a A217      		cp r26,r18
 1002 002c B307      		cpc r27,r19
 1003 002e 00F4      		brsh .L40
 381:../../../os/common/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->top - 1;
 1004               		.loc 1 381 7 is_stmt 1 view .LVU270
 1005               		.loc 1 381 29 is_stmt 0 view .LVU271
 1006 0030 DA01      		movw r26,r20
 1007 0032 1297      		sbiw r26,2
 1008               	.L40:
 1009               		.loc 1 381 18 view .LVU272
 1010 0034 B783      		std Z+7,r27
 1011 0036 A683      		std Z+6,r26
 382:../../../os/common/oslib/src/chmboxes.c ****     }
 383:../../../os/common/oslib/src/chmboxes.c ****     *mbp->rdptr = msg;
 1012               		.loc 1 383 5 is_stmt 1 view .LVU273
 1013               		.loc 1 383 17 is_stmt 0 view .LVU274
 1014 0038 6D93      		st X+,r22
 1015 003a 7C93      		st X,r23
 384:../../../os/common/oslib/src/chmboxes.c ****     mbp->cnt++;
 1016               		.loc 1 384 5 is_stmt 1 view .LVU275
 1017               		.loc 1 384 13 is_stmt 0 view .LVU276
 1018 003c 8085      		ldd r24,Z+8
 1019 003e 9185      		ldd r25,Z+9
 1020 0040 0196      		adiw r24,1
 1021 0042 9187      		std Z+9,r25
 1022 0044 8087      		std Z+8,r24
 385:../../../os/common/oslib/src/chmboxes.c **** 
 386:../../../os/common/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 387:../../../os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 1023               		.loc 1 387 5 is_stmt 1 view .LVU277
 1024 0046 70E0      		ldi r23,0
 1025 0048 60E0      		ldi r22,0
 1026               	.LVL57:
 1027               		.loc 1 387 5 is_stmt 0 view .LVU278
 1028 004a CF01      		movw r24,r30
 1029 004c 0F96      		adiw r24,15
 1030 004e 0E94 0000 		call chThdDequeueNextI
 1031               	.LVL58:
 388:../../../os/common/oslib/src/chmboxes.c **** 
 389:../../../os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 1032               		.loc 1 389 5 is_stmt 1 view .LVU279
 1033               		.loc 1 389 12 is_stmt 0 view .LVU280
 1034 0052 90E0      		ldi r25,0
 1035 0054 80E0      		ldi r24,0
 1036 0056 0895      		ret
 1037               	.LVL59:
 1038               	.L39:
 390:../../../os/common/oslib/src/chmboxes.c ****   }
 391:../../../os/common/oslib/src/chmboxes.c **** 
 392:../../../os/common/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 393:../../../os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 1039               		.loc 1 393 10 view .LVU281
 1040 0058 8FEF      		ldi r24,lo8(-1)
 1041 005a 9FEF      		ldi r25,lo8(-1)
 1042               	/* epilogue start */
 394:../../../os/common/oslib/src/chmboxes.c **** }
 1043               		.loc 1 394 1 view .LVU282
 1044 005c 0895      		ret
 1045               	.LVL60:
 1046               	.L38:
 375:../../../os/common/oslib/src/chmboxes.c ****   }
 1047               		.loc 1 375 12 view .LVU283
 1048 005e 8EEF      		ldi r24,lo8(-2)
 1049 0060 9FEF      		ldi r25,lo8(-1)
 1050 0062 0895      		ret
 1051               		.cfi_endproc
 1052               	.LFE149:
 1054               		.section	.text.chMBFetchTimeoutS,"ax",@progbits
 1055               	.global	chMBFetchTimeoutS
 1057               	chMBFetchTimeoutS:
 1058               	.LVL61:
 1059               	.LFB151:
 395:../../../os/common/oslib/src/chmboxes.c **** 
 396:../../../os/common/oslib/src/chmboxes.c **** /**
 397:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 398:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 399:../../../os/common/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 400:../../../os/common/oslib/src/chmboxes.c ****  *
 401:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 402:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 403:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 404:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 405:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 406:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 407:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 408:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 409:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 410:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 411:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 412:../../../os/common/oslib/src/chmboxes.c ****  *
 413:../../../os/common/oslib/src/chmboxes.c ****  * @api
 414:../../../os/common/oslib/src/chmboxes.c ****  */
 415:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 416:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 417:../../../os/common/oslib/src/chmboxes.c **** 
 418:../../../os/common/oslib/src/chmboxes.c ****   chSysLock();
 419:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 420:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 421:../../../os/common/oslib/src/chmboxes.c **** 
 422:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 423:../../../os/common/oslib/src/chmboxes.c **** }
 424:../../../os/common/oslib/src/chmboxes.c **** 
 425:../../../os/common/oslib/src/chmboxes.c **** /**
 426:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 427:../../../os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 428:../../../os/common/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 429:../../../os/common/oslib/src/chmboxes.c ****  *
 430:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 431:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 432:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 433:../../../os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 434:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 435:../../../os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 436:../../../os/common/oslib/src/chmboxes.c ****  *                      .
 437:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 438:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 439:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 440:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 441:../../../os/common/oslib/src/chmboxes.c ****  *
 442:../../../os/common/oslib/src/chmboxes.c ****  * @sclass
 443:../../../os/common/oslib/src/chmboxes.c ****  */
 444:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 1060               		.loc 1 444 77 is_stmt 1 view -0
 1061               		.cfi_startproc
 1062               		.loc 1 444 77 is_stmt 0 view .LVU285
 1063 0000 CF92      		push r12
 1064               	.LCFI18:
 1065               		.cfi_def_cfa_offset 3
 1066               		.cfi_offset 12, -2
 1067 0002 DF92      		push r13
 1068               	.LCFI19:
 1069               		.cfi_def_cfa_offset 4
 1070               		.cfi_offset 13, -3
 1071 0004 EF92      		push r14
 1072               	.LCFI20:
 1073               		.cfi_def_cfa_offset 5
 1074               		.cfi_offset 14, -4
 1075 0006 FF92      		push r15
 1076               	.LCFI21:
 1077               		.cfi_def_cfa_offset 6
 1078               		.cfi_offset 15, -5
 1079 0008 0F93      		push r16
 1080               	.LCFI22:
 1081               		.cfi_def_cfa_offset 7
 1082               		.cfi_offset 16, -6
 1083 000a 1F93      		push r17
 1084               	.LCFI23:
 1085               		.cfi_def_cfa_offset 8
 1086               		.cfi_offset 17, -7
 1087 000c CF93      		push r28
 1088               	.LCFI24:
 1089               		.cfi_def_cfa_offset 9
 1090               		.cfi_offset 28, -8
 1091 000e DF93      		push r29
 1092               	.LCFI25:
 1093               		.cfi_def_cfa_offset 10
 1094               		.cfi_offset 29, -9
 1095               	/* prologue: function */
 1096               	/* frame size = 0 */
 1097               	/* stack size = 8 */
 1098               	.L__stack_usage = 8
 1099 0010 EC01      		movw r28,r24
 1100 0012 6B01      		movw r12,r22
 1101 0014 7A01      		movw r14,r20
 445:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 1102               		.loc 1 445 3 is_stmt 1 view .LVU286
 446:../../../os/common/oslib/src/chmboxes.c **** 
 447:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 1103               		.loc 1 447 21 view .LVU287
 448:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 1104               		.loc 1 448 3 view .LVU288
 1105               		.loc 1 448 3 view .LVU289
 449:../../../os/common/oslib/src/chmboxes.c **** 
 450:../../../os/common/oslib/src/chmboxes.c ****   do {
 451:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 452:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 453:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 454:../../../os/common/oslib/src/chmboxes.c ****     }
 455:../../../os/common/oslib/src/chmboxes.c **** 
 456:../../../os/common/oslib/src/chmboxes.c ****     /* Is there a message in queue? if so then fetch.*/
 457:../../../os/common/oslib/src/chmboxes.c ****     if (chMBGetUsedCountI(mbp) > (size_t)0) {
 458:../../../os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 459:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 460:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 461:../../../os/common/oslib/src/chmboxes.c ****       }
 462:../../../os/common/oslib/src/chmboxes.c ****       mbp->cnt--;
 463:../../../os/common/oslib/src/chmboxes.c **** 
 464:../../../os/common/oslib/src/chmboxes.c ****       /* If there is a writer waiting then makes it ready.*/
 465:../../../os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qw, MSG_OK);
 466:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 467:../../../os/common/oslib/src/chmboxes.c **** 
 468:../../../os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 469:../../../os/common/oslib/src/chmboxes.c ****     }
 470:../../../os/common/oslib/src/chmboxes.c **** 
 471:../../../os/common/oslib/src/chmboxes.c ****     /* No message in the queue, waiting for a message to become available.*/
 472:../../../os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 1106               		.loc 1 472 14 is_stmt 0 view .LVU290
 1107 0016 8C01      		movw r16,r24
 1108 0018 015F      		subi r16,-15
 1109 001a 1F4F      		sbci r17,-1
 1110 001c 00C0      		rjmp .L45
 1111               	.LVL62:
 1112               	.L50:
 457:../../../os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 1113               		.loc 1 457 5 is_stmt 1 view .LVU291
 158:../../../os/common/oslib/include/chmboxes.h **** 
 1114               		.loc 6 158 21 view .LVU292
 160:../../../os/common/oslib/include/chmboxes.h **** }
 1115               		.loc 6 160 3 view .LVU293
 457:../../../os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 1116               		.loc 1 457 8 is_stmt 0 view .LVU294
 1117 001e 8885      		ldd r24,Y+8
 1118 0020 9985      		ldd r25,Y+9
 1119 0022 892B      		or r24,r25
 1120 0024 01F4      		brne .L49
 1121               		.loc 1 472 5 is_stmt 1 view .LVU295
 1122               		.loc 1 472 14 is_stmt 0 view .LVU296
 1123 0026 B701      		movw r22,r14
 1124 0028 C801      		movw r24,r16
 1125 002a 0E94 0000 		call chThdEnqueueTimeoutS
 1126               	.LVL63:
 473:../../../os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 1127               		.loc 1 473 3 view .LVU297
 1128 002e 0097      		sbiw r24,0
 1129 0030 01F4      		brne .L41
 1130               	.LVL64:
 1131               	.L45:
 450:../../../os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 1132               		.loc 1 450 3 is_stmt 1 view .LVU298
 452:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 1133               		.loc 1 452 5 view .LVU299
 452:../../../os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 1134               		.loc 1 452 8 is_stmt 0 view .LVU300
 1135 0032 8A85      		ldd r24,Y+10
 1136 0034 8823      		tst r24
 1137 0036 01F0      		breq .L50
 453:../../../os/common/oslib/src/chmboxes.c ****     }
 1138               		.loc 1 453 14 view .LVU301
 1139 0038 8EEF      		ldi r24,lo8(-2)
 1140 003a 9FEF      		ldi r25,lo8(-1)
 1141               	.L41:
 1142               	/* epilogue start */
 474:../../../os/common/oslib/src/chmboxes.c **** 
 475:../../../os/common/oslib/src/chmboxes.c ****   return rdymsg;
 476:../../../os/common/oslib/src/chmboxes.c **** }
 1143               		.loc 1 476 1 view .LVU302
 1144 003c DF91      		pop r29
 1145 003e CF91      		pop r28
 1146               	.LVL65:
 1147               		.loc 1 476 1 view .LVU303
 1148 0040 1F91      		pop r17
 1149 0042 0F91      		pop r16
 1150               	.LVL66:
 1151               		.loc 1 476 1 view .LVU304
 1152 0044 FF90      		pop r15
 1153 0046 EF90      		pop r14
 1154               	.LVL67:
 1155               		.loc 1 476 1 view .LVU305
 1156 0048 DF90      		pop r13
 1157 004a CF90      		pop r12
 1158               	.LVL68:
 1159               		.loc 1 476 1 view .LVU306
 1160 004c 0895      		ret
 1161               	.LVL69:
 1162               	.L49:
 1163               	.LBB174:
 1164               	.LBB175:
 458:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 1165               		.loc 1 458 7 is_stmt 1 view .LVU307
 458:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 1166               		.loc 1 458 19 is_stmt 0 view .LVU308
 1167 004e EE81      		ldd r30,Y+6
 1168 0050 FF81      		ldd r31,Y+7
 458:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 1169               		.loc 1 458 26 view .LVU309
 1170 0052 CF01      		movw r24,r30
 1171 0054 0296      		adiw r24,2
 1172 0056 9F83      		std Y+7,r25
 1173 0058 8E83      		std Y+6,r24
 458:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 1174               		.loc 1 458 15 view .LVU310
 1175 005a 2081      		ld r18,Z
 1176 005c 3181      		ldd r19,Z+1
 458:../../../os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 1177               		.loc 1 458 13 view .LVU311
 1178 005e F601      		movw r30,r12
 1179 0060 3183      		std Z+1,r19
 1180 0062 2083      		st Z,r18
 459:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 1181               		.loc 1 459 7 is_stmt 1 view .LVU312
 459:../../../os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 1182               		.loc 1 459 10 is_stmt 0 view .LVU313
 1183 0064 2A81      		ldd r18,Y+2
 1184 0066 3B81      		ldd r19,Y+3
 1185 0068 8217      		cp r24,r18
 1186 006a 9307      		cpc r25,r19
 1187 006c 00F0      		brlo .L44
 460:../../../os/common/oslib/src/chmboxes.c ****       }
 1188               		.loc 1 460 9 is_stmt 1 view .LVU314
 460:../../../os/common/oslib/src/chmboxes.c ****       }
 1189               		.loc 1 460 20 is_stmt 0 view .LVU315
 1190 006e 8881      		ld r24,Y
 1191 0070 9981      		ldd r25,Y+1
 1192 0072 9F83      		std Y+7,r25
 1193 0074 8E83      		std Y+6,r24
 1194               	.L44:
 462:../../../os/common/oslib/src/chmboxes.c **** 
 1195               		.loc 1 462 7 is_stmt 1 view .LVU316
 462:../../../os/common/oslib/src/chmboxes.c **** 
 1196               		.loc 1 462 15 is_stmt 0 view .LVU317
 1197 0076 8885      		ldd r24,Y+8
 1198 0078 9985      		ldd r25,Y+9
 1199 007a 0197      		sbiw r24,1
 1200 007c 9987      		std Y+9,r25
 1201 007e 8887      		std Y+8,r24
 465:../../../os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 1202               		.loc 1 465 7 is_stmt 1 view .LVU318
 1203 0080 70E0      		ldi r23,0
 1204 0082 60E0      		ldi r22,0
 1205 0084 CE01      		movw r24,r28
 1206 0086 0B96      		adiw r24,11
 1207 0088 0E94 0000 		call chThdDequeueNextI
 1208               	.LVL70:
 466:../../../os/common/oslib/src/chmboxes.c **** 
 1209               		.loc 1 466 7 view .LVU319
 1210 008c 0E94 0000 		call chSchRescheduleS
 1211               	.LVL71:
 468:../../../os/common/oslib/src/chmboxes.c ****     }
 1212               		.loc 1 468 7 view .LVU320
 466:../../../os/common/oslib/src/chmboxes.c **** 
 1213               		.loc 1 466 7 is_stmt 0 view .LVU321
 1214 0090 90E0      		ldi r25,0
 1215 0092 80E0      		ldi r24,0
 1216 0094 00C0      		rjmp .L41
 1217               	.LBE175:
 1218               	.LBE174:
 1219               		.cfi_endproc
 1220               	.LFE151:
 1222               		.section	.text.chMBFetchTimeout,"ax",@progbits
 1223               	.global	chMBFetchTimeout
 1225               	chMBFetchTimeout:
 1226               	.LVL72:
 1227               	.LFB150:
 415:../../../os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 1228               		.loc 1 415 76 is_stmt 1 view -0
 1229               		.cfi_startproc
 1230               	/* prologue: function */
 1231               	/* frame size = 0 */
 1232               	/* stack size = 0 */
 1233               	.L__stack_usage = 0
 416:../../../os/common/oslib/src/chmboxes.c **** 
 1234               		.loc 1 416 3 view .LVU323
 418:../../../os/common/oslib/src/chmboxes.c ****   rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 1235               		.loc 1 418 3 view .LVU324
 1236               	.LBB176:
 1237               	.LBI176:
 353:../../../os/rt/include/chsys.h **** 
 1238               		.loc 4 353 20 view .LVU325
 1239               	.LBE176:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1240               		.loc 4 355 3 view .LVU326
 1241               	.LBB179:
 1242               	.LBB177:
 1243               	.LBI177:
 435:../../../os/common/ports/AVR/chcore.h **** 
 1244               		.loc 5 435 20 view .LVU327
 1245               	.LBB178:
 437:../../../os/common/ports/AVR/chcore.h **** }
 1246               		.loc 5 437 3 view .LVU328
 1247               	/* #APP */
 1248               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 1249 0000 F894      		cli
 1250               	 ;  0 "" 2
 1251               	/* #NOAPP */
 1252               	.LBE178:
 1253               	.LBE177:
 1254               	.LBE179:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 1255               		.loc 4 356 34 view .LVU329
 357:../../../os/rt/include/chsys.h **** }
 1256               		.loc 4 357 20 view .LVU330
 419:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 1257               		.loc 1 419 3 view .LVU331
 419:../../../os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 1258               		.loc 1 419 12 is_stmt 0 view .LVU332
 1259 0002 0E94 0000 		call chMBFetchTimeoutS
 1260               	.LVL73:
 420:../../../os/common/oslib/src/chmboxes.c **** 
 1261               		.loc 1 420 3 is_stmt 1 view .LVU333
 1262               	.LBB180:
 1263               	.LBI180:
 365:../../../os/rt/include/chsys.h **** 
 1264               		.loc 4 365 20 view .LVU334
 1265               	.LBB181:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1266               		.loc 4 367 22 view .LVU335
 368:../../../os/rt/include/chsys.h **** 
 1267               		.loc 4 368 33 view .LVU336
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1268               		.loc 4 374 3 view .LVU337
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1269               		.loc 4 374 3 view .LVU338
 1270               		.loc 4 378 3 view .LVU339
 1271               	.LBB182:
 1272               	.LBI182:
 445:../../../os/common/ports/AVR/chcore.h **** 
 1273               		.loc 5 445 20 view .LVU340
 1274               	.LBB183:
 1275               		.loc 5 447 3 view .LVU341
 1276               	/* #APP */
 1277               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 1278 0006 7894      		sei
 1279               	 ;  0 "" 2
 1280               	/* #NOAPP */
 1281               	.LBE183:
 1282               	.LBE182:
 1283               	.LBE181:
 1284               	.LBE180:
 422:../../../os/common/oslib/src/chmboxes.c **** }
 1285               		.loc 1 422 3 view .LVU342
 1286               	/* epilogue start */
 423:../../../os/common/oslib/src/chmboxes.c **** 
 1287               		.loc 1 423 1 is_stmt 0 view .LVU343
 1288 0008 0895      		ret
 1289               		.cfi_endproc
 1290               	.LFE150:
 1292               		.section	.text.chMBFetchI,"ax",@progbits
 1293               	.global	chMBFetchI
 1295               	chMBFetchI:
 1296               	.LVL74:
 1297               	.LFB152:
 477:../../../os/common/oslib/src/chmboxes.c **** 
 478:../../../os/common/oslib/src/chmboxes.c **** /**
 479:../../../os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 480:../../../os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 481:../../../os/common/oslib/src/chmboxes.c ****  *          condition if the queue is empty.
 482:../../../os/common/oslib/src/chmboxes.c ****  *
 483:../../../os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 484:../../../os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 485:../../../os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 486:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 487:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 488:../../../os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 489:../../../os/common/oslib/src/chmboxes.c ****  *                      fetched.
 490:../../../os/common/oslib/src/chmboxes.c ****  *
 491:../../../os/common/oslib/src/chmboxes.c ****  * @iclass
 492:../../../os/common/oslib/src/chmboxes.c ****  */
 493:../../../os/common/oslib/src/chmboxes.c **** msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 1298               		.loc 1 493 47 is_stmt 1 view -0
 1299               		.cfi_startproc
 1300               	/* prologue: function */
 1301               	/* frame size = 0 */
 1302               	/* stack size = 0 */
 1303               	.L__stack_usage = 0
 1304               		.loc 1 493 47 is_stmt 0 view .LVU345
 1305 0000 FC01      		movw r30,r24
 494:../../../os/common/oslib/src/chmboxes.c **** 
 495:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 1306               		.loc 1 495 21 is_stmt 1 view .LVU346
 496:../../../os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 1307               		.loc 1 496 3 view .LVU347
 1308               		.loc 1 496 3 view .LVU348
 497:../../../os/common/oslib/src/chmboxes.c **** 
 498:../../../os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 499:../../../os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 1309               		.loc 1 499 3 view .LVU349
 1310               		.loc 1 499 6 is_stmt 0 view .LVU350
 1311 0002 8285      		ldd r24,Z+10
 1312               	.LVL75:
 1313               		.loc 1 499 6 view .LVU351
 1314 0004 8111      		cpse r24,__zero_reg__
 1315 0006 00C0      		rjmp .L55
 500:../../../os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 501:../../../os/common/oslib/src/chmboxes.c ****   }
 502:../../../os/common/oslib/src/chmboxes.c **** 
 503:../../../os/common/oslib/src/chmboxes.c ****   /* Is there a message in queue? if so then fetch.*/
 504:../../../os/common/oslib/src/chmboxes.c ****   if (chMBGetUsedCountI(mbp) > (size_t)0) {
 1316               		.loc 1 504 3 is_stmt 1 view .LVU352
 1317               	.LVL76:
 158:../../../os/common/oslib/include/chmboxes.h **** 
 1318               		.loc 6 158 21 view .LVU353
 160:../../../os/common/oslib/include/chmboxes.h **** }
 1319               		.loc 6 160 3 view .LVU354
 1320               		.loc 1 504 6 is_stmt 0 view .LVU355
 1321 0008 8085      		ldd r24,Z+8
 1322 000a 9185      		ldd r25,Z+9
 1323 000c 892B      		or r24,r25
 1324 000e 01F0      		breq .L56
 505:../../../os/common/oslib/src/chmboxes.c ****     *msgp = *mbp->rdptr++;
 1325               		.loc 1 505 5 is_stmt 1 view .LVU356
 1326               		.loc 1 505 17 is_stmt 0 view .LVU357
 1327 0010 A681      		ldd r26,Z+6
 1328 0012 B781      		ldd r27,Z+7
 1329               		.loc 1 505 24 view .LVU358
 1330 0014 CD01      		movw r24,r26
 1331 0016 0296      		adiw r24,2
 1332 0018 9783      		std Z+7,r25
 1333 001a 8683      		std Z+6,r24
 1334               		.loc 1 505 13 view .LVU359
 1335 001c 2D91      		ld r18,X+
 1336 001e 3C91      		ld r19,X
 1337               		.loc 1 505 11 view .LVU360
 1338 0020 DB01      		movw r26,r22
 1339 0022 2D93      		st X+,r18
 1340 0024 3C93      		st X,r19
 506:../../../os/common/oslib/src/chmboxes.c ****     if (mbp->rdptr >= mbp->top) {
 1341               		.loc 1 506 5 is_stmt 1 view .LVU361
 1342               		.loc 1 506 8 is_stmt 0 view .LVU362
 1343 0026 2281      		ldd r18,Z+2
 1344 0028 3381      		ldd r19,Z+3
 1345 002a 8217      		cp r24,r18
 1346 002c 9307      		cpc r25,r19
 1347 002e 00F0      		brlo .L54
 507:../../../os/common/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->buffer;
 1348               		.loc 1 507 7 is_stmt 1 view .LVU363
 1349               		.loc 1 507 18 is_stmt 0 view .LVU364
 1350 0030 8081      		ld r24,Z
 1351 0032 9181      		ldd r25,Z+1
 1352 0034 9783      		std Z+7,r25
 1353 0036 8683      		std Z+6,r24
 1354               	.L54:
 508:../../../os/common/oslib/src/chmboxes.c ****     }
 509:../../../os/common/oslib/src/chmboxes.c ****     mbp->cnt--;
 1355               		.loc 1 509 5 is_stmt 1 view .LVU365
 1356               		.loc 1 509 13 is_stmt 0 view .LVU366
 1357 0038 8085      		ldd r24,Z+8
 1358 003a 9185      		ldd r25,Z+9
 1359 003c 0197      		sbiw r24,1
 1360 003e 9187      		std Z+9,r25
 1361 0040 8087      		std Z+8,r24
 510:../../../os/common/oslib/src/chmboxes.c **** 
 511:../../../os/common/oslib/src/chmboxes.c ****     /* If there is a writer waiting then makes it ready.*/
 512:../../../os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qw, MSG_OK);
 1362               		.loc 1 512 5 is_stmt 1 view .LVU367
 1363 0042 70E0      		ldi r23,0
 1364 0044 60E0      		ldi r22,0
 1365               	.LVL77:
 1366               		.loc 1 512 5 is_stmt 0 view .LVU368
 1367 0046 CF01      		movw r24,r30
 1368 0048 0B96      		adiw r24,11
 1369 004a 0E94 0000 		call chThdDequeueNextI
 1370               	.LVL78:
 513:../../../os/common/oslib/src/chmboxes.c **** 
 514:../../../os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 1371               		.loc 1 514 5 is_stmt 1 view .LVU369
 1372               		.loc 1 514 12 is_stmt 0 view .LVU370
 1373 004e 90E0      		ldi r25,0
 1374 0050 80E0      		ldi r24,0
 1375 0052 0895      		ret
 1376               	.LVL79:
 1377               	.L56:
 515:../../../os/common/oslib/src/chmboxes.c ****   }
 516:../../../os/common/oslib/src/chmboxes.c **** 
 517:../../../os/common/oslib/src/chmboxes.c ****   /* No message, immediate timeout.*/
 518:../../../os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 1378               		.loc 1 518 10 view .LVU371
 1379 0054 8FEF      		ldi r24,lo8(-1)
 1380 0056 9FEF      		ldi r25,lo8(-1)
 1381               	/* epilogue start */
 519:../../../os/common/oslib/src/chmboxes.c **** }
 1382               		.loc 1 519 1 view .LVU372
 1383 0058 0895      		ret
 1384               	.LVL80:
 1385               	.L55:
 500:../../../os/common/oslib/src/chmboxes.c ****   }
 1386               		.loc 1 500 12 view .LVU373
 1387 005a 8EEF      		ldi r24,lo8(-2)
 1388 005c 9FEF      		ldi r25,lo8(-1)
 1389 005e 0895      		ret
 1390               		.cfi_endproc
 1391               	.LFE152:
 1393               		.text
 1394               	.Letext0:
 1395               		.file 7 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 1396               		.file 8 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 1397               		.file 9 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1398               		.file 10 "../../../os/rt/include/chsystypes.h"
 1399               		.file 11 "../../../os/rt/include/chtime.h"
 1400               		.file 12 "../../../os/rt/include/chsem.h"
 1401               		.file 13 "../../../os/rt/include/chmtx.h"
 1402               		.file 14 "../../../os/rt/include/chregistry.h"
 1403               		.file 15 "../../../os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmboxes.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:13     .text.chMBObjectInit:0000000000000000 chMBObjectInit
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:121    .text.chMBResetI:0000000000000000 chMBResetI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:190    .text.chMBReset:0000000000000000 chMBReset
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:262    .text.chMBPostTimeoutS:0000000000000000 chMBPostTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:461    .text.chMBPostTimeout:0000000000000000 chMBPostTimeout
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:531    .text.chMBPostI:0000000000000000 chMBPostI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:661    .text.chMBPostAheadTimeoutS:0000000000000000 chMBPostAheadTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:858    .text.chMBPostAheadTimeout:0000000000000000 chMBPostAheadTimeout
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:928    .text.chMBPostAheadI:0000000000000000 chMBPostAheadI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:1057   .text.chMBFetchTimeoutS:0000000000000000 chMBFetchTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:1225   .text.chMBFetchTimeout:0000000000000000 chMBFetchTimeout
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccalY7xE.s:1295   .text.chMBFetchI:0000000000000000 chMBFetchI

UNDEFINED SYMBOLS
chThdDequeueAllI
chSchRescheduleS
chThdEnqueueTimeoutS
chThdDequeueNextI
