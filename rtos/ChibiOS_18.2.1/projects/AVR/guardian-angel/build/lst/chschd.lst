   1               		.file	"chschd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.wakeup,"ax",@progbits
  12               	wakeup:
  13               	.LVL0:
  14               	.LFB145:
  15               		.file 1 "../../../os/rt/src/chschd.c"
   1:../../../os/rt/src/chschd.c **** /*
   2:../../../os/rt/src/chschd.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chschd.c **** 
   4:../../../os/rt/src/chschd.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chschd.c **** 
   6:../../../os/rt/src/chschd.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chschd.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chschd.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chschd.c ****     (at your option) any later version.
  10:../../../os/rt/src/chschd.c **** 
  11:../../../os/rt/src/chschd.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chschd.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chschd.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chschd.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chschd.c **** 
  16:../../../os/rt/src/chschd.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chschd.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chschd.c **** */
  19:../../../os/rt/src/chschd.c **** 
  20:../../../os/rt/src/chschd.c **** /**
  21:../../../os/rt/src/chschd.c ****  * @file    chschd.c
  22:../../../os/rt/src/chschd.c ****  * @brief   Scheduler code.
  23:../../../os/rt/src/chschd.c ****  *
  24:../../../os/rt/src/chschd.c ****  * @addtogroup scheduler
  25:../../../os/rt/src/chschd.c ****  * @details This module provides the default portable scheduler code.
  26:../../../os/rt/src/chschd.c ****  * @{
  27:../../../os/rt/src/chschd.c ****  */
  28:../../../os/rt/src/chschd.c **** 
  29:../../../os/rt/src/chschd.c **** #include "ch.h"
  30:../../../os/rt/src/chschd.c **** 
  31:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  32:../../../os/rt/src/chschd.c **** /* Module local definitions.                                                 */
  33:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  34:../../../os/rt/src/chschd.c **** 
  35:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  36:../../../os/rt/src/chschd.c **** /* Module exported variables.                                                */
  37:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  38:../../../os/rt/src/chschd.c **** 
  39:../../../os/rt/src/chschd.c **** /**
  40:../../../os/rt/src/chschd.c ****  * @brief   System data structures.
  41:../../../os/rt/src/chschd.c ****  */
  42:../../../os/rt/src/chschd.c **** ch_system_t ch;
  43:../../../os/rt/src/chschd.c **** 
  44:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  45:../../../os/rt/src/chschd.c **** /* Module local types.                                                       */
  46:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  47:../../../os/rt/src/chschd.c **** 
  48:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  49:../../../os/rt/src/chschd.c **** /* Module local variables.                                                   */
  50:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  51:../../../os/rt/src/chschd.c **** 
  52:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  53:../../../os/rt/src/chschd.c **** /* Module local functions.                                                   */
  54:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  55:../../../os/rt/src/chschd.c **** 
  56:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  57:../../../os/rt/src/chschd.c **** /* Module exported functions.                                                */
  58:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  59:../../../os/rt/src/chschd.c **** 
  60:../../../os/rt/src/chschd.c **** /**
  61:../../../os/rt/src/chschd.c ****  * @brief   Scheduler initialization.
  62:../../../os/rt/src/chschd.c ****  *
  63:../../../os/rt/src/chschd.c ****  * @notapi
  64:../../../os/rt/src/chschd.c ****  */
  65:../../../os/rt/src/chschd.c **** void _scheduler_init(void) {
  66:../../../os/rt/src/chschd.c **** 
  67:../../../os/rt/src/chschd.c ****   queue_init(&ch.rlist.queue);
  68:../../../os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
  69:../../../os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
  70:../../../os/rt/src/chschd.c ****   ch.rlist.newer = (thread_t *)&ch.rlist;
  71:../../../os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
  72:../../../os/rt/src/chschd.c **** #endif
  73:../../../os/rt/src/chschd.c **** }
  74:../../../os/rt/src/chschd.c **** 
  75:../../../os/rt/src/chschd.c **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) || defined(__DOXYGEN__)
  76:../../../os/rt/src/chschd.c **** /**
  77:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread into a priority ordered queue.
  78:../../../os/rt/src/chschd.c ****  * @note    The insertion is done by scanning the list from the highest
  79:../../../os/rt/src/chschd.c ****  *          priority toward the lowest.
  80:../../../os/rt/src/chschd.c ****  *
  81:../../../os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
  82:../../../os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
  83:../../../os/rt/src/chschd.c ****  *
  84:../../../os/rt/src/chschd.c ****  * @notapi
  85:../../../os/rt/src/chschd.c ****  */
  86:../../../os/rt/src/chschd.c **** void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  87:../../../os/rt/src/chschd.c **** 
  88:../../../os/rt/src/chschd.c ****   thread_t *cp = (thread_t *)tqp;
  89:../../../os/rt/src/chschd.c ****   do {
  90:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
  91:../../../os/rt/src/chschd.c ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  92:../../../os/rt/src/chschd.c ****   tp->queue.next             = cp;
  93:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
  94:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
  95:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
  96:../../../os/rt/src/chschd.c **** }
  97:../../../os/rt/src/chschd.c **** 
  98:../../../os/rt/src/chschd.c **** /**
  99:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread into a queue.
 100:../../../os/rt/src/chschd.c ****  *
 101:../../../os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
 102:../../../os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 103:../../../os/rt/src/chschd.c ****  *
 104:../../../os/rt/src/chschd.c ****  * @notapi
 105:../../../os/rt/src/chschd.c ****  */
 106:../../../os/rt/src/chschd.c **** void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 107:../../../os/rt/src/chschd.c **** 
 108:../../../os/rt/src/chschd.c ****   tp->queue.next             = (thread_t *)tqp;
 109:../../../os/rt/src/chschd.c ****   tp->queue.prev             = tqp->prev;
 110:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 111:../../../os/rt/src/chschd.c ****   tqp->prev                  = tp;
 112:../../../os/rt/src/chschd.c **** }
 113:../../../os/rt/src/chschd.c **** 
 114:../../../os/rt/src/chschd.c **** /**
 115:../../../os/rt/src/chschd.c ****  * @brief   Removes the first-out thread from a queue and returns it.
 116:../../../os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 117:../../../os/rt/src/chschd.c ****  *          thread with the highest priority.
 118:../../../os/rt/src/chschd.c ****  *
 119:../../../os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 120:../../../os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 121:../../../os/rt/src/chschd.c ****  *
 122:../../../os/rt/src/chschd.c ****  * @notapi
 123:../../../os/rt/src/chschd.c ****  */
 124:../../../os/rt/src/chschd.c **** thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 125:../../../os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 126:../../../os/rt/src/chschd.c **** 
 127:../../../os/rt/src/chschd.c ****   tqp->next             = tp->queue.next;
 128:../../../os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 129:../../../os/rt/src/chschd.c **** 
 130:../../../os/rt/src/chschd.c ****   return tp;
 131:../../../os/rt/src/chschd.c **** }
 132:../../../os/rt/src/chschd.c **** 
 133:../../../os/rt/src/chschd.c **** /**
 134:../../../os/rt/src/chschd.c ****  * @brief   Removes the last-out thread from a queue and returns it.
 135:../../../os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 136:../../../os/rt/src/chschd.c ****  *          thread with the lowest priority.
 137:../../../os/rt/src/chschd.c ****  *
 138:../../../os/rt/src/chschd.c ****  * @param[in] tqp   the pointer to the threads list header
 139:../../../os/rt/src/chschd.c ****  * @return          The removed thread pointer.
 140:../../../os/rt/src/chschd.c ****  *
 141:../../../os/rt/src/chschd.c ****  * @notapi
 142:../../../os/rt/src/chschd.c ****  */
 143:../../../os/rt/src/chschd.c **** thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 144:../../../os/rt/src/chschd.c ****   thread_t *tp = tqp->prev;
 145:../../../os/rt/src/chschd.c **** 
 146:../../../os/rt/src/chschd.c ****   tqp->prev             = tp->queue.prev;
 147:../../../os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 148:../../../os/rt/src/chschd.c **** 
 149:../../../os/rt/src/chschd.c ****   return tp;
 150:../../../os/rt/src/chschd.c **** }
 151:../../../os/rt/src/chschd.c **** 
 152:../../../os/rt/src/chschd.c **** /**
 153:../../../os/rt/src/chschd.c ****  * @brief   Removes a thread from a queue and returns it.
 154:../../../os/rt/src/chschd.c ****  * @details The thread is removed from the queue regardless of its relative
 155:../../../os/rt/src/chschd.c ****  *          position and regardless the used insertion method.
 156:../../../os/rt/src/chschd.c ****  *
 157:../../../os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be removed from the queue
 158:../../../os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 159:../../../os/rt/src/chschd.c ****  *
 160:../../../os/rt/src/chschd.c ****  * @notapi
 161:../../../os/rt/src/chschd.c ****  */
 162:../../../os/rt/src/chschd.c **** thread_t *queue_dequeue(thread_t *tp) {
 163:../../../os/rt/src/chschd.c **** 
 164:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp->queue.next;
 165:../../../os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 166:../../../os/rt/src/chschd.c **** 
 167:../../../os/rt/src/chschd.c ****   return tp;
 168:../../../os/rt/src/chschd.c **** }
 169:../../../os/rt/src/chschd.c **** 
 170:../../../os/rt/src/chschd.c **** /**
 171:../../../os/rt/src/chschd.c ****  * @brief   Pushes a thread_t on top of a stack list.
 172:../../../os/rt/src/chschd.c ****  *
 173:../../../os/rt/src/chschd.c ****  * @param[in] tp    the pointer to the thread to be inserted in the list
 174:../../../os/rt/src/chschd.c ****  * @param[in] tlp   the pointer to the threads list header
 175:../../../os/rt/src/chschd.c ****  *
 176:../../../os/rt/src/chschd.c ****  * @notapi
 177:../../../os/rt/src/chschd.c ****  */
 178:../../../os/rt/src/chschd.c **** void list_insert(thread_t *tp, threads_list_t *tlp) {
 179:../../../os/rt/src/chschd.c **** 
 180:../../../os/rt/src/chschd.c ****   tp->queue.next = tlp->next;
 181:../../../os/rt/src/chschd.c ****   tlp->next      = tp;
 182:../../../os/rt/src/chschd.c **** }
 183:../../../os/rt/src/chschd.c **** 
 184:../../../os/rt/src/chschd.c **** /**
 185:../../../os/rt/src/chschd.c ****  * @brief   Pops a thread from the top of a stack list and returns it.
 186:../../../os/rt/src/chschd.c ****  * @pre     The list must be non-empty before calling this function.
 187:../../../os/rt/src/chschd.c ****  *
 188:../../../os/rt/src/chschd.c ****  * @param[in] tlp       the pointer to the threads list header
 189:../../../os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 190:../../../os/rt/src/chschd.c ****  *
 191:../../../os/rt/src/chschd.c ****  * @notapi
 192:../../../os/rt/src/chschd.c ****  */
 193:../../../os/rt/src/chschd.c **** thread_t *list_remove(threads_list_t *tlp) {
 194:../../../os/rt/src/chschd.c **** 
 195:../../../os/rt/src/chschd.c ****   thread_t *tp = tlp->next;
 196:../../../os/rt/src/chschd.c ****   tlp->next = tp->queue.next;
 197:../../../os/rt/src/chschd.c **** 
 198:../../../os/rt/src/chschd.c ****   return tp;
 199:../../../os/rt/src/chschd.c **** }
 200:../../../os/rt/src/chschd.c **** #endif /* CH_CFG_OPTIMIZE_SPEED */
 201:../../../os/rt/src/chschd.c **** 
 202:../../../os/rt/src/chschd.c **** /**
 203:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
 204:../../../os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
 205:../../../os/rt/src/chschd.c ****  *          priority.
 206:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 207:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 208:../../../os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 209:../../../os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 210:../../../os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 211:../../../os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 212:../../../os/rt/src/chschd.c ****  *
 213:../../../os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 214:../../../os/rt/src/chschd.c ****  * @return              The thread pointer.
 215:../../../os/rt/src/chschd.c ****  *
 216:../../../os/rt/src/chschd.c ****  * @iclass
 217:../../../os/rt/src/chschd.c ****  */
 218:../../../os/rt/src/chschd.c **** thread_t *chSchReadyI(thread_t *tp) {
 219:../../../os/rt/src/chschd.c ****   thread_t *cp;
 220:../../../os/rt/src/chschd.c **** 
 221:../../../os/rt/src/chschd.c ****   chDbgCheckClassI();
 222:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 223:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 224:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 225:../../../os/rt/src/chschd.c ****               "invalid state");
 226:../../../os/rt/src/chschd.c **** 
 227:../../../os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 228:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 229:../../../os/rt/src/chschd.c ****   do {
 230:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 231:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 232:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 233:../../../os/rt/src/chschd.c ****   tp->queue.next             = cp;
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 235:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 236:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 237:../../../os/rt/src/chschd.c **** 
 238:../../../os/rt/src/chschd.c ****   return tp;
 239:../../../os/rt/src/chschd.c **** }
 240:../../../os/rt/src/chschd.c **** 
 241:../../../os/rt/src/chschd.c **** /**
 242:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it ahead its peers.
 243:../../../os/rt/src/chschd.c ****  * @details The thread is positioned ahead all threads with higher or equal
 244:../../../os/rt/src/chschd.c ****  *          priority.
 245:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 246:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 247:../../../os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 248:../../../os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 249:../../../os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 250:../../../os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 251:../../../os/rt/src/chschd.c ****  *
 252:../../../os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 253:../../../os/rt/src/chschd.c ****  * @return              The thread pointer.
 254:../../../os/rt/src/chschd.c ****  *
 255:../../../os/rt/src/chschd.c ****  * @iclass
 256:../../../os/rt/src/chschd.c ****  */
 257:../../../os/rt/src/chschd.c **** thread_t *chSchReadyAheadI(thread_t *tp) {
 258:../../../os/rt/src/chschd.c ****   thread_t *cp;
 259:../../../os/rt/src/chschd.c **** 
 260:../../../os/rt/src/chschd.c ****   chDbgCheckClassI();
 261:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 262:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 263:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 264:../../../os/rt/src/chschd.c ****               "invalid state");
 265:../../../os/rt/src/chschd.c **** 
 266:../../../os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 267:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 268:../../../os/rt/src/chschd.c ****   do {
 269:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 270:../../../os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 271:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 272:../../../os/rt/src/chschd.c ****   tp->queue.next             = cp;
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 274:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 275:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 276:../../../os/rt/src/chschd.c **** 
 277:../../../os/rt/src/chschd.c ****   return tp;
 278:../../../os/rt/src/chschd.c **** }
 279:../../../os/rt/src/chschd.c **** 
 280:../../../os/rt/src/chschd.c **** /**
 281:../../../os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state.
 282:../../../os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state. The possible
 283:../../../os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 284:../../../os/rt/src/chschd.c ****  *
 285:../../../os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 286:../../../os/rt/src/chschd.c ****  *
 287:../../../os/rt/src/chschd.c ****  * @sclass
 288:../../../os/rt/src/chschd.c ****  */
 289:../../../os/rt/src/chschd.c **** void chSchGoSleepS(tstate_t newstate) {
 290:../../../os/rt/src/chschd.c ****   thread_t *otp = currp;
 291:../../../os/rt/src/chschd.c **** 
 292:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 293:../../../os/rt/src/chschd.c **** 
 294:../../../os/rt/src/chschd.c ****   /* New state.*/
 295:../../../os/rt/src/chschd.c ****   otp->state = newstate;
 296:../../../os/rt/src/chschd.c **** 
 297:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 298:../../../os/rt/src/chschd.c ****   /* The thread is renouncing its remaining time slices so it will have a new
 299:../../../os/rt/src/chschd.c ****      time quantum when it will wakeup.*/
 300:../../../os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 301:../../../os/rt/src/chschd.c **** #endif
 302:../../../os/rt/src/chschd.c **** 
 303:../../../os/rt/src/chschd.c ****   /* Next thread in ready list becomes current.*/
 304:../../../os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 305:../../../os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 306:../../../os/rt/src/chschd.c **** 
 307:../../../os/rt/src/chschd.c ****   /* Handling idle-enter hook.*/
 308:../../../os/rt/src/chschd.c ****   if (currp->prio == IDLEPRIO) {
 309:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 310:../../../os/rt/src/chschd.c ****   }
 311:../../../os/rt/src/chschd.c **** 
 312:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 313:../../../os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 314:../../../os/rt/src/chschd.c **** }
 315:../../../os/rt/src/chschd.c **** 
 316:../../../os/rt/src/chschd.c **** /*
 317:../../../os/rt/src/chschd.c ****  * Timeout wakeup callback.
 318:../../../os/rt/src/chschd.c ****  */
 319:../../../os/rt/src/chschd.c **** static void wakeup(void *p) {
  16               		.loc 1 319 29 view -0
  17               		.cfi_startproc
  18               		.loc 1 319 29 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 DC01      		movw r26,r24
 320:../../../os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
  32               		.loc 1 320 3 is_stmt 1 view .LVU2
  33               	.LVL1:
 321:../../../os/rt/src/chschd.c **** 
 322:../../../os/rt/src/chschd.c ****   chSysLockFromISR();
  34               		.loc 1 322 3 view .LVU3
  35               		.file 2 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
 379:../../../os/rt/include/chsys.h **** }
 380:../../../os/rt/include/chsys.h **** 
 381:../../../os/rt/include/chsys.h **** /**
 382:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 383:../../../os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 384:../../../os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 385:../../../os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 386:../../../os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 387:../../../os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 388:../../../os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 389:../../../os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 390:../../../os/rt/include/chsys.h ****  *
 391:../../../os/rt/include/chsys.h ****  * @special
 392:../../../os/rt/include/chsys.h ****  */
 393:../../../os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 394:../../../os/rt/include/chsys.h **** 
 395:../../../os/rt/include/chsys.h ****   port_lock_from_isr();
  36               		.loc 2 395 3 view .LVU4
  37               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 448:../../../os/common/ports/AVR/chcore.h **** }
 449:../../../os/common/ports/AVR/chcore.h **** 
 450:../../../os/common/ports/AVR/chcore.h **** /**
 451:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action from an interrupt handler.
 452:../../../os/common/ports/AVR/chcore.h ****  * @details This function is invoked before invoking I-class APIs from
 453:../../../os/common/ports/AVR/chcore.h ****  *          interrupt handlers. The implementation is architecture dependent,
 454:../../../os/common/ports/AVR/chcore.h ****  *          in its simplest form it is void.
 455:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 456:../../../os/common/ports/AVR/chcore.h ****  */
 457:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock_from_isr(void) {
 458:../../../os/common/ports/AVR/chcore.h **** 
 459:../../../os/common/ports/AVR/chcore.h **** }
  38               		.loc 3 459 1 view .LVU5
 396:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
  39               		.loc 2 396 34 view .LVU6
 397:../../../os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
  40               		.loc 2 397 29 view .LVU7
 323:../../../os/rt/src/chschd.c ****   switch (tp->state) {
  41               		.loc 1 323 3 view .LVU8
  42               		.loc 1 323 13 is_stmt 0 view .LVU9
  43 0006 1D96      		adiw r26,13
  44 0008 8C91      		ld r24,X
  45 000a 1D97      		sbiw r26,13
  46               	.LVL2:
  47               		.loc 1 323 13 view .LVU10
  48 000c 8430      		cpi r24,lo8(4)
  49 000e 01F0      		breq .L2
  50 0010 00F4      		brsh .L3
  51 0012 8823      		tst r24
  52 0014 01F0      		breq .L1
  53 0016 8330      		cpi r24,lo8(3)
  54 0018 01F4      		brne .L6
 324:../../../os/rt/src/chschd.c ****   case CH_STATE_READY:
 325:../../../os/rt/src/chschd.c ****     /* Handling the special case where the thread has been made ready by
 326:../../../os/rt/src/chschd.c ****        another thread with higher priority.*/
 327:../../../os/rt/src/chschd.c ****     chSysUnlockFromISR();
 328:../../../os/rt/src/chschd.c ****     return;
 329:../../../os/rt/src/chschd.c ****   case CH_STATE_SUSPENDED:
 330:../../../os/rt/src/chschd.c ****     *tp->u.wttrp = NULL;
  55               		.loc 1 330 5 is_stmt 1 view .LVU11
  56               		.loc 1 330 11 is_stmt 0 view .LVU12
  57 001a 5096      		adiw r26,16
  58 001c ED91      		ld r30,X+
  59 001e FC91      		ld r31,X
  60 0020 5197      		sbiw r26,16+1
  61               		.loc 1 330 18 view .LVU13
  62 0022 1182      		std Z+1,__zero_reg__
  63 0024 1082      		st Z,__zero_reg__
 331:../../../os/rt/src/chschd.c ****     break;
  64               		.loc 1 331 5 is_stmt 1 view .LVU14
  65               	.L6:
 332:../../../os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 333:../../../os/rt/src/chschd.c ****   case CH_STATE_WTSEM:
 334:../../../os/rt/src/chschd.c ****     chSemFastSignalI(tp->u.wtsemp);
 335:../../../os/rt/src/chschd.c **** #endif
 336:../../../os/rt/src/chschd.c ****     /* Falls through.*/
 337:../../../os/rt/src/chschd.c ****   case CH_STATE_QUEUED:
 338:../../../os/rt/src/chschd.c ****     /* Falls through.*/
 339:../../../os/rt/src/chschd.c **** #if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
 340:../../../os/rt/src/chschd.c ****   case CH_STATE_WTCOND:
 341:../../../os/rt/src/chschd.c **** #endif
 342:../../../os/rt/src/chschd.c ****     /* States requiring dequeuing.*/
 343:../../../os/rt/src/chschd.c ****     (void) queue_dequeue(tp);
 344:../../../os/rt/src/chschd.c ****     break;
 345:../../../os/rt/src/chschd.c ****   default:
 346:../../../os/rt/src/chschd.c ****     /* Any other state, nothing to do.*/
 347:../../../os/rt/src/chschd.c ****     break;
 348:../../../os/rt/src/chschd.c ****   }
 349:../../../os/rt/src/chschd.c ****   tp->u.rdymsg = MSG_TIMEOUT;
  66               		.loc 1 349 3 view .LVU15
  67               		.loc 1 349 16 is_stmt 0 view .LVU16
  68 0026 8FEF      		ldi r24,lo8(-1)
  69 0028 9FEF      		ldi r25,lo8(-1)
  70 002a 5196      		adiw r26,16+1
  71 002c 9C93      		st X,r25
  72 002e 8E93      		st -X,r24
  73 0030 5097      		sbiw r26,16
 350:../../../os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
  74               		.loc 1 350 3 is_stmt 1 view .LVU17
  75               	.LVL3:
  76               	.LBB63:
  77               	.LBI63:
 218:../../../os/rt/src/chschd.c ****   thread_t *cp;
  78               		.loc 1 218 11 view .LVU18
  79               	.LBB64:
 219:../../../os/rt/src/chschd.c **** 
  80               		.loc 1 219 3 view .LVU19
 221:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
  81               		.loc 1 221 21 view .LVU20
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
  82               		.loc 1 222 3 view .LVU21
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
  83               		.loc 1 222 3 view .LVU22
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
  84               		.loc 1 223 3 view .LVU23
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
  85               		.loc 1 223 3 view .LVU24
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
  86               		.loc 1 227 3 view .LVU25
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
  87               		.loc 1 227 13 is_stmt 0 view .LVU26
  88 0032 1D96      		adiw r26,13
  89 0034 1C92      		st X,__zero_reg__
  90 0036 1D97      		sbiw r26,13
 228:../../../os/rt/src/chschd.c ****   do {
  91               		.loc 1 228 3 is_stmt 1 view .LVU27
  92               	.LVL4:
 228:../../../os/rt/src/chschd.c ****   do {
  93               		.loc 1 228 3 is_stmt 0 view .LVU28
  94               	.LBE64:
  95               	.LBE63:
  96               	.LBB65:
  97               	.LBB66:
  98               	.LBB67:
  99               	.LBB68:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 100               		.loc 1 231 26 view .LVU29
 101 0038 1496      		adiw r26,4
 102 003a 8C91      		ld r24,X
 103 003c 1497      		sbiw r26,4
 228:../../../os/rt/src/chschd.c ****   do {
 104               		.loc 1 228 6 view .LVU30
 105 003e E0E0      		ldi r30,lo8(ch)
 106 0040 F0E0      		ldi r31,hi8(ch)
 107               	.L8:
 108               	.LVL5:
 229:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 109               		.loc 1 229 3 is_stmt 1 view .LVU31
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 110               		.loc 1 230 5 view .LVU32
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 111               		.loc 1 230 8 is_stmt 0 view .LVU33
 112 0042 0190      		ld __tmp_reg__,Z+
 113 0044 F081      		ld r31,Z
 114 0046 E02D      		mov r30,__tmp_reg__
 115               	.LVL6:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 116               		.loc 1 231 3 view .LVU34
 117 0048 9481      		ldd r25,Z+4
 118 004a 9817      		cp r25,r24
 119 004c 00F4      		brsh .L8
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 120               		.loc 1 233 3 is_stmt 1 view .LVU35
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 121               		.loc 1 233 30 is_stmt 0 view .LVU36
 122 004e 1196      		adiw r26,1
 123 0050 FC93      		st X,r31
 124 0052 EE93      		st -X,r30
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 125               		.loc 1 234 3 is_stmt 1 view .LVU37
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 126               		.loc 1 234 41 is_stmt 0 view .LVU38
 127 0054 C281      		ldd r28,Z+2
 128 0056 D381      		ldd r29,Z+3
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 129               		.loc 1 234 30 view .LVU39
 130 0058 1396      		adiw r26,2+1
 131 005a DC93      		st X,r29
 132 005c CE93      		st -X,r28
 133 005e 1297      		sbiw r26,2
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 134               		.loc 1 235 3 is_stmt 1 view .LVU40
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 135               		.loc 1 235 30 is_stmt 0 view .LVU41
 136 0060 B983      		std Y+1,r27
 137 0062 A883      		st Y,r26
 236:../../../os/rt/src/chschd.c **** 
 138               		.loc 1 236 3 is_stmt 1 view .LVU42
 236:../../../os/rt/src/chschd.c **** 
 139               		.loc 1 236 30 is_stmt 0 view .LVU43
 140 0064 B383      		std Z+3,r27
 141 0066 A283      		std Z+2,r26
 238:../../../os/rt/src/chschd.c **** }
 142               		.loc 1 238 3 is_stmt 1 view .LVU44
 143               	.LVL7:
 144               	.L1:
 145               	/* epilogue start */
 238:../../../os/rt/src/chschd.c **** }
 146               		.loc 1 238 3 is_stmt 0 view .LVU45
 147               	.LBE68:
 148               	.LBE67:
 149               	.LBE66:
 150               	.LBE65:
 351:../../../os/rt/src/chschd.c ****   chSysUnlockFromISR();
 352:../../../os/rt/src/chschd.c **** }
 151               		.loc 1 352 1 view .LVU46
 152 0068 DF91      		pop r29
 153 006a CF91      		pop r28
 154 006c 0895      		ret
 155               	.L3:
 156 006e 8530      		cpi r24,lo8(5)
 157 0070 01F4      		brne .L20
 334:../../../os/rt/src/chschd.c **** #endif
 158               		.loc 1 334 5 is_stmt 1 view .LVU47
 334:../../../os/rt/src/chschd.c **** #endif
 159               		.loc 1 334 27 is_stmt 0 view .LVU48
 160 0072 5096      		adiw r26,16
 161 0074 ED91      		ld r30,X+
 162 0076 FC91      		ld r31,X
 163 0078 5197      		sbiw r26,16+1
 164               	.LBB69:
 165               	.LBI69:
 166               		.file 4 "../../../os/rt/include/chsem.h"
   1:../../../os/rt/include/chsem.h **** /*
   2:../../../os/rt/include/chsem.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsem.h **** 
   4:../../../os/rt/include/chsem.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsem.h **** 
   6:../../../os/rt/include/chsem.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsem.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsem.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsem.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsem.h **** 
  11:../../../os/rt/include/chsem.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsem.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsem.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsem.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsem.h **** 
  16:../../../os/rt/include/chsem.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsem.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsem.h **** */
  19:../../../os/rt/include/chsem.h **** 
  20:../../../os/rt/include/chsem.h **** /**
  21:../../../os/rt/include/chsem.h ****  * @file    chsem.h
  22:../../../os/rt/include/chsem.h ****  * @brief   Semaphores macros and structures.
  23:../../../os/rt/include/chsem.h ****  *
  24:../../../os/rt/include/chsem.h ****  * @addtogroup semaphores
  25:../../../os/rt/include/chsem.h ****  * @{
  26:../../../os/rt/include/chsem.h ****  */
  27:../../../os/rt/include/chsem.h **** 
  28:../../../os/rt/include/chsem.h **** #ifndef CHSEM_H
  29:../../../os/rt/include/chsem.h **** #define CHSEM_H
  30:../../../os/rt/include/chsem.h **** 
  31:../../../os/rt/include/chsem.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chsem.h **** 
  33:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsem.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsem.h **** 
  37:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  38:../../../os/rt/include/chsem.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  40:../../../os/rt/include/chsem.h **** 
  41:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  42:../../../os/rt/include/chsem.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  44:../../../os/rt/include/chsem.h **** 
  45:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  46:../../../os/rt/include/chsem.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsem.h **** 
  49:../../../os/rt/include/chsem.h **** /**
  50:../../../os/rt/include/chsem.h ****  * @brief   Semaphore structure.
  51:../../../os/rt/include/chsem.h ****  */
  52:../../../os/rt/include/chsem.h **** typedef struct ch_semaphore {
  53:../../../os/rt/include/chsem.h ****   threads_queue_t       queue;      /**< @brief Queue of the threads sleeping
  54:../../../os/rt/include/chsem.h ****                                                 on this semaphore.          */
  55:../../../os/rt/include/chsem.h ****   cnt_t                 cnt;        /**< @brief The semaphore counter.      */
  56:../../../os/rt/include/chsem.h **** } semaphore_t;
  57:../../../os/rt/include/chsem.h **** 
  58:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  59:../../../os/rt/include/chsem.h **** /* Module macros.                                                            */
  60:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  61:../../../os/rt/include/chsem.h **** 
  62:../../../os/rt/include/chsem.h **** /**
  63:../../../os/rt/include/chsem.h ****  * @brief   Data part of a static semaphore initializer.
  64:../../../os/rt/include/chsem.h ****  * @details This macro should be used when statically initializing a semaphore
  65:../../../os/rt/include/chsem.h ****  *          that is part of a bigger structure.
  66:../../../os/rt/include/chsem.h ****  *
  67:../../../os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  68:../../../os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  69:../../../os/rt/include/chsem.h ****  *                      non-negative
  70:../../../os/rt/include/chsem.h ****  */
  71:../../../os/rt/include/chsem.h **** #define _SEMAPHORE_DATA(name, n) {_THREADS_QUEUE_DATA(name.queue), n}
  72:../../../os/rt/include/chsem.h **** 
  73:../../../os/rt/include/chsem.h **** /**
  74:../../../os/rt/include/chsem.h ****  * @brief   Static semaphore initializer.
  75:../../../os/rt/include/chsem.h ****  * @details Statically initialized semaphores require no explicit
  76:../../../os/rt/include/chsem.h ****  *          initialization using @p chSemInit().
  77:../../../os/rt/include/chsem.h ****  *
  78:../../../os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  79:../../../os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  80:../../../os/rt/include/chsem.h ****  *                      non-negative
  81:../../../os/rt/include/chsem.h ****  */
  82:../../../os/rt/include/chsem.h **** #define SEMAPHORE_DECL(name, n) semaphore_t name = _SEMAPHORE_DATA(name, n)
  83:../../../os/rt/include/chsem.h **** 
  84:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  85:../../../os/rt/include/chsem.h **** /* External declarations.                                                    */
  86:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  87:../../../os/rt/include/chsem.h **** 
  88:../../../os/rt/include/chsem.h **** #ifdef __cplusplus
  89:../../../os/rt/include/chsem.h **** extern "C" {
  90:../../../os/rt/include/chsem.h **** #endif
  91:../../../os/rt/include/chsem.h ****   void chSemObjectInit(semaphore_t *sp, cnt_t n);
  92:../../../os/rt/include/chsem.h ****   void chSemReset(semaphore_t *sp, cnt_t n);
  93:../../../os/rt/include/chsem.h ****   void chSemResetI(semaphore_t *sp, cnt_t n);
  94:../../../os/rt/include/chsem.h ****   msg_t chSemWait(semaphore_t *sp);
  95:../../../os/rt/include/chsem.h ****   msg_t chSemWaitS(semaphore_t *sp);
  96:../../../os/rt/include/chsem.h ****   msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout);
  97:../../../os/rt/include/chsem.h ****   msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout);
  98:../../../os/rt/include/chsem.h ****   void chSemSignal(semaphore_t *sp);
  99:../../../os/rt/include/chsem.h ****   void chSemSignalI(semaphore_t *sp);
 100:../../../os/rt/include/chsem.h ****   void chSemAddCounterI(semaphore_t *sp, cnt_t n);
 101:../../../os/rt/include/chsem.h ****   msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw);
 102:../../../os/rt/include/chsem.h **** #ifdef __cplusplus
 103:../../../os/rt/include/chsem.h **** }
 104:../../../os/rt/include/chsem.h **** #endif
 105:../../../os/rt/include/chsem.h **** 
 106:../../../os/rt/include/chsem.h **** /*===========================================================================*/
 107:../../../os/rt/include/chsem.h **** /* Module inline functions.                                                  */
 108:../../../os/rt/include/chsem.h **** /*===========================================================================*/
 109:../../../os/rt/include/chsem.h **** 
 110:../../../os/rt/include/chsem.h **** /**
 111:../../../os/rt/include/chsem.h ****  * @brief   Decreases the semaphore counter.
 112:../../../os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be positive.
 113:../../../os/rt/include/chsem.h ****  *
 114:../../../os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 115:../../../os/rt/include/chsem.h ****  *
 116:../../../os/rt/include/chsem.h ****  * @iclass
 117:../../../os/rt/include/chsem.h ****  */
 118:../../../os/rt/include/chsem.h **** static inline void chSemFastWaitI(semaphore_t *sp) {
 119:../../../os/rt/include/chsem.h **** 
 120:../../../os/rt/include/chsem.h ****   chDbgCheckClassI();
 121:../../../os/rt/include/chsem.h **** 
 122:../../../os/rt/include/chsem.h ****   sp->cnt--;
 123:../../../os/rt/include/chsem.h **** }
 124:../../../os/rt/include/chsem.h **** 
 125:../../../os/rt/include/chsem.h **** /**
 126:../../../os/rt/include/chsem.h ****  * @brief   Increases the semaphore counter.
 127:../../../os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be not
 128:../../../os/rt/include/chsem.h ****  *          negative.
 129:../../../os/rt/include/chsem.h ****  *
 130:../../../os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 131:../../../os/rt/include/chsem.h ****  *
 132:../../../os/rt/include/chsem.h ****  * @iclass
 133:../../../os/rt/include/chsem.h ****  */
 134:../../../os/rt/include/chsem.h **** static inline void chSemFastSignalI(semaphore_t *sp) {
 167               		.loc 4 134 20 is_stmt 1 view .LVU49
 168               	.LVL8:
 169               	.LBB70:
 135:../../../os/rt/include/chsem.h **** 
 136:../../../os/rt/include/chsem.h ****   chDbgCheckClassI();
 170               		.loc 4 136 21 view .LVU50
 137:../../../os/rt/include/chsem.h **** 
 138:../../../os/rt/include/chsem.h ****   sp->cnt++;
 171               		.loc 4 138 3 view .LVU51
 172               		.loc 4 138 10 is_stmt 0 view .LVU52
 173 007a 8481      		ldd r24,Z+4
 174 007c 8F5F      		subi r24,lo8(-(1))
 175 007e 8483      		std Z+4,r24
 176 0080 00C0      		rjmp .L2
 177               	.LVL9:
 178               	.L20:
 179               		.loc 4 138 10 view .LVU53
 180 0082 8730      		cpi r24,lo8(7)
 181 0084 01F4      		brne .L6
 182               	.L2:
 183               	.LBE70:
 184               	.LBE69:
 343:../../../os/rt/src/chschd.c ****     break;
 185               		.loc 1 343 5 is_stmt 1 view .LVU54
 186               	.LVL10:
 187               	.LBB71:
 188               	.LBI71:
 189               		.file 5 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chschd.h **** 
   4:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chschd.h **** 
   6:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chschd.h ****     (at your option) any later version.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /**
 122:../../../os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:../../../os/rt/include/chschd.h ****  */
 124:../../../os/rt/include/chschd.h **** struct ch_threads_list {
 125:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:../../../os/rt/include/chschd.h **** };
 127:../../../os/rt/include/chschd.h **** 
 128:../../../os/rt/include/chschd.h **** /**
 129:../../../os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:../../../os/rt/include/chschd.h ****  */
 131:../../../os/rt/include/chschd.h **** struct ch_threads_queue {
 132:../../../os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:../../../os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:../../../os/rt/include/chschd.h **** };
 135:../../../os/rt/include/chschd.h **** 
 136:../../../os/rt/include/chschd.h **** /**
 137:../../../os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:../../../os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:../../../os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:../../../os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:../../../os/rt/include/chschd.h ****  */
 142:../../../os/rt/include/chschd.h **** struct ch_thread {
 143:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:../../../os/rt/include/chschd.h **** #endif
 150:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:../../../os/rt/include/chschd.h ****   /**
 153:../../../os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:../../../os/rt/include/chschd.h ****    */
 155:../../../os/rt/include/chschd.h ****   const char            *name;
 156:../../../os/rt/include/chschd.h **** #endif
 157:../../../os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:../../../os/rt/include/chschd.h ****   /**
 160:../../../os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:../../../os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:../../../os/rt/include/chschd.h ****    *          dynamic threading.
 163:../../../os/rt/include/chschd.h ****    */
 164:../../../os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:../../../os/rt/include/chschd.h **** #endif
 166:../../../os/rt/include/chschd.h ****   /**
 167:../../../os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:../../../os/rt/include/chschd.h ****    */
 169:../../../os/rt/include/chschd.h ****   tstate_t              state;
 170:../../../os/rt/include/chschd.h ****   /**
 171:../../../os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:../../../os/rt/include/chschd.h ****    */
 173:../../../os/rt/include/chschd.h ****   tmode_t               flags;
 174:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:../../../os/rt/include/chschd.h ****   /**
 176:../../../os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:../../../os/rt/include/chschd.h ****    */
 178:../../../os/rt/include/chschd.h ****   trefs_t               refs;
 179:../../../os/rt/include/chschd.h **** #endif
 180:../../../os/rt/include/chschd.h ****   /**
 181:../../../os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:../../../os/rt/include/chschd.h ****    */
 183:../../../os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:../../../os/rt/include/chschd.h ****   tslices_t             ticks;
 185:../../../os/rt/include/chschd.h **** #endif
 186:../../../os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:../../../os/rt/include/chschd.h ****   /**
 188:../../../os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:../../../os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:../../../os/rt/include/chschd.h ****    */
 191:../../../os/rt/include/chschd.h ****   volatile systime_t    time;
 192:../../../os/rt/include/chschd.h **** #endif
 193:../../../os/rt/include/chschd.h ****   /**
 194:../../../os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:../../../os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:../../../os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:../../../os/rt/include/chschd.h ****    */
 198:../../../os/rt/include/chschd.h ****   union {
 199:../../../os/rt/include/chschd.h ****     /**
 200:../../../os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:../../../os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:../../../os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:../../../os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:../../../os/rt/include/chschd.h ****      */
 205:../../../os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:../../../os/rt/include/chschd.h ****     /**
 207:../../../os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:../../../os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:../../../os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:../../../os/rt/include/chschd.h ****      *          this thread.
 211:../../../os/rt/include/chschd.h ****      */
 212:../../../os/rt/include/chschd.h ****     msg_t               exitcode;
 213:../../../os/rt/include/chschd.h ****     /**
 214:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:../../../os/rt/include/chschd.h ****      *          states.
 218:../../../os/rt/include/chschd.h ****      */
 219:../../../os/rt/include/chschd.h ****     void                *wtobjp;
 220:../../../os/rt/include/chschd.h ****     /**
 221:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:../../../os/rt/include/chschd.h ****      *          state.
 225:../../../os/rt/include/chschd.h ****      */
 226:../../../os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:../../../os/rt/include/chschd.h ****     /**
 229:../../../os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:../../../os/rt/include/chschd.h ****      */
 231:../../../os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:../../../os/rt/include/chschd.h **** #endif
 233:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:../../../os/rt/include/chschd.h ****     /**
 235:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:../../../os/rt/include/chschd.h ****      *          state.
 239:../../../os/rt/include/chschd.h ****      */
 240:../../../os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:../../../os/rt/include/chschd.h **** #endif
 242:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:../../../os/rt/include/chschd.h ****     /**
 244:../../../os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:../../../os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:../../../os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:../../../os/rt/include/chschd.h ****      *          state.
 248:../../../os/rt/include/chschd.h ****      */
 249:../../../os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:../../../os/rt/include/chschd.h **** #endif
 251:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:../../../os/rt/include/chschd.h ****     /**
 253:../../../os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:../../../os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:../../../os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:../../../os/rt/include/chschd.h ****      */
 257:../../../os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:../../../os/rt/include/chschd.h **** #endif
 259:../../../os/rt/include/chschd.h ****   }                     u;
 260:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:../../../os/rt/include/chschd.h ****   /**
 262:../../../os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:../../../os/rt/include/chschd.h ****    */
 264:../../../os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:../../../os/rt/include/chschd.h **** #endif
 266:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:../../../os/rt/include/chschd.h ****   /**
 268:../../../os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:../../../os/rt/include/chschd.h ****    */
 270:../../../os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:../../../os/rt/include/chschd.h **** #endif
 272:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:../../../os/rt/include/chschd.h ****   /**
 274:../../../os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:../../../os/rt/include/chschd.h ****    */
 276:../../../os/rt/include/chschd.h ****   eventmask_t           epending;
 277:../../../os/rt/include/chschd.h **** #endif
 278:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:../../../os/rt/include/chschd.h ****   /**
 280:../../../os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:../../../os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:../../../os/rt/include/chschd.h ****    */
 283:../../../os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:../../../os/rt/include/chschd.h ****   /**
 285:../../../os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:../../../os/rt/include/chschd.h ****    */
 287:../../../os/rt/include/chschd.h ****   tprio_t               realprio;
 288:../../../os/rt/include/chschd.h **** #endif
 289:../../../os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:../../../os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:../../../os/rt/include/chschd.h ****   /**
 292:../../../os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:../../../os/rt/include/chschd.h ****    */
 294:../../../os/rt/include/chschd.h ****   void                  *mpool;
 295:../../../os/rt/include/chschd.h **** #endif
 296:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:../../../os/rt/include/chschd.h ****   /**
 298:../../../os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:../../../os/rt/include/chschd.h ****    */
 300:../../../os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:../../../os/rt/include/chschd.h **** #endif
 302:../../../os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:../../../os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:../../../os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:../../../os/rt/include/chschd.h **** #endif
 306:../../../os/rt/include/chschd.h **** };
 307:../../../os/rt/include/chschd.h **** 
 308:../../../os/rt/include/chschd.h **** /**
 309:../../../os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:../../../os/rt/include/chschd.h ****  *
 311:../../../os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:../../../os/rt/include/chschd.h ****  */
 313:../../../os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:../../../os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:../../../os/rt/include/chschd.h ****                                                 pointer.                    */
 319:../../../os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:../../../os/rt/include/chschd.h ****                                                 parameter.                  */
 321:../../../os/rt/include/chschd.h **** };
 322:../../../os/rt/include/chschd.h **** 
 323:../../../os/rt/include/chschd.h **** /**
 324:../../../os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:../../../os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:../../../os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:../../../os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:../../../os/rt/include/chschd.h ****  */
 329:../../../os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:../../../os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:../../../os/rt/include/chschd.h ****                                                 list.                       */
 332:../../../os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:../../../os/rt/include/chschd.h ****                                                 list.                       */
 334:../../../os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:../../../os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:../../../os/rt/include/chschd.h **** #endif
 338:../../../os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:../../../os/rt/include/chschd.h ****   /**
 340:../../../os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:../../../os/rt/include/chschd.h ****    */
 342:../../../os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:../../../os/rt/include/chschd.h ****                                                 tick event.                 */
 344:../../../os/rt/include/chschd.h **** #endif
 345:../../../os/rt/include/chschd.h **** };
 346:../../../os/rt/include/chschd.h **** 
 347:../../../os/rt/include/chschd.h **** /**
 348:../../../os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:../../../os/rt/include/chschd.h ****  */
 350:../../../os/rt/include/chschd.h **** struct ch_ready_list {
 351:../../../os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:../../../os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:../../../os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:../../../os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:../../../os/rt/include/chschd.h ****                                                 offsets.                    */
 356:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:../../../os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:../../../os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:../../../os/rt/include/chschd.h **** #endif
 360:../../../os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:../../../os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:../../../os/rt/include/chschd.h ****                                                 thread.                     */
 363:../../../os/rt/include/chschd.h **** };
 364:../../../os/rt/include/chschd.h **** 
 365:../../../os/rt/include/chschd.h **** /**
 366:../../../os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:../../../os/rt/include/chschd.h ****  */
 368:../../../os/rt/include/chschd.h **** struct ch_system_debug {
 369:../../../os/rt/include/chschd.h ****   /**
 370:../../../os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:../../../os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:../../../os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:../../../os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:../../../os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:../../../os/rt/include/chschd.h ****    */
 376:../../../os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:../../../os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:../../../os/rt/include/chschd.h ****   /**
 379:../../../os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:../../../os/rt/include/chschd.h ****    */
 381:../../../os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:../../../os/rt/include/chschd.h ****   /**
 383:../../../os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:../../../os/rt/include/chschd.h ****    */
 385:../../../os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:../../../os/rt/include/chschd.h **** #endif
 387:../../../os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:../../../os/rt/include/chschd.h ****   /**
 389:../../../os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:../../../os/rt/include/chschd.h ****    */
 391:../../../os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:../../../os/rt/include/chschd.h **** #endif
 393:../../../os/rt/include/chschd.h **** };
 394:../../../os/rt/include/chschd.h **** 
 395:../../../os/rt/include/chschd.h **** /**
 396:../../../os/rt/include/chschd.h ****  * @brief   System data structure.
 397:../../../os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:../../../os/rt/include/chschd.h ****  *          stacks.
 399:../../../os/rt/include/chschd.h ****  */
 400:../../../os/rt/include/chschd.h **** struct ch_system {
 401:../../../os/rt/include/chschd.h ****   /**
 402:../../../os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:../../../os/rt/include/chschd.h ****    */
 404:../../../os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:../../../os/rt/include/chschd.h ****   /**
 406:../../../os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:../../../os/rt/include/chschd.h ****    */
 408:../../../os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:../../../os/rt/include/chschd.h ****   /**
 410:../../../os/rt/include/chschd.h ****    * @brief   System debug.
 411:../../../os/rt/include/chschd.h ****    */
 412:../../../os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:../../../os/rt/include/chschd.h ****   /**
 414:../../../os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:../../../os/rt/include/chschd.h ****    */
 416:../../../os/rt/include/chschd.h ****   thread_t              mainthread;
 417:../../../os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:../../../os/rt/include/chschd.h ****   /**
 419:../../../os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:../../../os/rt/include/chschd.h ****    */
 421:../../../os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:../../../os/rt/include/chschd.h **** #endif
 423:../../../os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:../../../os/rt/include/chschd.h ****   /**
 425:../../../os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:../../../os/rt/include/chschd.h ****    */
 427:../../../os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:../../../os/rt/include/chschd.h **** #endif
 429:../../../os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:../../../os/rt/include/chschd.h **** };
 431:../../../os/rt/include/chschd.h **** 
 432:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 433:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 435:../../../os/rt/include/chschd.h **** 
 436:../../../os/rt/include/chschd.h **** /**
 437:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:../../../os/rt/include/chschd.h ****  *
 439:../../../os/rt/include/chschd.h ****  * @notapi
 440:../../../os/rt/include/chschd.h ****  */
 441:../../../os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:../../../os/rt/include/chschd.h **** 
 443:../../../os/rt/include/chschd.h **** /**
 444:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:../../../os/rt/include/chschd.h ****  */
 448:../../../os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:../../../os/rt/include/chschd.h **** 
 450:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 451:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 453:../../../os/rt/include/chschd.h **** 
 454:../../../os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:../../../os/rt/include/chschd.h **** extern ch_system_t ch;
 456:../../../os/rt/include/chschd.h **** #endif
 457:../../../os/rt/include/chschd.h **** 
 458:../../../os/rt/include/chschd.h **** /*
 459:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 460:../../../os/rt/include/chschd.h ****  */
 461:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 462:../../../os/rt/include/chschd.h **** extern "C" {
 463:../../../os/rt/include/chschd.h **** #endif
 464:../../../os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:../../../os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:../../../os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:../../../os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:../../../os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:../../../os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:../../../os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:../../../os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:../../../os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:../../../os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 485:../../../os/rt/include/chschd.h **** }
 486:../../../os/rt/include/chschd.h **** #endif
 487:../../../os/rt/include/chschd.h **** 
 488:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 489:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 491:../../../os/rt/include/chschd.h **** 
 492:../../../os/rt/include/chschd.h **** /**
 493:../../../os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:../../../os/rt/include/chschd.h ****  *
 495:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:../../../os/rt/include/chschd.h ****  *
 497:../../../os/rt/include/chschd.h ****  * @notapi
 498:../../../os/rt/include/chschd.h ****  */
 499:../../../os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:../../../os/rt/include/chschd.h **** 
 501:../../../os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:../../../os/rt/include/chschd.h **** }
 503:../../../os/rt/include/chschd.h **** 
 504:../../../os/rt/include/chschd.h **** /**
 505:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:../../../os/rt/include/chschd.h ****  *
 507:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 509:../../../os/rt/include/chschd.h ****  *
 510:../../../os/rt/include/chschd.h ****  * @notapi
 511:../../../os/rt/include/chschd.h ****  */
 512:../../../os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:../../../os/rt/include/chschd.h **** 
 514:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:../../../os/rt/include/chschd.h **** }
 516:../../../os/rt/include/chschd.h **** 
 517:../../../os/rt/include/chschd.h **** /**
 518:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:../../../os/rt/include/chschd.h ****  *
 520:../../../os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:../../../os/rt/include/chschd.h ****  * @return              The status of the list.
 522:../../../os/rt/include/chschd.h ****  *
 523:../../../os/rt/include/chschd.h ****  * @notapi
 524:../../../os/rt/include/chschd.h ****  */
 525:../../../os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:../../../os/rt/include/chschd.h **** 
 527:../../../os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:../../../os/rt/include/chschd.h **** }
 529:../../../os/rt/include/chschd.h **** 
 530:../../../os/rt/include/chschd.h **** /**
 531:../../../os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:../../../os/rt/include/chschd.h ****  *
 533:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:../../../os/rt/include/chschd.h ****  *
 535:../../../os/rt/include/chschd.h ****  * @notapi
 536:../../../os/rt/include/chschd.h ****  */
 537:../../../os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:../../../os/rt/include/chschd.h **** 
 539:../../../os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 540:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 541:../../../os/rt/include/chschd.h **** }
 542:../../../os/rt/include/chschd.h **** 
 543:../../../os/rt/include/chschd.h **** /**
 544:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:../../../os/rt/include/chschd.h ****  *
 546:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:../../../os/rt/include/chschd.h ****  *
 549:../../../os/rt/include/chschd.h ****  * @notapi
 550:../../../os/rt/include/chschd.h ****  */
 551:../../../os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:../../../os/rt/include/chschd.h **** 
 553:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:../../../os/rt/include/chschd.h **** }
 555:../../../os/rt/include/chschd.h **** 
 556:../../../os/rt/include/chschd.h **** /**
 557:../../../os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:../../../os/rt/include/chschd.h ****  *
 559:../../../os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:../../../os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:../../../os/rt/include/chschd.h ****  *
 562:../../../os/rt/include/chschd.h ****  * @notapi
 563:../../../os/rt/include/chschd.h ****  */
 564:../../../os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 565:../../../os/rt/include/chschd.h **** 
 566:../../../os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 567:../../../os/rt/include/chschd.h **** }
 568:../../../os/rt/include/chschd.h **** 
 569:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:../../../os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:../../../os/rt/include/chschd.h **** 
 574:../../../os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:../../../os/rt/include/chschd.h ****   tlp->next = tp;
 576:../../../os/rt/include/chschd.h **** }
 577:../../../os/rt/include/chschd.h **** 
 578:../../../os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 579:../../../os/rt/include/chschd.h **** 
 580:../../../os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 581:../../../os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 582:../../../os/rt/include/chschd.h **** 
 583:../../../os/rt/include/chschd.h ****   return tp;
 584:../../../os/rt/include/chschd.h **** }
 585:../../../os/rt/include/chschd.h **** 
 586:../../../os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 587:../../../os/rt/include/chschd.h **** 
 588:../../../os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 589:../../../os/rt/include/chschd.h ****   do {
 590:../../../os/rt/include/chschd.h ****     cp = cp->queue.next;
 591:../../../os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 592:../../../os/rt/include/chschd.h ****   tp->queue.next             = cp;
 593:../../../os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 594:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 595:../../../os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 596:../../../os/rt/include/chschd.h **** }
 597:../../../os/rt/include/chschd.h **** 
 598:../../../os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:../../../os/rt/include/chschd.h **** 
 600:../../../os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:../../../os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:../../../os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:../../../os/rt/include/chschd.h **** }
 605:../../../os/rt/include/chschd.h **** 
 606:../../../os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 607:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 608:../../../os/rt/include/chschd.h **** 
 609:../../../os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 610:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 611:../../../os/rt/include/chschd.h **** 
 612:../../../os/rt/include/chschd.h ****   return tp;
 613:../../../os/rt/include/chschd.h **** }
 614:../../../os/rt/include/chschd.h **** 
 615:../../../os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 616:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 617:../../../os/rt/include/chschd.h **** 
 618:../../../os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 619:../../../os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 620:../../../os/rt/include/chschd.h **** 
 621:../../../os/rt/include/chschd.h ****   return tp;
 622:../../../os/rt/include/chschd.h **** }
 623:../../../os/rt/include/chschd.h **** 
 624:../../../os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 190               		.loc 5 624 25 view .LVU55
 191               	.LBB72:
 625:../../../os/rt/include/chschd.h **** 
 626:../../../os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 192               		.loc 5 626 3 view .LVU56
 193               		.loc 5 626 12 is_stmt 0 view .LVU57
 194 0086 1296      		adiw r26,2
 195 0088 CD91      		ld r28,X+
 196 008a DC91      		ld r29,X
 197 008c 1397      		sbiw r26,2+1
 198               		.loc 5 626 41 view .LVU58
 199 008e ED91      		ld r30,X+
 200 0090 FC91      		ld r31,X
 201 0092 1197      		sbiw r26,1
 202               		.loc 5 626 30 view .LVU59
 203 0094 F983      		std Y+1,r31
 204 0096 E883      		st Y,r30
 627:../../../os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 205               		.loc 5 627 3 is_stmt 1 view .LVU60
 206               		.loc 5 627 30 is_stmt 0 view .LVU61
 207 0098 D383      		std Z+3,r29
 208 009a C283      		std Z+2,r28
 628:../../../os/rt/include/chschd.h **** 
 629:../../../os/rt/include/chschd.h ****   return tp;
 209               		.loc 5 629 3 is_stmt 1 view .LVU62
 210 009c 00C0      		rjmp .L6
 211               	.LBE72:
 212               	.LBE71:
 213               		.cfi_endproc
 214               	.LFE145:
 216               		.section	.text._scheduler_init,"ax",@progbits
 217               	.global	_scheduler_init
 219               	_scheduler_init:
 220               	.LFB141:
  65:../../../os/rt/src/chschd.c **** 
 221               		.loc 1 65 28 view -0
 222               		.cfi_startproc
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 0 */
 226               	.L__stack_usage = 0
  67:../../../os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
 227               		.loc 1 67 3 view .LVU64
 228               	.LVL11:
 229               	.LBB73:
 230               	.LBI73:
 537:../../../os/rt/include/chschd.h **** 
 231               		.loc 5 537 20 view .LVU65
 232               	.LBB74:
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 233               		.loc 5 539 3 view .LVU66
 539:../../../os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 234               		.loc 5 539 13 is_stmt 0 view .LVU67
 235 0000 E0E0      		ldi r30,lo8(ch)
 236 0002 F0E0      		ldi r31,hi8(ch)
 237 0004 F183      		std Z+1,r31
 238 0006 E083      		st Z,r30
 540:../../../os/rt/include/chschd.h **** }
 239               		.loc 5 540 3 is_stmt 1 view .LVU68
 540:../../../os/rt/include/chschd.h **** }
 240               		.loc 5 540 13 is_stmt 0 view .LVU69
 241 0008 F383      		std Z+3,r31
 242 000a E283      		std Z+2,r30
 243               	.LVL12:
 540:../../../os/rt/include/chschd.h **** }
 244               		.loc 5 540 13 view .LVU70
 245               	.LBE74:
 246               	.LBE73:
  68:../../../os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
 247               		.loc 1 68 3 is_stmt 1 view .LVU71
  68:../../../os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
 248               		.loc 1 68 17 is_stmt 0 view .LVU72
 249 000c 1482      		std Z+4,__zero_reg__
  70:../../../os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
 250               		.loc 1 70 3 is_stmt 1 view .LVU73
  70:../../../os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
 251               		.loc 1 70 18 is_stmt 0 view .LVU74
 252 000e F087      		std Z+8,r31
 253 0010 E783      		std Z+7,r30
  71:../../../os/rt/src/chschd.c **** #endif
 254               		.loc 1 71 3 is_stmt 1 view .LVU75
  71:../../../os/rt/src/chschd.c **** #endif
 255               		.loc 1 71 18 is_stmt 0 view .LVU76
 256 0012 F287      		std Z+10,r31
 257 0014 E187      		std Z+9,r30
 258               	/* epilogue start */
  73:../../../os/rt/src/chschd.c **** 
 259               		.loc 1 73 1 view .LVU77
 260 0016 0895      		ret
 261               		.cfi_endproc
 262               	.LFE141:
 264               		.section	.text.chSchReadyI,"ax",@progbits
 265               	.global	chSchReadyI
 267               	chSchReadyI:
 268               	.LVL13:
 269               	.LFB142:
 218:../../../os/rt/src/chschd.c ****   thread_t *cp;
 270               		.loc 1 218 37 is_stmt 1 view -0
 271               		.cfi_startproc
 218:../../../os/rt/src/chschd.c ****   thread_t *cp;
 272               		.loc 1 218 37 is_stmt 0 view .LVU79
 273 0000 CF93      		push r28
 274               	.LCFI2:
 275               		.cfi_def_cfa_offset 3
 276               		.cfi_offset 28, -2
 277 0002 DF93      		push r29
 278               	.LCFI3:
 279               		.cfi_def_cfa_offset 4
 280               		.cfi_offset 29, -3
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 2 */
 284               	.L__stack_usage = 2
 285 0004 DC01      		movw r26,r24
 219:../../../os/rt/src/chschd.c **** 
 286               		.loc 1 219 3 is_stmt 1 view .LVU80
 221:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 287               		.loc 1 221 21 view .LVU81
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 288               		.loc 1 222 3 view .LVU82
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 289               		.loc 1 222 3 view .LVU83
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 290               		.loc 1 223 3 view .LVU84
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 291               		.loc 1 223 3 view .LVU85
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 292               		.loc 1 227 3 view .LVU86
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 293               		.loc 1 227 13 is_stmt 0 view .LVU87
 294 0006 1D96      		adiw r26,13
 295 0008 1C92      		st X,__zero_reg__
 296 000a 1D97      		sbiw r26,13
 228:../../../os/rt/src/chschd.c ****   do {
 297               		.loc 1 228 3 is_stmt 1 view .LVU88
 298               	.LVL14:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 299               		.loc 1 231 26 is_stmt 0 view .LVU89
 300 000c 1496      		adiw r26,4
 301 000e 2C91      		ld r18,X
 302 0010 1497      		sbiw r26,4
 228:../../../os/rt/src/chschd.c ****   do {
 303               		.loc 1 228 6 view .LVU90
 304 0012 E0E0      		ldi r30,lo8(ch)
 305 0014 F0E0      		ldi r31,hi8(ch)
 306               	.LVL15:
 307               	.L23:
 229:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 308               		.loc 1 229 3 is_stmt 1 discriminator 1 view .LVU91
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 309               		.loc 1 230 5 discriminator 1 view .LVU92
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 310               		.loc 1 230 8 is_stmt 0 discriminator 1 view .LVU93
 311 0016 0190      		ld __tmp_reg__,Z+
 312 0018 F081      		ld r31,Z
 313 001a E02D      		mov r30,__tmp_reg__
 314               	.LVL16:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 315               		.loc 1 231 3 discriminator 1 view .LVU94
 316 001c 9481      		ldd r25,Z+4
 317 001e 9217      		cp r25,r18
 318 0020 00F4      		brsh .L23
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 319               		.loc 1 233 3 is_stmt 1 view .LVU95
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 320               		.loc 1 233 30 is_stmt 0 view .LVU96
 321 0022 1196      		adiw r26,1
 322 0024 FC93      		st X,r31
 323 0026 EE93      		st -X,r30
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 324               		.loc 1 234 3 is_stmt 1 view .LVU97
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 325               		.loc 1 234 41 is_stmt 0 view .LVU98
 326 0028 C281      		ldd r28,Z+2
 327 002a D381      		ldd r29,Z+3
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 328               		.loc 1 234 30 view .LVU99
 329 002c 1396      		adiw r26,2+1
 330 002e DC93      		st X,r29
 331 0030 CE93      		st -X,r28
 332 0032 1297      		sbiw r26,2
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 333               		.loc 1 235 3 is_stmt 1 view .LVU100
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 334               		.loc 1 235 30 is_stmt 0 view .LVU101
 335 0034 B983      		std Y+1,r27
 336 0036 A883      		st Y,r26
 236:../../../os/rt/src/chschd.c **** 
 337               		.loc 1 236 3 is_stmt 1 view .LVU102
 236:../../../os/rt/src/chschd.c **** 
 338               		.loc 1 236 30 is_stmt 0 view .LVU103
 339 0038 B383      		std Z+3,r27
 340 003a A283      		std Z+2,r26
 238:../../../os/rt/src/chschd.c **** }
 341               		.loc 1 238 3 is_stmt 1 view .LVU104
 239:../../../os/rt/src/chschd.c **** 
 342               		.loc 1 239 1 is_stmt 0 view .LVU105
 343 003c CD01      		movw r24,r26
 344               	.LVL17:
 345               	/* epilogue start */
 239:../../../os/rt/src/chschd.c **** 
 346               		.loc 1 239 1 view .LVU106
 347 003e DF91      		pop r29
 348 0040 CF91      		pop r28
 349 0042 0895      		ret
 350               		.cfi_endproc
 351               	.LFE142:
 353               		.section	.text.chSchReadyAheadI,"ax",@progbits
 354               	.global	chSchReadyAheadI
 356               	chSchReadyAheadI:
 357               	.LVL18:
 358               	.LFB143:
 257:../../../os/rt/src/chschd.c ****   thread_t *cp;
 359               		.loc 1 257 42 is_stmt 1 view -0
 360               		.cfi_startproc
 257:../../../os/rt/src/chschd.c ****   thread_t *cp;
 361               		.loc 1 257 42 is_stmt 0 view .LVU108
 362 0000 CF93      		push r28
 363               	.LCFI4:
 364               		.cfi_def_cfa_offset 3
 365               		.cfi_offset 28, -2
 366 0002 DF93      		push r29
 367               	.LCFI5:
 368               		.cfi_def_cfa_offset 4
 369               		.cfi_offset 29, -3
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 2 */
 373               	.L__stack_usage = 2
 374 0004 DC01      		movw r26,r24
 258:../../../os/rt/src/chschd.c **** 
 375               		.loc 1 258 3 is_stmt 1 view .LVU109
 260:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 376               		.loc 1 260 21 view .LVU110
 261:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 377               		.loc 1 261 3 view .LVU111
 261:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 378               		.loc 1 261 3 view .LVU112
 262:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 379               		.loc 1 262 3 view .LVU113
 262:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 380               		.loc 1 262 3 view .LVU114
 266:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 381               		.loc 1 266 3 view .LVU115
 266:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 382               		.loc 1 266 13 is_stmt 0 view .LVU116
 383 0006 1D96      		adiw r26,13
 384 0008 1C92      		st X,__zero_reg__
 385 000a 1D97      		sbiw r26,13
 267:../../../os/rt/src/chschd.c ****   do {
 386               		.loc 1 267 3 is_stmt 1 view .LVU117
 387               	.LVL19:
 270:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 388               		.loc 1 270 25 is_stmt 0 view .LVU118
 389 000c 1496      		adiw r26,4
 390 000e 2C91      		ld r18,X
 391 0010 1497      		sbiw r26,4
 267:../../../os/rt/src/chschd.c ****   do {
 392               		.loc 1 267 6 view .LVU119
 393 0012 E0E0      		ldi r30,lo8(ch)
 394 0014 F0E0      		ldi r31,hi8(ch)
 395               	.LVL20:
 396               	.L26:
 268:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 397               		.loc 1 268 3 is_stmt 1 discriminator 1 view .LVU120
 269:../../../os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 398               		.loc 1 269 5 discriminator 1 view .LVU121
 269:../../../os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 399               		.loc 1 269 8 is_stmt 0 discriminator 1 view .LVU122
 400 0016 0190      		ld __tmp_reg__,Z+
 401 0018 F081      		ld r31,Z
 402 001a E02D      		mov r30,__tmp_reg__
 403               	.LVL21:
 270:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 404               		.loc 1 270 3 discriminator 1 view .LVU123
 405 001c 9481      		ldd r25,Z+4
 406 001e 2917      		cp r18,r25
 407 0020 00F0      		brlo .L26
 272:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 408               		.loc 1 272 3 is_stmt 1 view .LVU124
 272:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 409               		.loc 1 272 30 is_stmt 0 view .LVU125
 410 0022 1196      		adiw r26,1
 411 0024 FC93      		st X,r31
 412 0026 EE93      		st -X,r30
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 413               		.loc 1 273 3 is_stmt 1 view .LVU126
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 414               		.loc 1 273 41 is_stmt 0 view .LVU127
 415 0028 C281      		ldd r28,Z+2
 416 002a D381      		ldd r29,Z+3
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 417               		.loc 1 273 30 view .LVU128
 418 002c 1396      		adiw r26,2+1
 419 002e DC93      		st X,r29
 420 0030 CE93      		st -X,r28
 421 0032 1297      		sbiw r26,2
 274:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 422               		.loc 1 274 3 is_stmt 1 view .LVU129
 274:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 423               		.loc 1 274 30 is_stmt 0 view .LVU130
 424 0034 B983      		std Y+1,r27
 425 0036 A883      		st Y,r26
 275:../../../os/rt/src/chschd.c **** 
 426               		.loc 1 275 3 is_stmt 1 view .LVU131
 275:../../../os/rt/src/chschd.c **** 
 427               		.loc 1 275 30 is_stmt 0 view .LVU132
 428 0038 B383      		std Z+3,r27
 429 003a A283      		std Z+2,r26
 277:../../../os/rt/src/chschd.c **** }
 430               		.loc 1 277 3 is_stmt 1 view .LVU133
 278:../../../os/rt/src/chschd.c **** 
 431               		.loc 1 278 1 is_stmt 0 view .LVU134
 432 003c CD01      		movw r24,r26
 433               	.LVL22:
 434               	/* epilogue start */
 278:../../../os/rt/src/chschd.c **** 
 435               		.loc 1 278 1 view .LVU135
 436 003e DF91      		pop r29
 437 0040 CF91      		pop r28
 438 0042 0895      		ret
 439               		.cfi_endproc
 440               	.LFE143:
 442               		.section	.text.chSchGoSleepS,"ax",@progbits
 443               	.global	chSchGoSleepS
 445               	chSchGoSleepS:
 446               	.LVL23:
 447               	.LFB144:
 289:../../../os/rt/src/chschd.c ****   thread_t *otp = currp;
 448               		.loc 1 289 39 is_stmt 1 view -0
 449               		.cfi_startproc
 289:../../../os/rt/src/chschd.c ****   thread_t *otp = currp;
 450               		.loc 1 289 39 is_stmt 0 view .LVU137
 451 0000 CF93      		push r28
 452               	.LCFI6:
 453               		.cfi_def_cfa_offset 3
 454               		.cfi_offset 28, -2
 455 0002 DF93      		push r29
 456               	.LCFI7:
 457               		.cfi_def_cfa_offset 4
 458               		.cfi_offset 29, -3
 459               	/* prologue: function */
 460               	/* frame size = 0 */
 461               	/* stack size = 2 */
 462               	.L__stack_usage = 2
 290:../../../os/rt/src/chschd.c **** 
 463               		.loc 1 290 3 is_stmt 1 view .LVU138
 290:../../../os/rt/src/chschd.c **** 
 464               		.loc 1 290 13 is_stmt 0 view .LVU139
 465 0004 E0E0      		ldi r30,lo8(ch)
 466 0006 F0E0      		ldi r31,hi8(ch)
 467 0008 6385      		ldd r22,Z+11
 468 000a 7485      		ldd r23,Z+12
 469               	.LVL24:
 292:../../../os/rt/src/chschd.c **** 
 470               		.loc 1 292 21 is_stmt 1 view .LVU140
 295:../../../os/rt/src/chschd.c **** 
 471               		.loc 1 295 3 view .LVU141
 295:../../../os/rt/src/chschd.c **** 
 472               		.loc 1 295 14 is_stmt 0 view .LVU142
 473 000c DB01      		movw r26,r22
 474 000e 1D96      		adiw r26,13
 475 0010 8C93      		st X,r24
 304:../../../os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 476               		.loc 1 304 3 is_stmt 1 view .LVU143
 477               	.LVL25:
 478               	.LBB75:
 479               	.LBI75:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 480               		.loc 5 606 25 view .LVU144
 481               	.LBB76:
 607:../../../os/rt/include/chschd.h **** 
 482               		.loc 5 607 3 view .LVU145
 607:../../../os/rt/include/chschd.h **** 
 483               		.loc 5 607 13 is_stmt 0 view .LVU146
 484 0012 8081      		ld r24,Z
 485 0014 9181      		ldd r25,Z+1
 486               	.LVL26:
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 487               		.loc 5 609 3 is_stmt 1 view .LVU147
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 488               		.loc 5 609 36 is_stmt 0 view .LVU148
 489 0016 EC01      		movw r28,r24
 490 0018 A881      		ld r26,Y
 491 001a B981      		ldd r27,Y+1
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 492               		.loc 5 609 25 view .LVU149
 493 001c B183      		std Z+1,r27
 494 001e A083      		st Z,r26
 610:../../../os/rt/include/chschd.h **** 
 495               		.loc 5 610 3 is_stmt 1 view .LVU150
 610:../../../os/rt/include/chschd.h **** 
 496               		.loc 5 610 25 is_stmt 0 view .LVU151
 497 0020 1396      		adiw r26,2+1
 498 0022 FC93      		st X,r31
 499 0024 EE93      		st -X,r30
 500 0026 1297      		sbiw r26,2
 501               	.LVL27:
 612:../../../os/rt/include/chschd.h **** }
 502               		.loc 5 612 3 is_stmt 1 view .LVU152
 612:../../../os/rt/include/chschd.h **** }
 503               		.loc 5 612 3 is_stmt 0 view .LVU153
 504               	.LBE76:
 505               	.LBE75:
 304:../../../os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 506               		.loc 1 304 9 view .LVU154
 507 0028 9487      		std Z+12,r25
 508 002a 8387      		std Z+11,r24
 305:../../../os/rt/src/chschd.c **** 
 509               		.loc 1 305 3 is_stmt 1 view .LVU155
 305:../../../os/rt/src/chschd.c **** 
 510               		.loc 1 305 16 is_stmt 0 view .LVU156
 511 002c 21E0      		ldi r18,lo8(1)
 512 002e 2D87      		std Y+13,r18
 308:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 513               		.loc 1 308 3 is_stmt 1 view .LVU157
 309:../../../os/rt/src/chschd.c ****   }
 514               		.loc 1 309 5 view .LVU158
 309:../../../os/rt/src/chschd.c ****   }
 515               		.loc 1 309 29 view .LVU159
 313:../../../os/rt/src/chschd.c **** }
 516               		.loc 1 313 3 view .LVU160
 313:../../../os/rt/src/chschd.c **** }
 517               		.loc 1 313 3 view .LVU161
 313:../../../os/rt/src/chschd.c **** }
 518               		.loc 1 313 3 view .LVU162
 313:../../../os/rt/src/chschd.c **** }
 519               		.loc 1 313 3 view .LVU163
 313:../../../os/rt/src/chschd.c **** }
 520               		.loc 1 313 3 view .LVU164
 521 0030 0E94 0000 		call _port_switch
 522               	.LVL28:
 313:../../../os/rt/src/chschd.c **** }
 523               		.loc 1 313 3 view .LVU165
 313:../../../os/rt/src/chschd.c **** }
 524               		.loc 1 313 3 view .LVU166
 313:../../../os/rt/src/chschd.c **** }
 525               		.loc 1 313 26 view .LVU167
 526               	/* epilogue start */
 314:../../../os/rt/src/chschd.c **** 
 527               		.loc 1 314 1 is_stmt 0 view .LVU168
 528 0034 DF91      		pop r29
 529 0036 CF91      		pop r28
 530 0038 0895      		ret
 531               		.cfi_endproc
 532               	.LFE144:
 534               		.section	.text.chSchGoSleepTimeoutS,"ax",@progbits
 535               	.global	chSchGoSleepTimeoutS
 537               	chSchGoSleepTimeoutS:
 538               	.LVL29:
 539               	.LFB146:
 353:../../../os/rt/src/chschd.c **** 
 354:../../../os/rt/src/chschd.c **** /**
 355:../../../os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state with
 356:../../../os/rt/src/chschd.c ****  *          timeout specification.
 357:../../../os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 358:../../../os/rt/src/chschd.c ****  *          explicitly within the specified timeout then it is forcibly
 359:../../../os/rt/src/chschd.c ****  *          awakened with a @p MSG_TIMEOUT low level message. The possible
 360:../../../os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 361:../../../os/rt/src/chschd.c ****  *
 362:../../../os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 363:../../../os/rt/src/chschd.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 364:../../../os/rt/src/chschd.c ****  *                      special values are handled as follow:
 365:../../../os/rt/src/chschd.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 366:../../../os/rt/src/chschd.c ****  *                        state, this is equivalent to invoking
 367:../../../os/rt/src/chschd.c ****  *                        @p chSchGoSleepS() but, of course, less efficient.
 368:../../../os/rt/src/chschd.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 369:../../../os/rt/src/chschd.c ****  *                      .
 370:../../../os/rt/src/chschd.c ****  * @return              The wakeup message.
 371:../../../os/rt/src/chschd.c ****  * @retval MSG_TIMEOUT  if a timeout occurs.
 372:../../../os/rt/src/chschd.c ****  *
 373:../../../os/rt/src/chschd.c ****  * @sclass
 374:../../../os/rt/src/chschd.c ****  */
 375:../../../os/rt/src/chschd.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 540               		.loc 1 375 70 is_stmt 1 view -0
 541               		.cfi_startproc
 542               		.loc 1 375 70 is_stmt 0 view .LVU170
 543 0000 1F93      		push r17
 544               	.LCFI8:
 545               		.cfi_def_cfa_offset 3
 546               		.cfi_offset 17, -2
 547 0002 CF93      		push r28
 548               	.LCFI9:
 549               		.cfi_def_cfa_offset 4
 550               		.cfi_offset 28, -3
 551 0004 DF93      		push r29
 552               	.LCFI10:
 553               		.cfi_def_cfa_offset 5
 554               		.cfi_offset 29, -4
 555 0006 CDB7      		in r28,__SP_L__
 556 0008 DEB7      		in r29,__SP_H__
 557               	.LCFI11:
 558               		.cfi_def_cfa_register 28
 559 000a 2A97      		sbiw r28,10
 560               	.LCFI12:
 561               		.cfi_def_cfa_offset 15
 562 000c 0FB6      		in __tmp_reg__,__SREG__
 563 000e F894      		cli
 564 0010 DEBF      		out __SP_H__,r29
 565 0012 0FBE      		out __SREG__,__tmp_reg__
 566 0014 CDBF      		out __SP_L__,r28
 567               	/* prologue: function */
 568               	/* frame size = 10 */
 569               	/* stack size = 13 */
 570               	.L__stack_usage = 13
 571 0016 182F      		mov r17,r24
 376:../../../os/rt/src/chschd.c **** 
 377:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 572               		.loc 1 377 21 is_stmt 1 view .LVU171
 378:../../../os/rt/src/chschd.c **** 
 379:../../../os/rt/src/chschd.c ****   if (TIME_INFINITE != timeout) {
 573               		.loc 1 379 3 view .LVU172
 574               		.loc 1 379 6 is_stmt 0 view .LVU173
 575 0018 6F3F      		cpi r22,-1
 576 001a 7607      		cpc r23,r22
 577               	.LVL30:
 578               		.loc 1 379 6 view .LVU174
 579 001c 01F0      		breq .L30
 580               	.LBB77:
 380:../../../os/rt/src/chschd.c ****     virtual_timer_t vt;
 581               		.loc 1 380 5 is_stmt 1 view .LVU175
 381:../../../os/rt/src/chschd.c **** 
 382:../../../os/rt/src/chschd.c ****     chVTDoSetI(&vt, timeout, wakeup, currp);
 582               		.loc 1 382 5 view .LVU176
 583 001e 2091 0000 		lds r18,ch+11
 584 0022 3091 0000 		lds r19,ch+11+1
 585 0026 40E0      		ldi r20,lo8(gs(wakeup))
 586 0028 50E0      		ldi r21,hi8(gs(wakeup))
 587 002a CE01      		movw r24,r28
 588 002c 0196      		adiw r24,1
 589 002e 0E94 0000 		call chVTDoSetI
 590               	.LVL31:
 383:../../../os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 591               		.loc 1 383 5 view .LVU177
 592 0032 812F      		mov r24,r17
 593 0034 0E94 0000 		call chSchGoSleepS
 594               	.LVL32:
 384:../../../os/rt/src/chschd.c ****     if (chVTIsArmedI(&vt)) {
 595               		.loc 1 384 5 view .LVU178
 596               		.loc 1 384 5 is_stmt 0 view .LVU179
 597               	.LBE77:
 598               		.file 6 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chvt.h **** 
   4:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chvt.h **** 
   6:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chvt.h ****     (at your option) any later version.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** //#if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** //#error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** //#endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../../os/rt/include/chvt.h **** 
  68:../../../os/rt/include/chvt.h **** /*
  69:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../../os/rt/include/chvt.h ****  */
  71:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chvt.h **** extern "C" {
  73:../../../os/rt/include/chvt.h **** #endif
  74:../../../os/rt/include/chvt.h ****   void _vt_init(void);
  75:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** #endif
  81:../../../os/rt/include/chvt.h **** 
  82:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  83:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  84:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  85:../../../os/rt/include/chvt.h **** 
  86:../../../os/rt/include/chvt.h **** /**
  87:../../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  88:../../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  89:../../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  90:../../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  91:../../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  92:../../../os/rt/include/chvt.h ****  *
  93:../../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  94:../../../os/rt/include/chvt.h ****  *
  95:../../../os/rt/include/chvt.h ****  * @init
  96:../../../os/rt/include/chvt.h ****  */
  97:../../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  98:../../../os/rt/include/chvt.h **** 
  99:../../../os/rt/include/chvt.h ****   vtp->func = NULL;
 100:../../../os/rt/include/chvt.h **** }
 101:../../../os/rt/include/chvt.h **** 
 102:../../../os/rt/include/chvt.h **** /**
 103:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 104:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 105:../../../os/rt/include/chvt.h ****  *          invocation.
 106:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 107:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 108:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 109:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 110:../../../os/rt/include/chvt.h ****  *
 111:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 112:../../../os/rt/include/chvt.h ****  *
 113:../../../os/rt/include/chvt.h ****  * @xclass
 114:../../../os/rt/include/chvt.h ****  */
 115:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 116:../../../os/rt/include/chvt.h **** 
 117:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 118:../../../os/rt/include/chvt.h ****   return ch.vtlist.systime;
 119:../../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 120:../../../os/rt/include/chvt.h ****   return port_timer_get_time();
 121:../../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 122:../../../os/rt/include/chvt.h **** }
 123:../../../os/rt/include/chvt.h **** 
 124:../../../os/rt/include/chvt.h **** /**
 125:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 126:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 127:../../../os/rt/include/chvt.h ****  *          invocation.
 128:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 129:../../../os/rt/include/chvt.h ****  *
 130:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 131:../../../os/rt/include/chvt.h ****  *
 132:../../../os/rt/include/chvt.h ****  * @api
 133:../../../os/rt/include/chvt.h ****  */
 134:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 135:../../../os/rt/include/chvt.h ****   systime_t systime;
 136:../../../os/rt/include/chvt.h **** 
 137:../../../os/rt/include/chvt.h ****   chSysLock();
 138:../../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 139:../../../os/rt/include/chvt.h ****   chSysUnlock();
 140:../../../os/rt/include/chvt.h **** 
 141:../../../os/rt/include/chvt.h ****   return systime;
 142:../../../os/rt/include/chvt.h **** }
 143:../../../os/rt/include/chvt.h **** 
 144:../../../os/rt/include/chvt.h **** /**
 145:../../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 146:../../../os/rt/include/chvt.h ****  *
 147:../../../os/rt/include/chvt.h ****  * @param[in] start     start time
 148:../../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 149:../../../os/rt/include/chvt.h ****  *
 150:../../../os/rt/include/chvt.h ****  * @xclass
 151:../../../os/rt/include/chvt.h ****  */
 152:../../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 153:../../../os/rt/include/chvt.h **** 
 154:../../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 155:../../../os/rt/include/chvt.h **** }
 156:../../../os/rt/include/chvt.h **** 
 157:../../../os/rt/include/chvt.h **** /**
 158:../../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 159:../../../os/rt/include/chvt.h ****  *          window.
 160:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 161:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 162:../../../os/rt/include/chvt.h ****  *
 163:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 164:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 165:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 166:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 167:../../../os/rt/include/chvt.h ****  *
 168:../../../os/rt/include/chvt.h ****  * @xclass
 169:../../../os/rt/include/chvt.h ****  */
 170:../../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 171:../../../os/rt/include/chvt.h **** 
 172:../../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 173:../../../os/rt/include/chvt.h **** }
 174:../../../os/rt/include/chvt.h **** 
 175:../../../os/rt/include/chvt.h **** /**
 176:../../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 177:../../../os/rt/include/chvt.h ****  *          window.
 178:../../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 179:../../../os/rt/include/chvt.h ****  *          whole time range is specified.
 180:../../../os/rt/include/chvt.h ****  *
 181:../../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 182:../../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 183:../../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 184:../../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 185:../../../os/rt/include/chvt.h ****  *
 186:../../../os/rt/include/chvt.h ****  * @api
 187:../../../os/rt/include/chvt.h ****  */
 188:../../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 189:../../../os/rt/include/chvt.h **** 
 190:../../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 191:../../../os/rt/include/chvt.h **** }
 192:../../../os/rt/include/chvt.h **** 
 193:../../../os/rt/include/chvt.h **** /**
 194:../../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 195:../../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 196:../../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 197:../../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 198:../../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 199:../../../os/rt/include/chvt.h ****  *
 200:../../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 201:../../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 202:../../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 203:../../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 204:../../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 205:../../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 206:../../../os/rt/include/chvt.h ****  *
 207:../../../os/rt/include/chvt.h ****  * @iclass
 208:../../../os/rt/include/chvt.h ****  */
 209:../../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 210:../../../os/rt/include/chvt.h **** 
 211:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 212:../../../os/rt/include/chvt.h **** 
 213:../../../os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 214:../../../os/rt/include/chvt.h ****     return false;
 215:../../../os/rt/include/chvt.h ****   }
 216:../../../os/rt/include/chvt.h **** 
 217:../../../os/rt/include/chvt.h ****   if (timep != NULL) {
 218:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 219:../../../os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 220:../../../os/rt/include/chvt.h **** #else
 221:../../../os/rt/include/chvt.h ****     *timep = chTimeDiffX(chVTGetSystemTimeX(),
 222:../../../os/rt/include/chvt.h ****                          chTimeAddX(ch.vtlist.lasttime,
 223:../../../os/rt/include/chvt.h ****                                     ch.vtlist.next->delta +
 224:../../../os/rt/include/chvt.h ****                                     (sysinterval_t)CH_CFG_ST_TIMEDELTA));
 225:../../../os/rt/include/chvt.h **** #endif
 226:../../../os/rt/include/chvt.h ****   }
 227:../../../os/rt/include/chvt.h **** 
 228:../../../os/rt/include/chvt.h ****   return true;
 229:../../../os/rt/include/chvt.h **** }
 230:../../../os/rt/include/chvt.h **** 
 231:../../../os/rt/include/chvt.h **** /**
 232:../../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 233:../../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 234:../../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 235:../../../os/rt/include/chvt.h ****  *
 236:../../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 237:../../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 238:../../../os/rt/include/chvt.h ****  *
 239:../../../os/rt/include/chvt.h ****  * @iclass
 240:../../../os/rt/include/chvt.h ****  */
 241:../../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 242:../../../os/rt/include/chvt.h **** 
 243:../../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 599               		.loc 6 243 21 is_stmt 1 view .LVU180
 244:../../../os/rt/include/chvt.h **** 
 245:../../../os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 600               		.loc 6 245 3 view .LVU181
 601               	.LBB78:
 602               		.loc 1 384 8 is_stmt 0 view .LVU182
 603 0038 8F81      		ldd r24,Y+7
 604 003a 9885      		ldd r25,Y+8
 605 003c 892B      		or r24,r25
 606 003e 01F0      		breq .L32
 385:../../../os/rt/src/chschd.c ****       chVTDoResetI(&vt);
 607               		.loc 1 385 7 is_stmt 1 view .LVU183
 608 0040 CE01      		movw r24,r28
 609 0042 0196      		adiw r24,1
 610 0044 0E94 0000 		call chVTDoResetI
 611               	.LVL33:
 612               	.L32:
 613               		.loc 1 385 7 is_stmt 0 view .LVU184
 614               	.LBE78:
 386:../../../os/rt/src/chschd.c ****     }
 387:../../../os/rt/src/chschd.c ****   }
 388:../../../os/rt/src/chschd.c ****   else {
 389:../../../os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 390:../../../os/rt/src/chschd.c ****   }
 391:../../../os/rt/src/chschd.c **** 
 392:../../../os/rt/src/chschd.c ****   return currp->u.rdymsg;
 615               		.loc 1 392 3 is_stmt 1 view .LVU185
 616               		.loc 1 392 18 is_stmt 0 view .LVU186
 617 0048 E091 0000 		lds r30,ch+11
 618 004c F091 0000 		lds r31,ch+11+1
 393:../../../os/rt/src/chschd.c **** }
 619               		.loc 1 393 1 view .LVU187
 620 0050 8089      		ldd r24,Z+16
 621 0052 9189      		ldd r25,Z+17
 622               	/* epilogue start */
 623 0054 2A96      		adiw r28,10
 624 0056 0FB6      		in __tmp_reg__,__SREG__
 625 0058 F894      		cli
 626 005a DEBF      		out __SP_H__,r29
 627 005c 0FBE      		out __SREG__,__tmp_reg__
 628 005e CDBF      		out __SP_L__,r28
 629 0060 DF91      		pop r29
 630 0062 CF91      		pop r28
 631 0064 1F91      		pop r17
 632               	.LVL34:
 633               		.loc 1 393 1 view .LVU188
 634 0066 0895      		ret
 635               	.LVL35:
 636               	.L30:
 389:../../../os/rt/src/chschd.c ****   }
 637               		.loc 1 389 5 is_stmt 1 view .LVU189
 638 0068 812F      		mov r24,r17
 639 006a 0E94 0000 		call chSchGoSleepS
 640               	.LVL36:
 389:../../../os/rt/src/chschd.c ****   }
 641               		.loc 1 389 5 is_stmt 0 view .LVU190
 642 006e 00C0      		rjmp .L32
 643               		.cfi_endproc
 644               	.LFE146:
 646               		.section	.text.chSchWakeupS,"ax",@progbits
 647               	.global	chSchWakeupS
 649               	chSchWakeupS:
 650               	.LVL37:
 651               	.LFB147:
 394:../../../os/rt/src/chschd.c **** 
 395:../../../os/rt/src/chschd.c **** /**
 396:../../../os/rt/src/chschd.c ****  * @brief   Wakes up a thread.
 397:../../../os/rt/src/chschd.c ****  * @details The thread is inserted into the ready list or immediately made
 398:../../../os/rt/src/chschd.c ****  *          running depending on its relative priority compared to the current
 399:../../../os/rt/src/chschd.c ****  *          thread.
 400:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 401:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 402:../../../os/rt/src/chschd.c ****  * @note    It is equivalent to a @p chSchReadyI() followed by a
 403:../../../os/rt/src/chschd.c ****  *          @p chSchRescheduleS() but much more efficient.
 404:../../../os/rt/src/chschd.c ****  * @note    The function assumes that the current thread has the highest
 405:../../../os/rt/src/chschd.c ****  *          priority.
 406:../../../os/rt/src/chschd.c ****  *
 407:../../../os/rt/src/chschd.c ****  * @param[in] ntp       the thread to be made ready
 408:../../../os/rt/src/chschd.c ****  * @param[in] msg       the wakeup message
 409:../../../os/rt/src/chschd.c ****  *
 410:../../../os/rt/src/chschd.c ****  * @sclass
 411:../../../os/rt/src/chschd.c ****  */
 412:../../../os/rt/src/chschd.c **** void chSchWakeupS(thread_t *ntp, msg_t msg) {
 652               		.loc 1 412 45 is_stmt 1 view -0
 653               		.cfi_startproc
 654               		.loc 1 412 45 is_stmt 0 view .LVU192
 655 0000 CF93      		push r28
 656               	.LCFI13:
 657               		.cfi_def_cfa_offset 3
 658               		.cfi_offset 28, -2
 659 0002 DF93      		push r29
 660               	.LCFI14:
 661               		.cfi_def_cfa_offset 4
 662               		.cfi_offset 29, -3
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 2 */
 666               	.L__stack_usage = 2
 667 0004 DC01      		movw r26,r24
 413:../../../os/rt/src/chschd.c ****   thread_t *otp = currp;
 668               		.loc 1 413 3 is_stmt 1 view .LVU193
 669               		.loc 1 413 13 is_stmt 0 view .LVU194
 670 0006 4091 0000 		lds r20,ch+11
 671 000a 5091 0000 		lds r21,ch+11+1
 672               	.LVL38:
 414:../../../os/rt/src/chschd.c **** 
 415:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 673               		.loc 1 415 21 is_stmt 1 view .LVU195
 416:../../../os/rt/src/chschd.c **** 
 417:../../../os/rt/src/chschd.c ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 674               		.loc 1 417 3 view .LVU196
 675               		.loc 1 417 3 view .LVU197
 418:../../../os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 419:../../../os/rt/src/chschd.c ****               "priority order violation");
 420:../../../os/rt/src/chschd.c **** 
 421:../../../os/rt/src/chschd.c ****   /* Storing the message to be retrieved by the target thread when it will
 422:../../../os/rt/src/chschd.c ****      restart execution.*/
 423:../../../os/rt/src/chschd.c ****   ntp->u.rdymsg = msg;
 676               		.loc 1 423 3 view .LVU198
 677               		.loc 1 423 17 is_stmt 0 view .LVU199
 678 000e 5196      		adiw r26,16+1
 679 0010 7C93      		st X,r23
 680 0012 6E93      		st -X,r22
 681 0014 5097      		sbiw r26,16
 424:../../../os/rt/src/chschd.c **** 
 425:../../../os/rt/src/chschd.c ****   /* If the waken thread has a not-greater priority than the current
 426:../../../os/rt/src/chschd.c ****      one then it is just inserted in the ready list else it made
 427:../../../os/rt/src/chschd.c ****      running immediately and the invoking thread goes in the ready
 428:../../../os/rt/src/chschd.c ****      list instead.*/
 429:../../../os/rt/src/chschd.c ****   if (ntp->prio <= otp->prio) {
 682               		.loc 1 429 3 is_stmt 1 view .LVU200
 683               		.loc 1 429 10 is_stmt 0 view .LVU201
 684 0016 1496      		adiw r26,4
 685 0018 2C91      		ld r18,X
 686 001a 1497      		sbiw r26,4
 687               		.loc 1 429 23 view .LVU202
 688 001c EA01      		movw r28,r20
 689 001e 8C81      		ldd r24,Y+4
 690               	.LVL39:
 691               		.loc 1 429 6 view .LVU203
 692 0020 8217      		cp r24,r18
 693 0022 00F0      		brlo .L37
 430:../../../os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 694               		.loc 1 430 5 is_stmt 1 view .LVU204
 695               	.LVL40:
 696               	.LBB79:
 697               	.LBI79:
 218:../../../os/rt/src/chschd.c ****   thread_t *cp;
 698               		.loc 1 218 11 view .LVU205
 699               	.LBB80:
 219:../../../os/rt/src/chschd.c **** 
 700               		.loc 1 219 3 view .LVU206
 221:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 701               		.loc 1 221 21 view .LVU207
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 702               		.loc 1 222 3 view .LVU208
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 703               		.loc 1 222 3 view .LVU209
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 704               		.loc 1 223 3 view .LVU210
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 705               		.loc 1 223 3 view .LVU211
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 706               		.loc 1 227 3 view .LVU212
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 707               		.loc 1 227 13 is_stmt 0 view .LVU213
 708 0024 1D96      		adiw r26,13
 709 0026 1C92      		st X,__zero_reg__
 710 0028 1D97      		sbiw r26,13
 228:../../../os/rt/src/chschd.c ****   do {
 711               		.loc 1 228 3 is_stmt 1 view .LVU214
 712               	.LVL41:
 228:../../../os/rt/src/chschd.c ****   do {
 713               		.loc 1 228 6 is_stmt 0 view .LVU215
 714 002a E0E0      		ldi r30,lo8(ch)
 715 002c F0E0      		ldi r31,hi8(ch)
 716               	.LVL42:
 717               	.L38:
 229:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 718               		.loc 1 229 3 is_stmt 1 view .LVU216
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 719               		.loc 1 230 5 view .LVU217
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 720               		.loc 1 230 8 is_stmt 0 view .LVU218
 721 002e 0190      		ld __tmp_reg__,Z+
 722 0030 F081      		ld r31,Z
 723 0032 E02D      		mov r30,__tmp_reg__
 724               	.LVL43:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 725               		.loc 1 231 3 view .LVU219
 726 0034 9481      		ldd r25,Z+4
 727 0036 9217      		cp r25,r18
 728 0038 00F4      		brsh .L38
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 729               		.loc 1 233 3 is_stmt 1 view .LVU220
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 730               		.loc 1 233 30 is_stmt 0 view .LVU221
 731 003a 1196      		adiw r26,1
 732 003c FC93      		st X,r31
 733 003e EE93      		st -X,r30
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 734               		.loc 1 234 3 is_stmt 1 view .LVU222
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 735               		.loc 1 234 41 is_stmt 0 view .LVU223
 736 0040 C281      		ldd r28,Z+2
 737 0042 D381      		ldd r29,Z+3
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 738               		.loc 1 234 30 view .LVU224
 739 0044 1396      		adiw r26,2+1
 740 0046 DC93      		st X,r29
 741 0048 CE93      		st -X,r28
 742 004a 1297      		sbiw r26,2
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 743               		.loc 1 235 3 is_stmt 1 view .LVU225
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 744               		.loc 1 235 30 is_stmt 0 view .LVU226
 745 004c B983      		std Y+1,r27
 746 004e A883      		st Y,r26
 236:../../../os/rt/src/chschd.c **** 
 747               		.loc 1 236 3 is_stmt 1 view .LVU227
 236:../../../os/rt/src/chschd.c **** 
 748               		.loc 1 236 30 is_stmt 0 view .LVU228
 749 0050 B383      		std Z+3,r27
 750 0052 A283      		std Z+2,r26
 238:../../../os/rt/src/chschd.c **** }
 751               		.loc 1 238 3 is_stmt 1 view .LVU229
 752               	/* epilogue start */
 753               	.LBE80:
 754               	.LBE79:
 431:../../../os/rt/src/chschd.c ****   }
 432:../../../os/rt/src/chschd.c ****   else {
 433:../../../os/rt/src/chschd.c ****     otp = chSchReadyI(otp);
 434:../../../os/rt/src/chschd.c **** 
 435:../../../os/rt/src/chschd.c ****     /* Handling idle-leave hook.*/
 436:../../../os/rt/src/chschd.c ****     if (otp->prio == IDLEPRIO) {
 437:../../../os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 438:../../../os/rt/src/chschd.c ****     }
 439:../../../os/rt/src/chschd.c **** 
 440:../../../os/rt/src/chschd.c ****     /* The extracted thread is marked as current.*/
 441:../../../os/rt/src/chschd.c ****     currp = ntp;
 442:../../../os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 443:../../../os/rt/src/chschd.c **** 
 444:../../../os/rt/src/chschd.c ****     /* Swap operation as tail call.*/
 445:../../../os/rt/src/chschd.c ****     chSysSwitch(ntp, otp);
 446:../../../os/rt/src/chschd.c ****   }
 447:../../../os/rt/src/chschd.c **** }
 755               		.loc 1 447 1 is_stmt 0 view .LVU230
 756 0054 DF91      		pop r29
 757 0056 CF91      		pop r28
 758 0058 0895      		ret
 759               	.LVL44:
 760               	.L37:
 433:../../../os/rt/src/chschd.c **** 
 761               		.loc 1 433 5 is_stmt 1 view .LVU231
 762               	.LBB81:
 763               	.LBI81:
 218:../../../os/rt/src/chschd.c ****   thread_t *cp;
 764               		.loc 1 218 11 view .LVU232
 765               	.LBB82:
 219:../../../os/rt/src/chschd.c **** 
 766               		.loc 1 219 3 view .LVU233
 221:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 767               		.loc 1 221 21 view .LVU234
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 768               		.loc 1 222 3 view .LVU235
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 769               		.loc 1 222 3 view .LVU236
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 770               		.loc 1 223 3 view .LVU237
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 771               		.loc 1 223 3 view .LVU238
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 772               		.loc 1 227 3 view .LVU239
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 773               		.loc 1 227 13 is_stmt 0 view .LVU240
 774 005a 1D86      		std Y+13,__zero_reg__
 228:../../../os/rt/src/chschd.c ****   do {
 775               		.loc 1 228 3 is_stmt 1 view .LVU241
 776               	.LVL45:
 228:../../../os/rt/src/chschd.c ****   do {
 777               		.loc 1 228 6 is_stmt 0 view .LVU242
 778 005c E0E0      		ldi r30,lo8(ch)
 779 005e F0E0      		ldi r31,hi8(ch)
 780               	.LVL46:
 781               	.L40:
 229:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 782               		.loc 1 229 3 is_stmt 1 view .LVU243
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 783               		.loc 1 230 5 view .LVU244
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 784               		.loc 1 230 8 is_stmt 0 view .LVU245
 785 0060 0190      		ld __tmp_reg__,Z+
 786 0062 F081      		ld r31,Z
 787 0064 E02D      		mov r30,__tmp_reg__
 788               	.LVL47:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 789               		.loc 1 231 3 view .LVU246
 790 0066 9481      		ldd r25,Z+4
 791 0068 9817      		cp r25,r24
 792 006a 00F4      		brsh .L40
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 793               		.loc 1 233 3 is_stmt 1 view .LVU247
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 794               		.loc 1 233 30 is_stmt 0 view .LVU248
 795 006c EA01      		movw r28,r20
 796 006e F983      		std Y+1,r31
 797 0070 E883      		st Y,r30
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 798               		.loc 1 234 3 is_stmt 1 view .LVU249
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 799               		.loc 1 234 41 is_stmt 0 view .LVU250
 800 0072 8281      		ldd r24,Z+2
 801 0074 9381      		ldd r25,Z+3
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 802               		.loc 1 234 30 view .LVU251
 803 0076 9B83      		std Y+3,r25
 804 0078 8A83      		std Y+2,r24
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 805               		.loc 1 235 3 is_stmt 1 view .LVU252
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 806               		.loc 1 235 30 is_stmt 0 view .LVU253
 807 007a EC01      		movw r28,r24
 808 007c 5983      		std Y+1,r21
 809 007e 4883      		st Y,r20
 236:../../../os/rt/src/chschd.c **** 
 810               		.loc 1 236 3 is_stmt 1 view .LVU254
 236:../../../os/rt/src/chschd.c **** 
 811               		.loc 1 236 30 is_stmt 0 view .LVU255
 812 0080 5383      		std Z+3,r21
 813 0082 4283      		std Z+2,r20
 238:../../../os/rt/src/chschd.c **** }
 814               		.loc 1 238 3 is_stmt 1 view .LVU256
 815               	.LVL48:
 238:../../../os/rt/src/chschd.c **** }
 816               		.loc 1 238 3 is_stmt 0 view .LVU257
 817               	.LBE82:
 818               	.LBE81:
 436:../../../os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 819               		.loc 1 436 5 is_stmt 1 view .LVU258
 437:../../../os/rt/src/chschd.c ****     }
 820               		.loc 1 437 7 view .LVU259
 437:../../../os/rt/src/chschd.c ****     }
 821               		.loc 1 437 31 view .LVU260
 441:../../../os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 822               		.loc 1 441 5 view .LVU261
 441:../../../os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 823               		.loc 1 441 11 is_stmt 0 view .LVU262
 824 0084 B093 0000 		sts ch+11+1,r27
 825 0088 A093 0000 		sts ch+11,r26
 442:../../../os/rt/src/chschd.c **** 
 826               		.loc 1 442 5 is_stmt 1 view .LVU263
 442:../../../os/rt/src/chschd.c **** 
 827               		.loc 1 442 16 is_stmt 0 view .LVU264
 828 008c 81E0      		ldi r24,lo8(1)
 829 008e 1D96      		adiw r26,13
 830 0090 8C93      		st X,r24
 831 0092 1D97      		sbiw r26,13
 832               	.LVL49:
 445:../../../os/rt/src/chschd.c ****   }
 833               		.loc 1 445 5 is_stmt 1 view .LVU265
 445:../../../os/rt/src/chschd.c ****   }
 834               		.loc 1 445 5 view .LVU266
 445:../../../os/rt/src/chschd.c ****   }
 835               		.loc 1 445 5 view .LVU267
 445:../../../os/rt/src/chschd.c ****   }
 836               		.loc 1 445 5 view .LVU268
 445:../../../os/rt/src/chschd.c ****   }
 837               		.loc 1 445 5 view .LVU269
 838 0094 BA01      		movw r22,r20
 839               	.LVL50:
 445:../../../os/rt/src/chschd.c ****   }
 840               		.loc 1 445 5 is_stmt 0 view .LVU270
 841 0096 CD01      		movw r24,r26
 842 0098 0E94 0000 		call _port_switch
 843               	.LVL51:
 445:../../../os/rt/src/chschd.c ****   }
 844               		.loc 1 445 5 is_stmt 1 view .LVU271
 445:../../../os/rt/src/chschd.c ****   }
 845               		.loc 1 445 5 view .LVU272
 445:../../../os/rt/src/chschd.c ****   }
 846               		.loc 1 445 26 view .LVU273
 847               	/* epilogue start */
 848               		.loc 1 447 1 is_stmt 0 view .LVU274
 849 009c DF91      		pop r29
 850 009e CF91      		pop r28
 851 00a0 0895      		ret
 852               		.cfi_endproc
 853               	.LFE147:
 855               		.section	.text.chSchIsPreemptionRequired,"ax",@progbits
 856               	.global	chSchIsPreemptionRequired
 858               	chSchIsPreemptionRequired:
 859               	.LFB149:
 448:../../../os/rt/src/chschd.c **** 
 449:../../../os/rt/src/chschd.c **** /**
 450:../../../os/rt/src/chschd.c ****  * @brief   Performs a reschedule if a higher priority thread is runnable.
 451:../../../os/rt/src/chschd.c ****  * @details If a thread with a higher priority than the current thread is in
 452:../../../os/rt/src/chschd.c ****  *          the ready list then make the higher priority thread running.
 453:../../../os/rt/src/chschd.c ****  *
 454:../../../os/rt/src/chschd.c ****  * @sclass
 455:../../../os/rt/src/chschd.c ****  */
 456:../../../os/rt/src/chschd.c **** void chSchRescheduleS(void) {
 457:../../../os/rt/src/chschd.c **** 
 458:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 459:../../../os/rt/src/chschd.c **** 
 460:../../../os/rt/src/chschd.c ****   if (chSchIsRescRequiredI()) {
 461:../../../os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 462:../../../os/rt/src/chschd.c ****   }
 463:../../../os/rt/src/chschd.c **** }
 464:../../../os/rt/src/chschd.c **** 
 465:../../../os/rt/src/chschd.c **** #if !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED)
 466:../../../os/rt/src/chschd.c **** /**
 467:../../../os/rt/src/chschd.c ****  * @brief   Evaluates if preemption is required.
 468:../../../os/rt/src/chschd.c ****  * @details The decision is taken by comparing the relative priorities and
 469:../../../os/rt/src/chschd.c ****  *          depending on the state of the round robin timeout counter.
 470:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 471:../../../os/rt/src/chschd.c ****  *          itself or from within the port layer.
 472:../../../os/rt/src/chschd.c ****  *
 473:../../../os/rt/src/chschd.c ****  * @retval true         if there is a thread that must go in running state
 474:../../../os/rt/src/chschd.c ****  *                      immediately.
 475:../../../os/rt/src/chschd.c ****  * @retval false        if preemption is not required.
 476:../../../os/rt/src/chschd.c ****  *
 477:../../../os/rt/src/chschd.c ****  * @special
 478:../../../os/rt/src/chschd.c ****  */
 479:../../../os/rt/src/chschd.c **** bool chSchIsPreemptionRequired(void) {
 860               		.loc 1 479 38 is_stmt 1 view -0
 861               		.cfi_startproc
 862               	/* prologue: function */
 863               	/* frame size = 0 */
 864               	/* stack size = 0 */
 865               	.L__stack_usage = 0
 480:../../../os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&ch.rlist.queue);
 866               		.loc 1 480 3 view .LVU276
 867               	.LVL52:
 481:../../../os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 868               		.loc 1 481 3 view .LVU277
 482:../../../os/rt/src/chschd.c **** 
 483:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 484:../../../os/rt/src/chschd.c ****   /* If the running thread has not reached its time quantum, reschedule only
 485:../../../os/rt/src/chschd.c ****      if the first thread on the ready queue has a higher priority.
 486:../../../os/rt/src/chschd.c ****      Otherwise, if the running thread has used up its time quantum, reschedule
 487:../../../os/rt/src/chschd.c ****      if the first thread on the ready queue has equal or higher priority.*/
 488:../../../os/rt/src/chschd.c ****   return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 489:../../../os/rt/src/chschd.c **** #else
 490:../../../os/rt/src/chschd.c ****   /* If the round robin preemption feature is not enabled then performs a
 491:../../../os/rt/src/chschd.c ****      simpler comparison.*/
 492:../../../os/rt/src/chschd.c ****   return p1 > p2;
 869               		.loc 1 492 3 view .LVU278
 480:../../../os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 870               		.loc 1 480 11 is_stmt 0 view .LVU279
 871 0000 A091 0000 		lds r26,ch
 872 0004 B091 0000 		lds r27,ch+1
 481:../../../os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 873               		.loc 1 481 11 view .LVU280
 874 0008 E091 0000 		lds r30,ch+11
 875 000c F091 0000 		lds r31,ch+11+1
 876               		.loc 1 492 13 view .LVU281
 877 0010 81E0      		ldi r24,lo8(1)
 878 0012 1496      		adiw r26,4
 879 0014 2C91      		ld r18,X
 880 0016 9481      		ldd r25,Z+4
 881 0018 9217      		cp r25,r18
 882 001a 00F0      		brlo .L44
 883 001c 80E0      		ldi r24,0
 884               	.L44:
 885               	/* epilogue start */
 493:../../../os/rt/src/chschd.c **** #endif
 494:../../../os/rt/src/chschd.c **** }
 886               		.loc 1 494 1 view .LVU282
 887 001e 0895      		ret
 888               		.cfi_endproc
 889               	.LFE149:
 891               		.section	.text.chSchDoRescheduleBehind,"ax",@progbits
 892               	.global	chSchDoRescheduleBehind
 894               	chSchDoRescheduleBehind:
 895               	.LFB150:
 495:../../../os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED) */
 496:../../../os/rt/src/chschd.c **** 
 497:../../../os/rt/src/chschd.c **** /**
 498:../../../os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 499:../../../os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind all
 500:../../../os/rt/src/chschd.c ****  *          threads having the same priority. The thread regains its time
 501:../../../os/rt/src/chschd.c ****  *          quantum.
 502:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 503:../../../os/rt/src/chschd.c ****  *          itself.
 504:../../../os/rt/src/chschd.c ****  *
 505:../../../os/rt/src/chschd.c ****  * @special
 506:../../../os/rt/src/chschd.c ****  */
 507:../../../os/rt/src/chschd.c **** void chSchDoRescheduleBehind(void) {
 896               		.loc 1 507 36 is_stmt 1 view -0
 897               		.cfi_startproc
 898 0000 CF93      		push r28
 899               	.LCFI15:
 900               		.cfi_def_cfa_offset 3
 901               		.cfi_offset 28, -2
 902 0002 DF93      		push r29
 903               	.LCFI16:
 904               		.cfi_def_cfa_offset 4
 905               		.cfi_offset 29, -3
 906               	/* prologue: function */
 907               	/* frame size = 0 */
 908               	/* stack size = 2 */
 909               	.L__stack_usage = 2
 508:../../../os/rt/src/chschd.c ****   thread_t *otp = currp;
 910               		.loc 1 508 3 view .LVU284
 911               		.loc 1 508 13 is_stmt 0 view .LVU285
 912 0004 A091 0000 		lds r26,ch+11
 913 0008 B091 0000 		lds r27,ch+11+1
 914               	.LVL53:
 509:../../../os/rt/src/chschd.c **** 
 510:../../../os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 511:../../../os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 915               		.loc 1 511 3 is_stmt 1 view .LVU286
 916               	.LBB83:
 917               	.LBI83:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 918               		.loc 5 606 25 view .LVU287
 919               	.LBB84:
 607:../../../os/rt/include/chschd.h **** 
 920               		.loc 5 607 3 view .LVU288
 607:../../../os/rt/include/chschd.h **** 
 921               		.loc 5 607 13 is_stmt 0 view .LVU289
 922 000c 4091 0000 		lds r20,ch
 923 0010 5091 0000 		lds r21,ch+1
 924               	.LVL54:
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 925               		.loc 5 609 3 is_stmt 1 view .LVU290
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 926               		.loc 5 609 36 is_stmt 0 view .LVU291
 927 0014 EA01      		movw r28,r20
 928 0016 E881      		ld r30,Y
 929 0018 F981      		ldd r31,Y+1
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 930               		.loc 5 609 25 view .LVU292
 931 001a F093 0000 		sts ch+1,r31
 932 001e E093 0000 		sts ch,r30
 610:../../../os/rt/include/chschd.h **** 
 933               		.loc 5 610 3 is_stmt 1 view .LVU293
 610:../../../os/rt/include/chschd.h **** 
 934               		.loc 5 610 25 is_stmt 0 view .LVU294
 935 0022 80E0      		ldi r24,lo8(ch)
 936 0024 90E0      		ldi r25,hi8(ch)
 937 0026 9383      		std Z+3,r25
 938 0028 8283      		std Z+2,r24
 612:../../../os/rt/include/chschd.h **** }
 939               		.loc 5 612 3 is_stmt 1 view .LVU295
 940               	.LVL55:
 612:../../../os/rt/include/chschd.h **** }
 941               		.loc 5 612 3 is_stmt 0 view .LVU296
 942               	.LBE84:
 943               	.LBE83:
 944               		.loc 1 511 9 view .LVU297
 945 002a 5093 0000 		sts ch+11+1,r21
 946 002e 4093 0000 		sts ch+11,r20
 512:../../../os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 947               		.loc 1 512 3 is_stmt 1 view .LVU298
 948               		.loc 1 512 16 is_stmt 0 view .LVU299
 949 0032 81E0      		ldi r24,lo8(1)
 950 0034 8D87      		std Y+13,r24
 513:../../../os/rt/src/chschd.c **** 
 514:../../../os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 515:../../../os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 951               		.loc 1 515 3 is_stmt 1 view .LVU300
 952               		.loc 1 515 10 is_stmt 0 view .LVU301
 953 0036 1496      		adiw r26,4
 954 0038 2C91      		ld r18,X
 955 003a 1497      		sbiw r26,4
 516:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 956               		.loc 1 516 5 is_stmt 1 view .LVU302
 957               		.loc 1 516 29 view .LVU303
 517:../../../os/rt/src/chschd.c ****   }
 518:../../../os/rt/src/chschd.c **** 
 519:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 520:../../../os/rt/src/chschd.c ****   /* It went behind peers so it gets a new time quantum.*/
 521:../../../os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 522:../../../os/rt/src/chschd.c **** #endif
 523:../../../os/rt/src/chschd.c **** 
 524:../../../os/rt/src/chschd.c ****   /* Placing in ready list behind peers.*/
 525:../../../os/rt/src/chschd.c ****   otp = chSchReadyI(otp);
 958               		.loc 1 525 3 view .LVU304
 959               	.LVL56:
 960               	.LBB85:
 961               	.LBI85:
 218:../../../os/rt/src/chschd.c ****   thread_t *cp;
 962               		.loc 1 218 11 view .LVU305
 963               	.LBB86:
 219:../../../os/rt/src/chschd.c **** 
 964               		.loc 1 219 3 view .LVU306
 221:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 965               		.loc 1 221 21 view .LVU307
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 966               		.loc 1 222 3 view .LVU308
 222:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 967               		.loc 1 222 3 view .LVU309
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 968               		.loc 1 223 3 view .LVU310
 223:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 969               		.loc 1 223 3 view .LVU311
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 970               		.loc 1 227 3 view .LVU312
 227:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 971               		.loc 1 227 13 is_stmt 0 view .LVU313
 972 003c 1D96      		adiw r26,13
 973 003e 1C92      		st X,__zero_reg__
 974 0040 1D97      		sbiw r26,13
 228:../../../os/rt/src/chschd.c ****   do {
 975               		.loc 1 228 3 is_stmt 1 view .LVU314
 976               	.LVL57:
 228:../../../os/rt/src/chschd.c ****   do {
 977               		.loc 1 228 6 is_stmt 0 view .LVU315
 978 0042 E0E0      		ldi r30,lo8(ch)
 979 0044 F0E0      		ldi r31,hi8(ch)
 980               	.LVL58:
 981               	.L46:
 229:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 982               		.loc 1 229 3 is_stmt 1 view .LVU316
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 983               		.loc 1 230 5 view .LVU317
 230:../../../os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 984               		.loc 1 230 8 is_stmt 0 view .LVU318
 985 0046 0190      		ld __tmp_reg__,Z+
 986 0048 F081      		ld r31,Z
 987 004a E02D      		mov r30,__tmp_reg__
 988               	.LVL59:
 231:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 989               		.loc 1 231 3 view .LVU319
 990 004c 9481      		ldd r25,Z+4
 991 004e 9217      		cp r25,r18
 992 0050 00F4      		brsh .L46
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 993               		.loc 1 233 3 is_stmt 1 view .LVU320
 233:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 994               		.loc 1 233 30 is_stmt 0 view .LVU321
 995 0052 1196      		adiw r26,1
 996 0054 FC93      		st X,r31
 997 0056 EE93      		st -X,r30
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 998               		.loc 1 234 3 is_stmt 1 view .LVU322
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 999               		.loc 1 234 41 is_stmt 0 view .LVU323
 1000 0058 8281      		ldd r24,Z+2
 1001 005a 9381      		ldd r25,Z+3
 234:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 1002               		.loc 1 234 30 view .LVU324
 1003 005c 1396      		adiw r26,2+1
 1004 005e 9C93      		st X,r25
 1005 0060 8E93      		st -X,r24
 1006 0062 1297      		sbiw r26,2
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 1007               		.loc 1 235 3 is_stmt 1 view .LVU325
 235:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 1008               		.loc 1 235 30 is_stmt 0 view .LVU326
 1009 0064 EC01      		movw r28,r24
 1010 0066 B983      		std Y+1,r27
 1011 0068 A883      		st Y,r26
 236:../../../os/rt/src/chschd.c **** 
 1012               		.loc 1 236 3 is_stmt 1 view .LVU327
 236:../../../os/rt/src/chschd.c **** 
 1013               		.loc 1 236 30 is_stmt 0 view .LVU328
 1014 006a B383      		std Z+3,r27
 1015 006c A283      		std Z+2,r26
 238:../../../os/rt/src/chschd.c **** }
 1016               		.loc 1 238 3 is_stmt 1 view .LVU329
 1017               	.LVL60:
 238:../../../os/rt/src/chschd.c **** }
 1018               		.loc 1 238 3 is_stmt 0 view .LVU330
 1019               	.LBE86:
 1020               	.LBE85:
 526:../../../os/rt/src/chschd.c **** 
 527:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 528:../../../os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 1021               		.loc 1 528 3 is_stmt 1 view .LVU331
 1022               		.loc 1 528 3 view .LVU332
 1023               		.loc 1 528 3 view .LVU333
 1024               		.loc 1 528 3 view .LVU334
 1025               		.loc 1 528 3 view .LVU335
 1026 006e BD01      		movw r22,r26
 1027 0070 CA01      		movw r24,r20
 1028 0072 0E94 0000 		call _port_switch
 1029               	.LVL61:
 1030               		.loc 1 528 3 view .LVU336
 1031               		.loc 1 528 3 view .LVU337
 1032               		.loc 1 528 26 view .LVU338
 1033               	/* epilogue start */
 529:../../../os/rt/src/chschd.c **** }
 1034               		.loc 1 529 1 is_stmt 0 view .LVU339
 1035 0076 DF91      		pop r29
 1036 0078 CF91      		pop r28
 1037 007a 0895      		ret
 1038               		.cfi_endproc
 1039               	.LFE150:
 1041               		.section	.text.chSchDoRescheduleAhead,"ax",@progbits
 1042               	.global	chSchDoRescheduleAhead
 1044               	chSchDoRescheduleAhead:
 1045               	.LFB151:
 530:../../../os/rt/src/chschd.c **** 
 531:../../../os/rt/src/chschd.c **** /**
 532:../../../os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 533:../../../os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 534:../../../os/rt/src/chschd.c ****  *          threads having the same priority.
 535:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 536:../../../os/rt/src/chschd.c ****  *          itself.
 537:../../../os/rt/src/chschd.c ****  *
 538:../../../os/rt/src/chschd.c ****  * @special
 539:../../../os/rt/src/chschd.c ****  */
 540:../../../os/rt/src/chschd.c **** void chSchDoRescheduleAhead(void) {
 1046               		.loc 1 540 35 is_stmt 1 view -0
 1047               		.cfi_startproc
 1048 0000 CF93      		push r28
 1049               	.LCFI17:
 1050               		.cfi_def_cfa_offset 3
 1051               		.cfi_offset 28, -2
 1052 0002 DF93      		push r29
 1053               	.LCFI18:
 1054               		.cfi_def_cfa_offset 4
 1055               		.cfi_offset 29, -3
 1056               	/* prologue: function */
 1057               	/* frame size = 0 */
 1058               	/* stack size = 2 */
 1059               	.L__stack_usage = 2
 541:../../../os/rt/src/chschd.c ****   thread_t *otp = currp;
 1060               		.loc 1 541 3 view .LVU341
 1061               		.loc 1 541 13 is_stmt 0 view .LVU342
 1062 0004 A091 0000 		lds r26,ch+11
 1063 0008 B091 0000 		lds r27,ch+11+1
 1064               	.LVL62:
 542:../../../os/rt/src/chschd.c **** 
 543:../../../os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 544:../../../os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 1065               		.loc 1 544 3 is_stmt 1 view .LVU343
 1066               	.LBB87:
 1067               	.LBI87:
 606:../../../os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 1068               		.loc 5 606 25 view .LVU344
 1069               	.LBB88:
 607:../../../os/rt/include/chschd.h **** 
 1070               		.loc 5 607 3 view .LVU345
 607:../../../os/rt/include/chschd.h **** 
 1071               		.loc 5 607 13 is_stmt 0 view .LVU346
 1072 000c 4091 0000 		lds r20,ch
 1073 0010 5091 0000 		lds r21,ch+1
 1074               	.LVL63:
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1075               		.loc 5 609 3 is_stmt 1 view .LVU347
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1076               		.loc 5 609 36 is_stmt 0 view .LVU348
 1077 0014 EA01      		movw r28,r20
 1078 0016 E881      		ld r30,Y
 1079 0018 F981      		ldd r31,Y+1
 609:../../../os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1080               		.loc 5 609 25 view .LVU349
 1081 001a F093 0000 		sts ch+1,r31
 1082 001e E093 0000 		sts ch,r30
 610:../../../os/rt/include/chschd.h **** 
 1083               		.loc 5 610 3 is_stmt 1 view .LVU350
 610:../../../os/rt/include/chschd.h **** 
 1084               		.loc 5 610 25 is_stmt 0 view .LVU351
 1085 0022 80E0      		ldi r24,lo8(ch)
 1086 0024 90E0      		ldi r25,hi8(ch)
 1087 0026 9383      		std Z+3,r25
 1088 0028 8283      		std Z+2,r24
 612:../../../os/rt/include/chschd.h **** }
 1089               		.loc 5 612 3 is_stmt 1 view .LVU352
 1090               	.LVL64:
 612:../../../os/rt/include/chschd.h **** }
 1091               		.loc 5 612 3 is_stmt 0 view .LVU353
 1092               	.LBE88:
 1093               	.LBE87:
 1094               		.loc 1 544 9 view .LVU354
 1095 002a 5093 0000 		sts ch+11+1,r21
 1096 002e 4093 0000 		sts ch+11,r20
 545:../../../os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 1097               		.loc 1 545 3 is_stmt 1 view .LVU355
 1098               		.loc 1 545 16 is_stmt 0 view .LVU356
 1099 0032 81E0      		ldi r24,lo8(1)
 1100 0034 8D87      		std Y+13,r24
 546:../../../os/rt/src/chschd.c **** 
 547:../../../os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 548:../../../os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 1101               		.loc 1 548 3 is_stmt 1 view .LVU357
 1102               		.loc 1 548 10 is_stmt 0 view .LVU358
 1103 0036 1496      		adiw r26,4
 1104 0038 2C91      		ld r18,X
 1105 003a 1497      		sbiw r26,4
 549:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 1106               		.loc 1 549 5 is_stmt 1 view .LVU359
 1107               		.loc 1 549 29 view .LVU360
 550:../../../os/rt/src/chschd.c ****   }
 551:../../../os/rt/src/chschd.c **** 
 552:../../../os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 553:../../../os/rt/src/chschd.c ****   otp = chSchReadyAheadI(otp);
 1108               		.loc 1 553 3 view .LVU361
 1109               	.LVL65:
 1110               	.LBB89:
 1111               	.LBI89:
 257:../../../os/rt/src/chschd.c ****   thread_t *cp;
 1112               		.loc 1 257 11 view .LVU362
 1113               	.LBB90:
 258:../../../os/rt/src/chschd.c **** 
 1114               		.loc 1 258 3 view .LVU363
 260:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 1115               		.loc 1 260 21 view .LVU364
 261:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 1116               		.loc 1 261 3 view .LVU365
 261:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 1117               		.loc 1 261 3 view .LVU366
 262:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 1118               		.loc 1 262 3 view .LVU367
 262:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 1119               		.loc 1 262 3 view .LVU368
 266:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 1120               		.loc 1 266 3 view .LVU369
 266:../../../os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 1121               		.loc 1 266 13 is_stmt 0 view .LVU370
 1122 003c 1D96      		adiw r26,13
 1123 003e 1C92      		st X,__zero_reg__
 1124 0040 1D97      		sbiw r26,13
 267:../../../os/rt/src/chschd.c ****   do {
 1125               		.loc 1 267 3 is_stmt 1 view .LVU371
 1126               	.LVL66:
 267:../../../os/rt/src/chschd.c ****   do {
 1127               		.loc 1 267 6 is_stmt 0 view .LVU372
 1128 0042 E0E0      		ldi r30,lo8(ch)
 1129 0044 F0E0      		ldi r31,hi8(ch)
 1130               	.LVL67:
 1131               	.L49:
 268:../../../os/rt/src/chschd.c ****     cp = cp->queue.next;
 1132               		.loc 1 268 3 is_stmt 1 view .LVU373
 269:../../../os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 1133               		.loc 1 269 5 view .LVU374
 269:../../../os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 1134               		.loc 1 269 8 is_stmt 0 view .LVU375
 1135 0046 0190      		ld __tmp_reg__,Z+
 1136 0048 F081      		ld r31,Z
 1137 004a E02D      		mov r30,__tmp_reg__
 1138               	.LVL68:
 270:../../../os/rt/src/chschd.c ****   /* Insertion on prev.*/
 1139               		.loc 1 270 3 view .LVU376
 1140 004c 9481      		ldd r25,Z+4
 1141 004e 2917      		cp r18,r25
 1142 0050 00F0      		brlo .L49
 272:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 1143               		.loc 1 272 3 is_stmt 1 view .LVU377
 272:../../../os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 1144               		.loc 1 272 30 is_stmt 0 view .LVU378
 1145 0052 1196      		adiw r26,1
 1146 0054 FC93      		st X,r31
 1147 0056 EE93      		st -X,r30
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 1148               		.loc 1 273 3 is_stmt 1 view .LVU379
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 1149               		.loc 1 273 41 is_stmt 0 view .LVU380
 1150 0058 8281      		ldd r24,Z+2
 1151 005a 9381      		ldd r25,Z+3
 273:../../../os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 1152               		.loc 1 273 30 view .LVU381
 1153 005c 1396      		adiw r26,2+1
 1154 005e 9C93      		st X,r25
 1155 0060 8E93      		st -X,r24
 1156 0062 1297      		sbiw r26,2
 274:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 1157               		.loc 1 274 3 is_stmt 1 view .LVU382
 274:../../../os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 1158               		.loc 1 274 30 is_stmt 0 view .LVU383
 1159 0064 EC01      		movw r28,r24
 1160 0066 B983      		std Y+1,r27
 1161 0068 A883      		st Y,r26
 275:../../../os/rt/src/chschd.c **** 
 1162               		.loc 1 275 3 is_stmt 1 view .LVU384
 275:../../../os/rt/src/chschd.c **** 
 1163               		.loc 1 275 30 is_stmt 0 view .LVU385
 1164 006a B383      		std Z+3,r27
 1165 006c A283      		std Z+2,r26
 277:../../../os/rt/src/chschd.c **** }
 1166               		.loc 1 277 3 is_stmt 1 view .LVU386
 1167               	.LVL69:
 277:../../../os/rt/src/chschd.c **** }
 1168               		.loc 1 277 3 is_stmt 0 view .LVU387
 1169               	.LBE90:
 1170               	.LBE89:
 554:../../../os/rt/src/chschd.c **** 
 555:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 556:../../../os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 1171               		.loc 1 556 3 is_stmt 1 view .LVU388
 1172               		.loc 1 556 3 view .LVU389
 1173               		.loc 1 556 3 view .LVU390
 1174               		.loc 1 556 3 view .LVU391
 1175               		.loc 1 556 3 view .LVU392
 1176 006e BD01      		movw r22,r26
 1177 0070 CA01      		movw r24,r20
 1178 0072 0E94 0000 		call _port_switch
 1179               	.LVL70:
 1180               		.loc 1 556 3 view .LVU393
 1181               		.loc 1 556 3 view .LVU394
 1182               		.loc 1 556 26 view .LVU395
 1183               	/* epilogue start */
 557:../../../os/rt/src/chschd.c **** }
 1184               		.loc 1 557 1 is_stmt 0 view .LVU396
 1185 0076 DF91      		pop r29
 1186 0078 CF91      		pop r28
 1187 007a 0895      		ret
 1188               		.cfi_endproc
 1189               	.LFE151:
 1191               		.section	.text.chSchRescheduleS,"ax",@progbits
 1192               	.global	chSchRescheduleS
 1194               	chSchRescheduleS:
 1195               	.LFB148:
 456:../../../os/rt/src/chschd.c **** 
 1196               		.loc 1 456 29 is_stmt 1 view -0
 1197               		.cfi_startproc
 1198               	/* prologue: function */
 1199               	/* frame size = 0 */
 1200               	/* stack size = 0 */
 1201               	.L__stack_usage = 0
 458:../../../os/rt/src/chschd.c **** 
 1202               		.loc 1 458 21 view .LVU398
 460:../../../os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 1203               		.loc 1 460 3 view .LVU399
 1204               	.LBB91:
 1205               	.LBI91:
 630:../../../os/rt/include/chschd.h **** }
 631:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == TRUE */
 632:../../../os/rt/include/chschd.h **** 
 633:../../../os/rt/include/chschd.h **** /**
 634:../../../os/rt/include/chschd.h ****  * @brief   Determines if the current thread must reschedule.
 635:../../../os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 636:../../../os/rt/include/chschd.h ****  *          higher priority.
 637:../../../os/rt/include/chschd.h ****  *
 638:../../../os/rt/include/chschd.h ****  * @return              The priorities situation.
 639:../../../os/rt/include/chschd.h ****  * @retval false        if rescheduling is not necessary.
 640:../../../os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at higher priority.
 641:../../../os/rt/include/chschd.h ****  *
 642:../../../os/rt/include/chschd.h ****  * @iclass
 643:../../../os/rt/include/chschd.h ****  */
 644:../../../os/rt/include/chschd.h **** static inline bool chSchIsRescRequiredI(void) {
 1206               		.loc 5 644 20 view .LVU400
 1207               	.LBB92:
 645:../../../os/rt/include/chschd.h **** 
 646:../../../os/rt/include/chschd.h ****   chDbgCheckClassI();
 1208               		.loc 5 646 21 view .LVU401
 647:../../../os/rt/include/chschd.h **** 
 648:../../../os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) > currp->prio;
 1209               		.loc 5 648 3 view .LVU402
 1210               		.loc 5 648 10 is_stmt 0 view .LVU403
 1211 0000 A091 0000 		lds r26,ch
 1212 0004 B091 0000 		lds r27,ch+1
 1213               		.loc 5 648 44 view .LVU404
 1214 0008 E091 0000 		lds r30,ch+11
 1215 000c F091 0000 		lds r31,ch+11+1
 1216               	.LBE92:
 1217               	.LBE91:
 460:../../../os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 1218               		.loc 1 460 6 view .LVU405
 1219 0010 1496      		adiw r26,4
 1220 0012 9C91      		ld r25,X
 1221 0014 8481      		ldd r24,Z+4
 1222 0016 8917      		cp r24,r25
 1223 0018 00F0      		brlo .L53
 1224               	/* epilogue start */
 463:../../../os/rt/src/chschd.c **** 
 1225               		.loc 1 463 1 view .LVU406
 1226 001a 0895      		ret
 1227               	.L53:
 461:../../../os/rt/src/chschd.c ****   }
 1228               		.loc 1 461 5 is_stmt 1 view .LVU407
 1229 001c 0C94 0000 		jmp chSchDoRescheduleAhead
 1230               	.LVL71:
 1231               		.cfi_endproc
 1232               	.LFE148:
 1234               		.section	.text.chSchDoReschedule,"ax",@progbits
 1235               	.global	chSchDoReschedule
 1237               	chSchDoReschedule:
 1238               	.LFB157:
 1239               		.cfi_startproc
 1240               	/* prologue: function */
 1241               	/* frame size = 0 */
 1242               	/* stack size = 0 */
 1243               	.L__stack_usage = 0
 1244 0000 0C94 0000 		jmp chSchDoRescheduleAhead
 1245               		.cfi_endproc
 1246               	.LFE157:
 1248               		.comm	ch,51,1
 1249               		.text
 1250               	.Letext0:
 1251               		.file 7 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 1252               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1253               		.file 9 "../../../os/rt/include/chsystypes.h"
 1254               		.file 10 "../../../os/rt/include/chtime.h"
 1255               		.file 11 "../../../os/rt/include/chmtx.h"
 1256               		.file 12 "../../../os/rt/include/chregistry.h"
 1257               		.file 13 "../../../os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chschd.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:12     .text.wakeup:0000000000000000 wakeup
                            *COM*:0000000000000033 ch
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:219    .text._scheduler_init:0000000000000000 _scheduler_init
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:267    .text.chSchReadyI:0000000000000000 chSchReadyI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:356    .text.chSchReadyAheadI:0000000000000000 chSchReadyAheadI
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:445    .text.chSchGoSleepS:0000000000000000 chSchGoSleepS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:537    .text.chSchGoSleepTimeoutS:0000000000000000 chSchGoSleepTimeoutS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:649    .text.chSchWakeupS:0000000000000000 chSchWakeupS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:858    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsPreemptionRequired
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:894    .text.chSchDoRescheduleBehind:0000000000000000 chSchDoRescheduleBehind
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:1044   .text.chSchDoRescheduleAhead:0000000000000000 chSchDoRescheduleAhead
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:1194   .text.chSchRescheduleS:0000000000000000 chSchRescheduleS
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//ccKOfCw5.s:1237   .text.chSchDoReschedule:0000000000000000 chSchDoReschedule

UNDEFINED SYMBOLS
_port_switch
chVTDoSetI
chVTDoResetI
__do_clear_bss
