   1               		.file	"chregistry.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chRegFirstThread,"ax",@progbits
  11               	.global	chRegFirstThread
  13               	chRegFirstThread:
  14               	.LFB141:
  15               		.file 1 "../../../os/rt/src/chregistry.c"
   1:../../../os/rt/src/chregistry.c **** /*
   2:../../../os/rt/src/chregistry.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chregistry.c **** 
   4:../../../os/rt/src/chregistry.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chregistry.c **** 
   6:../../../os/rt/src/chregistry.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chregistry.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chregistry.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chregistry.c ****     (at your option) any later version.
  10:../../../os/rt/src/chregistry.c **** 
  11:../../../os/rt/src/chregistry.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chregistry.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chregistry.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chregistry.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chregistry.c **** 
  16:../../../os/rt/src/chregistry.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chregistry.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chregistry.c **** */
  19:../../../os/rt/src/chregistry.c **** 
  20:../../../os/rt/src/chregistry.c **** /**
  21:../../../os/rt/src/chregistry.c ****  * @file    chregistry.c
  22:../../../os/rt/src/chregistry.c ****  * @brief   Threads registry code.
  23:../../../os/rt/src/chregistry.c ****  *
  24:../../../os/rt/src/chregistry.c ****  * @addtogroup registry
  25:../../../os/rt/src/chregistry.c ****  * @details Threads Registry related APIs and services.
  26:../../../os/rt/src/chregistry.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chregistry.c ****  *          The Threads Registry is a double linked list that holds all the
  28:../../../os/rt/src/chregistry.c ****  *          active threads in the system.<br>
  29:../../../os/rt/src/chregistry.c ****  *          Operations defined for the registry:
  30:../../../os/rt/src/chregistry.c ****  *          - <b>First</b>, returns the first, in creation order, active thread
  31:../../../os/rt/src/chregistry.c ****  *            in the system.
  32:../../../os/rt/src/chregistry.c ****  *          - <b>Next</b>, returns the next, in creation order, active thread
  33:../../../os/rt/src/chregistry.c ****  *            in the system.
  34:../../../os/rt/src/chregistry.c ****  *          .
  35:../../../os/rt/src/chregistry.c ****  *          The registry is meant to be mainly a debug feature, for example,
  36:../../../os/rt/src/chregistry.c ****  *          using the registry a debugger can enumerate the active threads
  37:../../../os/rt/src/chregistry.c ****  *          in any given moment or the shell can print the active threads
  38:../../../os/rt/src/chregistry.c ****  *          and their state.<br>
  39:../../../os/rt/src/chregistry.c ****  *          Another possible use is for centralized threads memory management,
  40:../../../os/rt/src/chregistry.c ****  *          terminating threads can pulse an event source and an event handler
  41:../../../os/rt/src/chregistry.c ****  *          can perform a scansion of the registry in order to recover the
  42:../../../os/rt/src/chregistry.c ****  *          memory.
  43:../../../os/rt/src/chregistry.c ****  * @pre     In order to use the threads registry the @p CH_CFG_USE_REGISTRY
  44:../../../os/rt/src/chregistry.c ****  *          option must be enabled in @p chconf.h.
  45:../../../os/rt/src/chregistry.c ****  * @{
  46:../../../os/rt/src/chregistry.c ****  */
  47:../../../os/rt/src/chregistry.c **** 
  48:../../../os/rt/src/chregistry.c **** #include <string.h>
  49:../../../os/rt/src/chregistry.c **** 
  50:../../../os/rt/src/chregistry.c **** #include "ch.h"
  51:../../../os/rt/src/chregistry.c **** 
  52:../../../os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  53:../../../os/rt/src/chregistry.c **** 
  54:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  55:../../../os/rt/src/chregistry.c **** /* Module exported variables.                                                */
  56:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  57:../../../os/rt/src/chregistry.c **** 
  58:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  59:../../../os/rt/src/chregistry.c **** /* Module local types.                                                       */
  60:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  61:../../../os/rt/src/chregistry.c **** 
  62:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  63:../../../os/rt/src/chregistry.c **** /* Module local variables.                                                   */
  64:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  65:../../../os/rt/src/chregistry.c **** 
  66:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  67:../../../os/rt/src/chregistry.c **** /* Module local functions.                                                   */
  68:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  69:../../../os/rt/src/chregistry.c **** 
  70:../../../os/rt/src/chregistry.c **** #define _offsetof(st, m)                                                    \
  71:../../../os/rt/src/chregistry.c ****   /*lint -save -e9005 -e9033 -e413 [11.8, 10.8 1.3] Normal pointers
  72:../../../os/rt/src/chregistry.c ****     arithmetic, it is safe.*/                                               \
  73:../../../os/rt/src/chregistry.c ****   ((size_t)((char *)&((st *)0)->m - (char *)0))                             \
  74:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
  75:../../../os/rt/src/chregistry.c **** 
  76:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  77:../../../os/rt/src/chregistry.c **** /* Module exported functions.                                                */
  78:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  79:../../../os/rt/src/chregistry.c **** 
  80:../../../os/rt/src/chregistry.c **** /*
  81:../../../os/rt/src/chregistry.c ****  * OS signature in ROM plus debug-related information.
  82:../../../os/rt/src/chregistry.c ****  */
  83:../../../os/rt/src/chregistry.c **** ROMCONST chdebug_t ch_debug = {
  84:../../../os/rt/src/chregistry.c ****   {'m', 'a', 'i', 'n'},
  85:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
  86:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (chdebug_t),
  87:../../../os/rt/src/chregistry.c ****   (uint16_t)(((unsigned)CH_KERNEL_MAJOR << 11U) |
  88:../../../os/rt/src/chregistry.c ****              ((unsigned)CH_KERNEL_MINOR << 6U) |
  89:../../../os/rt/src/chregistry.c ****              ((unsigned)CH_KERNEL_PATCH << 0U)),
  90:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (void *),
  91:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (systime_t),
  92:../../../os/rt/src/chregistry.c ****   (uint8_t)sizeof (thread_t),
  93:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, prio),
  94:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, ctx),
  95:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, newer),
  96:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, older),
  97:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, name),
  98:../../../os/rt/src/chregistry.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  99:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, wabase),
 100:../../../os/rt/src/chregistry.c **** #else
 101:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
 102:../../../os/rt/src/chregistry.c **** #endif
 103:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, state),
 104:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, flags),
 105:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 106:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, refs),
 107:../../../os/rt/src/chregistry.c **** #else
 108:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
 109:../../../os/rt/src/chregistry.c **** #endif
 110:../../../os/rt/src/chregistry.c **** #if CH_CFG_TIME_QUANTUM > 0
 111:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, ticks),
 112:../../../os/rt/src/chregistry.c **** #else
 113:../../../os/rt/src/chregistry.c ****   (uint8_t)0,
 114:../../../os/rt/src/chregistry.c **** #endif
 115:../../../os/rt/src/chregistry.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 116:../../../os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, time)
 117:../../../os/rt/src/chregistry.c **** #else
 118:../../../os/rt/src/chregistry.c ****   (uint8_t)0
 119:../../../os/rt/src/chregistry.c **** #endif
 120:../../../os/rt/src/chregistry.c **** };
 121:../../../os/rt/src/chregistry.c **** 
 122:../../../os/rt/src/chregistry.c **** /**
 123:../../../os/rt/src/chregistry.c ****  * @brief   Returns the first thread in the system.
 124:../../../os/rt/src/chregistry.c ****  * @details Returns the most ancient thread in the system, usually this is
 125:../../../os/rt/src/chregistry.c ****  *          the main thread unless it terminated. A reference is added to the
 126:../../../os/rt/src/chregistry.c ****  *          returned thread in order to make sure its status is not lost.
 127:../../../os/rt/src/chregistry.c ****  * @note    This function cannot return @p NULL because there is always at
 128:../../../os/rt/src/chregistry.c ****  *          least one thread in the system.
 129:../../../os/rt/src/chregistry.c ****  *
 130:../../../os/rt/src/chregistry.c ****  * @return              A reference to the most ancient thread.
 131:../../../os/rt/src/chregistry.c ****  *
 132:../../../os/rt/src/chregistry.c ****  * @api
 133:../../../os/rt/src/chregistry.c ****  */
 134:../../../os/rt/src/chregistry.c **** thread_t *chRegFirstThread(void) {
  16               		.loc 1 134 34 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 135:../../../os/rt/src/chregistry.c ****   thread_t *tp;
  22               		.loc 1 135 3 view .LVU1
 136:../../../os/rt/src/chregistry.c **** 
 137:../../../os/rt/src/chregistry.c ****   chSysLock();
  23               		.loc 1 137 3 view .LVU2
  24               	.LBB60:
  25               	.LBI60:
  26               		.file 2 "../../../os/rt/include/chsys.h"
   1:../../../os/rt/include/chsys.h **** /*
   2:../../../os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chsys.h **** 
   4:../../../os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chsys.h **** 
   6:../../../os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chsys.h ****     (at your option) any later version.
  10:../../../os/rt/include/chsys.h **** 
  11:../../../os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsys.h **** 
  16:../../../os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsys.h **** */
  19:../../../os/rt/include/chsys.h **** 
  20:../../../os/rt/include/chsys.h **** /**
  21:../../../os/rt/include/chsys.h ****  * @file    chsys.h
  22:../../../os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:../../../os/rt/include/chsys.h ****  *
  24:../../../os/rt/include/chsys.h ****  * @addtogroup system
  25:../../../os/rt/include/chsys.h ****  * @{
  26:../../../os/rt/include/chsys.h ****  */
  27:../../../os/rt/include/chsys.h **** 
  28:../../../os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:../../../os/rt/include/chsys.h **** #define CHSYS_H
  30:../../../os/rt/include/chsys.h **** 
  31:../../../os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:../../../os/rt/include/chsys.h **** 
  33:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsys.h **** 
  37:../../../os/rt/include/chsys.h **** /**
  38:../../../os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:../../../os/rt/include/chsys.h ****  * @{
  40:../../../os/rt/include/chsys.h ****  */
  41:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:../../../os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:../../../os/rt/include/chsys.h **** /** @} */
  46:../../../os/rt/include/chsys.h **** 
  47:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  50:../../../os/rt/include/chsys.h **** 
  51:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  52:../../../os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  54:../../../os/rt/include/chsys.h **** 
  55:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  56:../../../os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  58:../../../os/rt/include/chsys.h **** 
  59:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  60:../../../os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:../../../os/rt/include/chsys.h **** /*===========================================================================*/
  62:../../../os/rt/include/chsys.h **** 
  63:../../../os/rt/include/chsys.h **** /**
  64:../../../os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:../../../os/rt/include/chsys.h ****  */
  66:../../../os/rt/include/chsys.h **** /**
  67:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:../../../os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:../../../os/rt/include/chsys.h ****  *
  71:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  73:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  75:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:../../../os/rt/include/chsys.h ****  */
  77:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:../../../os/rt/include/chsys.h **** #else
  81:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:../../../os/rt/include/chsys.h **** #endif
  83:../../../os/rt/include/chsys.h **** 
  84:../../../os/rt/include/chsys.h **** /**
  85:../../../os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:../../../os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:../../../os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:../../../os/rt/include/chsys.h ****  *
  89:../../../os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:../../../os/rt/include/chsys.h ****  * @return              Priority range result.
  91:../../../os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:../../../os/rt/include/chsys.h ****  *                      does not support priorities.
  93:../../../os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:../../../os/rt/include/chsys.h ****  */
  95:../../../os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:../../../os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:../../../os/rt/include/chsys.h **** #else
  99:../../../os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:../../../os/rt/include/chsys.h **** #endif
 101:../../../os/rt/include/chsys.h **** 
 102:../../../os/rt/include/chsys.h **** /**
 103:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:../../../os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:../../../os/rt/include/chsys.h ****  *
 107:../../../os/rt/include/chsys.h ****  * @special
 108:../../../os/rt/include/chsys.h ****  */
 109:../../../os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:../../../os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:../../../os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:../../../os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:../../../os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:../../../os/rt/include/chsys.h **** 
 116:../../../os/rt/include/chsys.h **** /**
 117:../../../os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:../../../os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:../../../os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:../../../os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:../../../os/rt/include/chsys.h ****  *
 122:../../../os/rt/include/chsys.h ****  * @special
 123:../../../os/rt/include/chsys.h ****  */
 124:../../../os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:../../../os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:../../../os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:../../../os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:../../../os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:../../../os/rt/include/chsys.h **** 
 130:../../../os/rt/include/chsys.h **** /**
 131:../../../os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:../../../os/rt/include/chsys.h ****  *          port implementation.
 134:../../../os/rt/include/chsys.h ****  *
 135:../../../os/rt/include/chsys.h ****  * @special
 136:../../../os/rt/include/chsys.h ****  */
 137:../../../os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:../../../os/rt/include/chsys.h **** /** @} */
 139:../../../os/rt/include/chsys.h **** 
 140:../../../os/rt/include/chsys.h **** /**
 141:../../../os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:../../../os/rt/include/chsys.h ****  */
 143:../../../os/rt/include/chsys.h **** /**
 144:../../../os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:../../../os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:../../../os/rt/include/chsys.h ****  *          port implementation.
 147:../../../os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:../../../os/rt/include/chsys.h ****  *
 149:../../../os/rt/include/chsys.h ****  * @special
 150:../../../os/rt/include/chsys.h ****  */
 151:../../../os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:../../../os/rt/include/chsys.h **** /** @} */
 153:../../../os/rt/include/chsys.h **** 
 154:../../../os/rt/include/chsys.h **** /**
 155:../../../os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:../../../os/rt/include/chsys.h ****  * @{
 157:../../../os/rt/include/chsys.h ****  */
 158:../../../os/rt/include/chsys.h **** /**
 159:../../../os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:../../../os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:../../../os/rt/include/chsys.h ****  *
 163:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:../../../os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:../../../os/rt/include/chsys.h ****  *
 167:../../../os/rt/include/chsys.h ****  * @api
 168:../../../os/rt/include/chsys.h ****  */
 169:../../../os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:../../../os/rt/include/chsys.h **** 
 171:../../../os/rt/include/chsys.h **** /**
 172:../../../os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:../../../os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:../../../os/rt/include/chsys.h ****  *
 177:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:../../../os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:../../../os/rt/include/chsys.h ****  *
 181:../../../os/rt/include/chsys.h ****  * @api
 182:../../../os/rt/include/chsys.h ****  */
 183:../../../os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:../../../os/rt/include/chsys.h **** 
 185:../../../os/rt/include/chsys.h **** /**
 186:../../../os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:../../../os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:../../../os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:../../../os/rt/include/chsys.h ****  *
 191:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:../../../os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:../../../os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:../../../os/rt/include/chsys.h ****  *
 195:../../../os/rt/include/chsys.h ****  * @api
 196:../../../os/rt/include/chsys.h ****  */
 197:../../../os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:../../../os/rt/include/chsys.h **** 
 199:../../../os/rt/include/chsys.h **** /**
 200:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:../../../os/rt/include/chsys.h ****  *
 205:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:../../../os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:../../../os/rt/include/chsys.h ****  *
 209:../../../os/rt/include/chsys.h ****  * @api
 210:../../../os/rt/include/chsys.h ****  */
 211:../../../os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:../../../os/rt/include/chsys.h **** 
 213:../../../os/rt/include/chsys.h **** /**
 214:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:../../../os/rt/include/chsys.h ****  *
 219:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:../../../os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:../../../os/rt/include/chsys.h ****  *
 223:../../../os/rt/include/chsys.h ****  * @api
 224:../../../os/rt/include/chsys.h ****  */
 225:../../../os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:../../../os/rt/include/chsys.h **** 
 227:../../../os/rt/include/chsys.h **** /**
 228:../../../os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:../../../os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:../../../os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:../../../os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:../../../os/rt/include/chsys.h ****  *
 233:../../../os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:../../../os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:../../../os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:../../../os/rt/include/chsys.h ****  *
 237:../../../os/rt/include/chsys.h ****  * @api
 238:../../../os/rt/include/chsys.h ****  */
 239:../../../os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:../../../os/rt/include/chsys.h **** /** @} */
 241:../../../os/rt/include/chsys.h **** 
 242:../../../os/rt/include/chsys.h **** /**
 243:../../../os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:../../../os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:../../../os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:../../../os/rt/include/chsys.h ****  *
 247:../../../os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:../../../os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:../../../os/rt/include/chsys.h ****  *
 250:../../../os/rt/include/chsys.h ****  * @xclass
 251:../../../os/rt/include/chsys.h ****  */
 252:../../../os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:../../../os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:../../../os/rt/include/chsys.h **** #endif
 255:../../../os/rt/include/chsys.h **** 
 256:../../../os/rt/include/chsys.h **** /**
 257:../../../os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:../../../os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:../../../os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:../../../os/rt/include/chsys.h ****  *
 261:../../../os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:../../../os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:../../../os/rt/include/chsys.h ****  *
 264:../../../os/rt/include/chsys.h ****  * @special
 265:../../../os/rt/include/chsys.h ****  */
 266:../../../os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:../../../os/rt/include/chsys.h ****                                                                             \
 268:../../../os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:../../../os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:../../../os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:../../../os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:../../../os/rt/include/chsys.h **** }
 273:../../../os/rt/include/chsys.h **** 
 274:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 275:../../../os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 277:../../../os/rt/include/chsys.h **** 
 278:../../../os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:../../../os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:../../../os/rt/include/chsys.h **** #endif
 281:../../../os/rt/include/chsys.h **** 
 282:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 283:../../../os/rt/include/chsys.h **** extern "C" {
 284:../../../os/rt/include/chsys.h **** #endif
 285:../../../os/rt/include/chsys.h ****   void chSysInit(void);
 286:../../../os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:../../../os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:../../../os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:../../../os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:../../../os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:../../../os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:../../../os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:../../../os/rt/include/chsys.h **** #endif
 294:../../../os/rt/include/chsys.h **** #ifdef __cplusplus
 295:../../../os/rt/include/chsys.h **** }
 296:../../../os/rt/include/chsys.h **** #endif
 297:../../../os/rt/include/chsys.h **** 
 298:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 299:../../../os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:../../../os/rt/include/chsys.h **** /*===========================================================================*/
 301:../../../os/rt/include/chsys.h **** 
 302:../../../os/rt/include/chsys.h **** /**
 303:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:../../../os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:../../../os/rt/include/chsys.h ****  *          hardware priority.
 306:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:../../../os/rt/include/chsys.h ****  *
 308:../../../os/rt/include/chsys.h ****  * @special
 309:../../../os/rt/include/chsys.h ****  */
 310:../../../os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:../../../os/rt/include/chsys.h **** 
 312:../../../os/rt/include/chsys.h ****   port_disable();
 313:../../../os/rt/include/chsys.h ****   _dbg_check_disable();
 314:../../../os/rt/include/chsys.h **** }
 315:../../../os/rt/include/chsys.h **** 
 316:../../../os/rt/include/chsys.h **** /**
 317:../../../os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:../../../os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:../../../os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:../../../os/rt/include/chsys.h ****  *          enabled.
 321:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:../../../os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:../../../os/rt/include/chsys.h ****  *
 325:../../../os/rt/include/chsys.h ****  * @special
 326:../../../os/rt/include/chsys.h ****  */
 327:../../../os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:../../../os/rt/include/chsys.h **** 
 329:../../../os/rt/include/chsys.h ****   port_suspend();
 330:../../../os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:../../../os/rt/include/chsys.h **** }
 332:../../../os/rt/include/chsys.h **** 
 333:../../../os/rt/include/chsys.h **** /**
 334:../../../os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:../../../os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:../../../os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:../../../os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:../../../os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:../../../os/rt/include/chsys.h ****  *
 340:../../../os/rt/include/chsys.h ****  * @special
 341:../../../os/rt/include/chsys.h ****  */
 342:../../../os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:../../../os/rt/include/chsys.h **** 
 344:../../../os/rt/include/chsys.h ****   _dbg_check_enable();
 345:../../../os/rt/include/chsys.h ****   port_enable();
 346:../../../os/rt/include/chsys.h **** }
 347:../../../os/rt/include/chsys.h **** 
 348:../../../os/rt/include/chsys.h **** /**
 349:../../../os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:../../../os/rt/include/chsys.h ****  *
 351:../../../os/rt/include/chsys.h ****  * @special
 352:../../../os/rt/include/chsys.h ****  */
 353:../../../os/rt/include/chsys.h **** static inline void chSysLock(void) {
  27               		.loc 2 353 20 view .LVU3
  28               	.LBE60:
 354:../../../os/rt/include/chsys.h **** 
 355:../../../os/rt/include/chsys.h ****   port_lock();
  29               		.loc 2 355 3 view .LVU4
  30               	.LBB63:
  31               	.LBB61:
  32               	.LBI61:
  33               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/common/ports/AVR/chcore.h **** 
   4:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   5:../../../os/common/ports/AVR/chcore.h **** 
   6:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/common/ports/AVR/chcore.h ****     (at your option) any later version.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    templates/chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port related template macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  * @details This file is a template of the system driver macros provided by
  24:../../../os/common/ports/AVR/chcore.h ****  *          a port.
  25:../../../os/common/ports/AVR/chcore.h ****  *
  26:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup core
  27:../../../os/common/ports/AVR/chcore.h ****  * @{
  28:../../../os/common/ports/AVR/chcore.h ****  */
  29:../../../os/common/ports/AVR/chcore.h **** 
  30:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  31:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  32:../../../os/common/ports/AVR/chcore.h **** 
  33:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  34:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  37:../../../os/common/ports/AVR/chcore.h **** 
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  40:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  41:../../../os/common/ports/AVR/chcore.h **** 
  42:../../../os/common/ports/AVR/chcore.h **** /**
  43:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  44:../../../os/common/ports/AVR/chcore.h ****  * @{
  45:../../../os/common/ports/AVR/chcore.h ****  */
  46:../../../os/common/ports/AVR/chcore.h **** /**
  47:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  48:../../../os/common/ports/AVR/chcore.h ****  */
  49:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  50:../../../os/common/ports/AVR/chcore.h **** 
  51:../../../os/common/ports/AVR/chcore.h **** /**
  52:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  53:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  54:../../../os/common/ports/AVR/chcore.h ****  */
  55:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  56:../../../os/common/ports/AVR/chcore.h **** 
  57:../../../os/common/ports/AVR/chcore.h **** /**
  58:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  59:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignement required for the stack pointer.
  60:../../../os/common/ports/AVR/chcore.h ****  */
  61:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  62:../../../os/common/ports/AVR/chcore.h **** 
  63:../../../os/common/ports/AVR/chcore.h **** /**
  64:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  65:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  66:../../../os/common/ports/AVR/chcore.h ****  */
  67:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  68:../../../os/common/ports/AVR/chcore.h **** /** @} */
  69:../../../os/common/ports/AVR/chcore.h **** 
  70:../../../os/common/ports/AVR/chcore.h **** /**
  71:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  72:../../../os/common/ports/AVR/chcore.h ****  * @{
  73:../../../os/common/ports/AVR/chcore.h ****  */
  74:../../../os/common/ports/AVR/chcore.h **** /**
  75:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  76:../../../os/common/ports/AVR/chcore.h ****  */
  77:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  78:../../../os/common/ports/AVR/chcore.h **** 
  79:../../../os/common/ports/AVR/chcore.h **** /**
  80:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  81:../../../os/common/ports/AVR/chcore.h ****  */
  82:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  83:../../../os/common/ports/AVR/chcore.h **** 
  84:../../../os/common/ports/AVR/chcore.h **** /**
  85:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  86:../../../os/common/ports/AVR/chcore.h ****  */
  87:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "MegaAVR"
  88:../../../os/common/ports/AVR/chcore.h **** 
  89:../../../os/common/ports/AVR/chcore.h **** /**
  90:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  91:../../../os/common/ports/AVR/chcore.h ****  */
  92:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  93:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  94:../../../os/common/ports/AVR/chcore.h **** 
  95:../../../os/common/ports/AVR/chcore.h **** #else
  96:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
  97:../../../os/common/ports/AVR/chcore.h **** #endif
  98:../../../os/common/ports/AVR/chcore.h **** 
  99:../../../os/common/ports/AVR/chcore.h **** /**
 100:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 101:../../../os/common/ports/AVR/chcore.h ****  */
 102:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 103:../../../os/common/ports/AVR/chcore.h **** /** @} */
 104:../../../os/common/ports/AVR/chcore.h **** 
 105:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 106:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 107:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 108:../../../os/common/ports/AVR/chcore.h **** 
 109:../../../os/common/ports/AVR/chcore.h **** /**
 110:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 111:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 112:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 113:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 114:../../../os/common/ports/AVR/chcore.h ****  */
 115:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 116:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 117:../../../os/common/ports/AVR/chcore.h **** #endif
 118:../../../os/common/ports/AVR/chcore.h **** 
 119:../../../os/common/ports/AVR/chcore.h **** /**
 120:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 121:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 122:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 123:../../../os/common/ports/AVR/chcore.h ****  */
 124:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 125:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 126:../../../os/common/ports/AVR/chcore.h **** #endif
 127:../../../os/common/ports/AVR/chcore.h **** 
 128:../../../os/common/ports/AVR/chcore.h **** /**
 129:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables an alternative timer implementation.
 130:../../../os/common/ports/AVR/chcore.h ****  * @details Usually the port uses a timer interface defined in the file
 131:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer.h, if this option is enabled then the file
 132:../../../os/common/ports/AVR/chcore.h ****  *          @p chcore_timer_alt.h is included instead.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_USE_ALT_TIMER) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /**
 139:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 140:../../../os/common/ports/AVR/chcore.h ****  */
 141:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 142:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 143:../../../os/common/ports/AVR/chcore.h **** #endif
 144:../../../os/common/ports/AVR/chcore.h **** 
 145:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 146:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 147:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 148:../../../os/common/ports/AVR/chcore.h **** 
 149:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 150:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 151:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 152:../../../os/common/ports/AVR/chcore.h **** 
 153:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 154:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 155:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 156:../../../os/common/ports/AVR/chcore.h **** 
 157:../../../os/common/ports/AVR/chcore.h **** /**
 158:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 159:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 160:../../../os/common/ports/AVR/chcore.h ****  */
 161:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 162:../../../os/common/ports/AVR/chcore.h **** 
 163:../../../os/common/ports/AVR/chcore.h **** /**
 164:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 165:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 166:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 167:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 168:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 169:../../../os/common/ports/AVR/chcore.h ****  */
 170:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 180:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 182:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 183:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 184:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 185:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 186:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 187:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 188:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 189:../../../os/common/ports/AVR/chcore.h **** #endif
 190:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 191:../../../os/common/ports/AVR/chcore.h **** };
 192:../../../os/common/ports/AVR/chcore.h **** 
 193:../../../os/common/ports/AVR/chcore.h **** /**
 194:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 195:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 196:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 197:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 198:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 199:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 200:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 201:../../../os/common/ports/AVR/chcore.h ****  */
 202:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 215:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 217:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 220:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 221:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 222:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 223:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 224:../../../os/common/ports/AVR/chcore.h **** #endif
 225:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 226:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 227:../../../os/common/ports/AVR/chcore.h **** };
 228:../../../os/common/ports/AVR/chcore.h **** 
 229:../../../os/common/ports/AVR/chcore.h **** /**
 230:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 231:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 232:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 233:../../../os/common/ports/AVR/chcore.h ****  */
 234:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 235:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 236:../../../os/common/ports/AVR/chcore.h **** };
 237:../../../os/common/ports/AVR/chcore.h **** 
 238:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 239:../../../os/common/ports/AVR/chcore.h **** 
 240:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 241:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 242:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 243:../../../os/common/ports/AVR/chcore.h **** 
 244:../../../os/common/ports/AVR/chcore.h **** /**
 245:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 246:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 247:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 248:../../../os/common/ports/AVR/chcore.h ****  */
 249:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 250:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 252:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 253:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 254:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 255:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 257:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 260:../../../os/common/ports/AVR/chcore.h **** }
 261:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 262:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 264:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 265:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 266:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 267:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 268:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 269:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 270:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 271:../../../os/common/ports/AVR/chcore.h **** }
 272:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 273:../../../os/common/ports/AVR/chcore.h **** 
 274:../../../os/common/ports/AVR/chcore.h **** /**
 275:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 276:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 277:../../../os/common/ports/AVR/chcore.h ****  */
 278:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 279:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 280:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 281:../../../os/common/ports/AVR/chcore.h **** 
 282:../../../os/common/ports/AVR/chcore.h **** /**
 283:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 284:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 285:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 286:../../../os/common/ports/AVR/chcore.h ****  *
 287:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 288:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 289:../../../os/common/ports/AVR/chcore.h ****  */
 290:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 291:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 292:../../../os/common/ports/AVR/chcore.h **** 
 293:../../../os/common/ports/AVR/chcore.h **** /**
 294:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 295:../../../os/common/ports/AVR/chcore.h ****  */
 296:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 297:../../../os/common/ports/AVR/chcore.h **** 
 298:../../../os/common/ports/AVR/chcore.h **** /**
 299:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 300:../../../os/common/ports/AVR/chcore.h ****  */
 301:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 302:../../../os/common/ports/AVR/chcore.h **** 
 303:../../../os/common/ports/AVR/chcore.h **** /**
 304:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 305:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 306:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 307:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 308:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 309:../../../os/common/ports/AVR/chcore.h ****  */
 310:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 311:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 312:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 313:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 314:../../../os/common/ports/AVR/chcore.h **** }
 315:../../../os/common/ports/AVR/chcore.h **** 
 316:../../../os/common/ports/AVR/chcore.h **** /**
 317:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 318:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 319:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 320:../../../os/common/ports/AVR/chcore.h ****  */
 321:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 322:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 323:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_lock();                                                        \
 324:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 325:../../../os/common/ports/AVR/chcore.h ****     chSchDoReschedule();                                                    \
 326:../../../os/common/ports/AVR/chcore.h ****   _dbg_check_unlock();                                                      \
 327:../../../os/common/ports/AVR/chcore.h **** }
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 338:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 339:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 340:../../../os/common/ports/AVR/chcore.h ****  */
 341:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 342:../../../os/common/ports/AVR/chcore.h **** 
 343:../../../os/common/ports/AVR/chcore.h **** /**
 344:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 345:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 346:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 347:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 348:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 349:../../../os/common/ports/AVR/chcore.h ****  *
 350:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 351:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 352:../../../os/common/ports/AVR/chcore.h ****  */
 353:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 354:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 355:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 356:../../../os/common/ports/AVR/chcore.h **** }
 357:../../../os/common/ports/AVR/chcore.h **** 
 358:../../../os/common/ports/AVR/chcore.h **** 
 359:../../../os/common/ports/AVR/chcore.h **** /**
 360:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 361:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 362:../../../os/common/ports/AVR/chcore.h ****  */
 363:../../../os/common/ports/AVR/chcore.h **** #define port_init() {                                                       \
 364:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 365:../../../os/common/ports/AVR/chcore.h **** }
 366:../../../os/common/ports/AVR/chcore.h **** 
 367:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 368:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 369:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 370:../../../os/common/ports/AVR/chcore.h **** 
 371:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 372:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 373:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 374:../../../os/common/ports/AVR/chcore.h **** 
 375:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 376:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 377:../../../os/common/ports/AVR/chcore.h **** #endif
 378:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 379:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 380:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 381:../../../os/common/ports/AVR/chcore.h **** }
 382:../../../os/common/ports/AVR/chcore.h **** #endif
 383:../../../os/common/ports/AVR/chcore.h **** 
 384:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 385:../../../os/common/ports/AVR/chcore.h **** 
 386:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 387:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 388:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 389:../../../os/common/ports/AVR/chcore.h **** 
 390:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 391:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 392:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h **** /**
 395:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 396:../../../os/common/ports/AVR/chcore.h ****  *
 397:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 398:../../../os/common/ports/AVR/chcore.h ****  */
 399:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 400:../../../os/common/ports/AVR/chcore.h **** 
 401:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 402:../../../os/common/ports/AVR/chcore.h **** }
 403:../../../os/common/ports/AVR/chcore.h **** 
 404:../../../os/common/ports/AVR/chcore.h **** /**
 405:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 406:../../../os/common/ports/AVR/chcore.h ****  *
 407:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 408:../../../os/common/ports/AVR/chcore.h ****  *
 409:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 410:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 411:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 412:../../../os/common/ports/AVR/chcore.h ****  */
 413:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 414:../../../os/common/ports/AVR/chcore.h **** 
 415:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 416:../../../os/common/ports/AVR/chcore.h **** }
 417:../../../os/common/ports/AVR/chcore.h **** 
 418:../../../os/common/ports/AVR/chcore.h **** /**
 419:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 420:../../../os/common/ports/AVR/chcore.h ****  *
 421:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 422:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 423:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 424:../../../os/common/ports/AVR/chcore.h ****  */
 425:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 426:../../../os/common/ports/AVR/chcore.h **** 
 427:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 428:../../../os/common/ports/AVR/chcore.h **** }
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h **** /**
 431:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 432:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 433:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 434:../../../os/common/ports/AVR/chcore.h ****  */
 435:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
  34               		.loc 3 435 20 view .LVU5
  35               	.LBB62:
 436:../../../os/common/ports/AVR/chcore.h **** 
 437:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  36               		.loc 3 437 3 view .LVU6
  37               	/* #APP */
  38               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
  39 0000 F894      		cli
  40               	 ;  0 "" 2
  41               	/* #NOAPP */
  42               	.LBE62:
  43               	.LBE61:
  44               	.LBE63:
 356:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
  45               		.loc 2 356 34 view .LVU7
 357:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
  46               		.loc 2 357 20 view .LVU8
 138:../../../os/rt/src/chregistry.c ****   tp = ch.rlist.newer;
  47               		.loc 1 138 3 view .LVU9
  48               		.loc 1 138 6 is_stmt 0 view .LVU10
  49 0002 8091 0000 		lds r24,ch+7
  50 0006 9091 0000 		lds r25,ch+7+1
  51               	.LVL0:
 139:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 140:../../../os/rt/src/chregistry.c ****   tp->refs++;
 141:../../../os/rt/src/chregistry.c **** #endif
 142:../../../os/rt/src/chregistry.c ****   chSysUnlock();
  52               		.loc 1 142 3 is_stmt 1 view .LVU11
  53               	.LBB64:
  54               	.LBI64:
 358:../../../os/rt/include/chsys.h **** }
 359:../../../os/rt/include/chsys.h **** 
 360:../../../os/rt/include/chsys.h **** /**
 361:../../../os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:../../../os/rt/include/chsys.h ****  *
 363:../../../os/rt/include/chsys.h ****  * @special
 364:../../../os/rt/include/chsys.h ****  */
 365:../../../os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
  55               		.loc 2 365 20 view .LVU12
  56               	.LBB65:
 366:../../../os/rt/include/chsys.h **** 
 367:../../../os/rt/include/chsys.h ****   _dbg_check_unlock();
  57               		.loc 2 367 22 view .LVU13
 368:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
  58               		.loc 2 368 33 view .LVU14
 369:../../../os/rt/include/chsys.h **** 
 370:../../../os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:../../../os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 372:../../../os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:../../../os/rt/include/chsys.h ****      the ready list.*/
 374:../../../os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
  59               		.loc 2 374 3 view .LVU15
  60               		.loc 2 374 3 view .LVU16
 375:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:../../../os/rt/include/chsys.h ****               "priority order violation");
 377:../../../os/rt/include/chsys.h **** 
 378:../../../os/rt/include/chsys.h ****   port_unlock();
  61               		.loc 2 378 3 view .LVU17
  62               	.LBB66:
  63               	.LBI66:
 438:../../../os/common/ports/AVR/chcore.h **** }
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h **** /**
 441:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 442:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 443:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 444:../../../os/common/ports/AVR/chcore.h ****  */
 445:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
  64               		.loc 3 445 20 view .LVU18
  65               	.LBB67:
 446:../../../os/common/ports/AVR/chcore.h **** 
 447:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  66               		.loc 3 447 3 view .LVU19
  67               	/* #APP */
  68               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
  69 000a 7894      		sei
  70               	 ;  0 "" 2
  71               	/* #NOAPP */
  72               	.LBE67:
  73               	.LBE66:
  74               	.LBE65:
  75               	.LBE64:
 143:../../../os/rt/src/chregistry.c **** 
 144:../../../os/rt/src/chregistry.c ****   return tp;
  76               		.loc 1 144 3 view .LVU20
  77               	/* epilogue start */
 145:../../../os/rt/src/chregistry.c **** }
  78               		.loc 1 145 1 is_stmt 0 view .LVU21
  79 000c 0895      		ret
  80               		.cfi_endproc
  81               	.LFE141:
  83               		.section	.text.chRegNextThread,"ax",@progbits
  84               	.global	chRegNextThread
  86               	chRegNextThread:
  87               	.LVL1:
  88               	.LFB142:
 146:../../../os/rt/src/chregistry.c **** 
 147:../../../os/rt/src/chregistry.c **** /**
 148:../../../os/rt/src/chregistry.c ****  * @brief   Returns the thread next to the specified one.
 149:../../../os/rt/src/chregistry.c ****  * @details The reference counter of the specified thread is decremented and
 150:../../../os/rt/src/chregistry.c ****  *          the reference counter of the returned thread is incremented.
 151:../../../os/rt/src/chregistry.c ****  *
 152:../../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 153:../../../os/rt/src/chregistry.c ****  * @return              A reference to the next thread.
 154:../../../os/rt/src/chregistry.c ****  * @retval NULL         if there is no next thread.
 155:../../../os/rt/src/chregistry.c ****  *
 156:../../../os/rt/src/chregistry.c ****  * @api
 157:../../../os/rt/src/chregistry.c ****  */
 158:../../../os/rt/src/chregistry.c **** thread_t *chRegNextThread(thread_t *tp) {
  89               		.loc 1 158 41 is_stmt 1 view -0
  90               		.cfi_startproc
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 0 */
  94               	.L__stack_usage = 0
 159:../../../os/rt/src/chregistry.c ****   thread_t *ntp;
  95               		.loc 1 159 3 view .LVU23
 160:../../../os/rt/src/chregistry.c **** 
 161:../../../os/rt/src/chregistry.c ****   chSysLock();
  96               		.loc 1 161 3 view .LVU24
  97               	.LBB68:
  98               	.LBI68:
 353:../../../os/rt/include/chsys.h **** 
  99               		.loc 2 353 20 view .LVU25
 100               	.LBE68:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 101               		.loc 2 355 3 view .LVU26
 102               	.LBB71:
 103               	.LBB69:
 104               	.LBI69:
 435:../../../os/common/ports/AVR/chcore.h **** 
 105               		.loc 3 435 20 view .LVU27
 106               	.LBB70:
 437:../../../os/common/ports/AVR/chcore.h **** }
 107               		.loc 3 437 3 view .LVU28
 108               	/* #APP */
 109               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 110 0000 F894      		cli
 111               	 ;  0 "" 2
 112               	/* #NOAPP */
 113               	.LBE70:
 114               	.LBE69:
 115               	.LBE71:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 116               		.loc 2 356 34 view .LVU29
 357:../../../os/rt/include/chsys.h **** }
 117               		.loc 2 357 20 view .LVU30
 162:../../../os/rt/src/chregistry.c ****   ntp = tp->newer;
 118               		.loc 1 162 3 view .LVU31
 119               		.loc 1 162 7 is_stmt 0 view .LVU32
 120 0002 FC01      		movw r30,r24
 121 0004 8781      		ldd r24,Z+7
 122 0006 9085      		ldd r25,Z+8
 123               	.LVL2:
 163:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 164:../../../os/rt/src/chregistry.c ****   if (ntp == (thread_t *)&ch.rlist) {
 124               		.loc 1 164 3 is_stmt 1 view .LVU33
 125               		.loc 1 164 6 is_stmt 0 view .LVU34
 126 0008 F0E0      		ldi r31,hi8(ch)
 127 000a 8030      		cpi r24,lo8(ch)
 128 000c 9F07      		cpc r25,r31
 129 000e 01F0      		breq .L5
 165:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 166:../../../os/rt/src/chregistry.c ****     ntp = NULL;
 167:../../../os/rt/src/chregistry.c ****   }
 168:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 169:../../../os/rt/src/chregistry.c ****   else {
 170:../../../os/rt/src/chregistry.c ****     chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 171:../../../os/rt/src/chregistry.c ****     ntp->refs++;
 172:../../../os/rt/src/chregistry.c ****   }
 173:../../../os/rt/src/chregistry.c **** #endif
 174:../../../os/rt/src/chregistry.c ****   chSysUnlock();
 130               		.loc 1 174 3 is_stmt 1 view .LVU35
 131               	.LBB72:
 132               	.LBI72:
 365:../../../os/rt/include/chsys.h **** 
 133               		.loc 2 365 20 view .LVU36
 134               	.LBB73:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 135               		.loc 2 367 22 view .LVU37
 368:../../../os/rt/include/chsys.h **** 
 136               		.loc 2 368 33 view .LVU38
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 137               		.loc 2 374 3 view .LVU39
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 138               		.loc 2 374 3 view .LVU40
 139               		.loc 2 378 3 view .LVU41
 140               	.LBB74:
 141               	.LBI74:
 445:../../../os/common/ports/AVR/chcore.h **** 
 142               		.loc 3 445 20 view .LVU42
 143               	.LBB75:
 144               		.loc 3 447 3 view .LVU43
 145               	/* #APP */
 146               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 147 0010 7894      		sei
 148               	 ;  0 "" 2
 149               	/* #NOAPP */
 150               	.LBE75:
 151               	.LBE74:
 152               	.LBE73:
 153               	.LBE72:
 175:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 176:../../../os/rt/src/chregistry.c ****   chThdRelease(tp);
 177:../../../os/rt/src/chregistry.c **** #endif
 178:../../../os/rt/src/chregistry.c **** 
 179:../../../os/rt/src/chregistry.c ****   return ntp;
 154               		.loc 1 179 3 view .LVU44
 155               	/* epilogue start */
 180:../../../os/rt/src/chregistry.c **** }
 156               		.loc 1 180 1 is_stmt 0 view .LVU45
 157 0012 0895      		ret
 158               	.L5:
 166:../../../os/rt/src/chregistry.c ****   }
 159               		.loc 1 166 9 view .LVU46
 160 0014 90E0      		ldi r25,0
 161 0016 80E0      		ldi r24,0
 162               	.LVL3:
 174:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 163               		.loc 1 174 3 is_stmt 1 view .LVU47
 164               	.LBB79:
 365:../../../os/rt/include/chsys.h **** 
 165               		.loc 2 365 20 view .LVU48
 166               	.LBB78:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 167               		.loc 2 367 22 view .LVU49
 368:../../../os/rt/include/chsys.h **** 
 168               		.loc 2 368 33 view .LVU50
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 169               		.loc 2 374 3 view .LVU51
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 170               		.loc 2 374 3 view .LVU52
 171               		.loc 2 378 3 view .LVU53
 172               	.LBB77:
 445:../../../os/common/ports/AVR/chcore.h **** 
 173               		.loc 3 445 20 view .LVU54
 174               	.LBB76:
 175               		.loc 3 447 3 view .LVU55
 176               	/* #APP */
 177               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 178 0018 7894      		sei
 179               	 ;  0 "" 2
 180               	/* #NOAPP */
 181               	.LBE76:
 182               	.LBE77:
 183               	.LBE78:
 184               	.LBE79:
 179:../../../os/rt/src/chregistry.c **** }
 185               		.loc 1 179 3 view .LVU56
 186               	/* epilogue start */
 187               		.loc 1 180 1 is_stmt 0 view .LVU57
 188 001a 0895      		ret
 189               		.cfi_endproc
 190               	.LFE142:
 192               		.section	.text.chRegFindThreadByName,"ax",@progbits
 193               	.global	chRegFindThreadByName
 195               	chRegFindThreadByName:
 196               	.LVL4:
 197               	.LFB143:
 181:../../../os/rt/src/chregistry.c **** 
 182:../../../os/rt/src/chregistry.c **** /**
 183:../../../os/rt/src/chregistry.c ****  * @brief   Retrieves a thread pointer by name.
 184:../../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 185:../../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 186:../../../os/rt/src/chregistry.c ****  *          returned.
 187:../../../os/rt/src/chregistry.c ****  *
 188:../../../os/rt/src/chregistry.c ****  * @param[in] name      the thread name
 189:../../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 190:../../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 191:../../../os/rt/src/chregistry.c ****  *
 192:../../../os/rt/src/chregistry.c ****  * @api
 193:../../../os/rt/src/chregistry.c ****  */
 194:../../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByName(const char *name) {
 198               		.loc 1 194 51 is_stmt 1 view -0
 199               		.cfi_startproc
 200               		.loc 1 194 51 is_stmt 0 view .LVU59
 201 0000 0F93      		push r16
 202               	.LCFI0:
 203               		.cfi_def_cfa_offset 3
 204               		.cfi_offset 16, -2
 205 0002 1F93      		push r17
 206               	.LCFI1:
 207               		.cfi_def_cfa_offset 4
 208               		.cfi_offset 17, -3
 209 0004 CF93      		push r28
 210               	.LCFI2:
 211               		.cfi_def_cfa_offset 5
 212               		.cfi_offset 28, -4
 213 0006 DF93      		push r29
 214               	.LCFI3:
 215               		.cfi_def_cfa_offset 6
 216               		.cfi_offset 29, -5
 217               	/* prologue: function */
 218               	/* frame size = 0 */
 219               	/* stack size = 4 */
 220               	.L__stack_usage = 4
 221 0008 8C01      		movw r16,r24
 195:../../../os/rt/src/chregistry.c ****   thread_t *ctp;
 222               		.loc 1 195 3 is_stmt 1 view .LVU60
 196:../../../os/rt/src/chregistry.c **** 
 197:../../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 198:../../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 223               		.loc 1 198 3 view .LVU61
 224               	.LBB80:
 225               	.LBI80:
 134:../../../os/rt/src/chregistry.c ****   thread_t *tp;
 226               		.loc 1 134 11 view .LVU62
 227               	.LBB81:
 135:../../../os/rt/src/chregistry.c **** 
 228               		.loc 1 135 3 view .LVU63
 137:../../../os/rt/src/chregistry.c ****   tp = ch.rlist.newer;
 229               		.loc 1 137 3 view .LVU64
 230               	.LBB82:
 231               	.LBI82:
 353:../../../os/rt/include/chsys.h **** 
 232               		.loc 2 353 20 view .LVU65
 233               	.LBE82:
 234               	.LBE81:
 235               	.LBE80:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 236               		.loc 2 355 3 view .LVU66
 237               	.LBB92:
 238               	.LBB90:
 239               	.LBB85:
 240               	.LBB83:
 241               	.LBI83:
 435:../../../os/common/ports/AVR/chcore.h **** 
 242               		.loc 3 435 20 view .LVU67
 243               	.LBB84:
 437:../../../os/common/ports/AVR/chcore.h **** }
 244               		.loc 3 437 3 view .LVU68
 245               	/* #APP */
 246               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 247 000a F894      		cli
 248               	 ;  0 "" 2
 249               	/* #NOAPP */
 250               	.LBE84:
 251               	.LBE83:
 252               	.LBE85:
 253               	.LBE90:
 254               	.LBE92:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 255               		.loc 2 356 34 view .LVU69
 357:../../../os/rt/include/chsys.h **** }
 256               		.loc 2 357 20 view .LVU70
 257               	.LBB93:
 258               	.LBB91:
 138:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 259               		.loc 1 138 3 view .LVU71
 138:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 260               		.loc 1 138 6 is_stmt 0 view .LVU72
 261 000c C091 0000 		lds r28,ch+7
 262 0010 D091 0000 		lds r29,ch+7+1
 263               	.LVL5:
 142:../../../os/rt/src/chregistry.c **** 
 264               		.loc 1 142 3 is_stmt 1 view .LVU73
 265               	.LBB86:
 266               	.LBI86:
 365:../../../os/rt/include/chsys.h **** 
 267               		.loc 2 365 20 view .LVU74
 268               	.LBB87:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 269               		.loc 2 367 22 view .LVU75
 368:../../../os/rt/include/chsys.h **** 
 270               		.loc 2 368 33 view .LVU76
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 271               		.loc 2 374 3 view .LVU77
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 272               		.loc 2 374 3 view .LVU78
 273               		.loc 2 378 3 view .LVU79
 274               	.LBB88:
 275               	.LBI88:
 445:../../../os/common/ports/AVR/chcore.h **** 
 276               		.loc 3 445 20 view .LVU80
 277               	.LBB89:
 278               		.loc 3 447 3 view .LVU81
 279               	/* #APP */
 280               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 281 0014 7894      		sei
 282               	 ;  0 "" 2
 283               	/* #NOAPP */
 284               	.LBE89:
 285               	.LBE88:
 286               	.LBE87:
 287               	.LBE86:
 144:../../../os/rt/src/chregistry.c **** }
 288               		.loc 1 144 3 view .LVU82
 289               	.LVL6:
 290               	.L9:
 144:../../../os/rt/src/chregistry.c **** }
 291               		.loc 1 144 3 is_stmt 0 view .LVU83
 292               	.LBE91:
 293               	.LBE93:
 199:../../../os/rt/src/chregistry.c ****   do {
 294               		.loc 1 199 3 is_stmt 1 view .LVU84
 200:../../../os/rt/src/chregistry.c ****     if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 295               		.loc 1 200 5 view .LVU85
 296               		.file 4 "../../../os/rt/include/chregistry.h"
   1:../../../os/rt/include/chregistry.h **** /*
   2:../../../os/rt/include/chregistry.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/include/chregistry.h **** 
   4:../../../os/rt/include/chregistry.h ****     This file is part of ChibiOS.
   5:../../../os/rt/include/chregistry.h **** 
   6:../../../os/rt/include/chregistry.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/include/chregistry.h ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/include/chregistry.h ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/include/chregistry.h ****     (at your option) any later version.
  10:../../../os/rt/include/chregistry.h **** 
  11:../../../os/rt/include/chregistry.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chregistry.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chregistry.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chregistry.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chregistry.h **** 
  16:../../../os/rt/include/chregistry.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chregistry.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chregistry.h **** */
  19:../../../os/rt/include/chregistry.h **** 
  20:../../../os/rt/include/chregistry.h **** /**
  21:../../../os/rt/include/chregistry.h ****  * @file    chregistry.h
  22:../../../os/rt/include/chregistry.h ****  * @brief   Threads registry macros and structures.
  23:../../../os/rt/include/chregistry.h ****  *
  24:../../../os/rt/include/chregistry.h ****  * @addtogroup registry
  25:../../../os/rt/include/chregistry.h ****  * @{
  26:../../../os/rt/include/chregistry.h ****  */
  27:../../../os/rt/include/chregistry.h **** 
  28:../../../os/rt/include/chregistry.h **** #ifndef CHREGISTRY_H
  29:../../../os/rt/include/chregistry.h **** #define CHREGISTRY_H
  30:../../../os/rt/include/chregistry.h **** 
  31:../../../os/rt/include/chregistry.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chregistry.h **** 
  33:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  34:../../../os/rt/include/chregistry.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  36:../../../os/rt/include/chregistry.h **** 
  37:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  38:../../../os/rt/include/chregistry.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  40:../../../os/rt/include/chregistry.h **** 
  41:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  42:../../../os/rt/include/chregistry.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  44:../../../os/rt/include/chregistry.h **** 
  45:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  46:../../../os/rt/include/chregistry.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  48:../../../os/rt/include/chregistry.h **** 
  49:../../../os/rt/include/chregistry.h **** /**
  50:../../../os/rt/include/chregistry.h ****  * @brief   ChibiOS/RT memory signature record.
  51:../../../os/rt/include/chregistry.h ****  */
  52:../../../os/rt/include/chregistry.h **** typedef struct {
  53:../../../os/rt/include/chregistry.h ****   char      identifier[4];          /**< @brief Always set to "main".       */
  54:../../../os/rt/include/chregistry.h ****   uint8_t   zero;                   /**< @brief Must be zero.               */
  55:../../../os/rt/include/chregistry.h ****   uint8_t   size;                   /**< @brief Size of this structure.     */
  56:../../../os/rt/include/chregistry.h ****   uint16_t  version;                /**< @brief Encoded ChibiOS/RT version. */
  57:../../../os/rt/include/chregistry.h ****   uint8_t   ptrsize;                /**< @brief Size of a pointer.          */
  58:../../../os/rt/include/chregistry.h ****   uint8_t   timesize;               /**< @brief Size of a @p systime_t.     */
  59:../../../os/rt/include/chregistry.h ****   uint8_t   threadsize;             /**< @brief Size of a @p thread_t.      */
  60:../../../os/rt/include/chregistry.h ****   uint8_t   off_prio;               /**< @brief Offset of @p prio field.    */
  61:../../../os/rt/include/chregistry.h ****   uint8_t   off_ctx;                /**< @brief Offset of @p ctx field.     */
  62:../../../os/rt/include/chregistry.h ****   uint8_t   off_newer;              /**< @brief Offset of @p newer field.   */
  63:../../../os/rt/include/chregistry.h ****   uint8_t   off_older;              /**< @brief Offset of @p older field.   */
  64:../../../os/rt/include/chregistry.h ****   uint8_t   off_name;               /**< @brief Offset of @p name field.    */
  65:../../../os/rt/include/chregistry.h ****   uint8_t   off_stklimit;           /**< @brief Offset of @p stklimit field.*/
  66:../../../os/rt/include/chregistry.h ****   uint8_t   off_state;              /**< @brief Offset of @p state field.   */
  67:../../../os/rt/include/chregistry.h ****   uint8_t   off_flags;              /**< @brief Offset of @p flags field.   */
  68:../../../os/rt/include/chregistry.h ****   uint8_t   off_refs;               /**< @brief Offset of @p refs field.    */
  69:../../../os/rt/include/chregistry.h ****   uint8_t   off_preempt;            /**< @brief Offset of @p preempt field. */
  70:../../../os/rt/include/chregistry.h ****   uint8_t   off_time;               /**< @brief Offset of @p time field.    */
  71:../../../os/rt/include/chregistry.h **** } chdebug_t;
  72:../../../os/rt/include/chregistry.h **** 
  73:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  74:../../../os/rt/include/chregistry.h **** /* Module macros.                                                            */
  75:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  76:../../../os/rt/include/chregistry.h **** 
  77:../../../os/rt/include/chregistry.h **** /**
  78:../../../os/rt/include/chregistry.h ****  * @brief   Removes a thread from the registry list.
  79:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  80:../../../os/rt/include/chregistry.h ****  *
  81:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to remove from the registry
  82:../../../os/rt/include/chregistry.h ****  */
  83:../../../os/rt/include/chregistry.h **** #define REG_REMOVE(tp) {                                                    \
  84:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp)->newer;                                         \
  85:../../../os/rt/include/chregistry.h ****   (tp)->newer->older = (tp)->older;                                         \
  86:../../../os/rt/include/chregistry.h **** }
  87:../../../os/rt/include/chregistry.h **** 
  88:../../../os/rt/include/chregistry.h **** /**
  89:../../../os/rt/include/chregistry.h ****  * @brief   Adds a thread to the registry list.
  90:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
  91:../../../os/rt/include/chregistry.h ****  *
  92:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to add to the registry
  93:../../../os/rt/include/chregistry.h ****  */
  94:../../../os/rt/include/chregistry.h **** #define REG_INSERT(tp) {                                                    \
  95:../../../os/rt/include/chregistry.h ****   (tp)->newer = (thread_t *)&ch.rlist;                                      \
  96:../../../os/rt/include/chregistry.h ****   (tp)->older = ch.rlist.older;                                           \
  97:../../../os/rt/include/chregistry.h ****   (tp)->older->newer = (tp);                                                \
  98:../../../os/rt/include/chregistry.h ****   ch.rlist.older = (tp);                                                  \
  99:../../../os/rt/include/chregistry.h **** }
 100:../../../os/rt/include/chregistry.h **** 
 101:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 102:../../../os/rt/include/chregistry.h **** /* External declarations.                                                    */
 103:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 104:../../../os/rt/include/chregistry.h **** 
 105:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 106:../../../os/rt/include/chregistry.h **** extern "C" {
 107:../../../os/rt/include/chregistry.h **** #endif
 108:../../../os/rt/include/chregistry.h ****   extern ROMCONST chdebug_t ch_debug;
 109:../../../os/rt/include/chregistry.h ****   thread_t *chRegFirstThread(void);
 110:../../../os/rt/include/chregistry.h ****   thread_t *chRegNextThread(thread_t *tp);
 111:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByName(const char *name);
 112:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByPointer(thread_t *tp);
 113:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa);
 114:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 115:../../../os/rt/include/chregistry.h **** }
 116:../../../os/rt/include/chregistry.h **** #endif
 117:../../../os/rt/include/chregistry.h **** 
 118:../../../os/rt/include/chregistry.h **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 119:../../../os/rt/include/chregistry.h **** 
 120:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 121:../../../os/rt/include/chregistry.h **** /* Module inline functions.                                                  */
 122:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 123:../../../os/rt/include/chregistry.h **** 
 124:../../../os/rt/include/chregistry.h **** /**
 125:../../../os/rt/include/chregistry.h ****  * @brief   Sets the current thread name.
 126:../../../os/rt/include/chregistry.h ****  * @pre     This function only stores the pointer to the name if the option
 127:../../../os/rt/include/chregistry.h ****  *          @p CH_CFG_USE_REGISTRY is enabled else no action is performed.
 128:../../../os/rt/include/chregistry.h ****  *
 129:../../../os/rt/include/chregistry.h ****  * @param[in] name      thread name as a zero terminated string
 130:../../../os/rt/include/chregistry.h ****  *
 131:../../../os/rt/include/chregistry.h ****  * @api
 132:../../../os/rt/include/chregistry.h ****  */
 133:../../../os/rt/include/chregistry.h **** static inline void chRegSetThreadName(const char *name) {
 134:../../../os/rt/include/chregistry.h **** 
 135:../../../os/rt/include/chregistry.h **** #if CH_CFG_USE_REGISTRY == TRUE
 136:../../../os/rt/include/chregistry.h ****   ch.rlist.current->name = name;
 137:../../../os/rt/include/chregistry.h **** #else
 138:../../../os/rt/include/chregistry.h ****   (void)name;
 139:../../../os/rt/include/chregistry.h **** #endif
 140:../../../os/rt/include/chregistry.h **** }
 141:../../../os/rt/include/chregistry.h **** 
 142:../../../os/rt/include/chregistry.h **** /**
 143:../../../os/rt/include/chregistry.h ****  * @brief   Returns the name of the specified thread.
 144:../../../os/rt/include/chregistry.h ****  * @pre     This function only returns the pointer to the name if the option
 145:../../../os/rt/include/chregistry.h ****  *          @p CH_CFG_USE_REGISTRY is enabled else @p NULL is returned.
 146:../../../os/rt/include/chregistry.h ****  *
 147:../../../os/rt/include/chregistry.h ****  * @param[in] tp        pointer to the thread
 148:../../../os/rt/include/chregistry.h ****  *
 149:../../../os/rt/include/chregistry.h ****  * @return              Thread name as a zero terminated string.
 150:../../../os/rt/include/chregistry.h ****  * @retval NULL         if the thread name has not been set.
 151:../../../os/rt/include/chregistry.h ****  *
 152:../../../os/rt/include/chregistry.h ****  */
 153:../../../os/rt/include/chregistry.h **** static inline const char *chRegGetThreadNameX(thread_t *tp) {
 154:../../../os/rt/include/chregistry.h **** 
 155:../../../os/rt/include/chregistry.h **** #if CH_CFG_USE_REGISTRY == TRUE
 156:../../../os/rt/include/chregistry.h ****   return tp->name;
 297               		.loc 4 156 3 view .LVU86
 298               		.loc 1 200 9 is_stmt 0 view .LVU87
 299 0016 B801      		movw r22,r16
 300 0018 8B85      		ldd r24,Y+11
 301 001a 9C85      		ldd r25,Y+12
 302 001c 0E94 0000 		call strcmp
 303               	.LVL7:
 304               		.loc 1 200 8 view .LVU88
 305 0020 892B      		or r24,r25
 306 0022 01F0      		breq .L6
 201:../../../os/rt/src/chregistry.c ****       return ctp;
 202:../../../os/rt/src/chregistry.c ****     }
 203:../../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 307               		.loc 1 203 5 is_stmt 1 view .LVU89
 308               	.LVL8:
 309               	.LBB94:
 310               	.LBI94:
 158:../../../os/rt/src/chregistry.c ****   thread_t *ntp;
 311               		.loc 1 158 11 view .LVU90
 312               	.LBB95:
 159:../../../os/rt/src/chregistry.c **** 
 313               		.loc 1 159 3 view .LVU91
 161:../../../os/rt/src/chregistry.c ****   ntp = tp->newer;
 314               		.loc 1 161 3 view .LVU92
 315               	.LBB96:
 316               	.LBI96:
 353:../../../os/rt/include/chsys.h **** 
 317               		.loc 2 353 20 view .LVU93
 318               	.LBE96:
 319               	.LBE95:
 320               	.LBE94:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 321               		.loc 2 355 3 view .LVU94
 322               	.LBB111:
 323               	.LBB108:
 324               	.LBB99:
 325               	.LBB97:
 326               	.LBI97:
 435:../../../os/common/ports/AVR/chcore.h **** 
 327               		.loc 3 435 20 view .LVU95
 328               	.LBB98:
 437:../../../os/common/ports/AVR/chcore.h **** }
 329               		.loc 3 437 3 view .LVU96
 330               	/* #APP */
 331               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 332 0024 F894      		cli
 333               	 ;  0 "" 2
 334               	/* #NOAPP */
 335               	.LBE98:
 336               	.LBE97:
 337               	.LBE99:
 338               	.LBE108:
 339               	.LBE111:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 340               		.loc 2 356 34 view .LVU97
 357:../../../os/rt/include/chsys.h **** }
 341               		.loc 2 357 20 view .LVU98
 342               	.LBB112:
 343               	.LBB109:
 162:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 344               		.loc 1 162 3 view .LVU99
 162:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 345               		.loc 1 162 7 is_stmt 0 view .LVU100
 346 0026 0F80      		ldd __tmp_reg__,Y+7
 347 0028 D885      		ldd r29,Y+8
 348 002a C02D      		mov r28,__tmp_reg__
 349               	.LVL9:
 164:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 350               		.loc 1 164 3 is_stmt 1 view .LVU101
 164:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 351               		.loc 1 164 6 is_stmt 0 view .LVU102
 352 002c 80E0      		ldi r24,hi8(ch)
 353 002e C030      		cpi r28,lo8(ch)
 354 0030 D807      		cpc r29,r24
 355 0032 01F0      		breq .L14
 174:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 356               		.loc 1 174 3 is_stmt 1 view .LVU103
 357               	.LBB100:
 358               	.LBI100:
 365:../../../os/rt/include/chsys.h **** 
 359               		.loc 2 365 20 view .LVU104
 360               	.LBB101:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 361               		.loc 2 367 22 view .LVU105
 368:../../../os/rt/include/chsys.h **** 
 362               		.loc 2 368 33 view .LVU106
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 363               		.loc 2 374 3 view .LVU107
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 364               		.loc 2 374 3 view .LVU108
 365               		.loc 2 378 3 view .LVU109
 366               	.LBB102:
 367               	.LBI102:
 445:../../../os/common/ports/AVR/chcore.h **** 
 368               		.loc 3 445 20 view .LVU110
 369               	.LBB103:
 370               		.loc 3 447 3 view .LVU111
 371               	/* #APP */
 372               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 373 0034 7894      		sei
 374               	 ;  0 "" 2
 375               	/* #NOAPP */
 376               	.LBE103:
 377               	.LBE102:
 378               	.LBE101:
 379               	.LBE100:
 179:../../../os/rt/src/chregistry.c **** }
 380               		.loc 1 179 3 view .LVU112
 381               	.LVL10:
 179:../../../os/rt/src/chregistry.c **** }
 382               		.loc 1 179 3 is_stmt 0 view .LVU113
 383               	.LBE109:
 384               	.LBE112:
 204:../../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 385               		.loc 1 204 3 view .LVU114
 386 0036 2097      		sbiw r28,0
 387 0038 01F4      		brne .L9
 388               	.L6:
 205:../../../os/rt/src/chregistry.c **** 
 206:../../../os/rt/src/chregistry.c ****   return NULL;
 207:../../../os/rt/src/chregistry.c **** }
 389               		.loc 1 207 1 view .LVU115
 390 003a CE01      		movw r24,r28
 391               	/* epilogue start */
 392 003c DF91      		pop r29
 393 003e CF91      		pop r28
 394               	.LVL11:
 395               		.loc 1 207 1 view .LVU116
 396 0040 1F91      		pop r17
 397 0042 0F91      		pop r16
 398               	.LVL12:
 399               		.loc 1 207 1 view .LVU117
 400 0044 0895      		ret
 401               	.LVL13:
 402               	.L14:
 403               	.LBB113:
 404               	.LBB110:
 166:../../../os/rt/src/chregistry.c ****   }
 405               		.loc 1 166 5 is_stmt 1 view .LVU118
 174:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 406               		.loc 1 174 3 view .LVU119
 407               	.LBB107:
 365:../../../os/rt/include/chsys.h **** 
 408               		.loc 2 365 20 view .LVU120
 409               	.LBB106:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 410               		.loc 2 367 22 view .LVU121
 368:../../../os/rt/include/chsys.h **** 
 411               		.loc 2 368 33 view .LVU122
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 412               		.loc 2 374 3 view .LVU123
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 413               		.loc 2 374 3 view .LVU124
 414               		.loc 2 378 3 view .LVU125
 415               	.LBB105:
 445:../../../os/common/ports/AVR/chcore.h **** 
 416               		.loc 3 445 20 view .LVU126
 417               	.LBB104:
 418               		.loc 3 447 3 view .LVU127
 419               	/* #APP */
 420               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 421 0046 7894      		sei
 422               	 ;  0 "" 2
 423               	/* #NOAPP */
 424               	.LBE104:
 425               	.LBE105:
 426               	.LBE106:
 427               	.LBE107:
 179:../../../os/rt/src/chregistry.c **** }
 428               		.loc 1 179 3 view .LVU128
 429               	.LVL14:
 179:../../../os/rt/src/chregistry.c **** }
 430               		.loc 1 179 3 is_stmt 0 view .LVU129
 431               	.LBE110:
 432               	.LBE113:
 206:../../../os/rt/src/chregistry.c **** }
 433               		.loc 1 206 10 view .LVU130
 434 0048 D0E0      		ldi r29,0
 435 004a C0E0      		ldi r28,0
 436               		.loc 1 207 1 view .LVU131
 437 004c CE01      		movw r24,r28
 438               	/* epilogue start */
 439 004e DF91      		pop r29
 440 0050 CF91      		pop r28
 441 0052 1F91      		pop r17
 442 0054 0F91      		pop r16
 443               	.LVL15:
 444               		.loc 1 207 1 view .LVU132
 445 0056 0895      		ret
 446               		.cfi_endproc
 447               	.LFE143:
 449               		.section	.text.chRegFindThreadByPointer,"ax",@progbits
 450               	.global	chRegFindThreadByPointer
 452               	chRegFindThreadByPointer:
 453               	.LVL16:
 454               	.LFB144:
 208:../../../os/rt/src/chregistry.c **** 
 209:../../../os/rt/src/chregistry.c **** /**
 210:../../../os/rt/src/chregistry.c ****  * @brief   Confirms that a pointer is a valid thread pointer.
 211:../../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 212:../../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 213:../../../os/rt/src/chregistry.c ****  *          returned.
 214:../../../os/rt/src/chregistry.c ****  *
 215:../../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 216:../../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 217:../../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 218:../../../os/rt/src/chregistry.c ****  *
 219:../../../os/rt/src/chregistry.c ****  * @api
 220:../../../os/rt/src/chregistry.c ****  */
 221:../../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByPointer(thread_t *tp) {
 455               		.loc 1 221 50 is_stmt 1 view -0
 456               		.cfi_startproc
 457               	/* prologue: function */
 458               	/* frame size = 0 */
 459               	/* stack size = 0 */
 460               	.L__stack_usage = 0
 222:../../../os/rt/src/chregistry.c ****   thread_t *ctp;
 461               		.loc 1 222 3 view .LVU134
 223:../../../os/rt/src/chregistry.c **** 
 224:../../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 225:../../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 462               		.loc 1 225 3 view .LVU135
 463               	.LBB114:
 464               	.LBI114:
 134:../../../os/rt/src/chregistry.c ****   thread_t *tp;
 465               		.loc 1 134 11 view .LVU136
 466               	.LBB115:
 135:../../../os/rt/src/chregistry.c **** 
 467               		.loc 1 135 3 view .LVU137
 137:../../../os/rt/src/chregistry.c ****   tp = ch.rlist.newer;
 468               		.loc 1 137 3 view .LVU138
 469               	.LBB116:
 470               	.LBI116:
 353:../../../os/rt/include/chsys.h **** 
 471               		.loc 2 353 20 view .LVU139
 472               	.LBE116:
 473               	.LBE115:
 474               	.LBE114:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 475               		.loc 2 355 3 view .LVU140
 476               	.LBB126:
 477               	.LBB124:
 478               	.LBB119:
 479               	.LBB117:
 480               	.LBI117:
 435:../../../os/common/ports/AVR/chcore.h **** 
 481               		.loc 3 435 20 view .LVU141
 482               	.LBB118:
 437:../../../os/common/ports/AVR/chcore.h **** }
 483               		.loc 3 437 3 view .LVU142
 484               	/* #APP */
 485               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 486 0000 F894      		cli
 487               	 ;  0 "" 2
 488               	/* #NOAPP */
 489               	.LBE118:
 490               	.LBE117:
 491               	.LBE119:
 492               	.LBE124:
 493               	.LBE126:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 494               		.loc 2 356 34 view .LVU143
 357:../../../os/rt/include/chsys.h **** }
 495               		.loc 2 357 20 view .LVU144
 496               	.LBB127:
 497               	.LBB125:
 138:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 498               		.loc 1 138 3 view .LVU145
 138:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 499               		.loc 1 138 6 is_stmt 0 view .LVU146
 500 0002 E091 0000 		lds r30,ch+7
 501 0006 F091 0000 		lds r31,ch+7+1
 502               	.LVL17:
 142:../../../os/rt/src/chregistry.c **** 
 503               		.loc 1 142 3 is_stmt 1 view .LVU147
 504               	.LBB120:
 505               	.LBI120:
 365:../../../os/rt/include/chsys.h **** 
 506               		.loc 2 365 20 view .LVU148
 507               	.LBB121:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 508               		.loc 2 367 22 view .LVU149
 368:../../../os/rt/include/chsys.h **** 
 509               		.loc 2 368 33 view .LVU150
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 510               		.loc 2 374 3 view .LVU151
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 511               		.loc 2 374 3 view .LVU152
 512               		.loc 2 378 3 view .LVU153
 513               	.LBB122:
 514               	.LBI122:
 445:../../../os/common/ports/AVR/chcore.h **** 
 515               		.loc 3 445 20 view .LVU154
 516               	.LBB123:
 517               		.loc 3 447 3 view .LVU155
 518               	/* #APP */
 519               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 520 000a 7894      		sei
 521               	 ;  0 "" 2
 522               	.LVL18:
 523               	/* #NOAPP */
 524               	.L30:
 525               		.loc 3 447 3 is_stmt 0 view .LVU156
 526               	.LBE123:
 527               	.LBE122:
 528               	.LBE121:
 529               	.LBE120:
 144:../../../os/rt/src/chregistry.c **** }
 530               		.loc 1 144 3 is_stmt 1 view .LVU157
 144:../../../os/rt/src/chregistry.c **** }
 531               		.loc 1 144 3 is_stmt 0 view .LVU158
 532               	.LBE125:
 533               	.LBE127:
 226:../../../os/rt/src/chregistry.c ****   do {
 534               		.loc 1 226 3 is_stmt 1 view .LVU159
 227:../../../os/rt/src/chregistry.c ****     if (ctp == tp) {
 535               		.loc 1 227 5 view .LVU160
 536               		.loc 1 227 8 is_stmt 0 view .LVU161
 537 000c 8E17      		cp r24,r30
 538 000e 9F07      		cpc r25,r31
 539 0010 01F0      		breq .L15
 228:../../../os/rt/src/chregistry.c ****       return ctp;
 229:../../../os/rt/src/chregistry.c ****     }
 230:../../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 540               		.loc 1 230 5 is_stmt 1 view .LVU162
 541               	.LVL19:
 542               	.LBB128:
 543               	.LBI128:
 158:../../../os/rt/src/chregistry.c ****   thread_t *ntp;
 544               		.loc 1 158 11 view .LVU163
 545               	.LBB129:
 159:../../../os/rt/src/chregistry.c **** 
 546               		.loc 1 159 3 view .LVU164
 161:../../../os/rt/src/chregistry.c ****   ntp = tp->newer;
 547               		.loc 1 161 3 view .LVU165
 548               	.LBB130:
 549               	.LBI130:
 353:../../../os/rt/include/chsys.h **** 
 550               		.loc 2 353 20 view .LVU166
 551               	.LBE130:
 552               	.LBE129:
 553               	.LBE128:
 355:../../../os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 554               		.loc 2 355 3 view .LVU167
 555               	.LBB145:
 556               	.LBB142:
 557               	.LBB133:
 558               	.LBB131:
 559               	.LBI131:
 435:../../../os/common/ports/AVR/chcore.h **** 
 560               		.loc 3 435 20 view .LVU168
 561               	.LBB132:
 437:../../../os/common/ports/AVR/chcore.h **** }
 562               		.loc 3 437 3 view .LVU169
 563               	/* #APP */
 564               	 ;  437 "../../../os/common/ports/AVR/chcore.h" 1
 565 0012 F894      		cli
 566               	 ;  0 "" 2
 567               	/* #NOAPP */
 568               	.LBE132:
 569               	.LBE131:
 570               	.LBE133:
 571               	.LBE142:
 572               	.LBE145:
 356:../../../os/rt/include/chsys.h ****   _dbg_check_lock();
 573               		.loc 2 356 34 view .LVU170
 357:../../../os/rt/include/chsys.h **** }
 574               		.loc 2 357 20 view .LVU171
 575               	.LBB146:
 576               	.LBB143:
 162:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 577               		.loc 1 162 3 view .LVU172
 162:../../../os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 578               		.loc 1 162 7 is_stmt 0 view .LVU173
 579 0014 0780      		ldd __tmp_reg__,Z+7
 580 0016 F085      		ldd r31,Z+8
 581 0018 E02D      		mov r30,__tmp_reg__
 582               	.LVL20:
 164:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 583               		.loc 1 164 3 is_stmt 1 view .LVU174
 164:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 584               		.loc 1 164 6 is_stmt 0 view .LVU175
 585 001a 20E0      		ldi r18,hi8(ch)
 586 001c E030      		cpi r30,lo8(ch)
 587 001e F207      		cpc r31,r18
 588 0020 01F0      		breq .L31
 174:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 589               		.loc 1 174 3 is_stmt 1 view .LVU176
 590               	.LBB134:
 591               	.LBI134:
 365:../../../os/rt/include/chsys.h **** 
 592               		.loc 2 365 20 view .LVU177
 593               	.LBB135:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 594               		.loc 2 367 22 view .LVU178
 368:../../../os/rt/include/chsys.h **** 
 595               		.loc 2 368 33 view .LVU179
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 596               		.loc 2 374 3 view .LVU180
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 597               		.loc 2 374 3 view .LVU181
 598               		.loc 2 378 3 view .LVU182
 599               	.LBB136:
 600               	.LBI136:
 445:../../../os/common/ports/AVR/chcore.h **** 
 601               		.loc 3 445 20 view .LVU183
 602               	.LBB137:
 603               		.loc 3 447 3 view .LVU184
 604               	/* #APP */
 605               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 606 0022 7894      		sei
 607               	 ;  0 "" 2
 608               	/* #NOAPP */
 609               	.LBE137:
 610               	.LBE136:
 611               	.LBE135:
 612               	.LBE134:
 179:../../../os/rt/src/chregistry.c **** }
 613               		.loc 1 179 3 view .LVU185
 614               	.LVL21:
 179:../../../os/rt/src/chregistry.c **** }
 615               		.loc 1 179 3 is_stmt 0 view .LVU186
 616               	.LBE143:
 617               	.LBE146:
 231:../../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 618               		.loc 1 231 3 view .LVU187
 619 0024 3097      		sbiw r30,0
 620 0026 01F4      		brne .L30
 232:../../../os/rt/src/chregistry.c **** 
 233:../../../os/rt/src/chregistry.c ****   return NULL;
 621               		.loc 1 233 10 view .LVU188
 622 0028 F0E0      		ldi r31,0
 623 002a E0E0      		ldi r30,0
 624               	.LVL22:
 625               	.L15:
 234:../../../os/rt/src/chregistry.c **** }
 626               		.loc 1 234 1 view .LVU189
 627 002c CF01      		movw r24,r30
 628               	.LVL23:
 629               	/* epilogue start */
 630               		.loc 1 234 1 view .LVU190
 631 002e 0895      		ret
 632               	.LVL24:
 633               	.L31:
 634               	.LBB147:
 635               	.LBB144:
 166:../../../os/rt/src/chregistry.c ****   }
 636               		.loc 1 166 5 is_stmt 1 view .LVU191
 174:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 637               		.loc 1 174 3 view .LVU192
 638               	.LBB141:
 365:../../../os/rt/include/chsys.h **** 
 639               		.loc 2 365 20 view .LVU193
 640               	.LBB140:
 367:../../../os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 641               		.loc 2 367 22 view .LVU194
 368:../../../os/rt/include/chsys.h **** 
 642               		.loc 2 368 33 view .LVU195
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 643               		.loc 2 374 3 view .LVU196
 374:../../../os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 644               		.loc 2 374 3 view .LVU197
 645               		.loc 2 378 3 view .LVU198
 646               	.LBB139:
 445:../../../os/common/ports/AVR/chcore.h **** 
 647               		.loc 3 445 20 view .LVU199
 648               	.LBB138:
 649               		.loc 3 447 3 view .LVU200
 650               	/* #APP */
 651               	 ;  447 "../../../os/common/ports/AVR/chcore.h" 1
 652 0030 7894      		sei
 653               	 ;  0 "" 2
 654               	/* #NOAPP */
 655               	.LBE138:
 656               	.LBE139:
 657               	.LBE140:
 658               	.LBE141:
 179:../../../os/rt/src/chregistry.c **** }
 659               		.loc 1 179 3 view .LVU201
 660               	.LVL25:
 179:../../../os/rt/src/chregistry.c **** }
 661               		.loc 1 179 3 is_stmt 0 view .LVU202
 662               	.LBE144:
 663               	.LBE147:
 233:../../../os/rt/src/chregistry.c **** }
 664               		.loc 1 233 10 view .LVU203
 665 0032 F0E0      		ldi r31,0
 666 0034 E0E0      		ldi r30,0
 667               		.loc 1 234 1 view .LVU204
 668 0036 CF01      		movw r24,r30
 669               	.LVL26:
 670               	/* epilogue start */
 671               		.loc 1 234 1 view .LVU205
 672 0038 0895      		ret
 673               		.cfi_endproc
 674               	.LFE144:
 676               	.global	ch_debug
 677               		.section	.rodata.ch_debug,"a"
 680               	ch_debug:
 681 0000 6D        		.byte	109
 682 0001 61        		.byte	97
 683 0002 69        		.byte	105
 684 0003 6E        		.byte	110
 685 0004 00        		.byte	0
 686 0005 16        		.byte	22
 687 0006 0028      		.word	10240
 688 0008 02        		.byte	2
 689 0009 02        		.byte	2
 690 000a 1C        		.byte	28
 691 000b 04        		.byte	4
 692 000c 05        		.byte	5
 693 000d 07        		.byte	7
 694 000e 09        		.byte	9
 695 000f 0B        		.byte	11
 696 0010 00        		.byte	0
 697 0011 0D        		.byte	13
 698 0012 0E        		.byte	14
 699 0013 00        		.byte	0
 700 0014 00        		.byte	0
 701 0015 00        		.byte	0
 702               		.text
 703               	.Letext0:
 704               		.file 5 "/usr/local/Cellar/avr-gcc/8.2.0/lib/avr-gcc/8/gcc/avr/8.2.0/include/stddef.h"
 705               		.file 6 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 706               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 707               		.file 8 "../../../os/rt/include/chsystypes.h"
 708               		.file 9 "../../../os/rt/include/chschd.h"
 709               		.file 10 "../../../os/rt/include/chtime.h"
 710               		.file 11 "../../../os/rt/include/chsem.h"
 711               		.file 12 "../../../os/rt/include/chmtx.h"
 712               		.file 13 "../../../os/common/oslib/include/chmemcore.h"
 713               		.file 14 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chregistry.c
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:13     .text.chRegFirstThread:0000000000000000 chRegFirstThread
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:86     .text.chRegNextThread:0000000000000000 chRegNextThread
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:195    .text.chRegFindThreadByName:0000000000000000 chRegFindThreadByName
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:452    .text.chRegFindThreadByPointer:0000000000000000 chRegFindThreadByPointer
/var/folders/sg/tltzpcsx3k34y_dkw5w40_s40000gn/T//cca9KuWp.s:680    .rodata.ch_debug:0000000000000000 ch_debug

UNDEFINED SYMBOLS
ch
strcmp
__do_copy_data
