
build/ch.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         0000008c  00800100  00002b50  00002be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  0080018c  0080018c  00002c70  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000778  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013c94  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000433e  00000000  00000000  000170d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000059f6  00000000  00000000  0001b40e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001538  00000000  00000000  00020e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc7  00000000  00000000  0002233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d82  00000000  00000000  00024003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000978  00000000  00000000  0002bd85  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
       0:	ae c0       	rjmp	.+348    	; 0x15e <__ctors_end>
       2:	00 00       	nop
       4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c0       	rjmp	.+366    	; 0x198 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_11>
      30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
      36:	00 00       	nop
      38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_18>
      4c:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_19>
      50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_21>
      58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
      66:	00 00       	nop
      68:	95 0e       	add	r9, r21
      6a:	3a 0d       	add	r19, r10
      6c:	3a 0d       	add	r19, r10
      6e:	3a 0d       	add	r19, r10
      70:	3a 0d       	add	r19, r10
      72:	95 0e       	add	r9, r21
      74:	3a 0d       	add	r19, r10
      76:	3a 0d       	add	r19, r10
      78:	3a 0d       	add	r19, r10
      7a:	3a 0d       	add	r19, r10
      7c:	3a 0d       	add	r19, r10
      7e:	51 0e       	add	r5, r17
      80:	3a 0d       	add	r19, r10
      82:	3a 0d       	add	r19, r10
      84:	3a 0d       	add	r19, r10
      86:	3a 0d       	add	r19, r10
      88:	3a 0d       	add	r19, r10
      8a:	31 0e       	add	r3, r17
      8c:	3a 0d       	add	r19, r10
      8e:	3a 0d       	add	r19, r10
      90:	cd 0e       	add	r12, r29
      92:	3a 0d       	add	r19, r10
      94:	3a 0d       	add	r19, r10
      96:	3a 0d       	add	r19, r10
      98:	3a 0d       	add	r19, r10
      9a:	3a 0d       	add	r19, r10
      9c:	3a 0d       	add	r19, r10
      9e:	3a 0d       	add	r19, r10
      a0:	3a 0d       	add	r19, r10
      a2:	3a 0d       	add	r19, r10
      a4:	3a 0d       	add	r19, r10
      a6:	0e 0e       	add	r0, r30
      a8:	95 0e       	add	r9, r21
      aa:	3a 0d       	add	r19, r10
      ac:	75 0d       	add	r23, r5
      ae:	3a 0d       	add	r19, r10
      b0:	3a 0d       	add	r19, r10
      b2:	95 0e       	add	r9, r21
      b4:	3a 0d       	add	r19, r10
      b6:	3a 0d       	add	r19, r10
      b8:	3a 0d       	add	r19, r10
      ba:	3a 0d       	add	r19, r10
      bc:	3a 0d       	add	r19, r10
      be:	51 0e       	add	r5, r17
      c0:	3a 0d       	add	r19, r10
      c2:	3a 0d       	add	r19, r10
      c4:	3a 0d       	add	r19, r10
      c6:	42 0d       	add	r20, r2
      c8:	3a 0d       	add	r19, r10
      ca:	31 0e       	add	r3, r17
      cc:	3a 0d       	add	r19, r10
      ce:	3a 0d       	add	r19, r10
      d0:	cd 0e       	add	r12, r29
      d2:	5f 0e       	add	r5, r31
      d4:	a7 0c       	add	r10, r7
      d6:	a7 0c       	add	r10, r7
      d8:	a7 0c       	add	r10, r7
      da:	a7 0c       	add	r10, r7
      dc:	5f 0e       	add	r5, r31
      de:	a7 0c       	add	r10, r7
      e0:	a7 0c       	add	r10, r7
      e2:	a7 0c       	add	r10, r7
      e4:	a7 0c       	add	r10, r7
      e6:	a7 0c       	add	r10, r7
      e8:	52 0e       	add	r5, r18
      ea:	a7 0c       	add	r10, r7
      ec:	a7 0c       	add	r10, r7
      ee:	a7 0c       	add	r10, r7
      f0:	a7 0c       	add	r10, r7
      f2:	a7 0c       	add	r10, r7
      f4:	32 0e       	add	r3, r18
      f6:	a7 0c       	add	r10, r7
      f8:	a7 0c       	add	r10, r7
      fa:	b0 0e       	add	r11, r16
      fc:	a7 0c       	add	r10, r7
      fe:	a7 0c       	add	r10, r7
     100:	a7 0c       	add	r10, r7
     102:	a7 0c       	add	r10, r7
     104:	a7 0c       	add	r10, r7
     106:	a7 0c       	add	r10, r7
     108:	a7 0c       	add	r10, r7
     10a:	a7 0c       	add	r10, r7
     10c:	a7 0c       	add	r10, r7
     10e:	a7 0c       	add	r10, r7
     110:	0e 0e       	add	r0, r30
     112:	5f 0e       	add	r5, r31
     114:	a7 0c       	add	r10, r7
     116:	75 0d       	add	r23, r5
     118:	a7 0c       	add	r10, r7
     11a:	a7 0c       	add	r10, r7
     11c:	5f 0e       	add	r5, r31
     11e:	a7 0c       	add	r10, r7
     120:	a7 0c       	add	r10, r7
     122:	a7 0c       	add	r10, r7
     124:	a7 0c       	add	r10, r7
     126:	a7 0c       	add	r10, r7
     128:	52 0e       	add	r5, r18
     12a:	a7 0c       	add	r10, r7
     12c:	a7 0c       	add	r10, r7
     12e:	a7 0c       	add	r10, r7
     130:	42 0d       	add	r20, r2
     132:	a7 0c       	add	r10, r7
     134:	32 0e       	add	r3, r18
     136:	a7 0c       	add	r10, r7
     138:	a7 0c       	add	r10, r7
     13a:	b0 0e       	add	r11, r16

0000013c <__trampolines_end>:
     13c:	45 46       	sbci	r20, 0x65	; 101
     13e:	47 65       	ori	r20, 0x57	; 87
     140:	66 67       	ori	r22, 0x76	; 118
	...

00000143 <__c.2159>:
     143:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000153 <__c.2294>:
     153:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e0 e5       	ldi	r30, 0x50	; 80
     172:	fb e2       	ldi	r31, 0x2B	; 43
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	ac 38       	cpi	r26, 0x8C	; 140
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	23 e0       	ldi	r18, 0x03	; 3
     182:	ac e8       	ldi	r26, 0x8C	; 140
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	ab 39       	cpi	r26, 0x9B	; 155
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <main>
     194:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <_exit>

00000198 <__bad_interrupt>:
     198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     19a:	ff cf       	rjmp	.-2      	; 0x19a <_idle_thread>

0000019c <chSysInit>:
     19c:	ed d1       	rcall	.+986    	; 0x578 <_scheduler_init>
     19e:	8e d0       	rcall	.+284    	; 0x2bc <_vt_init>
     1a0:	98 d4       	rcall	.+2352   	; 0xad2 <_core_init>
     1a2:	ce d4       	rcall	.+2460   	; 0xb40 <_heap_init>
     1a4:	40 e8       	ldi	r20, 0x80	; 128
     1a6:	6d e1       	ldi	r22, 0x1D	; 29
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	8b e1       	ldi	r24, 0x1B	; 27
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	fb d2       	rcall	.+1526   	; 0x7a6 <_thread_init>
     1b0:	fc 01       	movw	r30, r24
     1b2:	90 93 10 03 	sts	0x0310, r25
     1b6:	80 93 0f 03 	sts	0x030F, r24
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	95 87       	std	Z+13, r25	; 0x0d
     1be:	90 93 3b 03 	sts	0x033B, r25
     1c2:	78 94       	sei
     1c4:	8b e0       	ldi	r24, 0x0B	; 11
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	71 c3       	rjmp	.+1762   	; 0x8ac <chThdCreate>

000001ca <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
     1da:	c0 91 11 03 	lds	r28, 0x0311
     1de:	d0 91 12 03 	lds	r29, 0x0312
     1e2:	4c 81       	ldd	r20, Y+4	; 0x04
     1e4:	5d 81       	ldd	r21, Y+5	; 0x05
     1e6:	01 e1       	ldi	r16, 0x11	; 17
     1e8:	13 e0       	ldi	r17, 0x03	; 3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
     1ea:	60 91 84 00 	lds	r22, 0x0084
     1ee:	70 91 85 00 	lds	r23, 0x0085
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
     1f2:	20 91 17 03 	lds	r18, 0x0317
     1f6:	30 91 18 03 	lds	r19, 0x0318
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
     1fa:	7b 01       	movw	r14, r22
     1fc:	e2 1a       	sub	r14, r18
     1fe:	f3 0a       	sbc	r15, r19

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
     200:	e4 16       	cp	r14, r20
     202:	f5 06       	cpc	r15, r21
     204:	90 f4       	brcc	.+36     	; 0x22a <chSysTimerHandlerI+0x60>
     206:	2c c0       	rjmp	.+88     	; 0x260 <chSysTimerHandlerI+0x96>
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
     208:	88 85       	ldd	r24, Y+8	; 0x08
     20a:	99 85       	ldd	r25, Y+9	; 0x09
     20c:	f6 01       	movw	r30, r12
     20e:	09 95       	icall
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
     210:	c0 91 11 03 	lds	r28, 0x0311
     214:	d0 91 12 03 	lds	r29, 0x0312
    }
    while (vtp->delta <= nowdelta);
     218:	4c 81       	ldd	r20, Y+4	; 0x04
     21a:	5d 81       	ldd	r21, Y+5	; 0x05
     21c:	e4 16       	cp	r14, r20
     21e:	f5 06       	cpc	r15, r21
     220:	20 f3       	brcs	.-56     	; 0x1ea <chSysTimerHandlerI+0x20>
     222:	20 91 17 03 	lds	r18, 0x0317
     226:	30 91 18 03 	lds	r19, 0x0318
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
     22a:	24 0f       	add	r18, r20
     22c:	35 1f       	adc	r19, r21
     22e:	30 93 18 03 	sts	0x0318, r19
     232:	20 93 17 03 	sts	0x0317, r18
      nowdelta -= vtp->delta;
     236:	e4 1a       	sub	r14, r20
     238:	f5 0a       	sbc	r15, r21

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     23a:	a8 81       	ld	r26, Y
     23c:	b9 81       	ldd	r27, Y+1	; 0x01
     23e:	13 96       	adiw	r26, 0x03	; 3
     240:	1c 93       	st	X, r17
     242:	0e 93       	st	-X, r16
     244:	12 97       	sbiw	r26, 0x02	; 2
      ch.vtlist.next = vtp->next;
     246:	b0 93 12 03 	sts	0x0312, r27
     24a:	a0 93 11 03 	sts	0x0311, r26
      fn = vtp->func;
     24e:	ce 80       	ldd	r12, Y+6	; 0x06
     250:	df 80       	ldd	r13, Y+7	; 0x07
      vtp->func = NULL;
     252:	1f 82       	std	Y+7, r1	; 0x07
     254:	1e 82       	std	Y+6, r1	; 0x06

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     256:	a1 51       	subi	r26, 0x11	; 17
     258:	b3 40       	sbci	r27, 0x03	; 3
     25a:	b1 f6       	brne	.-84     	; 0x208 <chSysTimerHandlerI+0x3e>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     25c:	c4 d4       	rcall	.+2440   	; 0xbe6 <stStopAlarm>
     25e:	d4 cf       	rjmp	.-88     	; 0x208 <chSysTimerHandlerI+0x3e>
    }
    while (vtp->delta <= nowdelta);
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
     260:	f3 e0       	ldi	r31, 0x03	; 3
     262:	c1 31       	cpi	r28, 0x11	; 17
     264:	df 07       	cpc	r29, r31
     266:	09 f1       	breq	.+66     	; 0x2aa <chSysTimerHandlerI+0xe0>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
     268:	2e 0d       	add	r18, r14
     26a:	3f 1d       	adc	r19, r15
     26c:	30 93 18 03 	sts	0x0318, r19
     270:	20 93 17 03 	sts	0x0317, r18
  ch.vtlist.next->delta -= nowdelta;
     274:	8c 81       	ldd	r24, Y+4	; 0x04
     276:	9d 81       	ldd	r25, Y+5	; 0x05
     278:	8e 19       	sub	r24, r14
     27a:	9f 09       	sbc	r25, r15
     27c:	9d 83       	std	Y+5, r25	; 0x05
     27e:	8c 83       	std	Y+4, r24	; 0x04
     280:	26 1b       	sub	r18, r22
     282:	37 0b       	sbc	r19, r23
     284:	82 0f       	add	r24, r18
     286:	93 1f       	adc	r25, r19

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     288:	82 30       	cpi	r24, 0x02	; 2
     28a:	91 05       	cpc	r25, r1
     28c:	58 f0       	brcs	.+22     	; 0x2a4 <chSysTimerHandlerI+0xda>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     28e:	86 0f       	add	r24, r22
     290:	97 1f       	adc	r25, r23
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	df 90       	pop	r13
     2a0:	cf 90       	pop	r12
     2a2:	a4 c4       	rjmp	.+2376   	; 0xbec <stSetAlarm>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	f2 cf       	rjmp	.-28     	; 0x28e <chSysTimerHandlerI+0xc4>
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	08 95       	ret

000002bc <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     2bc:	e4 e0       	ldi	r30, 0x04	; 4
     2be:	f3 e0       	ldi	r31, 0x03	; 3
     2c0:	81 e1       	ldi	r24, 0x11	; 17
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	96 87       	std	Z+14, r25	; 0x0e
     2c6:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     2c8:	90 8b       	std	Z+16, r25	; 0x10
     2ca:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
     2d0:	92 8b       	std	Z+18, r25	; 0x12
     2d2:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
     2d4:	14 8a       	std	Z+20, r1	; 0x14
     2d6:	13 8a       	std	Z+19, r1	; 0x13
     2d8:	08 95       	ret

000002da <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	7c 01       	movw	r14, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     2e8:	dc 01       	movw	r26, r24
     2ea:	19 96       	adiw	r26, 0x09	; 9
     2ec:	3c 93       	st	X, r19
     2ee:	2e 93       	st	-X, r18
     2f0:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     2f2:	17 96       	adiw	r26, 0x07	; 7
     2f4:	5c 93       	st	X, r21
     2f6:	4e 93       	st	-X, r20
     2f8:	16 97       	sbiw	r26, 0x06	; 6
     2fa:	20 91 84 00 	lds	r18, 0x0084
     2fe:	30 91 85 00 	lds	r19, 0x0085
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     302:	62 30       	cpi	r22, 0x02	; 2
     304:	71 05       	cpc	r23, r1
     306:	08 f4       	brcc	.+2      	; 0x30a <chVTDoSetI+0x30>
     308:	59 c0       	rjmp	.+178    	; 0x3bc <chVTDoSetI+0xe2>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     30a:	00 91 11 03 	lds	r16, 0x0311
     30e:	10 91 12 03 	lds	r17, 0x0312
     312:	b3 e0       	ldi	r27, 0x03	; 3
     314:	01 31       	cpi	r16, 0x11	; 17
     316:	1b 07       	cpc	r17, r27
     318:	09 f4       	brne	.+2      	; 0x31c <chVTDoSetI+0x42>
     31a:	5a c0       	rjmp	.+180    	; 0x3d0 <chVTDoSetI+0xf6>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
     31c:	80 91 17 03 	lds	r24, 0x0317
     320:	90 91 18 03 	lds	r25, 0x0318
     324:	28 1b       	sub	r18, r24
     326:	39 0b       	sbc	r19, r25
     328:	eb 01       	movw	r28, r22
     32a:	c2 0f       	add	r28, r18
     32c:	d3 1f       	adc	r29, r19

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     32e:	d8 01       	movw	r26, r16

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
     330:	c2 17       	cp	r28, r18
     332:	d3 07       	cpc	r29, r19
     334:	e0 f1       	brcs	.+120    	; 0x3ae <chVTDoSetI+0xd4>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
     336:	14 96       	adiw	r26, 0x04	; 4
     338:	2d 91       	ld	r18, X+
     33a:	3c 91       	ld	r19, X
     33c:	15 97       	sbiw	r26, 0x05	; 5
     33e:	c2 17       	cp	r28, r18
     340:	d3 07       	cpc	r29, r19
     342:	48 f4       	brcc	.+18     	; 0x356 <chVTDoSetI+0x7c>
     344:	3e c0       	rjmp	.+124    	; 0x3c2 <chVTDoSetI+0xe8>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     346:	c2 1b       	sub	r28, r18
     348:	d3 0b       	sbc	r29, r19
    p = p->next;
     34a:	d8 01       	movw	r26, r16
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
     34c:	0d 91       	ld	r16, X+
     34e:	1c 91       	ld	r17, X
     350:	f8 01       	movw	r30, r16
     352:	24 81       	ldd	r18, Z+4	; 0x04
     354:	35 81       	ldd	r19, Z+5	; 0x05
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     356:	2c 17       	cp	r18, r28
     358:	3d 07       	cpc	r19, r29
     35a:	a8 f3       	brcs	.-22     	; 0x346 <chVTDoSetI+0x6c>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     35c:	d7 01       	movw	r26, r14
     35e:	0d 93       	st	X+, r16
     360:	1c 93       	st	X, r17
  vtp->prev = vtp->next->prev;
     362:	d8 01       	movw	r26, r16
     364:	12 96       	adiw	r26, 0x02	; 2
     366:	ed 91       	ld	r30, X+
     368:	fc 91       	ld	r31, X
     36a:	13 97       	sbiw	r26, 0x03	; 3
     36c:	d7 01       	movw	r26, r14
     36e:	13 96       	adiw	r26, 0x03	; 3
     370:	fc 93       	st	X, r31
     372:	ee 93       	st	-X, r30
     374:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     376:	f1 82       	std	Z+1, r15	; 0x01
     378:	e0 82       	st	Z, r14
  p->prev = vtp;
     37a:	f8 01       	movw	r30, r16
     37c:	f3 82       	std	Z+3, r15	; 0x03
     37e:	e2 82       	std	Z+2, r14	; 0x02
  vtp->delta = delta;
     380:	15 96       	adiw	r26, 0x05	; 5
     382:	dc 93       	st	X, r29
     384:	ce 93       	st	-X, r28
     386:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     388:	84 81       	ldd	r24, Z+4	; 0x04
     38a:	95 81       	ldd	r25, Z+5	; 0x05
     38c:	8c 1b       	sub	r24, r28
     38e:	9d 0b       	sbc	r25, r29
     390:	95 83       	std	Z+5, r25	; 0x05
     392:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	90 93 16 03 	sts	0x0316, r25
     39c:	80 93 15 03 	sts	0x0315, r24
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
     3ae:	14 96       	adiw	r26, 0x04	; 4
     3b0:	8d 91       	ld	r24, X+
     3b2:	9c 91       	ld	r25, X
     3b4:	15 97       	sbiw	r26, 0x05	; 5
     3b6:	c8 1b       	sub	r28, r24
     3b8:	d9 0b       	sbc	r29, r25
     3ba:	c8 cf       	rjmp	.-112    	; 0x34c <chVTDoSetI+0x72>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     3bc:	62 e0       	ldi	r22, 0x02	; 2
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	a4 cf       	rjmp	.-184    	; 0x30a <chVTDoSetI+0x30>
     3c2:	8c 0f       	add	r24, r28
     3c4:	9d 1f       	adc	r25, r29
     3c6:	12 d4       	rcall	.+2084   	; 0xbec <stSetAlarm>
     3c8:	f8 01       	movw	r30, r16
     3ca:	24 81       	ldd	r18, Z+4	; 0x04
     3cc:	35 81       	ldd	r19, Z+5	; 0x05
     3ce:	c3 cf       	rjmp	.-122    	; 0x356 <chVTDoSetI+0x7c>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
     3d0:	30 93 18 03 	sts	0x0318, r19
     3d4:	20 93 17 03 	sts	0x0317, r18
      ch.vtlist.next = vtp;
     3d8:	f0 92 12 03 	sts	0x0312, r15
     3dc:	e0 92 11 03 	sts	0x0311, r14
      ch.vtlist.prev = vtp;
     3e0:	f0 92 14 03 	sts	0x0314, r15
     3e4:	e0 92 13 03 	sts	0x0313, r14
      vtp->next = (virtual_timer_t *)&ch.vtlist;
     3e8:	f7 01       	movw	r30, r14
     3ea:	11 83       	std	Z+1, r17	; 0x01
     3ec:	00 83       	st	Z, r16
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
     3ee:	13 83       	std	Z+3, r17	; 0x03
     3f0:	02 83       	std	Z+2, r16	; 0x02
      vtp->delta = delay;
     3f2:	75 83       	std	Z+5, r23	; 0x05
     3f4:	64 83       	std	Z+4, r22	; 0x04
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {

  stStartAlarm(time);
     3f6:	cb 01       	movw	r24, r22
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	e5 c3       	rjmp	.+1994   	; 0xbd4 <stStartAlarm>

0000040a <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	fc 01       	movw	r30, r24
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
     410:	a0 91 11 03 	lds	r26, 0x0311
     414:	b0 91 12 03 	lds	r27, 0x0312
     418:	a8 17       	cp	r26, r24
     41a:	b9 07       	cpc	r27, r25
     41c:	09 f1       	breq	.+66     	; 0x460 <chVTDoResetI+0x56>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
     41e:	c2 81       	ldd	r28, Z+2	; 0x02
     420:	d3 81       	ldd	r29, Z+3	; 0x03
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	99 83       	std	Y+1, r25	; 0x01
     428:	88 83       	st	Y, r24
    vtp->next->prev = vtp->prev;
     42a:	a0 81       	ld	r26, Z
     42c:	b1 81       	ldd	r27, Z+1	; 0x01
     42e:	13 96       	adiw	r26, 0x03	; 3
     430:	dc 93       	st	X, r29
     432:	ce 93       	st	-X, r28
     434:	12 97       	sbiw	r26, 0x02	; 2
    vtp->func = NULL;
     436:	17 82       	std	Z+7, r1	; 0x07
     438:	16 82       	std	Z+6, r1	; 0x06

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	a1 31       	cpi	r26, 0x11	; 17
     43e:	b8 07       	cpc	r27, r24
     440:	61 f0       	breq	.+24     	; 0x45a <chVTDoResetI+0x50>
      vtp->next->delta += vtp->delta;
     442:	14 96       	adiw	r26, 0x04	; 4
     444:	2d 91       	ld	r18, X+
     446:	3c 91       	ld	r19, X
     448:	15 97       	sbiw	r26, 0x05	; 5
     44a:	84 81       	ldd	r24, Z+4	; 0x04
     44c:	95 81       	ldd	r25, Z+5	; 0x05
     44e:	82 0f       	add	r24, r18
     450:	93 1f       	adc	r25, r19
     452:	15 96       	adiw	r26, 0x05	; 5
     454:	9c 93       	st	X, r25
     456:	8e 93       	st	-X, r24
     458:	14 97       	sbiw	r26, 0x04	; 4
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
     460:	ed 91       	ld	r30, X+
     462:	fc 91       	ld	r31, X
     464:	11 97       	sbiw	r26, 0x01	; 1
     466:	f0 93 12 03 	sts	0x0312, r31
     46a:	e0 93 11 03 	sts	0x0311, r30
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
     46e:	81 e1       	ldi	r24, 0x11	; 17
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	93 83       	std	Z+3, r25	; 0x03
     474:	82 83       	std	Z+2, r24	; 0x02
  vtp->func = NULL;
     476:	17 96       	adiw	r26, 0x07	; 7
     478:	1c 92       	st	X, r1
     47a:	1e 92       	st	-X, r1
     47c:	16 97       	sbiw	r26, 0x06	; 6

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
     47e:	e8 17       	cp	r30, r24
     480:	f9 07       	cpc	r31, r25
     482:	29 f1       	breq	.+74     	; 0x4ce <chVTDoResetI+0xc4>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
     484:	14 96       	adiw	r26, 0x04	; 4
     486:	2d 91       	ld	r18, X+
     488:	3c 91       	ld	r19, X
     48a:	15 97       	sbiw	r26, 0x05	; 5
     48c:	84 81       	ldd	r24, Z+4	; 0x04
     48e:	95 81       	ldd	r25, Z+5	; 0x05
     490:	82 0f       	add	r24, r18
     492:	93 1f       	adc	r25, r19
     494:	95 83       	std	Z+5, r25	; 0x05
     496:	84 83       	std	Z+4, r24	; 0x04
     498:	20 91 84 00 	lds	r18, 0x0084
     49c:	30 91 85 00 	lds	r19, 0x0085
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
     4a0:	40 91 17 03 	lds	r20, 0x0317
     4a4:	50 91 18 03 	lds	r21, 0x0318
     4a8:	24 1b       	sub	r18, r20
     4aa:	35 0b       	sbc	r19, r21

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	a0 f6       	brcc	.-88     	; 0x45a <chVTDoResetI+0x50>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
     4b2:	bc 01       	movw	r22, r24
     4b4:	62 1b       	sub	r22, r18
     4b6:	73 0b       	sbc	r23, r19

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
     4b8:	62 30       	cpi	r22, 0x02	; 2
     4ba:	71 05       	cpc	r23, r1
     4bc:	28 f0       	brcs	.+10     	; 0x4c8 <chVTDoResetI+0xbe>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     4be:	84 0f       	add	r24, r20
     4c0:	95 1f       	adc	r25, r21
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	92 c3       	rjmp	.+1828   	; 0xbec <stSetAlarm>
  delta = ch.vtlist.next->delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
     4c8:	c9 01       	movw	r24, r18
     4ca:	02 96       	adiw	r24, 0x02	; 2
     4cc:	f8 cf       	rjmp	.-16     	; 0x4be <chVTDoResetI+0xb4>
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
     4d2:	89 c3       	rjmp	.+1810   	; 0xbe6 <stStopAlarm>

000004d4 <wakeup>:
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
    chSchDoRescheduleAhead();
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	dc 01       	movw	r26, r24
     4da:	1d 96       	adiw	r26, 0x0d	; 13
     4dc:	8c 91       	ld	r24, X
     4de:	1d 97       	sbiw	r26, 0x0d	; 13
     4e0:	84 30       	cpi	r24, 0x04	; 4
     4e2:	99 f1       	breq	.+102    	; 0x54a <wakeup+0x76>
     4e4:	70 f5       	brcc	.+92     	; 0x542 <wakeup+0x6e>
     4e6:	88 23       	and	r24, r24
     4e8:	49 f1       	breq	.+82     	; 0x53c <wakeup+0x68>
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	31 f4       	brne	.+12     	; 0x4fa <wakeup+0x26>
     4ee:	50 96       	adiw	r26, 0x10	; 16
     4f0:	ed 91       	ld	r30, X+
     4f2:	fc 91       	ld	r31, X
     4f4:	51 97       	sbiw	r26, 0x11	; 17
     4f6:	11 82       	std	Z+1, r1	; 0x01
     4f8:	10 82       	st	Z, r1
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	51 96       	adiw	r26, 0x11	; 17
     500:	9c 93       	st	X, r25
     502:	8e 93       	st	-X, r24
     504:	50 97       	sbiw	r26, 0x10	; 16
     506:	1d 96       	adiw	r26, 0x0d	; 13
     508:	1c 92       	st	X, r1
     50a:	1d 97       	sbiw	r26, 0x0d	; 13
     50c:	14 96       	adiw	r26, 0x04	; 4
     50e:	2c 91       	ld	r18, X
     510:	14 97       	sbiw	r26, 0x04	; 4
     512:	e4 e0       	ldi	r30, 0x04	; 4
     514:	f3 e0       	ldi	r31, 0x03	; 3
     516:	01 90       	ld	r0, Z+
     518:	f0 81       	ld	r31, Z
     51a:	e0 2d       	mov	r30, r0
     51c:	94 81       	ldd	r25, Z+4	; 0x04
     51e:	92 17       	cp	r25, r18
     520:	d0 f7       	brcc	.-12     	; 0x516 <wakeup+0x42>
     522:	11 96       	adiw	r26, 0x01	; 1
     524:	fc 93       	st	X, r31
     526:	ee 93       	st	-X, r30
     528:	c2 81       	ldd	r28, Z+2	; 0x02
     52a:	d3 81       	ldd	r29, Z+3	; 0x03
     52c:	13 96       	adiw	r26, 0x03	; 3
     52e:	dc 93       	st	X, r29
     530:	ce 93       	st	-X, r28
     532:	12 97       	sbiw	r26, 0x02	; 2
     534:	b9 83       	std	Y+1, r27	; 0x01
     536:	a8 83       	st	Y, r26
     538:	b3 83       	std	Z+3, r27	; 0x03
     53a:	a2 83       	std	Z+2, r26	; 0x02
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret
     542:	85 30       	cpi	r24, 0x05	; 5
     544:	89 f0       	breq	.+34     	; 0x568 <wakeup+0x94>
     546:	87 30       	cpi	r24, 0x07	; 7
     548:	c1 f6       	brne	.-80     	; 0x4fa <wakeup+0x26>
     54a:	12 96       	adiw	r26, 0x02	; 2
     54c:	ed 91       	ld	r30, X+
     54e:	fc 91       	ld	r31, X
     550:	13 97       	sbiw	r26, 0x03	; 3
     552:	8d 91       	ld	r24, X+
     554:	9c 91       	ld	r25, X
     556:	11 97       	sbiw	r26, 0x01	; 1
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	80 83       	st	Z, r24
     55c:	cd 91       	ld	r28, X+
     55e:	dc 91       	ld	r29, X
     560:	11 97       	sbiw	r26, 0x01	; 1
     562:	fb 83       	std	Y+3, r31	; 0x03
     564:	ea 83       	std	Y+2, r30	; 0x02
     566:	c9 cf       	rjmp	.-110    	; 0x4fa <wakeup+0x26>
     568:	50 96       	adiw	r26, 0x10	; 16
     56a:	ed 91       	ld	r30, X+
     56c:	fc 91       	ld	r31, X
     56e:	51 97       	sbiw	r26, 0x11	; 17
     570:	84 81       	ldd	r24, Z+4	; 0x04
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	84 83       	std	Z+4, r24	; 0x04
     576:	e9 cf       	rjmp	.-46     	; 0x54a <wakeup+0x76>

00000578 <_scheduler_init>:
     578:	e4 e0       	ldi	r30, 0x04	; 4
     57a:	f3 e0       	ldi	r31, 0x03	; 3
     57c:	f1 83       	std	Z+1, r31	; 0x01
     57e:	e0 83       	st	Z, r30
     580:	f3 83       	std	Z+3, r31	; 0x03
     582:	e2 83       	std	Z+2, r30	; 0x02
     584:	14 82       	std	Z+4, r1	; 0x04
     586:	f0 87       	std	Z+8, r31	; 0x08
     588:	e7 83       	std	Z+7, r30	; 0x07
     58a:	f2 87       	std	Z+10, r31	; 0x0a
     58c:	e1 87       	std	Z+9, r30	; 0x09
     58e:	08 95       	ret

00000590 <chSchReadyI>:
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	dc 01       	movw	r26, r24
     596:	1d 96       	adiw	r26, 0x0d	; 13
     598:	1c 92       	st	X, r1
     59a:	1d 97       	sbiw	r26, 0x0d	; 13
     59c:	14 96       	adiw	r26, 0x04	; 4
     59e:	2c 91       	ld	r18, X
     5a0:	14 97       	sbiw	r26, 0x04	; 4
     5a2:	e4 e0       	ldi	r30, 0x04	; 4
     5a4:	f3 e0       	ldi	r31, 0x03	; 3
     5a6:	01 90       	ld	r0, Z+
     5a8:	f0 81       	ld	r31, Z
     5aa:	e0 2d       	mov	r30, r0
     5ac:	94 81       	ldd	r25, Z+4	; 0x04
     5ae:	92 17       	cp	r25, r18
     5b0:	d0 f7       	brcc	.-12     	; 0x5a6 <chSchReadyI+0x16>
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	fc 93       	st	X, r31
     5b6:	ee 93       	st	-X, r30
     5b8:	c2 81       	ldd	r28, Z+2	; 0x02
     5ba:	d3 81       	ldd	r29, Z+3	; 0x03
     5bc:	13 96       	adiw	r26, 0x03	; 3
     5be:	dc 93       	st	X, r29
     5c0:	ce 93       	st	-X, r28
     5c2:	12 97       	sbiw	r26, 0x02	; 2
     5c4:	b9 83       	std	Y+1, r27	; 0x01
     5c6:	a8 83       	st	Y, r26
     5c8:	b3 83       	std	Z+3, r27	; 0x03
     5ca:	a2 83       	std	Z+2, r26	; 0x02
     5cc:	cd 01       	movw	r24, r26
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <chSchGoSleepS>:
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	e4 e0       	ldi	r30, 0x04	; 4
     5da:	f3 e0       	ldi	r31, 0x03	; 3
     5dc:	63 85       	ldd	r22, Z+11	; 0x0b
     5de:	74 85       	ldd	r23, Z+12	; 0x0c
     5e0:	db 01       	movw	r26, r22
     5e2:	1d 96       	adiw	r26, 0x0d	; 13
     5e4:	8c 93       	st	X, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	ec 01       	movw	r28, r24
     5ec:	a8 81       	ld	r26, Y
     5ee:	b9 81       	ldd	r27, Y+1	; 0x01
     5f0:	b1 83       	std	Z+1, r27	; 0x01
     5f2:	a0 83       	st	Z, r26
     5f4:	13 96       	adiw	r26, 0x03	; 3
     5f6:	fc 93       	st	X, r31
     5f8:	ee 93       	st	-X, r30
     5fa:	12 97       	sbiw	r26, 0x02	; 2
     5fc:	94 87       	std	Z+12, r25	; 0x0c
     5fe:	83 87       	std	Z+11, r24	; 0x0b
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	2d 87       	std	Y+13, r18	; 0x0d
     604:	aa d2       	rcall	.+1364   	; 0xb5a <_port_switch>
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <chSchGoSleepTimeoutS>:
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	2a 97       	sbiw	r28, 0x0a	; 10
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	18 2f       	mov	r17, r24
     624:	6f 3f       	cpi	r22, 0xFF	; 255
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	78 07       	cpc	r23, r24
     62a:	11 f1       	breq	.+68     	; 0x670 <chSchGoSleepTimeoutS+0x64>
     62c:	20 91 0f 03 	lds	r18, 0x030F
     630:	30 91 10 03 	lds	r19, 0x0310
     634:	4a e6       	ldi	r20, 0x6A	; 106
     636:	52 e0       	ldi	r21, 0x02	; 2
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	4e de       	rcall	.-868    	; 0x2da <chVTDoSetI>
     63e:	81 2f       	mov	r24, r17
     640:	c9 df       	rcall	.-110    	; 0x5d4 <chSchGoSleepS>
     642:	8f 81       	ldd	r24, Y+7	; 0x07
     644:	98 85       	ldd	r25, Y+8	; 0x08
     646:	89 2b       	or	r24, r25
     648:	19 f0       	breq	.+6      	; 0x650 <chSchGoSleepTimeoutS+0x44>
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	dd de       	rcall	.-582    	; 0x40a <chVTDoResetI>
     650:	e0 91 0f 03 	lds	r30, 0x030F
     654:	f0 91 10 03 	lds	r31, 0x0310
     658:	80 89       	ldd	r24, Z+16	; 0x10
     65a:	91 89       	ldd	r25, Z+17	; 0x11
     65c:	2a 96       	adiw	r28, 0x0a	; 10
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	08 95       	ret
     670:	81 2f       	mov	r24, r17
     672:	b0 df       	rcall	.-160    	; 0x5d4 <chSchGoSleepS>
     674:	ed cf       	rjmp	.-38     	; 0x650 <chSchGoSleepTimeoutS+0x44>

00000676 <chSchWakeupS>:
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	dc 01       	movw	r26, r24
     67c:	c0 91 0f 03 	lds	r28, 0x030F
     680:	d0 91 10 03 	lds	r29, 0x0310
     684:	51 96       	adiw	r26, 0x11	; 17
     686:	7c 93       	st	X, r23
     688:	6e 93       	st	-X, r22
     68a:	50 97       	sbiw	r26, 0x10	; 16
     68c:	14 96       	adiw	r26, 0x04	; 4
     68e:	2c 91       	ld	r18, X
     690:	14 97       	sbiw	r26, 0x04	; 4
     692:	8c 81       	ldd	r24, Y+4	; 0x04
     694:	82 17       	cp	r24, r18
     696:	d8 f0       	brcs	.+54     	; 0x6ce <chSchWakeupS+0x58>
     698:	1d 96       	adiw	r26, 0x0d	; 13
     69a:	1c 92       	st	X, r1
     69c:	1d 97       	sbiw	r26, 0x0d	; 13
     69e:	e4 e0       	ldi	r30, 0x04	; 4
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	01 90       	ld	r0, Z+
     6a4:	f0 81       	ld	r31, Z
     6a6:	e0 2d       	mov	r30, r0
     6a8:	94 81       	ldd	r25, Z+4	; 0x04
     6aa:	92 17       	cp	r25, r18
     6ac:	d0 f7       	brcc	.-12     	; 0x6a2 <chSchWakeupS+0x2c>
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	fc 93       	st	X, r31
     6b2:	ee 93       	st	-X, r30
     6b4:	c2 81       	ldd	r28, Z+2	; 0x02
     6b6:	d3 81       	ldd	r29, Z+3	; 0x03
     6b8:	13 96       	adiw	r26, 0x03	; 3
     6ba:	dc 93       	st	X, r29
     6bc:	ce 93       	st	-X, r28
     6be:	12 97       	sbiw	r26, 0x02	; 2
     6c0:	b9 83       	std	Y+1, r27	; 0x01
     6c2:	a8 83       	st	Y, r26
     6c4:	b3 83       	std	Z+3, r27	; 0x03
     6c6:	a2 83       	std	Z+2, r26	; 0x02
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret
     6ce:	1d 86       	std	Y+13, r1	; 0x0d
     6d0:	e4 e0       	ldi	r30, 0x04	; 4
     6d2:	f3 e0       	ldi	r31, 0x03	; 3
     6d4:	01 90       	ld	r0, Z+
     6d6:	f0 81       	ld	r31, Z
     6d8:	e0 2d       	mov	r30, r0
     6da:	94 81       	ldd	r25, Z+4	; 0x04
     6dc:	98 17       	cp	r25, r24
     6de:	d0 f7       	brcc	.-12     	; 0x6d4 <chSchWakeupS+0x5e>
     6e0:	cd 01       	movw	r24, r26
     6e2:	f9 83       	std	Y+1, r31	; 0x01
     6e4:	e8 83       	st	Y, r30
     6e6:	a2 81       	ldd	r26, Z+2	; 0x02
     6e8:	b3 81       	ldd	r27, Z+3	; 0x03
     6ea:	bb 83       	std	Y+3, r27	; 0x03
     6ec:	aa 83       	std	Y+2, r26	; 0x02
     6ee:	cd 93       	st	X+, r28
     6f0:	dc 93       	st	X, r29
     6f2:	d3 83       	std	Z+3, r29	; 0x03
     6f4:	c2 83       	std	Z+2, r28	; 0x02
     6f6:	90 93 10 03 	sts	0x0310, r25
     6fa:	80 93 0f 03 	sts	0x030F, r24
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	fc 01       	movw	r30, r24
     702:	25 87       	std	Z+13, r18	; 0x0d
     704:	be 01       	movw	r22, r28
     706:	29 d2       	rcall	.+1106   	; 0xb5a <_port_switch>
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <chSchIsPreemptionRequired>:
     70e:	a0 91 04 03 	lds	r26, 0x0304
     712:	b0 91 05 03 	lds	r27, 0x0305
     716:	e0 91 0f 03 	lds	r30, 0x030F
     71a:	f0 91 10 03 	lds	r31, 0x0310
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	14 96       	adiw	r26, 0x04	; 4
     722:	2c 91       	ld	r18, X
     724:	94 81       	ldd	r25, Z+4	; 0x04
     726:	92 17       	cp	r25, r18
     728:	08 f0       	brcs	.+2      	; 0x72c <chSchIsPreemptionRequired+0x1e>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret

0000072e <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
  thread_t *otp = currp;
     732:	a0 91 0f 03 	lds	r26, 0x030F
     736:	b0 91 10 03 	lds	r27, 0x0310
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     73a:	40 91 04 03 	lds	r20, 0x0304
     73e:	50 91 05 03 	lds	r21, 0x0305

  tqp->next             = tp->queue.next;
     742:	ea 01       	movw	r28, r20
     744:	e8 81       	ld	r30, Y
     746:	f9 81       	ldd	r31, Y+1	; 0x01
     748:	f0 93 05 03 	sts	0x0305, r31
     74c:	e0 93 04 03 	sts	0x0304, r30
  tqp->next->queue.prev = (thread_t *)tqp;
     750:	84 e0       	ldi	r24, 0x04	; 4
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	93 83       	std	Z+3, r25	; 0x03
     756:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     758:	50 93 10 03 	sts	0x0310, r21
     75c:	40 93 0f 03 	sts	0x030F, r20
  currp->state = CH_STATE_CURRENT;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     764:	1d 96       	adiw	r26, 0x0d	; 13
     766:	1c 92       	st	X, r1
     768:	1d 97       	sbiw	r26, 0x0d	; 13
     76a:	14 96       	adiw	r26, 0x04	; 4
     76c:	2c 91       	ld	r18, X
     76e:	14 97       	sbiw	r26, 0x04	; 4
     770:	03 c0       	rjmp	.+6      	; 0x778 <chSchDoReschedule+0x4a>
     772:	01 90       	ld	r0, Z+
     774:	f0 81       	ld	r31, Z
     776:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     778:	94 81       	ldd	r25, Z+4	; 0x04
     77a:	29 17       	cp	r18, r25
     77c:	d0 f3       	brcs	.-12     	; 0x772 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     77e:	11 96       	adiw	r26, 0x01	; 1
     780:	fc 93       	st	X, r31
     782:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	93 81       	ldd	r25, Z+3	; 0x03
     788:	13 96       	adiw	r26, 0x03	; 3
     78a:	9c 93       	st	X, r25
     78c:	8e 93       	st	-X, r24
     78e:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     790:	ec 01       	movw	r28, r24
     792:	b9 83       	std	Y+1, r27	; 0x01
     794:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     796:	b3 83       	std	Z+3, r27	; 0x03
     798:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     79a:	bd 01       	movw	r22, r26
     79c:	ca 01       	movw	r24, r20
     79e:	dd d1       	rcall	.+954    	; 0xb5a <_port_switch>
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	fc 01       	movw	r30, r24
     7ac:	44 83       	std	Z+4, r20	; 0x04
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	85 87       	std	Z+13, r24	; 0x0d
     7b2:	16 86       	std	Z+14, r1	; 0x0e
     7b4:	43 8f       	std	Z+27, r20	; 0x1b
     7b6:	12 8e       	std	Z+26, r1	; 0x1a
     7b8:	11 8e       	std	Z+25, r1	; 0x19
     7ba:	10 8e       	std	Z+24, r1	; 0x18
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	87 87       	std	Z+15, r24	; 0x0f
     7c0:	74 87       	std	Z+12, r23	; 0x0c
     7c2:	63 87       	std	Z+11, r22	; 0x0b
     7c4:	a4 e0       	ldi	r26, 0x04	; 4
     7c6:	b3 e0       	ldi	r27, 0x03	; 3
     7c8:	b0 87       	std	Z+8, r27	; 0x08
     7ca:	a7 83       	std	Z+7, r26	; 0x07
     7cc:	19 96       	adiw	r26, 0x09	; 9
     7ce:	cd 91       	ld	r28, X+
     7d0:	dc 91       	ld	r29, X
     7d2:	1a 97       	sbiw	r26, 0x0a	; 10
     7d4:	d2 87       	std	Z+10, r29	; 0x0a
     7d6:	c1 87       	std	Z+9, r28	; 0x09
     7d8:	f8 87       	std	Y+8, r31	; 0x08
     7da:	ef 83       	std	Y+7, r30	; 0x07
     7dc:	1a 96       	adiw	r26, 0x0a	; 10
     7de:	fc 93       	st	X, r31
     7e0:	ee 93       	st	-X, r30
     7e2:	19 97       	sbiw	r26, 0x09	; 9
     7e4:	cf 01       	movw	r24, r30
     7e6:	42 96       	adiw	r24, 0x12	; 18
     7e8:	93 8b       	std	Z+19, r25	; 0x13
     7ea:	82 8b       	std	Z+18, r24	; 0x12
     7ec:	02 96       	adiw	r24, 0x02	; 2
     7ee:	95 8b       	std	Z+21, r25	; 0x15
     7f0:	84 8b       	std	Z+20, r24	; 0x14
     7f2:	97 8b       	std	Z+23, r25	; 0x17
     7f4:	86 8b       	std	Z+22, r24	; 0x16
     7f6:	cf 01       	movw	r24, r30
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <chThdCreateSuspendedI>:
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
     804:	4c 81       	ldd	r20, Y+4	; 0x04
     806:	5d 81       	ldd	r21, Y+5	; 0x05
     808:	fa 01       	movw	r30, r20
     80a:	7c 97       	sbiw	r30, 0x1c	; 28
     80c:	ca 01       	movw	r24, r20
     80e:	c1 97       	sbiw	r24, 0x31	; 49
     810:	96 83       	std	Z+6, r25	; 0x06
     812:	85 83       	std	Z+5, r24	; 0x05
     814:	2f 81       	ldd	r18, Y+7	; 0x07
     816:	dc 01       	movw	r26, r24
     818:	52 96       	adiw	r26, 0x12	; 18
     81a:	2c 93       	st	X, r18
     81c:	52 97       	sbiw	r26, 0x12	; 18
     81e:	28 85       	ldd	r18, Y+8	; 0x08
     820:	51 96       	adiw	r26, 0x11	; 17
     822:	2c 93       	st	X, r18
     824:	51 97       	sbiw	r26, 0x11	; 17
     826:	29 85       	ldd	r18, Y+9	; 0x09
     828:	50 96       	adiw	r26, 0x10	; 16
     82a:	2c 93       	st	X, r18
     82c:	50 97       	sbiw	r26, 0x10	; 16
     82e:	2a 85       	ldd	r18, Y+10	; 0x0a
     830:	1f 96       	adiw	r26, 0x0f	; 15
     832:	2c 93       	st	X, r18
     834:	1f 97       	sbiw	r26, 0x0f	; 15
     836:	2c ed       	ldi	r18, 0xDC	; 220
     838:	35 e0       	ldi	r19, 0x05	; 5
     83a:	53 96       	adiw	r26, 0x13	; 19
     83c:	3c 93       	st	X, r19
     83e:	53 97       	sbiw	r26, 0x13	; 19
     840:	54 96       	adiw	r26, 0x14	; 20
     842:	2c 93       	st	X, r18
     844:	8e 81       	ldd	r24, Y+6	; 0x06
     846:	28 81       	ld	r18, Y
     848:	39 81       	ldd	r19, Y+1	; 0x01
     84a:	84 83       	std	Z+4, r24	; 0x04
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	95 87       	std	Z+13, r25	; 0x0d
     850:	16 86       	std	Z+14, r1	; 0x0e
     852:	83 8f       	std	Z+27, r24	; 0x1b
     854:	12 8e       	std	Z+26, r1	; 0x1a
     856:	11 8e       	std	Z+25, r1	; 0x19
     858:	10 8e       	std	Z+24, r1	; 0x18
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	87 87       	std	Z+15, r24	; 0x0f
     85e:	34 87       	std	Z+12, r19	; 0x0c
     860:	23 87       	std	Z+11, r18	; 0x0b
     862:	c4 e0       	ldi	r28, 0x04	; 4
     864:	d3 e0       	ldi	r29, 0x03	; 3
     866:	d0 87       	std	Z+8, r29	; 0x08
     868:	c7 83       	std	Z+7, r28	; 0x07
     86a:	89 85       	ldd	r24, Y+9	; 0x09
     86c:	9a 85       	ldd	r25, Y+10	; 0x0a
     86e:	92 87       	std	Z+10, r25	; 0x0a
     870:	81 87       	std	Z+9, r24	; 0x09
     872:	dc 01       	movw	r26, r24
     874:	18 96       	adiw	r26, 0x08	; 8
     876:	fc 93       	st	X, r31
     878:	ee 93       	st	-X, r30
     87a:	17 97       	sbiw	r26, 0x07	; 7
     87c:	fa 87       	std	Y+10, r31	; 0x0a
     87e:	e9 87       	std	Y+9, r30	; 0x09
     880:	ea 01       	movw	r28, r20
     882:	2a 97       	sbiw	r28, 0x0a	; 10
     884:	d9 83       	std	Y+1, r29	; 0x01
     886:	c8 83       	st	Y, r28
     888:	da 01       	movw	r26, r20
     88a:	18 97       	sbiw	r26, 0x08	; 8
     88c:	0b 2e       	mov	r0, r27
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	0c 92       	st	X, r0
     892:	11 97       	sbiw	r26, 0x01	; 1
     894:	ac 93       	st	X, r26
     896:	0a 2e       	mov	r0, r26
     898:	1b 2e       	mov	r1, r27
     89a:	13 96       	adiw	r26, 0x03	; 3
     89c:	1c 92       	st	X, r1
     89e:	0e 92       	st	-X, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	12 97       	sbiw	r26, 0x02	; 2
     8a4:	cf 01       	movw	r24, r30
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <chThdCreate>:
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	f8 94       	cli
     8b2:	a5 df       	rcall	.-182    	; 0x7fe <chThdCreateSuspendedI>
     8b4:	ec 01       	movw	r28, r24
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	dd de       	rcall	.-582    	; 0x676 <chSchWakeupS>
     8bc:	78 94       	sei
     8be:	ce 01       	movw	r24, r28
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <chThdCreateStatic>:
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	f8 94       	cli
     8d0:	6c 51       	subi	r22, 0x1C	; 28
     8d2:	71 09       	sbc	r23, r1
     8d4:	ec 01       	movw	r28, r24
     8d6:	c6 0f       	add	r28, r22
     8d8:	d7 1f       	adc	r29, r23
     8da:	fe 01       	movw	r30, r28
     8dc:	75 97       	sbiw	r30, 0x15	; 21
     8de:	fe 83       	std	Y+6, r31	; 0x06
     8e0:	ed 83       	std	Y+5, r30	; 0x05
     8e2:	22 8b       	std	Z+18, r18	; 0x12
     8e4:	31 8b       	std	Z+17, r19	; 0x11
     8e6:	00 8b       	std	Z+16, r16	; 0x10
     8e8:	17 87       	std	Z+15, r17	; 0x0f
     8ea:	8c ed       	ldi	r24, 0xDC	; 220
     8ec:	95 e0       	ldi	r25, 0x05	; 5
     8ee:	93 8b       	std	Z+19, r25	; 0x13
     8f0:	84 8b       	std	Z+20, r24	; 0x14
     8f2:	4c 83       	std	Y+4, r20	; 0x04
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	8d 87       	std	Y+13, r24	; 0x0d
     8f8:	1e 86       	std	Y+14, r1	; 0x0e
     8fa:	4b 8f       	std	Y+27, r20	; 0x1b
     8fc:	1a 8e       	std	Y+26, r1	; 0x1a
     8fe:	19 8e       	std	Y+25, r1	; 0x19
     900:	18 8e       	std	Y+24, r1	; 0x18
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	8f 87       	std	Y+15, r24	; 0x0f
     906:	86 e1       	ldi	r24, 0x16	; 22
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	9c 87       	std	Y+12, r25	; 0x0c
     90c:	8b 87       	std	Y+11, r24	; 0x0b
     90e:	e4 e0       	ldi	r30, 0x04	; 4
     910:	f3 e0       	ldi	r31, 0x03	; 3
     912:	f8 87       	std	Y+8, r31	; 0x08
     914:	ef 83       	std	Y+7, r30	; 0x07
     916:	a1 85       	ldd	r26, Z+9	; 0x09
     918:	b2 85       	ldd	r27, Z+10	; 0x0a
     91a:	ba 87       	std	Y+10, r27	; 0x0a
     91c:	a9 87       	std	Y+9, r26	; 0x09
     91e:	18 96       	adiw	r26, 0x08	; 8
     920:	dc 93       	st	X, r29
     922:	ce 93       	st	-X, r28
     924:	17 97       	sbiw	r26, 0x07	; 7
     926:	d2 87       	std	Z+10, r29	; 0x0a
     928:	c1 87       	std	Z+9, r28	; 0x09
     92a:	ce 01       	movw	r24, r28
     92c:	42 96       	adiw	r24, 0x12	; 18
     92e:	9b 8b       	std	Y+19, r25	; 0x13
     930:	8a 8b       	std	Y+18, r24	; 0x12
     932:	02 96       	adiw	r24, 0x02	; 2
     934:	9d 8b       	std	Y+21, r25	; 0x15
     936:	8c 8b       	std	Y+20, r24	; 0x14
     938:	9f 8b       	std	Y+23, r25	; 0x17
     93a:	8e 8b       	std	Y+22, r24	; 0x16
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	ce 01       	movw	r24, r28
     942:	99 de       	rcall	.-718    	; 0x676 <chSchWakeupS>
     944:	78 94       	sei
     946:	ce 01       	movw	r24, r28
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <chThdExitS>:
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	c0 91 0f 03 	lds	r28, 0x030F
     95e:	d0 91 10 03 	lds	r29, 0x0310
     962:	99 8b       	std	Y+17, r25	; 0x11
     964:	88 8b       	std	Y+16, r24	; 0x10
     966:	8e 01       	movw	r16, r28
     968:	0e 5e       	subi	r16, 0xEE	; 238
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	8a 89       	ldd	r24, Y+18	; 0x12
     96e:	9b 89       	ldd	r25, Y+19	; 0x13
     970:	08 17       	cp	r16, r24
     972:	19 07       	cpc	r17, r25
     974:	59 f0       	breq	.+22     	; 0x98c <chThdExitS+0x3a>
     976:	fc 01       	movw	r30, r24
     978:	20 81       	ld	r18, Z
     97a:	31 81       	ldd	r19, Z+1	; 0x01
     97c:	3b 8b       	std	Y+19, r19	; 0x13
     97e:	2a 8b       	std	Y+18, r18	; 0x12
     980:	07 de       	rcall	.-1010   	; 0x590 <chSchReadyI>
     982:	8a 89       	ldd	r24, Y+18	; 0x12
     984:	9b 89       	ldd	r25, Y+19	; 0x13
     986:	80 17       	cp	r24, r16
     988:	91 07       	cpc	r25, r17
     98a:	a9 f7       	brne	.-22     	; 0x976 <chThdExitS+0x24>
     98c:	8f 85       	ldd	r24, Y+15	; 0x0f
     98e:	81 11       	cpse	r24, r1
     990:	0c c0       	rjmp	.+24     	; 0x9aa <chThdExitS+0x58>
     992:	e9 85       	ldd	r30, Y+9	; 0x09
     994:	fa 85       	ldd	r31, Y+10	; 0x0a
     996:	8f 81       	ldd	r24, Y+7	; 0x07
     998:	98 85       	ldd	r25, Y+8	; 0x08
     99a:	90 87       	std	Z+8, r25	; 0x08
     99c:	87 83       	std	Z+7, r24	; 0x07
     99e:	af 81       	ldd	r26, Y+7	; 0x07
     9a0:	b8 85       	ldd	r27, Y+8	; 0x08
     9a2:	1a 96       	adiw	r26, 0x0a	; 10
     9a4:	fc 93       	st	X, r31
     9a6:	ee 93       	st	-X, r30
     9a8:	19 97       	sbiw	r26, 0x09	; 9
     9aa:	8f e0       	ldi	r24, 0x0F	; 15
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	0f ce       	rjmp	.-994    	; 0x5d4 <chSchGoSleepS>

000009b6 <chThdExit>:
     9b6:	f8 94       	cli
     9b8:	cc cf       	rjmp	.-104    	; 0x952 <chThdExitS>

000009ba <chThdSleep>:
     9ba:	f8 94       	cli
     9bc:	bc 01       	movw	r22, r24
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	25 de       	rcall	.-950    	; 0x60c <chSchGoSleepTimeoutS>
     9c2:	78 94       	sei
     9c4:	08 95       	ret

000009c6 <chThdResumeI>:
     9c6:	dc 01       	movw	r26, r24
     9c8:	ed 91       	ld	r30, X+
     9ca:	fc 91       	ld	r31, X
     9cc:	11 97       	sbiw	r26, 0x01	; 1
     9ce:	30 97       	sbiw	r30, 0x00	; 0
     9d0:	31 f0       	breq	.+12     	; 0x9de <chThdResumeI+0x18>
     9d2:	1d 92       	st	X+, r1
     9d4:	1c 92       	st	X, r1
     9d6:	71 8b       	std	Z+17, r23	; 0x11
     9d8:	60 8b       	std	Z+16, r22	; 0x10
     9da:	cf 01       	movw	r24, r30
     9dc:	d9 cd       	rjmp	.-1102   	; 0x590 <chSchReadyI>
     9de:	08 95       	ret

000009e0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29

  if (TIME_IMMEDIATE == timeout) {
     9e4:	61 15       	cp	r22, r1
     9e6:	71 05       	cpc	r23, r1
     9e8:	99 f0       	breq	.+38     	; 0xa10 <chThdEnqueueTimeoutS+0x30>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
     9ea:	e0 91 0f 03 	lds	r30, 0x030F
     9ee:	f0 91 10 03 	lds	r31, 0x0310
  cp->queue.prev             = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	80 83       	st	Z, r24
  tp->queue.prev             = tqp->prev;
     9f6:	ec 01       	movw	r28, r24
     9f8:	aa 81       	ldd	r26, Y+2	; 0x02
     9fa:	bb 81       	ldd	r27, Y+3	; 0x03
     9fc:	b3 83       	std	Z+3, r27	; 0x03
     9fe:	a2 83       	std	Z+2, r26	; 0x02
  tp->queue.prev->queue.next = tp;
     a00:	ed 93       	st	X+, r30
     a02:	fc 93       	st	X, r31
  tqp->prev                  = tp;
     a04:	fb 83       	std	Y+3, r31	; 0x03
     a06:	ea 83       	std	Y+2, r30	; 0x02

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     a08:	84 e0       	ldi	r24, 0x04	; 4
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
     a0e:	fe cd       	rjmp	.-1028   	; 0x60c <chSchGoSleepTimeoutS>
}
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	9f ef       	ldi	r25, 0xFF	; 255
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01

  if (queue_notempty(tqp)) {
     a24:	e8 17       	cp	r30, r24
     a26:	f9 07       	cpc	r31, r25
     a28:	71 f0       	breq	.+28     	; 0xa46 <chThdDequeueNextI+0x2c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
     a2a:	ec 01       	movw	r28, r24
     a2c:	a8 81       	ld	r26, Y
     a2e:	b9 81       	ldd	r27, Y+1	; 0x01
     a30:	b1 83       	std	Z+1, r27	; 0x01
     a32:	a0 83       	st	Z, r26
  tqp->next->queue.prev = (thread_t *)tqp;
     a34:	13 96       	adiw	r26, 0x03	; 3
     a36:	fc 93       	st	X, r31
     a38:	ee 93       	st	-X, r30
     a3a:	12 97       	sbiw	r26, 0x02	; 2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
     a3c:	79 8b       	std	Y+17, r23	; 0x11
     a3e:	68 8b       	std	Y+16, r22	; 0x10
    chThdDoDequeueNextI(tqp, msg);
  }
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
     a44:	a5 cd       	rjmp	.-1206   	; 0x590 <chSchReadyI>
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     a4c:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     a4e:	91 83       	std	Z+1, r25	; 0x01
     a50:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     a52:	93 83       	std	Z+3, r25	; 0x03
     a54:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     a56:	15 82       	std	Z+5, r1	; 0x05
     a58:	14 82       	std	Z+4, r1	; 0x04
     a5a:	08 95       	ret

00000a5c <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
     a5c:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
     a5e:	90 8d       	ldd	r25, Z+24	; 0x18
     a60:	69 2b       	or	r22, r25
     a62:	60 8f       	std	Z+24, r22	; 0x18
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a64:	85 85       	ldd	r24, Z+13	; 0x0d
     a66:	8a 30       	cpi	r24, 0x0A	; 10
     a68:	59 f0       	breq	.+22     	; 0xa80 <chEvtSignalI+0x24>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     a6a:	8b 30       	cpi	r24, 0x0B	; 11
     a6c:	09 f0       	breq	.+2      	; 0xa70 <chEvtSignalI+0x14>
     a6e:	08 95       	ret
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
     a70:	80 89       	ldd	r24, Z+16	; 0x10
     a72:	68 23       	and	r22, r24

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
     a74:	86 13       	cpse	r24, r22
     a76:	fb cf       	rjmp	.-10     	; 0xa6e <chEvtSignalI+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
     a78:	11 8a       	std	Z+17, r1	; 0x11
     a7a:	10 8a       	std	Z+16, r1	; 0x10
    (void) chSchReadyI(tp);
     a7c:	cf 01       	movw	r24, r30
     a7e:	88 cd       	rjmp	.-1264   	; 0x590 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
     a80:	80 89       	ldd	r24, Z+16	; 0x10
     a82:	68 23       	and	r22, r24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
     a84:	c9 f7       	brne	.-14     	; 0xa78 <chEvtSignalI+0x1c>
     a86:	08 95       	ret

00000a88 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	7c 01       	movw	r14, r24
     a94:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
     a96:	fc 01       	movw	r30, r24
     a98:	c0 81       	ld	r28, Z
     a9a:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     a9c:	8c 17       	cp	r24, r28
     a9e:	9d 07       	cpc	r25, r29
     aa0:	91 f0       	breq	.+36     	; 0xac6 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	91 2b       	or	r25, r17
     aa6:	9d 83       	std	Y+5, r25	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     aa8:	11 23       	and	r17, r17
     aaa:	19 f0       	breq	.+6      	; 0xab2 <chEvtBroadcastFlagsI+0x2a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
     aac:	2e 81       	ldd	r18, Y+6	; 0x06
     aae:	92 23       	and	r25, r18
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
     ab0:	21 f0       	breq	.+8      	; 0xaba <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
     ab2:	6c 81       	ldd	r22, Y+4	; 0x04
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	9b 81       	ldd	r25, Y+3	; 0x03
     ab8:	d1 df       	rcall	.-94     	; 0xa5c <chEvtSignalI>
    }
    elp = elp->next;
     aba:	09 90       	ld	r0, Y+
     abc:	d8 81       	ld	r29, Y
     abe:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
     ac0:	ec 16       	cp	r14, r28
     ac2:	fd 06       	cpc	r15, r29
     ac4:	71 f7       	brne	.-36     	; 0xaa2 <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     ad2:	e7 e3       	ldi	r30, 0x37	; 55
     ad4:	f3 e0       	ldi	r31, 0x03	; 3
     ad6:	8c e8       	ldi	r24, 0x8C	; 140
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
     ade:	8c e0       	ldi	r24, 0x0C	; 12
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	93 83       	std	Z+3, r25	; 0x03
     ae4:	82 83       	std	Z+2, r24	; 0x02
     ae6:	08 95       	ret

00000ae8 <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     ae8:	f8 94       	cli
     aea:	fb 01       	movw	r30, r22
     aec:	31 97       	sbiw	r30, 0x01	; 1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     aee:	71 95       	neg	r23
     af0:	61 95       	neg	r22
     af2:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     af4:	20 91 37 03 	lds	r18, 0x0337
     af8:	30 91 38 03 	lds	r19, 0x0338
     afc:	42 0f       	add	r20, r18
     afe:	53 1f       	adc	r21, r19
     b00:	4e 0f       	add	r20, r30
     b02:	5f 1f       	adc	r21, r31
     b04:	46 23       	and	r20, r22
     b06:	57 23       	and	r21, r23
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     b08:	8e 0f       	add	r24, r30
     b0a:	9f 1f       	adc	r25, r31
     b0c:	68 23       	and	r22, r24
     b0e:	79 23       	and	r23, r25
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
     b10:	ca 01       	movw	r24, r20
     b12:	86 0f       	add	r24, r22
     b14:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     b16:	60 91 39 03 	lds	r22, 0x0339
     b1a:	70 91 3a 03 	lds	r23, 0x033A
     b1e:	68 17       	cp	r22, r24
     b20:	79 07       	cpc	r23, r25
     b22:	50 f0       	brcs	.+20     	; 0xb38 <chCoreAllocAlignedWithOffset+0x50>
     b24:	82 17       	cp	r24, r18
     b26:	93 07       	cpc	r25, r19
     b28:	38 f0       	brcs	.+14     	; 0xb38 <chCoreAllocAlignedWithOffset+0x50>
    return NULL;
  }

  ch_memcore.nextmem = next;
     b2a:	90 93 38 03 	sts	0x0338, r25
     b2e:	80 93 37 03 	sts	0x0337, r24

  return p;
     b32:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     b34:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     b36:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     b3e:	08 95       	ret

00000b40 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     b40:	ec e0       	ldi	r30, 0x0C	; 12
     b42:	f2 e0       	ldi	r31, 0x02	; 2
     b44:	84 e7       	ldi	r24, 0x74	; 116
     b46:	95 e0       	ldi	r25, 0x05	; 5
     b48:	91 83       	std	Z+1, r25	; 0x01
     b4a:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     b4c:	13 82       	std	Z+3, r1	; 0x03
     b4e:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     b50:	15 82       	std	Z+5, r1	; 0x05
     b52:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     b54:	82 e1       	ldi	r24, 0x12	; 18
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	79 cf       	rjmp	.-270    	; 0xa4c <chMtxObjectInit>

00000b5a <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     b5a:	2f 92       	push	r2
  asm volatile ("push    r3");
     b5c:	3f 92       	push	r3
  asm volatile ("push    r4");
     b5e:	4f 92       	push	r4
  asm volatile ("push    r5");
     b60:	5f 92       	push	r5
  asm volatile ("push    r6");
     b62:	6f 92       	push	r6
  asm volatile ("push    r7");
     b64:	7f 92       	push	r7
  asm volatile ("push    r8");
     b66:	8f 92       	push	r8
  asm volatile ("push    r9");
     b68:	9f 92       	push	r9
  asm volatile ("push    r10");
     b6a:	af 92       	push	r10
  asm volatile ("push    r11");
     b6c:	bf 92       	push	r11
  asm volatile ("push    r12");
     b6e:	cf 92       	push	r12
  asm volatile ("push    r13");
     b70:	df 92       	push	r13
  asm volatile ("push    r14");
     b72:	ef 92       	push	r14
  asm volatile ("push    r15");
     b74:	ff 92       	push	r15
  asm volatile ("push    r16");
     b76:	0f 93       	push	r16
  asm volatile ("push    r17");
     b78:	1f 93       	push	r17
  asm volatile ("push    r28");
     b7a:	cf 93       	push	r28
  asm volatile ("push    r29");
     b7c:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     b7e:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     b80:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     b82:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     b84:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     b86:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     b88:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     b8a:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     b8c:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     b8e:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     b90:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     b92:	df 91       	pop	r29
  asm volatile ("pop     r28");
     b94:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     b96:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     b98:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     b9a:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     b9c:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     b9e:	df 90       	pop	r13
  asm volatile ("pop     r12");
     ba0:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     ba2:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     ba4:	af 90       	pop	r10
  asm volatile ("pop     r9");
     ba6:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     ba8:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     baa:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     bac:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     bae:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     bb0:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     bb2:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     bb4:	2f 90       	pop	r2
  asm volatile ("ret");
     bb6:	08 95       	ret

00000bb8 <_port_thread_start>:
     bb8:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     bba:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     bbc:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     bbe:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     bc0:	fa ce       	rjmp	.-524    	; 0x9b6 <chThdExit>

00000bc2 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     bc2:	1d d3       	rcall	.+1594   	; 0x11fe <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
     bc4:	8a e4       	ldi	r24, 0x4A	; 74
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	83 d4       	rcall	.+2310   	; 0x14d0 <_pal_lld_init>
#endif
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
     bca:	5e d2       	rcall	.+1212   	; 0x1088 <adcInit>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
     bcc:	a3 d2       	rcall	.+1350   	; 0x1114 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     bce:	87 d5       	rcall	.+2830   	; 0x16de <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <stInit>

00000bd2 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     bd2:	b8 c4       	rjmp	.+2416   	; 0x1544 <st_lld_init>

00000bd4 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     bd4:	90 93 89 00 	sts	0x0089, r25
     bd8:	80 93 88 00 	sts	0x0088, r24

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	86 bb       	out	0x16, r24	; 22

  /* Enable interrupt. */
  TIMSK_REG = _BV(OCIE1A);
     be0:	80 93 6f 00 	sts	0x006F, r24
     be4:	08 95       	ret

00000be6 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
     be6:	10 92 6f 00 	sts	0x006F, r1
     bea:	08 95       	ret

00000bec <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
     bec:	90 93 89 00 	sts	0x0089, r25
     bf0:	80 93 88 00 	sts	0x0088, r24
     bf4:	08 95       	ret

00000bf6 <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ec 01       	movw	r28, r24
     c0c:	6b 01       	movw	r12, r22
     c0e:	8a 01       	movw	r16, r20
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	9d 81       	ldd	r25, Y+5	; 0x05
     c14:	84 17       	cp	r24, r20
     c16:	95 07       	cpc	r25, r21
     c18:	10 f4       	brcc	.+4      	; 0xc1e <iq_read+0x28>
     c1a:	0c 81       	ldd	r16, Y+4	; 0x04
     c1c:	1d 81       	ldd	r17, Y+5	; 0x05
     c1e:	6c 85       	ldd	r22, Y+12	; 0x0c
     c20:	7d 85       	ldd	r23, Y+13	; 0x0d
     c22:	e8 84       	ldd	r14, Y+8	; 0x08
     c24:	f9 84       	ldd	r15, Y+9	; 0x09
     c26:	e6 1a       	sub	r14, r22
     c28:	f7 0a       	sbc	r15, r23
     c2a:	0e 15       	cp	r16, r14
     c2c:	1f 05       	cpc	r17, r15
     c2e:	98 f1       	brcs	.+102    	; 0xc96 <iq_read+0xa0>
     c30:	e0 16       	cp	r14, r16
     c32:	f1 06       	cpc	r15, r17
     c34:	d0 f0       	brcs	.+52     	; 0xc6a <iq_read+0x74>
     c36:	a8 01       	movw	r20, r16
     c38:	c6 01       	movw	r24, r12
     c3a:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	9d 87       	std	Y+13, r25	; 0x0d
     c44:	8c 87       	std	Y+12, r24	; 0x0c
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	9d 81       	ldd	r25, Y+5	; 0x05
     c4a:	80 1b       	sub	r24, r16
     c4c:	91 0b       	sbc	r25, r17
     c4e:	9d 83       	std	Y+5, r25	; 0x05
     c50:	8c 83       	std	Y+4, r24	; 0x04
     c52:	c8 01       	movw	r24, r16
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	08 95       	ret
     c6a:	a7 01       	movw	r20, r14
     c6c:	c6 01       	movw	r24, r12
     c6e:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     c72:	58 01       	movw	r10, r16
     c74:	ae 18       	sub	r10, r14
     c76:	bf 08       	sbc	r11, r15
     c78:	6e 81       	ldd	r22, Y+6	; 0x06
     c7a:	7f 81       	ldd	r23, Y+7	; 0x07
     c7c:	a5 01       	movw	r20, r10
     c7e:	c6 01       	movw	r24, r12
     c80:	8e 0d       	add	r24, r14
     c82:	9f 1d       	adc	r25, r15
     c84:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     c88:	8e 81       	ldd	r24, Y+6	; 0x06
     c8a:	9f 81       	ldd	r25, Y+7	; 0x07
     c8c:	a8 0e       	add	r10, r24
     c8e:	b9 1e       	adc	r11, r25
     c90:	bd 86       	std	Y+13, r11	; 0x0d
     c92:	ac 86       	std	Y+12, r10	; 0x0c
     c94:	d8 cf       	rjmp	.-80     	; 0xc46 <iq_read+0x50>
     c96:	a8 01       	movw	r20, r16
     c98:	c6 01       	movw	r24, r12
     c9a:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca2:	80 0f       	add	r24, r16
     ca4:	91 1f       	adc	r25, r17
     ca6:	9d 87       	std	Y+13, r25	; 0x0d
     ca8:	8c 87       	std	Y+12, r24	; 0x0c
     caa:	cd cf       	rjmp	.-102    	; 0xc46 <iq_read+0x50>

00000cac <oq_write>:
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
     cc2:	6b 01       	movw	r12, r22
     cc4:	8a 01       	movw	r16, r20
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	84 17       	cp	r24, r20
     ccc:	95 07       	cpc	r25, r21
     cce:	10 f4       	brcc	.+4      	; 0xcd4 <oq_write+0x28>
     cd0:	0c 81       	ldd	r16, Y+4	; 0x04
     cd2:	1d 81       	ldd	r17, Y+5	; 0x05
     cd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd8:	e8 84       	ldd	r14, Y+8	; 0x08
     cda:	f9 84       	ldd	r15, Y+9	; 0x09
     cdc:	e8 1a       	sub	r14, r24
     cde:	f9 0a       	sbc	r15, r25
     ce0:	0e 15       	cp	r16, r14
     ce2:	1f 05       	cpc	r17, r15
     ce4:	98 f1       	brcs	.+102    	; 0xd4c <oq_write+0xa0>
     ce6:	e0 16       	cp	r14, r16
     ce8:	f1 06       	cpc	r15, r17
     cea:	d0 f0       	brcs	.+52     	; 0xd20 <oq_write+0x74>
     cec:	a8 01       	movw	r20, r16
     cee:	b6 01       	movw	r22, r12
     cf0:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	9f 81       	ldd	r25, Y+7	; 0x07
     cf8:	9b 87       	std	Y+11, r25	; 0x0b
     cfa:	8a 87       	std	Y+10, r24	; 0x0a
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	80 1b       	sub	r24, r16
     d02:	91 0b       	sbc	r25, r17
     d04:	9d 83       	std	Y+5, r25	; 0x05
     d06:	8c 83       	std	Y+4, r24	; 0x04
     d08:	c8 01       	movw	r24, r16
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	bf 90       	pop	r11
     d1c:	af 90       	pop	r10
     d1e:	08 95       	ret
     d20:	a7 01       	movw	r20, r14
     d22:	b6 01       	movw	r22, r12
     d24:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     d28:	58 01       	movw	r10, r16
     d2a:	ae 18       	sub	r10, r14
     d2c:	bf 08       	sbc	r11, r15
     d2e:	b6 01       	movw	r22, r12
     d30:	6e 0d       	add	r22, r14
     d32:	7f 1d       	adc	r23, r15
     d34:	a5 01       	movw	r20, r10
     d36:	8e 81       	ldd	r24, Y+6	; 0x06
     d38:	9f 81       	ldd	r25, Y+7	; 0x07
     d3a:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     d3e:	8e 81       	ldd	r24, Y+6	; 0x06
     d40:	9f 81       	ldd	r25, Y+7	; 0x07
     d42:	a8 0e       	add	r10, r24
     d44:	b9 1e       	adc	r11, r25
     d46:	bb 86       	std	Y+11, r11	; 0x0b
     d48:	aa 86       	std	Y+10, r10	; 0x0a
     d4a:	d8 cf       	rjmp	.-80     	; 0xcfc <oq_write+0x50>
     d4c:	a8 01       	movw	r20, r16
     d4e:	b6 01       	movw	r22, r12
     d50:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     d54:	8a 85       	ldd	r24, Y+10	; 0x0a
     d56:	9b 85       	ldd	r25, Y+11	; 0x0b
     d58:	80 0f       	add	r24, r16
     d5a:	91 1f       	adc	r25, r17
     d5c:	9b 87       	std	Y+11, r25	; 0x0b
     d5e:	8a 87       	std	Y+10, r24	; 0x0a
     d60:	cd cf       	rjmp	.-102    	; 0xcfc <oq_write+0x50>

00000d62 <iqObjectInit>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	fc 01       	movw	r30, r24
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	80 83       	st	Z, r24
     d6c:	93 83       	std	Z+3, r25	; 0x03
     d6e:	82 83       	std	Z+2, r24	; 0x02
     d70:	15 82       	std	Z+5, r1	; 0x05
     d72:	14 82       	std	Z+4, r1	; 0x04
     d74:	77 83       	std	Z+7, r23	; 0x07
     d76:	66 83       	std	Z+6, r22	; 0x06
     d78:	75 87       	std	Z+13, r23	; 0x0d
     d7a:	64 87       	std	Z+12, r22	; 0x0c
     d7c:	73 87       	std	Z+11, r23	; 0x0b
     d7e:	62 87       	std	Z+10, r22	; 0x0a
     d80:	64 0f       	add	r22, r20
     d82:	75 1f       	adc	r23, r21
     d84:	71 87       	std	Z+9, r23	; 0x09
     d86:	60 87       	std	Z+8, r22	; 0x08
     d88:	37 87       	std	Z+15, r19	; 0x0f
     d8a:	26 87       	std	Z+14, r18	; 0x0e
     d8c:	11 8b       	std	Z+17, r17	; 0x11
     d8e:	00 8b       	std	Z+16, r16	; 0x10
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <iqPutI>:
     d96:	fc 01       	movw	r30, r24
     d98:	a2 85       	ldd	r26, Z+10	; 0x0a
     d9a:	b3 85       	ldd	r27, Z+11	; 0x0b
     d9c:	84 85       	ldd	r24, Z+12	; 0x0c
     d9e:	95 85       	ldd	r25, Z+13	; 0x0d
     da0:	a8 17       	cp	r26, r24
     da2:	b9 07       	cpc	r27, r25
     da4:	e1 f0       	breq	.+56     	; 0xdde <iqPutI+0x48>
     da6:	84 81       	ldd	r24, Z+4	; 0x04
     da8:	95 81       	ldd	r25, Z+5	; 0x05
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	95 83       	std	Z+5, r25	; 0x05
     dae:	84 83       	std	Z+4, r24	; 0x04
     db0:	cd 01       	movw	r24, r26
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	93 87       	std	Z+11, r25	; 0x0b
     db6:	82 87       	std	Z+10, r24	; 0x0a
     db8:	6c 93       	st	X, r22
     dba:	22 85       	ldd	r18, Z+10	; 0x0a
     dbc:	33 85       	ldd	r19, Z+11	; 0x0b
     dbe:	80 85       	ldd	r24, Z+8	; 0x08
     dc0:	91 85       	ldd	r25, Z+9	; 0x09
     dc2:	28 17       	cp	r18, r24
     dc4:	39 07       	cpc	r19, r25
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <iqPutI+0x3a>
     dc8:	86 81       	ldd	r24, Z+6	; 0x06
     dca:	97 81       	ldd	r25, Z+7	; 0x07
     dcc:	93 87       	std	Z+11, r25	; 0x0b
     dce:	82 87       	std	Z+10, r24	; 0x0a
     dd0:	cf 01       	movw	r24, r30
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	21 de       	rcall	.-958    	; 0xa1a <chThdDequeueNextI>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	08 95       	ret
     dde:	84 81       	ldd	r24, Z+4	; 0x04
     de0:	95 81       	ldd	r25, Z+5	; 0x05
     de2:	89 2b       	or	r24, r25
     de4:	01 f3       	breq	.-64     	; 0xda6 <iqPutI+0x10>
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	9f ef       	ldi	r25, 0xFF	; 255
     dea:	08 95       	ret

00000dec <iqGetTimeout>:
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ec 01       	movw	r28, r24
     df6:	8b 01       	movw	r16, r22
     df8:	f8 94       	cli
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <iqGetTimeout+0x1a>
     dfc:	b8 01       	movw	r22, r16
     dfe:	ce 01       	movw	r24, r28
     e00:	ef dd       	rcall	.-1058   	; 0x9e0 <chThdEnqueueTimeoutS>
     e02:	97 fd       	sbrc	r25, 7
     e04:	27 c0       	rjmp	.+78     	; 0xe54 <iqGetTimeout+0x68>
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	89 2b       	or	r24, r25
     e0c:	b9 f3       	breq	.-18     	; 0xdfc <iqGetTimeout+0x10>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	9d 83       	std	Y+5, r25	; 0x05
     e16:	8c 83       	std	Y+4, r24	; 0x04
     e18:	ec 85       	ldd	r30, Y+12	; 0x0c
     e1a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e1c:	cf 01       	movw	r24, r30
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	9d 87       	std	Y+13, r25	; 0x0d
     e22:	8c 87       	std	Y+12, r24	; 0x0c
     e24:	10 81       	ld	r17, Z
     e26:	28 85       	ldd	r18, Y+8	; 0x08
     e28:	39 85       	ldd	r19, Y+9	; 0x09
     e2a:	82 17       	cp	r24, r18
     e2c:	93 07       	cpc	r25, r19
     e2e:	20 f0       	brcs	.+8      	; 0xe38 <iqGetTimeout+0x4c>
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	9f 81       	ldd	r25, Y+7	; 0x07
     e34:	9d 87       	std	Y+13, r25	; 0x0d
     e36:	8c 87       	std	Y+12, r24	; 0x0c
     e38:	ee 85       	ldd	r30, Y+14	; 0x0e
     e3a:	ff 85       	ldd	r31, Y+15	; 0x0f
     e3c:	30 97       	sbiw	r30, 0x00	; 0
     e3e:	11 f0       	breq	.+4      	; 0xe44 <iqGetTimeout+0x58>
     e40:	ce 01       	movw	r24, r28
     e42:	09 95       	icall
     e44:	78 94       	sei
     e46:	81 2f       	mov	r24, r17
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret
     e54:	78 94       	sei
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <iqReadTimeout>:
     e60:	6f 92       	push	r6
     e62:	7f 92       	push	r7
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	6c 01       	movw	r12, r24
     e7e:	8b 01       	movw	r16, r22
     e80:	7a 01       	movw	r14, r20
     e82:	49 01       	movw	r8, r18
     e84:	fc 01       	movw	r30, r24
     e86:	a6 84       	ldd	r10, Z+14	; 0x0e
     e88:	b7 84       	ldd	r11, Z+15	; 0x0f
     e8a:	f8 94       	cli
     e8c:	c0 e0       	ldi	r28, 0x00	; 0
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	45 2b       	or	r20, r21
     e92:	81 f4       	brne	.+32     	; 0xeb4 <iqReadTimeout+0x54>
     e94:	1b c0       	rjmp	.+54     	; 0xecc <iqReadTimeout+0x6c>
     e96:	a1 14       	cp	r10, r1
     e98:	b1 04       	cpc	r11, r1
     e9a:	19 f0       	breq	.+6      	; 0xea2 <iqReadTimeout+0x42>
     e9c:	c6 01       	movw	r24, r12
     e9e:	f5 01       	movw	r30, r10
     ea0:	09 95       	icall
     ea2:	78 94       	sei
     ea4:	c6 0d       	add	r28, r6
     ea6:	d7 1d       	adc	r29, r7
     ea8:	06 0d       	add	r16, r6
     eaa:	17 1d       	adc	r17, r7
     eac:	f8 94       	cli
     eae:	ce 15       	cp	r28, r14
     eb0:	df 05       	cpc	r29, r15
     eb2:	60 f4       	brcc	.+24     	; 0xecc <iqReadTimeout+0x6c>
     eb4:	a7 01       	movw	r20, r14
     eb6:	b8 01       	movw	r22, r16
     eb8:	c6 01       	movw	r24, r12
     eba:	9d de       	rcall	.-710    	; 0xbf6 <iq_read>
     ebc:	3c 01       	movw	r6, r24
     ebe:	89 2b       	or	r24, r25
     ec0:	51 f7       	brne	.-44     	; 0xe96 <iqReadTimeout+0x36>
     ec2:	b4 01       	movw	r22, r8
     ec4:	c6 01       	movw	r24, r12
     ec6:	8c dd       	rcall	.-1256   	; 0x9e0 <chThdEnqueueTimeoutS>
     ec8:	89 2b       	or	r24, r25
     eca:	89 f3       	breq	.-30     	; 0xeae <iqReadTimeout+0x4e>
     ecc:	78 94       	sei
     ece:	ce 01       	movw	r24, r28
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	9f 90       	pop	r9
     ee6:	8f 90       	pop	r8
     ee8:	7f 90       	pop	r7
     eea:	6f 90       	pop	r6
     eec:	08 95       	ret

00000eee <oqObjectInit>:
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	fc 01       	movw	r30, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
     ef8:	93 83       	std	Z+3, r25	; 0x03
     efa:	82 83       	std	Z+2, r24	; 0x02
     efc:	55 83       	std	Z+5, r21	; 0x05
     efe:	44 83       	std	Z+4, r20	; 0x04
     f00:	77 83       	std	Z+7, r23	; 0x07
     f02:	66 83       	std	Z+6, r22	; 0x06
     f04:	75 87       	std	Z+13, r23	; 0x0d
     f06:	64 87       	std	Z+12, r22	; 0x0c
     f08:	73 87       	std	Z+11, r23	; 0x0b
     f0a:	62 87       	std	Z+10, r22	; 0x0a
     f0c:	46 0f       	add	r20, r22
     f0e:	57 1f       	adc	r21, r23
     f10:	51 87       	std	Z+9, r21	; 0x09
     f12:	40 87       	std	Z+8, r20	; 0x08
     f14:	37 87       	std	Z+15, r19	; 0x0f
     f16:	26 87       	std	Z+14, r18	; 0x0e
     f18:	11 8b       	std	Z+17, r17	; 0x11
     f1a:	00 8b       	std	Z+16, r16	; 0x10
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	08 95       	ret

00000f22 <oqPutTimeout>:
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
     f2e:	f6 2e       	mov	r15, r22
     f30:	8a 01       	movw	r16, r20
     f32:	f8 94       	cli
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <oqPutTimeout+0x1e>
     f36:	b8 01       	movw	r22, r16
     f38:	ce 01       	movw	r24, r28
     f3a:	52 dd       	rcall	.-1372   	; 0x9e0 <chThdEnqueueTimeoutS>
     f3c:	97 fd       	sbrc	r25, 7
     f3e:	2a c0       	rjmp	.+84     	; 0xf94 <oqPutTimeout+0x72>
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	89 2b       	or	r24, r25
     f46:	b9 f3       	breq	.-18     	; 0xf36 <oqPutTimeout+0x14>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	9d 83       	std	Y+5, r25	; 0x05
     f50:	8c 83       	std	Y+4, r24	; 0x04
     f52:	ea 85       	ldd	r30, Y+10	; 0x0a
     f54:	fb 85       	ldd	r31, Y+11	; 0x0b
     f56:	cf 01       	movw	r24, r30
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	9b 87       	std	Y+11, r25	; 0x0b
     f5c:	8a 87       	std	Y+10, r24	; 0x0a
     f5e:	f0 82       	st	Z, r15
     f60:	2a 85       	ldd	r18, Y+10	; 0x0a
     f62:	3b 85       	ldd	r19, Y+11	; 0x0b
     f64:	88 85       	ldd	r24, Y+8	; 0x08
     f66:	99 85       	ldd	r25, Y+9	; 0x09
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <oqPutTimeout+0x54>
     f6e:	8e 81       	ldd	r24, Y+6	; 0x06
     f70:	9f 81       	ldd	r25, Y+7	; 0x07
     f72:	9b 87       	std	Y+11, r25	; 0x0b
     f74:	8a 87       	std	Y+10, r24	; 0x0a
     f76:	ee 85       	ldd	r30, Y+14	; 0x0e
     f78:	ff 85       	ldd	r31, Y+15	; 0x0f
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	11 f0       	breq	.+4      	; 0xf82 <oqPutTimeout+0x60>
     f7e:	ce 01       	movw	r24, r28
     f80:	09 95       	icall
     f82:	78 94       	sei
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	08 95       	ret
     f94:	78 94       	sei
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	08 95       	ret

00000fa2 <oqGetI>:
     fa2:	cf 93       	push	r28
     fa4:	fc 01       	movw	r30, r24
     fa6:	a4 85       	ldd	r26, Z+12	; 0x0c
     fa8:	b5 85       	ldd	r27, Z+13	; 0x0d
     faa:	82 85       	ldd	r24, Z+10	; 0x0a
     fac:	93 85       	ldd	r25, Z+11	; 0x0b
     fae:	8a 17       	cp	r24, r26
     fb0:	9b 07       	cpc	r25, r27
     fb2:	e1 f0       	breq	.+56     	; 0xfec <oqGetI+0x4a>
     fb4:	84 81       	ldd	r24, Z+4	; 0x04
     fb6:	95 81       	ldd	r25, Z+5	; 0x05
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	95 83       	std	Z+5, r25	; 0x05
     fbc:	84 83       	std	Z+4, r24	; 0x04
     fbe:	cd 01       	movw	r24, r26
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	95 87       	std	Z+13, r25	; 0x0d
     fc4:	84 87       	std	Z+12, r24	; 0x0c
     fc6:	cc 91       	ld	r28, X
     fc8:	20 85       	ldd	r18, Z+8	; 0x08
     fca:	31 85       	ldd	r19, Z+9	; 0x09
     fcc:	82 17       	cp	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	40 f4       	brcc	.+16     	; 0xfe2 <oqGetI+0x40>
     fd2:	cf 01       	movw	r24, r30
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	20 dd       	rcall	.-1472   	; 0xa1a <chThdDequeueNextI>
     fda:	8c 2f       	mov	r24, r28
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret
     fe2:	86 81       	ldd	r24, Z+6	; 0x06
     fe4:	97 81       	ldd	r25, Z+7	; 0x07
     fe6:	95 87       	std	Z+13, r25	; 0x0d
     fe8:	84 87       	std	Z+12, r24	; 0x0c
     fea:	f3 cf       	rjmp	.-26     	; 0xfd2 <oqGetI+0x30>
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	95 81       	ldd	r25, Z+5	; 0x05
     ff0:	89 2b       	or	r24, r25
     ff2:	01 f3       	breq	.-64     	; 0xfb4 <oqGetI+0x12>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
     ff8:	f2 cf       	rjmp	.-28     	; 0xfde <oqGetI+0x3c>

00000ffa <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	6c 01       	movw	r12, r24
    1018:	8b 01       	movw	r16, r22
    101a:	7a 01       	movw	r14, r20
    101c:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
    101e:	fc 01       	movw	r30, r24
    1020:	a6 84       	ldd	r10, Z+14	; 0x0e
    1022:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1024:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
    1026:	c0 e0       	ldi	r28, 0x00	; 0
    1028:	d0 e0       	ldi	r29, 0x00	; 0
    102a:	45 2b       	or	r20, r21
    102c:	81 f4       	brne	.+32     	; 0x104e <oqWriteTimeout+0x54>
    102e:	1b c0       	rjmp	.+54     	; 0x1066 <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
    1030:	a1 14       	cp	r10, r1
    1032:	b1 04       	cpc	r11, r1
    1034:	19 f0       	breq	.+6      	; 0x103c <oqWriteTimeout+0x42>
        nfy(oqp);
    1036:	c6 01       	movw	r24, r12
    1038:	f5 01       	movw	r30, r10
    103a:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    103c:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
    103e:	c6 0d       	add	r28, r6
    1040:	d7 1d       	adc	r29, r7
      bp += done;
    1042:	06 0d       	add	r16, r6
    1044:	17 1d       	adc	r17, r7
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1046:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
    1048:	ce 15       	cp	r28, r14
    104a:	df 05       	cpc	r29, r15
    104c:	60 f4       	brcc	.+24     	; 0x1066 <oqWriteTimeout+0x6c>
    size_t done;

    done = oq_write(oqp, bp, n);
    104e:	a7 01       	movw	r20, r14
    1050:	b8 01       	movw	r22, r16
    1052:	c6 01       	movw	r24, r12
    1054:	2b de       	rcall	.-938    	; 0xcac <oq_write>
    1056:	3c 01       	movw	r6, r24
    if (done == (size_t)0) {
    1058:	89 2b       	or	r24, r25
    105a:	51 f7       	brne	.-44     	; 0x1030 <oqWriteTimeout+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
    105c:	b4 01       	movw	r22, r8
    105e:	c6 01       	movw	r24, r12
    1060:	bf dc       	rcall	.-1666   	; 0x9e0 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
    1062:	89 2b       	or	r24, r25
    1064:	89 f3       	breq	.-30     	; 0x1048 <oqWriteTimeout+0x4e>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1066:	78 94       	sei
    }
  }

  osalSysUnlock();
  return wr;
}
    1068:	ce 01       	movw	r24, r28
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	af 90       	pop	r10
    107e:	9f 90       	pop	r9
    1080:	8f 90       	pop	r8
    1082:	7f 90       	pop	r7
    1084:	6f 90       	pop	r6
    1086:	08 95       	ret

00001088 <adcInit>:
  adc_lld_stop(adcp);
  adcp->config = NULL;
  adcp->state  = ADC_STOP;

  osalSysUnlock();
}
    1088:	da c1       	rjmp	.+948    	; 0x143e <adc_lld_init>

0000108a <adcObjectInit>:
    108a:	fc 01       	movw	r30, r24
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 83       	st	Z, r24
    1090:	12 82       	std	Z+2, r1	; 0x02
    1092:	11 82       	std	Z+1, r1	; 0x01
    1094:	14 82       	std	Z+4, r1	; 0x04
    1096:	13 82       	std	Z+3, r1	; 0x03
    1098:	16 82       	std	Z+6, r1	; 0x06
    109a:	15 82       	std	Z+5, r1	; 0x05
    109c:	10 86       	std	Z+8, r1	; 0x08
    109e:	17 82       	std	Z+7, r1	; 0x07
    10a0:	12 86       	std	Z+10, r1	; 0x0a
    10a2:	11 86       	std	Z+9, r1	; 0x09
    10a4:	cf 01       	movw	r24, r30
    10a6:	0b 96       	adiw	r24, 0x0b	; 11
    10a8:	d1 cc       	rjmp	.-1630   	; 0xa4c <chMtxObjectInit>

000010aa <adcStart>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
    10b0:	f8 94       	cli
    10b2:	7a 83       	std	Y+2, r23	; 0x02
    10b4:	69 83       	std	Y+1, r22	; 0x01
    10b6:	cc d1       	rcall	.+920    	; 0x1450 <adc_lld_start>
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	88 83       	st	Y, r24
    10bc:	78 94       	sei
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <adcStartConversion>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    10c4:	f8 94       	cli
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
    10c6:	fc 01       	movw	r30, r24
    10c8:	54 83       	std	Z+4, r21	; 0x04
    10ca:	43 83       	std	Z+3, r20	; 0x03
  adcp->depth    = depth;
    10cc:	36 83       	std	Z+6, r19	; 0x06
    10ce:	25 83       	std	Z+5, r18	; 0x05
  adcp->grpp     = grpp;
    10d0:	70 87       	std	Z+8, r23	; 0x08
    10d2:	67 83       	std	Z+7, r22	; 0x07
  adcp->state    = ADC_ACTIVE;
    10d4:	23 e0       	ldi	r18, 0x03	; 3
    10d6:	20 83       	st	Z, r18
  adc_lld_start_conversion(adcp);
    10d8:	d4 d1       	rcall	.+936    	; 0x1482 <adc_lld_start_conversion>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    10da:	78 94       	sei
    10dc:	08 95       	ret

000010de <_ctl>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	08 95       	ret

000010e4 <_readt>:
    10e4:	05 96       	adiw	r24, 0x05	; 5
    10e6:	bc ce       	rjmp	.-648    	; 0xe60 <iqReadTimeout>

000010e8 <_read>:
    10e8:	2f ef       	ldi	r18, 0xFF	; 255
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	05 96       	adiw	r24, 0x05	; 5
    10ee:	b8 ce       	rjmp	.-656    	; 0xe60 <iqReadTimeout>

000010f0 <_writet>:
    10f0:	47 96       	adiw	r24, 0x17	; 23
    10f2:	83 cf       	rjmp	.-250    	; 0xffa <oqWriteTimeout>

000010f4 <_write>:
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	3f ef       	ldi	r19, 0xFF	; 255
    10f8:	47 96       	adiw	r24, 0x17	; 23
    10fa:	7f cf       	rjmp	.-258    	; 0xffa <oqWriteTimeout>

000010fc <_gett>:
    10fc:	05 96       	adiw	r24, 0x05	; 5
    10fe:	76 ce       	rjmp	.-788    	; 0xdec <iqGetTimeout>

00001100 <_get>:
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	7f ef       	ldi	r23, 0xFF	; 255
    1104:	05 96       	adiw	r24, 0x05	; 5
    1106:	72 ce       	rjmp	.-796    	; 0xdec <iqGetTimeout>

00001108 <_putt>:
    1108:	47 96       	adiw	r24, 0x17	; 23
    110a:	0b cf       	rjmp	.-490    	; 0xf22 <oqPutTimeout>

0000110c <_put>:
    110c:	4f ef       	ldi	r20, 0xFF	; 255
    110e:	5f ef       	ldi	r21, 0xFF	; 255
    1110:	47 96       	adiw	r24, 0x17	; 23
    1112:	07 cf       	rjmp	.-498    	; 0xf22 <oqPutTimeout>

00001114 <sdInit>:
    1114:	ac c2       	rjmp	.+1368   	; 0x166e <sd_lld_init>

00001116 <sdObjectInit>:
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
    1124:	9b 01       	movw	r18, r22
    1126:	7a 01       	movw	r14, r20
    1128:	fc 01       	movw	r30, r24
    112a:	83 e3       	ldi	r24, 0x33	; 51
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	81 93       	st	Z+, r24
    1130:	91 93       	st	Z+, r25
    1132:	fb 83       	std	Y+3, r31	; 0x03
    1134:	ea 83       	std	Y+2, r30	; 0x02
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 83       	std	Y+4, r24	; 0x04
    113a:	be 01       	movw	r22, r28
    113c:	67 5d       	subi	r22, 0xD7	; 215
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8e 01       	movw	r16, r28
    1142:	40 e1       	ldi	r20, 0x10	; 16
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	ce 01       	movw	r24, r28
    1148:	05 96       	adiw	r24, 0x05	; 5
    114a:	0b de       	rcall	.-1002   	; 0xd62 <iqObjectInit>
    114c:	be 01       	movw	r22, r28
    114e:	67 5c       	subi	r22, 0xC7	; 199
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	97 01       	movw	r18, r14
    1154:	40 e1       	ldi	r20, 0x10	; 16
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	ce 01       	movw	r24, r28
    115a:	47 96       	adiw	r24, 0x17	; 23
    115c:	c8 de       	rcall	.-624    	; 0xeee <oqObjectInit>
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <sdStart>:
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	f8 94       	cli
    1174:	83 d2       	rcall	.+1286   	; 0x167c <sd_lld_start>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	8c 83       	std	Y+4, r24	; 0x04
    117a:	78 94       	sei
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ec 01       	movw	r28, r24
    118a:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	89 2b       	or	r24, r25
    1192:	51 f0       	breq	.+20     	; 0x11a8 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    1194:	61 2f       	mov	r22, r17
    1196:	ce 01       	movw	r24, r28
    1198:	05 96       	adiw	r24, 0x05	; 5
    119a:	fd dd       	rcall	.-1030   	; 0xd96 <iqPutI>
    119c:	97 fd       	sbrc	r25, 7
    119e:	0e c0       	rjmp	.+28     	; 0x11bc <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    11a8:	64 e0       	ldi	r22, 0x04	; 4
    11aa:	ce 01       	movw	r24, r28
    11ac:	02 96       	adiw	r24, 0x02	; 2
    11ae:	6c dc       	rcall	.-1832   	; 0xa88 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    11b0:	61 2f       	mov	r22, r17
    11b2:	ce 01       	movw	r24, r28
    11b4:	05 96       	adiw	r24, 0x05	; 5
    11b6:	ef dd       	rcall	.-1058   	; 0xd96 <iqPutI>
    11b8:	97 ff       	sbrs	r25, 7
    11ba:	f2 cf       	rjmp	.-28     	; 0x11a0 <sdIncomingDataI+0x1e>
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	ce 01       	movw	r24, r28
    11c0:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	5f cc       	rjmp	.-1858   	; 0xa88 <chEvtBroadcastFlagsI>

000011ca <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
    11d4:	47 96       	adiw	r24, 0x17	; 23
    11d6:	e5 de       	rcall	.-566    	; 0xfa2 <oqGetI>
    11d8:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
    11da:	97 fd       	sbrc	r25, 7
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
    11de:	ce 01       	movw	r24, r28
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret
    11ea:	68 e0       	ldi	r22, 0x08	; 8
    11ec:	c8 01       	movw	r24, r16
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	4b dc       	rcall	.-1898   	; 0xa88 <chEvtBroadcastFlagsI>
    11f2:	ce 01       	movw	r24, r28
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    11fe:	08 95       	ret

00001200 <__vector_21>:
 */
void adc_lld_stop(ADCDriver *adcp) {

  if (adcp->state == ADC_READY) {
    /* Clock de-activation. */
    ADCSRA &= ~(1 << ADEN);
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	af 92       	push	r10
    120c:	bf 92       	push	r11
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	4f 93       	push	r20
    1220:	5f 93       	push	r21
    1222:	6f 93       	push	r22
    1224:	7f 93       	push	r23
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 3b 03 	sts	0x033B, r24
    123c:	80 91 78 00 	lds	r24, 0x0078
    1240:	40 91 79 00 	lds	r20, 0x0079
    1244:	20 91 3f 03 	lds	r18, 0x033F
    1248:	30 91 40 03 	lds	r19, 0x0340
    124c:	e0 91 4f 03 	lds	r30, 0x034F
    1250:	f0 91 50 03 	lds	r31, 0x0350
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	94 2b       	or	r25, r20
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	80 83       	st	Z, r24
    1264:	00 91 4f 03 	lds	r16, 0x034F
    1268:	10 91 50 03 	lds	r17, 0x0350
    126c:	0f 5f       	subi	r16, 0xFF	; 255
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	10 93 50 03 	sts	0x0350, r17
    1274:	00 93 4f 03 	sts	0x034F, r16
    1278:	a0 90 41 03 	lds	r10, 0x0341
    127c:	b0 90 42 03 	lds	r11, 0x0342
    1280:	e0 91 43 03 	lds	r30, 0x0343
    1284:	f0 91 44 03 	lds	r31, 0x0344
    1288:	6f 01       	movw	r12, r30
    128a:	61 81       	ldd	r22, Z+1	; 0x01
    128c:	72 81       	ldd	r23, Z+2	; 0x02
    128e:	6a 9d       	mul	r22, r10
    1290:	70 01       	movw	r14, r0
    1292:	6b 9d       	mul	r22, r11
    1294:	f0 0c       	add	r15, r0
    1296:	7a 9d       	mul	r23, r10
    1298:	f0 0c       	add	r15, r0
    129a:	11 24       	eor	r1, r1
    129c:	c8 01       	movw	r24, r16
    129e:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodhi4>
    12a2:	ec 01       	movw	r28, r24
    12a4:	80 81       	ld	r24, Z
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__vector_21+0xac>
    12aa:	48 c0       	rjmp	.+144    	; 0x133c <__vector_21+0x13c>
    12ac:	20 97       	sbiw	r28, 0x00	; 0
    12ae:	39 f4       	brne	.+14     	; 0x12be <__vector_21+0xbe>
    12b0:	a5 01       	movw	r20, r10
    12b2:	56 95       	lsr	r21
    12b4:	47 95       	ror	r20
    12b6:	46 17       	cp	r20, r22
    12b8:	57 07       	cpc	r21, r23
    12ba:	09 f4       	brne	.+2      	; 0x12be <__vector_21+0xbe>
    12bc:	9c c0       	rjmp	.+312    	; 0x13f6 <__vector_21+0x1f6>
    12be:	0e 15       	cp	r16, r14
    12c0:	1f 05       	cpc	r17, r15
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__vector_21+0xc6>
    12c4:	6b c0       	rjmp	.+214    	; 0x139c <__vector_21+0x19c>
    12c6:	f6 01       	movw	r30, r12
    12c8:	95 81       	ldd	r25, Z+5	; 0x05
    12ca:	99 23       	and	r25, r25
    12cc:	59 f0       	breq	.+22     	; 0x12e4 <__vector_21+0xe4>
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	90 ff       	sbrs	r25, 0
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <__vector_21+0xdc>
    12d4:	cc 23       	and	r28, r28
    12d6:	09 f4       	brne	.+2      	; 0x12da <__vector_21+0xda>
    12d8:	58 c0       	rjmp	.+176    	; 0x138a <__vector_21+0x18a>
    12da:	c1 50       	subi	r28, 0x01	; 1
    12dc:	96 95       	lsr	r25
    12de:	2f 5f       	subi	r18, 0xFF	; 255
    12e0:	91 11       	cpse	r25, r1
    12e2:	f6 cf       	rjmp	.-20     	; 0x12d0 <__vector_21+0xd0>
    12e4:	27 e0       	ldi	r18, 0x07	; 7
    12e6:	80 91 7c 00 	lds	r24, 0x007C
    12ea:	88 7f       	andi	r24, 0xF8	; 248
    12ec:	28 2b       	or	r18, r24
    12ee:	20 93 7c 00 	sts	0x007C, r18
    12f2:	80 91 7a 00 	lds	r24, 0x007A
    12f6:	80 64       	ori	r24, 0x40	; 64
    12f8:	80 93 7a 00 	sts	0x007A, r24
    12fc:	10 92 3b 03 	sts	0x033B, r1
    1300:	06 da       	rcall	.-3060   	; 0x70e <chSchIsPreemptionRequired>
    1302:	81 11       	cpse	r24, r1
    1304:	14 da       	rcall	.-3032   	; 0x72e <chSchDoReschedule>
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti
    133c:	0e 15       	cp	r16, r14
    133e:	1f 05       	cpc	r17, r15
    1340:	09 f0       	breq	.+2      	; 0x1344 <__vector_21+0x144>
    1342:	c1 cf       	rjmp	.-126    	; 0x12c6 <__vector_21+0xc6>
    1344:	80 91 7a 00 	lds	r24, 0x007A
    1348:	8f 7b       	andi	r24, 0xBF	; 191
    134a:	80 93 7a 00 	sts	0x007A, r24
    134e:	03 80       	ldd	r0, Z+3	; 0x03
    1350:	f4 81       	ldd	r31, Z+4	; 0x04
    1352:	e0 2d       	mov	r30, r0
    1354:	30 97       	sbiw	r30, 0x00	; 0
    1356:	09 f4       	brne	.+2      	; 0x135a <__vector_21+0x15a>
    1358:	46 c0       	rjmp	.+140    	; 0x13e6 <__vector_21+0x1e6>
    135a:	84 e0       	ldi	r24, 0x04	; 4
    135c:	80 93 3c 03 	sts	0x033C, r24
    1360:	40 91 41 03 	lds	r20, 0x0341
    1364:	50 91 42 03 	lds	r21, 0x0342
    1368:	60 91 3f 03 	lds	r22, 0x033F
    136c:	70 91 40 03 	lds	r23, 0x0340
    1370:	8c e3       	ldi	r24, 0x3C	; 60
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	09 95       	icall
    1376:	80 91 3c 03 	lds	r24, 0x033C
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	a1 f1       	breq	.+104    	; 0x13e6 <__vector_21+0x1e6>
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	85 e4       	ldi	r24, 0x45	; 69
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	1f db       	rcall	.-2498   	; 0x9c6 <chThdResumeI>
    1388:	b9 cf       	rjmp	.-142    	; 0x12fc <__vector_21+0xfc>
    138a:	27 70       	andi	r18, 0x07	; 7
    138c:	ac cf       	rjmp	.-168    	; 0x12e6 <__vector_21+0xe6>
    138e:	e0 91 43 03 	lds	r30, 0x0343
    1392:	f0 91 44 03 	lds	r31, 0x0344
    1396:	80 81       	ld	r24, Z
    1398:	88 23       	and	r24, r24
    139a:	a1 f2       	breq	.-88     	; 0x1344 <__vector_21+0x144>
    139c:	23 81       	ldd	r18, Z+3	; 0x03
    139e:	34 81       	ldd	r19, Z+4	; 0x04
    13a0:	21 15       	cp	r18, r1
    13a2:	31 05       	cpc	r19, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <__vector_21+0x1a8>
    13a6:	aa cf       	rjmp	.-172    	; 0x12fc <__vector_21+0xfc>
    13a8:	40 91 41 03 	lds	r20, 0x0341
    13ac:	50 91 42 03 	lds	r21, 0x0342
    13b0:	42 30       	cpi	r20, 0x02	; 2
    13b2:	51 05       	cpc	r21, r1
    13b4:	d8 f1       	brcs	.+118    	; 0x142c <__vector_21+0x22c>
    13b6:	56 95       	lsr	r21
    13b8:	47 95       	ror	r20
    13ba:	61 81       	ldd	r22, Z+1	; 0x01
    13bc:	72 81       	ldd	r23, Z+2	; 0x02
    13be:	66 0f       	add	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	64 9f       	mul	r22, r20
    13c4:	c0 01       	movw	r24, r0
    13c6:	65 9f       	mul	r22, r21
    13c8:	90 0d       	add	r25, r0
    13ca:	74 9f       	mul	r23, r20
    13cc:	90 0d       	add	r25, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	60 91 3f 03 	lds	r22, 0x033F
    13d4:	70 91 40 03 	lds	r23, 0x0340
    13d8:	68 0f       	add	r22, r24
    13da:	79 1f       	adc	r23, r25
    13dc:	8c e3       	ldi	r24, 0x3C	; 60
    13de:	93 e0       	ldi	r25, 0x03	; 3
    13e0:	f9 01       	movw	r30, r18
    13e2:	09 95       	icall
    13e4:	8b cf       	rjmp	.-234    	; 0x12fc <__vector_21+0xfc>
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	80 93 3c 03 	sts	0x033C, r24
    13ec:	10 92 44 03 	sts	0x0344, r1
    13f0:	10 92 43 03 	sts	0x0343, r1
    13f4:	c4 cf       	rjmp	.-120    	; 0x137e <__vector_21+0x17e>
    13f6:	03 80       	ldd	r0, Z+3	; 0x03
    13f8:	f4 81       	ldd	r31, Z+4	; 0x04
    13fa:	e0 2d       	mov	r30, r0
    13fc:	30 97       	sbiw	r30, 0x00	; 0
    13fe:	89 f0       	breq	.+34     	; 0x1422 <__vector_21+0x222>
    1400:	b9 01       	movw	r22, r18
    1402:	8c e3       	ldi	r24, 0x3C	; 60
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	09 95       	icall
    1408:	80 91 4f 03 	lds	r24, 0x034F
    140c:	90 91 50 03 	lds	r25, 0x0350
    1410:	8e 15       	cp	r24, r14
    1412:	9f 05       	cpc	r25, r15
    1414:	09 f4       	brne	.+2      	; 0x1418 <__vector_21+0x218>
    1416:	bb cf       	rjmp	.-138    	; 0x138e <__vector_21+0x18e>
    1418:	c0 90 43 03 	lds	r12, 0x0343
    141c:	d0 90 44 03 	lds	r13, 0x0344
    1420:	52 cf       	rjmp	.-348    	; 0x12c6 <__vector_21+0xc6>
    1422:	0e 15       	cp	r16, r14
    1424:	1f 05       	cpc	r17, r15
    1426:	09 f0       	breq	.+2      	; 0x142a <__vector_21+0x22a>
    1428:	4e cf       	rjmp	.-356    	; 0x12c6 <__vector_21+0xc6>
    142a:	68 cf       	rjmp	.-304    	; 0x12fc <__vector_21+0xfc>
    142c:	60 91 3f 03 	lds	r22, 0x033F
    1430:	70 91 40 03 	lds	r23, 0x0340
    1434:	8c e3       	ldi	r24, 0x3C	; 60
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	f9 01       	movw	r30, r18
    143a:	09 95       	icall
    143c:	5f cf       	rjmp	.-322    	; 0x12fc <__vector_21+0xfc>

0000143e <adc_lld_init>:
    143e:	8c e3       	ldi	r24, 0x3C	; 60
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	23 de       	rcall	.-954    	; 0x108a <adcObjectInit>
    1444:	8f e0       	ldi	r24, 0x0F	; 15
    1446:	80 93 7a 00 	sts	0x007A, r24
    144a:	10 92 7c 00 	sts	0x007C, r1
    144e:	08 95       	ret

00001450 <adc_lld_start>:
    1450:	dc 01       	movw	r26, r24
    1452:	2c 91       	ld	r18, X
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	79 f0       	breq	.+30     	; 0x1476 <adc_lld_start+0x26>
    1458:	dc 01       	movw	r26, r24
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	ed 91       	ld	r30, X+
    145e:	fc 91       	ld	r31, X
    1460:	12 97       	sbiw	r26, 0x02	; 2
    1462:	30 97       	sbiw	r30, 0x00	; 0
    1464:	39 f0       	breq	.+14     	; 0x1474 <adc_lld_start+0x24>
    1466:	80 81       	ld	r24, Z
    1468:	82 95       	swap	r24
    146a:	88 0f       	add	r24, r24
    146c:	88 0f       	add	r24, r24
    146e:	80 7c       	andi	r24, 0xC0	; 192
    1470:	80 93 7c 00 	sts	0x007C, r24
    1474:	08 95       	ret
    1476:	20 91 7a 00 	lds	r18, 0x007A
    147a:	20 68       	ori	r18, 0x80	; 128
    147c:	20 93 7a 00 	sts	0x007A, r18
    1480:	eb cf       	rjmp	.-42     	; 0x1458 <adc_lld_start+0x8>

00001482 <adc_lld_start_conversion>:
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {

  adcp->currentBufferPosition=0;
    1482:	dc 01       	movw	r26, r24
    1484:	54 96       	adiw	r26, 0x14	; 20
    1486:	1c 92       	st	X, r1
    1488:	1e 92       	st	-X, r1
    148a:	53 97       	sbiw	r26, 0x13	; 19

  setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
    148c:	17 96       	adiw	r26, 0x07	; 7
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	18 97       	sbiw	r26, 0x08	; 8
    1494:	85 81       	ldd	r24, Z+5	; 0x05
 * @retval                    -1 in case of error.
 */
static size_t getAdcChannelNumberFromMask(uint8_t mask,
                                          uint8_t currentChannel) {

  for (uint8_t i = 0; mask > 0; i++) {
    1496:	88 23       	and	r24, r24
    1498:	51 f0       	breq	.+20     	; 0x14ae <adc_lld_start_conversion+0x2c>
    if (mask & 0x01) {
    149a:	80 fd       	sbrc	r24, 0
    149c:	17 c0       	rjmp	.+46     	; 0x14cc <adc_lld_start_conversion+0x4a>
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <adc_lld_start_conversion+0x24>
    14a2:	80 fd       	sbrc	r24, 0
    14a4:	11 c0       	rjmp	.+34     	; 0x14c8 <adc_lld_start_conversion+0x46>
      if (!currentChannel)
        return i;
      currentChannel--;
    }
    mask >>= 1;
    14a6:	86 95       	lsr	r24
 * @retval                    -1 in case of error.
 */
static size_t getAdcChannelNumberFromMask(uint8_t mask,
                                          uint8_t currentChannel) {

  for (uint8_t i = 0; mask > 0; i++) {
    14a8:	9f 5f       	subi	r25, 0xFF	; 255
    14aa:	81 11       	cpse	r24, r1
    14ac:	fa cf       	rjmp	.-12     	; 0x14a2 <adc_lld_start_conversion+0x20>
    14ae:	97 e0       	ldi	r25, 0x07	; 7
 *
 * @param[in] channelNum  the channel number to set.
 */
static void setAdcChannel(uint8_t channelNum) {

  ADMUX = (ADMUX & 0xf8) | (channelNum & 0x07);
    14b0:	80 91 7c 00 	lds	r24, 0x007C
    14b4:	88 7f       	andi	r24, 0xF8	; 248
    14b6:	98 2b       	or	r25, r24
    14b8:	90 93 7c 00 	sts	0x007C, r25
void adc_lld_start_conversion(ADCDriver *adcp) {

  adcp->currentBufferPosition=0;

  setAdcChannel(getAdcChannelNumberFromMask(adcp->grpp->channelsMask,0));
  ADCSRA |= 1 << ADSC;
    14bc:	80 91 7a 00 	lds	r24, 0x007A
    14c0:	80 64       	ori	r24, 0x40	; 64
    14c2:	80 93 7a 00 	sts	0x007A, r24
    14c6:	08 95       	ret
    14c8:	97 70       	andi	r25, 0x07	; 7
    14ca:	f2 cf       	rjmp	.-28     	; 0x14b0 <adc_lld_start_conversion+0x2e>
 */
static size_t getAdcChannelNumberFromMask(uint8_t mask,
                                          uint8_t currentChannel) {

  for (uint8_t i = 0; mask > 0; i++) {
    if (mask & 0x01) {
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	f0 cf       	rjmp	.-32     	; 0x14b0 <adc_lld_start_conversion+0x2e>

000014d0 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    14d0:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
    14d2:	80 81       	ld	r24, Z
    14d4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
    14d6:	81 81       	ldd	r24, Z+1	; 0x01
    14d8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
    14de:	83 81       	ldd	r24, Z+3	; 0x03
    14e0:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
    14e6:	85 81       	ldd	r24, Z+5	; 0x05
    14e8:	8a b9       	out	0x0a, r24	; 10
    14ea:	08 95       	ret

000014ec <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 3b 03 	sts	0x033B, r24
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    1514:	0e 94 e5 00 	call	0x1ca	; 0x1ca <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    1518:	10 92 3b 03 	sts	0x033B, r1
    151c:	f8 d8       	rcall	.-3600   	; 0x70e <chSchIsPreemptionRequired>
    151e:	81 11       	cpse	r24, r1
    1520:	06 d9       	rcall	.-3572   	; 0x72e <chSchDoReschedule>
}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
    1544:	10 92 80 00 	sts	0x0080, r1
  TCCR1B     = _BV(WGM12);
    1548:	e1 e8       	ldi	r30, 0x81	; 129
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	88 e0       	ldi	r24, 0x08	; 8
    154e:	80 83       	st	Z, r24

  /* start disabled. */
  TCCR1C     = 0;
    1550:	10 92 82 00 	sts	0x0082, r1
  OCR1A      = 0;
    1554:	10 92 89 00 	sts	0x0089, r1
    1558:	10 92 88 00 	sts	0x0088, r1
  TCNT1      = 0;
    155c:	10 92 85 00 	sts	0x0085, r1
    1560:	10 92 84 00 	sts	0x0084, r1
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */    
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
    1568:	10 92 6f 00 	sts	0x006F, r1
  TCCR1B     = PRESCALER;
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	80 83       	st	Z, r24
    1570:	08 95       	ret

00001572 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
    1572:	e1 ec       	ldi	r30, 0xC1	; 193
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 62       	ori	r24, 0x20	; 32
    157a:	80 83       	st	Z, r24
    157c:	08 95       	ret

0000157e <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 3b 03 	sts	0x033B, r24

  sra = UCSR0A;
    15a6:	80 91 c0 00 	lds	r24, 0x00C0
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    15aa:	98 2f       	mov	r25, r24
    15ac:	9c 71       	andi	r25, 0x1C	; 28
    15ae:	d9 f4       	brne	.+54     	; 0x15e6 <__vector_18+0x68>
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
    15b0:	60 91 c6 00 	lds	r22, 0x00C6
    15b4:	81 e5       	ldi	r24, 0x51	; 81
    15b6:	93 e0       	ldi	r25, 0x03	; 3
    15b8:	e4 dd       	rcall	.-1080   	; 0x1182 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
    15ba:	10 92 3b 03 	sts	0x033B, r1
    15be:	a7 d8       	rcall	.-3762   	; 0x70e <chSchIsPreemptionRequired>
    15c0:	81 11       	cpse	r24, r1
    15c2:	b5 d8       	rcall	.-3734   	; 0x72e <chSchDoReschedule>
}
    15c4:	ff 91       	pop	r31
    15c6:	ef 91       	pop	r30
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	7f 91       	pop	r23
    15d2:	6f 91       	pop	r22
    15d4:	5f 91       	pop	r21
    15d6:	4f 91       	pop	r20
    15d8:	3f 91       	pop	r19
    15da:	2f 91       	pop	r18
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	0f 90       	pop	r0
    15e2:	1f 90       	pop	r1
    15e4:	18 95       	reti
    upe = (1 << UPE1);
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    15e6:	83 fd       	sbrc	r24, 3
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <__vector_18+0x7e>
/*==========================================================================*/
/* Driver local functions.                                                  */
/*==========================================================================*/

static void set_error(uint8_t sra, SerialDriver *sdp) {
  eventflags_t sts = 0;
    15ea:	60 e0       	ldi	r22, 0x00	; 0
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    15ec:	82 fd       	sbrc	r24, 2
    sts |= SD_PARITY_ERROR;
    15ee:	60 62       	ori	r22, 0x20	; 32
  if (sra & fe)
    15f0:	84 fd       	sbrc	r24, 4
    sts |= SD_FRAMING_ERROR;
    15f2:	60 64       	ori	r22, 0x40	; 64
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
    15f4:	83 e5       	ldi	r24, 0x53	; 83
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	47 da       	rcall	.-2930   	; 0xa88 <chEvtBroadcastFlagsI>
    15fa:	da cf       	rjmp	.-76     	; 0x15b0 <__vector_18+0x32>
    fe = (1 << FE1);
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
    15fc:	60 e8       	ldi	r22, 0x80	; 128
    15fe:	f6 cf       	rjmp	.-20     	; 0x15ec <__vector_18+0x6e>

00001600 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 3b 03 	sts	0x033B, r24

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
    1628:	81 e5       	ldi	r24, 0x51	; 81
    162a:	93 e0       	ldi	r25, 0x03	; 3
    162c:	ce dd       	rcall	.-1124   	; 0x11ca <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    162e:	97 fd       	sbrc	r25, 7
    1630:	18 c0       	rjmp	.+48     	; 0x1662 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
    1632:	80 93 c6 00 	sts	0x00C6, r24

  OSAL_IRQ_EPILOGUE();
    1636:	10 92 3b 03 	sts	0x033B, r1
    163a:	69 d8       	rcall	.-3886   	; 0x70e <chSchIsPreemptionRequired>
    163c:	81 11       	cpse	r24, r1
    163e:	77 d8       	rcall	.-3858   	; 0x72e <chSchDoReschedule>
}
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
    1662:	80 91 c1 00 	lds	r24, 0x00C1
    1666:	8f 7d       	andi	r24, 0xDF	; 223
    1668:	80 93 c1 00 	sts	0x00C1, r24
    166c:	e4 cf       	rjmp	.-56     	; 0x1636 <__vector_19+0x36>

0000166e <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
    166e:	49 eb       	ldi	r20, 0xB9	; 185
    1670:	5a e0       	ldi	r21, 0x0A	; 10
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	81 e5       	ldi	r24, 0x51	; 81
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	4d cd       	rjmp	.-1382   	; 0x1116 <sdObjectInit>

0000167c <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    167c:	61 15       	cp	r22, r1
    167e:	71 05       	cpc	r23, r1
    1680:	19 f1       	breq	.+70     	; 0x16c8 <sd_lld_start+0x4c>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
    1682:	81 55       	subi	r24, 0x51	; 81
    1684:	93 40       	sbci	r25, 0x03	; 3
    1686:	09 f0       	breq	.+2      	; 0x168a <sd_lld_start+0xe>
    1688:	08 95       	ret
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
    168a:	fb 01       	movw	r30, r22
    168c:	80 81       	ld	r24, Z
    168e:	80 93 c4 00 	sts	0x00C4, r24
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
    1692:	81 81       	ldd	r24, Z+1	; 0x01
    1694:	8f 70       	andi	r24, 0x0F	; 15
    1696:	80 93 c5 00 	sts	0x00C5, r24
  UCSR0A = (1 << U2X0);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    16a0:	88 e9       	ldi	r24, 0x98	; 152
    16a2:	80 93 c1 00 	sts	0x00C1, r24
  switch (config->sc_bits_per_char) {
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	b9 f0       	breq	.+46     	; 0x16da <sd_lld_start+0x5e>
    16ac:	a0 f0       	brcs	.+40     	; 0x16d6 <sd_lld_start+0x5a>
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	71 f0       	breq	.+28     	; 0x16ce <sd_lld_start+0x52>
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	71 f4       	brne	.+28     	; 0x16d2 <sd_lld_start+0x56>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
    16b6:	80 91 c1 00 	lds	r24, 0x00C1
    16ba:	84 60       	ori	r24, 0x04	; 4
    16bc:	80 93 c1 00 	sts	0x00C1, r24
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    16c0:	86 e0       	ldi	r24, 0x06	; 6
  }
  
#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
    16c2:	80 93 c2 00 	sts	0x00C2, r24
    16c6:	08 95       	ret
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    16c8:	67 e4       	ldi	r22, 0x47	; 71
    16ca:	71 e0       	ldi	r23, 0x01	; 1
    16cc:	da cf       	rjmp	.-76     	; 0x1682 <sd_lld_start+0x6>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    16ce:	84 e0       	ldi	r24, 0x04	; 4
    16d0:	f8 cf       	rjmp	.-16     	; 0x16c2 <sd_lld_start+0x46>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    16d2:	86 e0       	ldi	r24, 0x06	; 6
    16d4:	f6 cf       	rjmp	.-20     	; 0x16c2 <sd_lld_start+0x46>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	f4 cf       	rjmp	.-24     	; 0x16c2 <sd_lld_start+0x46>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	f2 cf       	rjmp	.-28     	; 0x16c2 <sd_lld_start+0x46>

000016de <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
    16de:	10 92 69 00 	sts	0x0069, r1
  EIMSK  = 0x00;
    16e2:	1d ba       	out	0x1d, r1	; 29
    16e4:	08 95       	ret

000016e6 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
    16e6:	2f 92       	push	r2
    16e8:	3f 92       	push	r3
    16ea:	4f 92       	push	r4
    16ec:	5f 92       	push	r5
    16ee:	6f 92       	push	r6
    16f0:	7f 92       	push	r7
    16f2:	8f 92       	push	r8
    16f4:	9f 92       	push	r9
    16f6:	af 92       	push	r10
    16f8:	bf 92       	push	r11
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	00 d0       	rcall	.+0      	; 0x170c <long_to_string_with_divisor+0x26>
    170c:	1f 92       	push	r1
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	4c 01       	movw	r8, r24
    1714:	24 2e       	mov	r2, r20
    1716:	5b 83       	std	Y+3, r21	; 0x03
    1718:	b6 2e       	mov	r11, r22
    171a:	a7 2e       	mov	r10, r23
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    171c:	e1 14       	cp	r14, r1
    171e:	f1 04       	cpc	r15, r1
    1720:	01 05       	cpc	r16, r1
    1722:	11 05       	cpc	r17, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <long_to_string_with_divisor+0x42>
    1726:	5d c0       	rjmp	.+186    	; 0x17e2 <long_to_string_with_divisor+0xfc>
    1728:	67 01       	movw	r12, r14
    172a:	78 01       	movw	r14, r16
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    172c:	c4 01       	movw	r24, r8
    172e:	0b 96       	adiw	r24, 0x0b	; 11
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	29 01       	movw	r4, r18
    1736:	61 2c       	mov	r6, r1
    1738:	71 2c       	mov	r7, r1
    173a:	8c 01       	movw	r16, r24
  do {
    i = (int)(l % radix);
    173c:	62 2d       	mov	r22, r2
    173e:	7b 81       	ldd	r23, Y+3	; 0x03
    1740:	8b 2d       	mov	r24, r11
    1742:	9a 2d       	mov	r25, r10
    1744:	a3 01       	movw	r20, r6
    1746:	92 01       	movw	r18, r4
    1748:	0e 94 41 14 	call	0x2882	; 0x2882 <__divmodsi4>
    i += '0';
    174c:	fb 01       	movw	r30, r22
    174e:	f0 96       	adiw	r30, 0x30	; 48
    if (i > '9')
    1750:	ea 33       	cpi	r30, 0x3A	; 58
    1752:	f1 05       	cpc	r31, r1
    1754:	0c f0       	brlt	.+2      	; 0x1758 <long_to_string_with_divisor+0x72>
      i += 'A' - '0' - 10;
    1756:	37 96       	adiw	r30, 0x07	; 7
    *--q = i;
    1758:	3e 2e       	mov	r3, r30
    175a:	d8 01       	movw	r26, r16
    175c:	ee 93       	st	-X, r30
    175e:	8d 01       	movw	r16, r26
    l /= radix;
    1760:	62 2d       	mov	r22, r2
    1762:	7b 81       	ldd	r23, Y+3	; 0x03
    1764:	8b 2d       	mov	r24, r11
    1766:	9a 2d       	mov	r25, r10
    1768:	a3 01       	movw	r20, r6
    176a:	92 01       	movw	r18, r4
    176c:	0e 94 41 14 	call	0x2882	; 0x2882 <__divmodsi4>
    1770:	22 2e       	mov	r2, r18
    1772:	3b 83       	std	Y+3, r19	; 0x03
    1774:	b4 2e       	mov	r11, r20
    1776:	a5 2e       	mov	r10, r21
  } while ((ll /= radix) != 0);
    1778:	c7 01       	movw	r24, r14
    177a:	b6 01       	movw	r22, r12
    177c:	a3 01       	movw	r20, r6
    177e:	92 01       	movw	r18, r4
    1780:	0e 94 41 14 	call	0x2882	; 0x2882 <__divmodsi4>
    1784:	69 01       	movw	r12, r18
    1786:	7a 01       	movw	r14, r20
    1788:	23 2b       	or	r18, r19
    178a:	24 2b       	or	r18, r20
    178c:	25 2b       	or	r18, r21
    178e:	b1 f6       	brne	.-84     	; 0x173c <long_to_string_with_divisor+0x56>
    1790:	f4 01       	movw	r30, r8
    1792:	98 01       	movw	r18, r16
    1794:	2f 5f       	subi	r18, 0xFF	; 255
    1796:	3f 4f       	sbci	r19, 0xFF	; 255

  i = (int)(p + MAX_FILLER - q);
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	80 1b       	sub	r24, r16
    179e:	91 0b       	sbc	r25, r17
    17a0:	88 0d       	add	r24, r8
    17a2:	99 1d       	adc	r25, r9
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <long_to_string_with_divisor+0xc6>
    17a6:	d9 01       	movw	r26, r18
    17a8:	3d 90       	ld	r3, X+
    17aa:	9d 01       	movw	r18, r26
  do
    *p++ = *q++;
    17ac:	31 92       	st	Z+, r3
  while (--i);
    17ae:	e8 17       	cp	r30, r24
    17b0:	f9 07       	cpc	r31, r25
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <long_to_string_with_divisor+0xc0>

  return p;
}
    17b4:	cf 01       	movw	r24, r30
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	3f 90       	pop	r3
    17de:	2f 90       	pop	r2
    17e0:	08 95       	ret
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
    17e2:	c4 2e       	mov	r12, r20
    17e4:	db 80       	ldd	r13, Y+3	; 0x03
    17e6:	e6 2e       	mov	r14, r22
    17e8:	f7 2e       	mov	r15, r23
    17ea:	a0 cf       	rjmp	.-192    	; 0x172c <long_to_string_with_divisor+0x46>

000017ec <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    17ec:	2f 92       	push	r2
    17ee:	3f 92       	push	r3
    17f0:	4f 92       	push	r4
    17f2:	5f 92       	push	r5
    17f4:	6f 92       	push	r6
    17f6:	7f 92       	push	r7
    17f8:	8f 92       	push	r8
    17fa:	9f 92       	push	r9
    17fc:	af 92       	push	r10
    17fe:	bf 92       	push	r11
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	e3 97       	sbiw	r28, 0x33	; 51
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	1c 01       	movw	r2, r24
    1822:	5b 01       	movw	r10, r22
    1824:	4a 01       	movw	r8, r20
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    1826:	1d 8e       	std	Y+29, r1	; 0x1d
    1828:	1c 8e       	std	Y+28, r1	; 0x1c
    182a:	9e 01       	movw	r18, r28
    182c:	2e 5f       	subi	r18, 0xFE	; 254
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	39 8f       	std	Y+25, r19	; 0x19
    1832:	28 8f       	std	Y+24, r18	; 0x18
    1834:	ce 01       	movw	r24, r28
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	9b 8f       	std	Y+27, r25	; 0x1b
    183a:	8a 8f       	std	Y+26, r24	; 0x1a
    183c:	28 1b       	sub	r18, r24
    183e:	39 0b       	sbc	r19, r25
    1840:	3b a3       	std	Y+35, r19	; 0x23
    1842:	2a a3       	std	Y+34, r18	; 0x22
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	31 09       	sbc	r19, r1
    1848:	3d a3       	std	Y+37, r19	; 0x25
    184a:	2c a3       	std	Y+36, r18	; 0x24
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    184c:	85 01       	movw	r16, r10
    184e:	0f 5f       	subi	r16, 0xFF	; 255
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	d5 01       	movw	r26, r10
    1854:	6c 91       	ld	r22, X
    if (c == 0)
    1856:	66 23       	and	r22, r22
    1858:	b9 f0       	breq	.+46     	; 0x1888 <chvprintf+0x9c>
      return n;
    if (c != '%') {
    185a:	65 32       	cpi	r22, 0x25	; 37
    185c:	81 f1       	breq	.+96     	; 0x18be <chvprintf+0xd2>
      streamPut(chp, (uint8_t)c);
    185e:	d1 01       	movw	r26, r2
    1860:	ed 91       	ld	r30, X+
    1862:	fc 91       	ld	r31, X
    1864:	06 80       	ldd	r0, Z+6	; 0x06
    1866:	f7 81       	ldd	r31, Z+7	; 0x07
    1868:	e0 2d       	mov	r30, r0
    186a:	c1 01       	movw	r24, r2
    186c:	09 95       	icall
      n++;
    186e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1870:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1872:	31 96       	adiw	r30, 0x01	; 1
    1874:	fd 8f       	std	Y+29, r31	; 0x1d
    1876:	ec 8f       	std	Y+28, r30	; 0x1c
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1878:	58 01       	movw	r10, r16
    187a:	85 01       	movw	r16, r10
    187c:	0f 5f       	subi	r16, 0xFF	; 255
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	d5 01       	movw	r26, r10
    1882:	6c 91       	ld	r22, X
    if (c == 0)
    1884:	61 11       	cpse	r22, r1
    1886:	e9 cf       	rjmp	.-46     	; 0x185a <chvprintf+0x6e>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    1888:	8c 8d       	ldd	r24, Y+28	; 0x1c
    188a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    188c:	e3 96       	adiw	r28, 0x33	; 51
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	8f 90       	pop	r8
    18b0:	7f 90       	pop	r7
    18b2:	6f 90       	pop	r6
    18b4:	5f 90       	pop	r5
    18b6:	4f 90       	pop	r4
    18b8:	3f 90       	pop	r3
    18ba:	2f 90       	pop	r2
    18bc:	08 95       	ret
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
    18be:	d5 01       	movw	r26, r10
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	8c 91       	ld	r24, X
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	8d 32       	cpi	r24, 0x2D	; 45
    18c8:	09 f4       	brne	.+2      	; 0x18cc <chvprintf+0xe0>
    18ca:	c0 c1       	rjmp	.+896    	; 0x1c4c <chvprintf+0x460>
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    18cc:	61 2c       	mov	r6, r1
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
    18ce:	80 33       	cpi	r24, 0x30	; 48
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <chvprintf+0xe8>
    18d2:	b5 c1       	rjmp	.+874    	; 0x1c3e <chvprintf+0x452>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    18d4:	90 e2       	ldi	r25, 0x20	; 32
    18d6:	79 2e       	mov	r7, r25
    18d8:	a8 01       	movw	r20, r16
    18da:	4f 5f       	subi	r20, 0xFF	; 255
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
    18de:	c1 2c       	mov	r12, r1
    18e0:	d1 2c       	mov	r13, r1
    18e2:	d4 01       	movw	r26, r8
    18e4:	12 c0       	rjmp	.+36     	; 0x190a <chvprintf+0x11e>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
    18e6:	9c 91       	ld	r25, X
    18e8:	12 96       	adiw	r26, 0x02	; 2
      else
        break;
      width = width * 10 + c;
    18ea:	96 01       	movw	r18, r12
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	cc 0c       	add	r12, r12
    18f2:	dd 1c       	adc	r13, r13
    18f4:	cc 0c       	add	r12, r12
    18f6:	dd 1c       	adc	r13, r13
    18f8:	cc 0c       	add	r12, r12
    18fa:	dd 1c       	adc	r13, r13
    18fc:	c2 0e       	add	r12, r18
    18fe:	d3 1e       	adc	r13, r19
    1900:	c9 0e       	add	r12, r25
    1902:	d1 1c       	adc	r13, r1
    1904:	4f 5f       	subi	r20, 0xFF	; 255
    1906:	5f 4f       	sbci	r21, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
    190a:	fa 01       	movw	r30, r20
      if (c >= '0' && c <= '9')
    190c:	90 ed       	ldi	r25, 0xD0	; 208
    190e:	98 0f       	add	r25, r24
    1910:	9a 30       	cpi	r25, 0x0A	; 10
    1912:	58 f3       	brcs	.-42     	; 0x18ea <chvprintf+0xfe>
        c -= '0';
      else if (c == '*')
    1914:	8a 32       	cpi	r24, 0x2A	; 42
    1916:	39 f3       	breq	.-50     	; 0x18e6 <chvprintf+0xfa>
    1918:	5a 01       	movw	r10, r20
    191a:	4d 01       	movw	r8, r26
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
    191c:	00 e0       	ldi	r16, 0x00	; 0
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	8e 32       	cpi	r24, 0x2E	; 46
    1922:	09 f4       	brne	.+2      	; 0x1926 <chvprintf+0x13a>
    1924:	85 c0       	rjmp	.+266    	; 0x1a30 <chvprintf+0x244>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1926:	98 2f       	mov	r25, r24
    1928:	9f 7d       	andi	r25, 0xDF	; 223
    192a:	9c 34       	cpi	r25, 0x4C	; 76
    192c:	09 f4       	brne	.+2      	; 0x1930 <chvprintf+0x144>
    192e:	92 c0       	rjmp	.+292    	; 0x1a54 <chvprintf+0x268>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
    1930:	31 e0       	ldi	r19, 0x01	; 1
    1932:	9f eb       	ldi	r25, 0xBF	; 191
    1934:	98 0f       	add	r25, r24
    1936:	9a 31       	cpi	r25, 0x1A	; 26
    1938:	08 f0       	brcs	.+2      	; 0x193c <chvprintf+0x150>
    193a:	30 e0       	ldi	r19, 0x00	; 0

    /* Command decoding.*/
    switch (c) {
    193c:	48 2f       	mov	r20, r24
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	fa 01       	movw	r30, r20
    1942:	e4 54       	subi	r30, 0x44	; 68
    1944:	f1 09       	sbc	r31, r1
    1946:	e5 33       	cpi	r30, 0x35	; 53
    1948:	f1 05       	cpc	r31, r1
    194a:	08 f4       	brcc	.+2      	; 0x194e <chvprintf+0x162>
    194c:	87 c1       	rjmp	.+782    	; 0x1c5c <chvprintf+0x470>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	8a a1       	ldd	r24, Y+34	; 0x22
    1952:	9b a1       	ldd	r25, Y+35	; 0x23
    1954:	4c a0       	ldd	r4, Y+36	; 0x24
    1956:	5d a0       	ldd	r5, Y+37	; 0x25
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1958:	fe 01       	movw	r30, r28
    195a:	31 96       	adiw	r30, 0x01	; 1
    195c:	7f 01       	movw	r14, r30
    195e:	c8 1a       	sub	r12, r24
    1960:	d9 0a       	sbc	r13, r25
    1962:	d7 fc       	sbrc	r13, 7
    1964:	bf c0       	rjmp	.+382    	; 0x1ae4 <chvprintf+0x2f8>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1966:	61 10       	cpse	r6, r1
    1968:	87 c0       	rjmp	.+270    	; 0x1a78 <chvprintf+0x28c>
      width = -width;
    196a:	00 27       	eor	r16, r16
    196c:	11 27       	eor	r17, r17
    196e:	0c 19       	sub	r16, r12
    1970:	1d 09       	sbc	r17, r13
    if (width < 0) {
    1972:	09 f4       	brne	.+2      	; 0x1976 <chvprintf+0x18a>
    1974:	ba c1       	rjmp	.+884    	; 0x1cea <chvprintf+0x4fe>
      if (*s == '-' && filler == '0') {
    1976:	d7 01       	movw	r26, r14
    1978:	8c 91       	ld	r24, X
    197a:	8d 32       	cpi	r24, 0x2D	; 45
    197c:	09 f4       	brne	.+2      	; 0x1980 <chvprintf+0x194>
    197e:	bd c1       	rjmp	.+890    	; 0x1cfa <chvprintf+0x50e>
        streamPut(chp, (uint8_t)*s++);
        n++;
    1980:	68 01       	movw	r12, r16
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    1982:	d1 01       	movw	r26, r2
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	06 80       	ldd	r0, Z+6	; 0x06
    198a:	f7 81       	ldd	r31, Z+7	; 0x07
    198c:	e0 2d       	mov	r30, r0
    198e:	67 2d       	mov	r22, r7
    1990:	c1 01       	movw	r24, r2
    1992:	09 95       	icall
        n++;
      } while (++width != 0);
    1994:	bf ef       	ldi	r27, 0xFF	; 255
    1996:	cb 1a       	sub	r12, r27
    1998:	db 0a       	sbc	r13, r27
    199a:	99 f7       	brne	.-26     	; 0x1982 <chvprintf+0x196>
    199c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    199e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    19a0:	20 1b       	sub	r18, r16
    19a2:	31 0b       	sbc	r19, r17
    19a4:	3d 8f       	std	Y+29, r19	; 0x1d
    19a6:	2c 8f       	std	Y+28, r18	; 0x1c
    }
    while (--i >= 0) {
    19a8:	57 fc       	sbrc	r5, 7
    19aa:	50 cf       	rjmp	.-352    	; 0x184c <chvprintf+0x60>
    19ac:	87 01       	movw	r16, r14
    19ae:	72 01       	movw	r14, r4
      streamPut(chp, (uint8_t)*s++);
    19b0:	f8 01       	movw	r30, r16
    19b2:	61 91       	ld	r22, Z+
    19b4:	8f 01       	movw	r16, r30
    19b6:	d1 01       	movw	r26, r2
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	06 80       	ldd	r0, Z+6	; 0x06
    19be:	f7 81       	ldd	r31, Z+7	; 0x07
    19c0:	e0 2d       	mov	r30, r0
    19c2:	c1 01       	movw	r24, r2
    19c4:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    19c6:	b1 e0       	ldi	r27, 0x01	; 1
    19c8:	eb 1a       	sub	r14, r27
    19ca:	f1 08       	sbc	r15, r1
    19cc:	88 f7       	brcc	.-30     	; 0x19b0 <chvprintf+0x1c4>
    19ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	57 fc       	sbrc	r5, 7
    19d6:	8e c1       	rjmp	.+796    	; 0x1cf4 <chvprintf+0x508>
    19d8:	9c 01       	movw	r18, r24
    19da:	24 0d       	add	r18, r4
    19dc:	35 1d       	adc	r19, r5
    19de:	3d 8f       	std	Y+29, r19	; 0x1d
    19e0:	2c 8f       	std	Y+28, r18	; 0x1c
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    19e2:	c1 14       	cp	r12, r1
    19e4:	d1 04       	cpc	r13, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <chvprintf+0x1fe>
    19e8:	31 cf       	rjmp	.-414    	; 0x184c <chvprintf+0x60>
    19ea:	86 01       	movw	r16, r12
      streamPut(chp, (uint8_t)filler);
    19ec:	d1 01       	movw	r26, r2
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	06 80       	ldd	r0, Z+6	; 0x06
    19f4:	f7 81       	ldd	r31, Z+7	; 0x07
    19f6:	e0 2d       	mov	r30, r0
    19f8:	67 2d       	mov	r22, r7
    19fa:	c1 01       	movw	r24, r2
    19fc:	09 95       	icall
      n++;
      width--;
    19fe:	01 50       	subi	r16, 0x01	; 1
    1a00:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1a02:	a1 f7       	brne	.-24     	; 0x19ec <chvprintf+0x200>
    1a04:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1a06:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1a08:	ec 0d       	add	r30, r12
    1a0a:	fd 1d       	adc	r31, r13
    1a0c:	fd 8f       	std	Y+29, r31	; 0x1d
    1a0e:	ec 8f       	std	Y+28, r30	; 0x1c
    1a10:	1d cf       	rjmp	.-454    	; 0x184c <chvprintf+0x60>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
    1a12:	9c 91       	ld	r25, X
    1a14:	12 96       	adiw	r26, 0x02	; 2
        else
          break;
        precision *= 10;
    1a16:	98 01       	movw	r18, r16
    1a18:	22 0f       	add	r18, r18
    1a1a:	33 1f       	adc	r19, r19
    1a1c:	00 0f       	add	r16, r16
    1a1e:	11 1f       	adc	r17, r17
    1a20:	00 0f       	add	r16, r16
    1a22:	11 1f       	adc	r17, r17
    1a24:	00 0f       	add	r16, r16
    1a26:	11 1f       	adc	r17, r17
    1a28:	02 0f       	add	r16, r18
    1a2a:	13 1f       	adc	r17, r19
        precision += c;
    1a2c:	09 0f       	add	r16, r25
    1a2e:	11 1d       	adc	r17, r1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
    1a30:	ff ef       	ldi	r31, 0xFF	; 255
    1a32:	af 1a       	sub	r10, r31
    1a34:	bf 0a       	sbc	r11, r31
    1a36:	f5 01       	movw	r30, r10
    1a38:	31 97       	sbiw	r30, 0x01	; 1
    1a3a:	80 81       	ld	r24, Z
        if (c >= '0' && c <= '9')
    1a3c:	90 ed       	ldi	r25, 0xD0	; 208
    1a3e:	98 0f       	add	r25, r24
    1a40:	9a 30       	cpi	r25, 0x0A	; 10
    1a42:	48 f3       	brcs	.-46     	; 0x1a16 <chvprintf+0x22a>
          c -= '0';
        else if (c == '*')
    1a44:	8a 32       	cpi	r24, 0x2A	; 42
    1a46:	29 f3       	breq	.-54     	; 0x1a12 <chvprintf+0x226>
    1a48:	4d 01       	movw	r8, r26
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	9f 7d       	andi	r25, 0xDF	; 223
    1a4e:	9c 34       	cpi	r25, 0x4C	; 76
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <chvprintf+0x268>
    1a52:	6e cf       	rjmp	.-292    	; 0x1930 <chvprintf+0x144>
      is_long = TRUE;
      if (*fmt)
    1a54:	d5 01       	movw	r26, r10
    1a56:	2c 91       	ld	r18, X
    1a58:	22 23       	and	r18, r18
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <chvprintf+0x272>
    1a5c:	78 cf       	rjmp	.-272    	; 0x194e <chvprintf+0x162>
        c = *fmt++;
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	a3 1a       	sub	r10, r19
    1a62:	b3 0a       	sbc	r11, r19
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1a64:	82 2f       	mov	r24, r18
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e4 54       	subi	r30, 0x44	; 68
    1a6c:	f1 09       	sbc	r31, r1
    1a6e:	e5 33       	cpi	r30, 0x35	; 53
    1a70:	f1 05       	cpc	r31, r1
    1a72:	28 f0       	brcs	.+10     	; 0x1a7e <chvprintf+0x292>
    1a74:	82 2f       	mov	r24, r18
    1a76:	6b cf       	rjmp	.-298    	; 0x194e <chvprintf+0x162>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1a78:	57 fc       	sbrc	r5, 7
    1a7a:	b3 cf       	rjmp	.-154    	; 0x19e2 <chvprintf+0x1f6>
    1a7c:	97 cf       	rjmp	.-210    	; 0x19ac <chvprintf+0x1c0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1a7e:	ec 5c       	subi	r30, 0xCC	; 204
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	1b c7       	rjmp	.+3638   	; 0x28ba <__tablejump2__>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1a84:	94 01       	movw	r18, r8
    1a86:	2e 5f       	subi	r18, 0xFE	; 254
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	d4 01       	movw	r26, r8
    1a8c:	ed 90       	ld	r14, X+
    1a8e:	fc 90       	ld	r15, X
    1a90:	e1 14       	cp	r14, r1
    1a92:	f1 04       	cpc	r15, r1
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <chvprintf+0x2ac>
    1a96:	8c c1       	rjmp	.+792    	; 0x1db0 <chvprintf+0x5c4>
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1a98:	f7 01       	movw	r30, r14
    1a9a:	80 81       	ld	r24, Z
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
    1a9c:	01 15       	cp	r16, r1
    1a9e:	11 05       	cpc	r17, r1
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <chvprintf+0x2b8>
    1aa2:	59 c1       	rjmp	.+690    	; 0x1d56 <chvprintf+0x56a>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1aa4:	88 23       	and	r24, r24
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <chvprintf+0x2be>
    1aa8:	88 c1       	rjmp	.+784    	; 0x1dba <chvprintf+0x5ce>
    1aaa:	01 50       	subi	r16, 0x01	; 1
    1aac:	11 09       	sbc	r17, r1
    1aae:	c7 01       	movw	r24, r14
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	a9 01       	movw	r20, r18
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <chvprintf+0x2d2>
    1ab6:	01 50       	subi	r16, 0x01	; 1
    1ab8:	11 09       	sbc	r17, r1
    1aba:	08 f4       	brcc	.+2      	; 0x1abe <chvprintf+0x2d2>
    1abc:	54 c1       	rjmp	.+680    	; 0x1d66 <chvprintf+0x57a>
    1abe:	fc 01       	movw	r30, r24
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	30 81       	ld	r19, Z
    1ac4:	31 11       	cpse	r19, r1
    1ac6:	f7 cf       	rjmp	.-18     	; 0x1ab6 <chvprintf+0x2ca>
    1ac8:	cf 01       	movw	r24, r30
    1aca:	8e 19       	sub	r24, r14
    1acc:	9f 09       	sbc	r25, r15
    1ace:	2c 01       	movw	r4, r24
    1ad0:	f1 e0       	ldi	r31, 0x01	; 1
    1ad2:	4f 1a       	sub	r4, r31
    1ad4:	51 08       	sbc	r5, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1ad6:	4a 01       	movw	r8, r20
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1ad8:	50 e2       	ldi	r21, 0x20	; 32
    1ada:	75 2e       	mov	r7, r21
    1adc:	c8 1a       	sub	r12, r24
    1ade:	d9 0a       	sbc	r13, r25
    1ae0:	d7 fe       	sbrs	r13, 7
    1ae2:	41 cf       	rjmp	.-382    	; 0x1966 <chvprintf+0x17a>
    1ae4:	c1 2c       	mov	r12, r1
    1ae6:	d1 2c       	mov	r13, r1
    1ae8:	3e cf       	rjmp	.-388    	; 0x1966 <chvprintf+0x17a>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
    1aea:	f4 01       	movw	r30, r8
    1aec:	34 96       	adiw	r30, 0x04	; 4
    1aee:	ff a7       	std	Y+47, r31	; 0x2f
    1af0:	ee a7       	std	Y+46, r30	; 0x2e
    1af2:	d4 01       	movw	r26, r8
    1af4:	8d 91       	ld	r24, X+
    1af6:	9d 91       	ld	r25, X+
    1af8:	0d 90       	ld	r0, X+
    1afa:	bc 91       	ld	r27, X
    1afc:	a0 2d       	mov	r26, r0
    1afe:	8e 8f       	std	Y+30, r24	; 0x1e
    1b00:	9f 8f       	std	Y+31, r25	; 0x1f
    1b02:	a8 a3       	std	Y+32, r26	; 0x20
    1b04:	b9 a3       	std	Y+33, r27	; 0x21
      if (f < 0) {
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	38 d5       	rcall	.+2672   	; 0x2582 <__cmpsf2>
    1b12:	87 fd       	sbrc	r24, 7
    1b14:	34 c1       	rjmp	.+616    	; 0x1d7e <chvprintf+0x592>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1b16:	9a 8c       	ldd	r9, Y+26	; 0x1a
    1b18:	8b 8c       	ldd	r8, Y+27	; 0x1b
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
    1b1a:	01 2e       	mov	r0, r17
    1b1c:	00 0c       	add	r0, r0
    1b1e:	22 0b       	sbc	r18, r18
    1b20:	33 0b       	sbc	r19, r19
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    1b22:	01 50       	subi	r16, 0x01	; 1
    1b24:	11 09       	sbc	r17, r1
    1b26:	21 09       	sbc	r18, r1
    1b28:	31 09       	sbc	r19, r1
    1b2a:	09 30       	cpi	r16, 0x09	; 9
    1b2c:	11 05       	cpc	r17, r1
    1b2e:	21 05       	cpc	r18, r1
    1b30:	31 05       	cpc	r19, r1
    1b32:	20 f0       	brcs	.+8      	; 0x1b3c <chvprintf+0x350>
    1b34:	08 e0       	ldi	r16, 0x08	; 8
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
    1b3c:	00 0f       	add	r16, r16
    1b3e:	11 1f       	adc	r17, r17
    1b40:	00 0f       	add	r16, r16
    1b42:	11 1f       	adc	r17, r17
    1b44:	f8 01       	movw	r30, r16
    1b46:	e9 5a       	subi	r30, 0xA9	; 169
    1b48:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1b50:	b3 81       	ldd	r27, Z+3	; 0x03
    1b52:	8e a3       	std	Y+38, r24	; 0x26
    1b54:	9f a3       	std	Y+39, r25	; 0x27
    1b56:	a8 a7       	std	Y+40, r26	; 0x28
    1b58:	b9 a7       	std	Y+41, r27	; 0x29

  l = (long)num;
    1b5a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b5c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b5e:	88 a1       	ldd	r24, Y+32	; 0x20
    1b60:	99 a1       	ldd	r25, Y+33	; 0x21
    1b62:	13 d5       	rcall	.+2598   	; 0x258a <__fixsfsi>
    1b64:	6a a7       	std	Y+42, r22	; 0x2a
    1b66:	7b a7       	std	Y+43, r23	; 0x2b
    1b68:	8c a7       	std	Y+44, r24	; 0x2c
    1b6a:	9d a7       	std	Y+45, r25	; 0x2d
  p = long_to_string_with_divisor(p, l, 10, 0);
    1b6c:	e1 2c       	mov	r14, r1
    1b6e:	f1 2c       	mov	r15, r1
    1b70:	87 01       	movw	r16, r14
    1b72:	2a e0       	ldi	r18, 0x0A	; 10
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	ab 01       	movw	r20, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	89 2d       	mov	r24, r9
    1b7c:	98 2d       	mov	r25, r8
    1b7e:	b3 dd       	rcall	.-1178   	; 0x16e6 <long_to_string_with_divisor>
  *p++ = '.';
    1b80:	4c 01       	movw	r8, r24
    1b82:	8e e2       	ldi	r24, 0x2E	; 46
    1b84:	d4 01       	movw	r26, r8
    1b86:	8d 93       	st	X+, r24
    1b88:	4d 01       	movw	r8, r26
  l = (long)((num - l) * precision);
    1b8a:	6a a5       	ldd	r22, Y+42	; 0x2a
    1b8c:	7b a5       	ldd	r23, Y+43	; 0x2b
    1b8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b90:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b92:	2e d5       	rcall	.+2652   	; 0x25f0 <__floatsisf>
    1b94:	9b 01       	movw	r18, r22
    1b96:	ac 01       	movw	r20, r24
    1b98:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b9a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b9c:	88 a1       	ldd	r24, Y+32	; 0x20
    1b9e:	99 a1       	ldd	r25, Y+33	; 0x21
    1ba0:	8b d4       	rcall	.+2326   	; 0x24b8 <__subsf3>
    1ba2:	6e 8f       	std	Y+30, r22	; 0x1e
    1ba4:	7f 8f       	std	Y+31, r23	; 0x1f
    1ba6:	88 a3       	std	Y+32, r24	; 0x20
    1ba8:	99 a3       	std	Y+33, r25	; 0x21
    1baa:	6e a1       	ldd	r22, Y+38	; 0x26
    1bac:	7f a1       	ldd	r23, Y+39	; 0x27
    1bae:	88 a5       	ldd	r24, Y+40	; 0x28
    1bb0:	99 a5       	ldd	r25, Y+41	; 0x29
    1bb2:	1c d5       	rcall	.+2616   	; 0x25ec <__floatunsisf>
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1bba:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1bbc:	88 a1       	ldd	r24, Y+32	; 0x20
    1bbe:	99 a1       	ldd	r25, Y+33	; 0x21
    1bc0:	c7 d5       	rcall	.+2958   	; 0x2750 <__mulsf3>
    1bc2:	7b 01       	movw	r14, r22
    1bc4:	8c 01       	movw	r16, r24
  return long_to_string_with_divisor(p, l, 10, precision / 10);
    1bc6:	6e a1       	ldd	r22, Y+38	; 0x26
    1bc8:	7f a1       	ldd	r23, Y+39	; 0x27
    1bca:	88 a5       	ldd	r24, Y+40	; 0x28
    1bcc:	99 a5       	ldd	r25, Y+41	; 0x29
    1bce:	2a e0       	ldi	r18, 0x0A	; 10
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	33 d6       	rcall	.+3174   	; 0x283e <__udivmodsi4>
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
    1bd8:	c8 01       	movw	r24, r16
    1bda:	b7 01       	movw	r22, r14
    1bdc:	28 ab       	std	Y+48, r18	; 0x30
    1bde:	39 ab       	std	Y+49, r19	; 0x31
    1be0:	4a ab       	std	Y+50, r20	; 0x32
    1be2:	5b ab       	std	Y+51, r21	; 0x33
    1be4:	d2 d4       	rcall	.+2468   	; 0x258a <__fixsfsi>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
    1be6:	28 a9       	ldd	r18, Y+48	; 0x30
    1be8:	39 a9       	ldd	r19, Y+49	; 0x31
    1bea:	4a a9       	ldd	r20, Y+50	; 0x32
    1bec:	5b a9       	ldd	r21, Y+51	; 0x33
    1bee:	79 01       	movw	r14, r18
    1bf0:	8a 01       	movw	r16, r20
    1bf2:	2a e0       	ldi	r18, 0x0A	; 10
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	ab 01       	movw	r20, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	c4 01       	movw	r24, r8
    1bfc:	74 dd       	rcall	.-1304   	; 0x16e6 <long_to_string_with_divisor>
    1bfe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c00:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1c02:	8e 1b       	sub	r24, r30
    1c04:	9f 0b       	sbc	r25, r31
    1c06:	2c 01       	movw	r4, r24
    1c08:	f1 e0       	ldi	r31, 0x01	; 1
    1c0a:	4f 1a       	sub	r4, r31
    1c0c:	51 08       	sbc	r5, r1
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
    1c0e:	8e a4       	ldd	r8, Y+46	; 0x2e
    1c10:	9f a4       	ldd	r9, Y+47	; 0x2f
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1c12:	9e 01       	movw	r18, r28
    1c14:	2f 5f       	subi	r18, 0xFF	; 255
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	79 01       	movw	r14, r18
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
      break;
    1c1a:	a1 ce       	rjmp	.-702    	; 0x195e <chvprintf+0x172>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1c1c:	d4 01       	movw	r26, r8
    1c1e:	8c 91       	ld	r24, X
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	8a a1       	ldd	r24, Y+34	; 0x22
    1c24:	9b a1       	ldd	r25, Y+35	; 0x23
    1c26:	4c a0       	ldd	r4, Y+36	; 0x24
    1c28:	5d a0       	ldd	r5, Y+37	; 0x25
    1c2a:	f4 01       	movw	r30, r8
    1c2c:	32 96       	adiw	r30, 0x02	; 2
    1c2e:	4f 01       	movw	r8, r30
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1c30:	70 e2       	ldi	r23, 0x20	; 32
    1c32:	77 2e       	mov	r7, r23
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1c34:	9e 01       	movw	r18, r28
    1c36:	2f 5f       	subi	r18, 0xFF	; 255
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	79 01       	movw	r14, r18
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1c3c:	90 ce       	rjmp	.-736    	; 0x195e <chvprintf+0x172>
    1c3e:	f8 01       	movw	r30, r16
    1c40:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
    1c42:	0f 5f       	subi	r16, 0xFF	; 255
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    1c46:	20 e3       	ldi	r18, 0x30	; 48
    1c48:	72 2e       	mov	r7, r18
    1c4a:	46 ce       	rjmp	.-884    	; 0x18d8 <chvprintf+0xec>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
    1c4c:	85 01       	movw	r16, r10
    1c4e:	0e 5f       	subi	r16, 0xFE	; 254
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	12 96       	adiw	r26, 0x02	; 2
    1c54:	8c 91       	ld	r24, X
      left_align = TRUE;
    1c56:	66 24       	eor	r6, r6
    1c58:	63 94       	inc	r6
    1c5a:	39 ce       	rjmp	.-910    	; 0x18ce <chvprintf+0xe2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1c5c:	e7 59       	subi	r30, 0x97	; 151
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	2c c6       	rjmp	.+3160   	; 0x28ba <__tablejump2__>
    1c62:	31 e0       	ldi	r19, 0x01	; 1
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1c68:	31 11       	cpse	r19, r1
    1c6a:	20 c0       	rjmp	.+64     	; 0x1cac <chvprintf+0x4c0>
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
    1c6c:	d4 01       	movw	r26, r8
    1c6e:	4d 91       	ld	r20, X+
    1c70:	5c 91       	ld	r21, X
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	f4 01       	movw	r30, r8
    1c78:	32 96       	adiw	r30, 0x02	; 2
    1c7a:	4f 01       	movw	r8, r30
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
    1c7c:	e1 2c       	mov	r14, r1
    1c7e:	f1 2c       	mov	r15, r1
    1c80:	87 01       	movw	r16, r14
    1c82:	9c 01       	movw	r18, r24
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	2e dd       	rcall	.-1444   	; 0x16e6 <long_to_string_with_divisor>
    1c8a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1c8c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1c8e:	82 1b       	sub	r24, r18
    1c90:	93 0b       	sbc	r25, r19
    1c92:	2c 01       	movw	r4, r24
    1c94:	31 e0       	ldi	r19, 0x01	; 1
    1c96:	43 1a       	sub	r4, r19
    1c98:	51 08       	sbc	r5, r1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    1c9a:	de 01       	movw	r26, r28
    1c9c:	11 96       	adiw	r26, 0x01	; 1
    1c9e:	7d 01       	movw	r14, r26
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    1ca0:	5e ce       	rjmp	.-836    	; 0x195e <chvprintf+0x172>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1ca2:	31 e0       	ldi	r19, 0x01	; 1
    1ca4:	88 e0       	ldi	r24, 0x08	; 8
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
    1ca8:	33 23       	and	r19, r19
    1caa:	01 f3       	breq	.-64     	; 0x1c6c <chvprintf+0x480>
        l = va_arg(ap, unsigned long);
    1cac:	d4 01       	movw	r26, r8
    1cae:	4d 91       	ld	r20, X+
    1cb0:	5d 91       	ld	r21, X+
    1cb2:	6d 91       	ld	r22, X+
    1cb4:	7c 91       	ld	r23, X
    1cb6:	f4 01       	movw	r30, r8
    1cb8:	34 96       	adiw	r30, 0x04	; 4
    1cba:	4f 01       	movw	r8, r30
    1cbc:	df cf       	rjmp	.-66     	; 0x1c7c <chvprintf+0x490>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
    1cbe:	31 11       	cpse	r19, r1
    1cc0:	34 c0       	rjmp	.+104    	; 0x1d2a <chvprintf+0x53e>
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
    1cc2:	d4 01       	movw	r26, r8
    1cc4:	4d 91       	ld	r20, X+
    1cc6:	5c 91       	ld	r21, X
    1cc8:	05 2e       	mov	r0, r21
    1cca:	00 0c       	add	r0, r0
    1ccc:	66 0b       	sbc	r22, r22
    1cce:	77 0b       	sbc	r23, r23
    1cd0:	f4 01       	movw	r30, r8
    1cd2:	32 96       	adiw	r30, 0x02	; 2
    1cd4:	4f 01       	movw	r8, r30
      if (l < 0) {
    1cd6:	77 fd       	sbrc	r23, 7
    1cd8:	32 c0       	rjmp	.+100    	; 0x1d3e <chvprintf+0x552>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    1cda:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cdc:	9b 8d       	ldd	r25, Y+27	; 0x1b
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
    1cde:	e1 2c       	mov	r14, r1
    1ce0:	f1 2c       	mov	r15, r1
    1ce2:	87 01       	movw	r16, r14
    1ce4:	2a e0       	ldi	r18, 0x0A	; 10
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	cf cf       	rjmp	.-98     	; 0x1c88 <chvprintf+0x49c>
    1cea:	c1 2c       	mov	r12, r1
    1cec:	d1 2c       	mov	r13, r1
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1cee:	57 fe       	sbrs	r5, 7
    1cf0:	5d ce       	rjmp	.-838    	; 0x19ac <chvprintf+0x1c0>
    1cf2:	ac cd       	rjmp	.-1192   	; 0x184c <chvprintf+0x60>
    1cf4:	41 2c       	mov	r4, r1
    1cf6:	51 2c       	mov	r5, r1
    1cf8:	6f ce       	rjmp	.-802    	; 0x19d8 <chvprintf+0x1ec>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
    1cfa:	b0 e3       	ldi	r27, 0x30	; 48
    1cfc:	7b 12       	cpse	r7, r27
    1cfe:	40 ce       	rjmp	.-896    	; 0x1980 <chvprintf+0x194>
        streamPut(chp, (uint8_t)*s++);
    1d00:	ef ef       	ldi	r30, 0xFF	; 255
    1d02:	ee 1a       	sub	r14, r30
    1d04:	fe 0a       	sbc	r15, r30
    1d06:	d1 01       	movw	r26, r2
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	06 80       	ldd	r0, Z+6	; 0x06
    1d0e:	f7 81       	ldd	r31, Z+7	; 0x07
    1d10:	e0 2d       	mov	r30, r0
    1d12:	6d e2       	ldi	r22, 0x2D	; 45
    1d14:	c1 01       	movw	r24, r2
    1d16:	09 95       	icall
        n++;
    1d18:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d1a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d1c:	31 96       	adiw	r30, 0x01	; 1
    1d1e:	fd 8f       	std	Y+29, r31	; 0x1d
    1d20:	ec 8f       	std	Y+28, r30	; 0x1c
    1d22:	f1 e0       	ldi	r31, 0x01	; 1
    1d24:	4f 1a       	sub	r4, r31
    1d26:	51 08       	sbc	r5, r1
    1d28:	2b ce       	rjmp	.-938    	; 0x1980 <chvprintf+0x194>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
    1d2a:	d4 01       	movw	r26, r8
    1d2c:	4d 91       	ld	r20, X+
    1d2e:	5d 91       	ld	r21, X+
    1d30:	6d 91       	ld	r22, X+
    1d32:	7c 91       	ld	r23, X
    1d34:	f4 01       	movw	r30, r8
    1d36:	34 96       	adiw	r30, 0x04	; 4
    1d38:	4f 01       	movw	r8, r30
      else
        l = va_arg(ap, int);
      if (l < 0) {
    1d3a:	77 ff       	sbrs	r23, 7
    1d3c:	ce cf       	rjmp	.-100    	; 0x1cda <chvprintf+0x4ee>
        *p++ = '-';
    1d3e:	8d e2       	ldi	r24, 0x2D	; 45
    1d40:	89 83       	std	Y+1, r24	; 0x01
        l = -l;
    1d42:	70 95       	com	r23
    1d44:	60 95       	com	r22
    1d46:	50 95       	com	r21
    1d48:	41 95       	neg	r20
    1d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4c:	6f 4f       	sbci	r22, 0xFF	; 255
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
    1d50:	88 8d       	ldd	r24, Y+24	; 0x18
    1d52:	99 8d       	ldd	r25, Y+25	; 0x19
    1d54:	c4 cf       	rjmp	.-120    	; 0x1cde <chvprintf+0x4f2>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
    1d56:	88 23       	and	r24, r24
    1d58:	81 f1       	breq	.+96     	; 0x1dba <chvprintf+0x5ce>
    1d5a:	0e ef       	ldi	r16, 0xFE	; 254
    1d5c:	1f e7       	ldi	r17, 0x7F	; 127
    1d5e:	a7 ce       	rjmp	.-690    	; 0x1aae <chvprintf+0x2c2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1d60:	80 e1       	ldi	r24, 0x10	; 16
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	81 cf       	rjmp	.-254    	; 0x1c68 <chvprintf+0x47c>
    1d66:	9a 01       	movw	r18, r20
    1d68:	cf 01       	movw	r24, r30
    1d6a:	8e 19       	sub	r24, r14
    1d6c:	9f 09       	sbc	r25, r15
    1d6e:	2c 01       	movw	r4, r24
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	44 1a       	sub	r4, r20
    1d74:	51 08       	sbc	r5, r1
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
    1d76:	49 01       	movw	r8, r18
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	74 2e       	mov	r7, r20
    1d7c:	f0 cd       	rjmp	.-1056   	; 0x195e <chvprintf+0x172>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
    1d7e:	8d e2       	ldi	r24, 0x2D	; 45
    1d80:	89 83       	std	Y+1, r24	; 0x01
        f = -f;
    1d82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d84:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d86:	a8 a1       	ldd	r26, Y+32	; 0x20
    1d88:	b9 a1       	ldd	r27, Y+33	; 0x21
    1d8a:	b0 58       	subi	r27, 0x80	; 128
    1d8c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d8e:	9f 8f       	std	Y+31, r25	; 0x1f
    1d90:	a8 a3       	std	Y+32, r26	; 0x20
    1d92:	b9 a3       	std	Y+33, r27	; 0x21
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
    1d94:	98 8c       	ldd	r9, Y+24	; 0x18
    1d96:	89 8c       	ldd	r8, Y+25	; 0x19
    1d98:	c0 ce       	rjmp	.-640    	; 0x1b1a <chvprintf+0x32e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    1d9a:	80 e1       	ldi	r24, 0x10	; 16
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
    1d9e:	d4 01       	movw	r26, r8
    1da0:	4d 91       	ld	r20, X+
    1da2:	5d 91       	ld	r21, X+
    1da4:	6d 91       	ld	r22, X+
    1da6:	7c 91       	ld	r23, X
    1da8:	f4 01       	movw	r30, r8
    1daa:	34 96       	adiw	r30, 0x04	; 4
    1dac:	4f 01       	movw	r8, r30
    1dae:	66 cf       	rjmp	.-308    	; 0x1c7c <chvprintf+0x490>
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
    1db0:	60 e5       	ldi	r22, 0x50	; 80
    1db2:	e6 2e       	mov	r14, r22
    1db4:	61 e0       	ldi	r22, 0x01	; 1
    1db6:	f6 2e       	mov	r15, r22
    1db8:	6f ce       	rjmp	.-802    	; 0x1a98 <chvprintf+0x2ac>
    1dba:	d7 fc       	sbrc	r13, 7
    1dbc:	0c c0       	rjmp	.+24     	; 0x1dd6 <chvprintf+0x5ea>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
    1dbe:	49 01       	movw	r8, r18
    1dc0:	61 10       	cpse	r6, r1
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <chvprintf+0x5e4>
    1dc4:	44 24       	eor	r4, r4
    1dc6:	4a 94       	dec	r4
    1dc8:	54 2c       	mov	r5, r4
    1dca:	90 e2       	ldi	r25, 0x20	; 32
    1dcc:	79 2e       	mov	r7, r25
    1dce:	cd cd       	rjmp	.-1126   	; 0x196a <chvprintf+0x17e>
    1dd0:	20 e2       	ldi	r18, 0x20	; 32
    1dd2:	72 2e       	mov	r7, r18
    1dd4:	06 ce       	rjmp	.-1012   	; 0x19e2 <chvprintf+0x1f6>
    1dd6:	c1 2c       	mov	r12, r1
    1dd8:	d1 2c       	mov	r13, r1
    1dda:	f1 cf       	rjmp	.-30     	; 0x1dbe <chvprintf+0x5d2>

00001ddc <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1de4:	ae 01       	movw	r20, r28
    1de6:	47 5f       	subi	r20, 0xF7	; 247
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	fc dc       	rcall	.-1544   	; 0x17ec <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <adc_cb>:
 */

volatile uint8_t flag;

void adc_cb(ADCDriver *adcp, adcsample_t *buffer, size_t n){
  flag = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	80 93 9a 03 	sts	0x039A, r24
    1e00:	08 95       	ret

00001e02 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
    1e02:	e0 91 0f 03 	lds	r30, 0x030F
    1e06:	f0 91 10 03 	lds	r31, 0x0310
    1e0a:	8b e7       	ldi	r24, 0x7B	; 123
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	94 87       	std	Z+12, r25	; 0x0c
    1e10:	83 87       	std	Z+11, r24	; 0x0b
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("Blinker");
  while (true) {
    palTogglePad(IOPORT2, PORTB_LED1);
    1e12:	c0 e2       	ldi	r28, 0x20	; 32
    1e14:	85 b1       	in	r24, 0x05	; 5
    1e16:	8c 27       	eor	r24, r28
    1e18:	85 b9       	out	0x05, r24	; 5
    chThdSleepMilliseconds(100);
    1e1a:	8b e1       	ldi	r24, 0x1B	; 27
    1e1c:	96 e0       	ldi	r25, 0x06	; 6
    1e1e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <chThdSleep>
  }
    1e22:	f8 cf       	rjmp	.-16     	; 0x1e14 <Thread1+0x12>

00001e24 <main>:


#define NBR_CHANNELS 1
#define DEPTH 5
#define ADC_CONVERTER_FACTOR 0.00477922077922078 // ((2,5*1.0552519480519482)/552)
int main(void) {
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	61 97       	sbiw	r28, 0x11	; 17
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    1e38:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <halInit>
  chSysInit();
    1e3c:	0e 94 ce 00 	call	0x19c	; 0x19c <chSysInit>

  /*
   * Activates the serial driver 1 using the driver default configuration.
   */
  sdStart(&SD1, NULL);
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	81 e5       	ldi	r24, 0x51	; 81
    1e46:	93 e0       	ldi	r25, 0x03	; 3
    1e48:	91 d9       	rcall	.-3294   	; 0x116c <sdStart>

  /*
   * 
   */
  ADCConfig cfg = {ANALOG_REFERENCE_AVCC};
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
  ADCConversionGroup group = {0, NBR_CHANNELS, adc_cb, 0x7};
    1e4e:	86 e0       	ldi	r24, 0x06	; 6
    1e50:	e0 e0       	ldi	r30, 0x00	; 0
    1e52:	f1 e0       	ldi	r31, 0x01	; 1
    1e54:	de 01       	movw	r26, r28
    1e56:	1b 96       	adiw	r26, 0x0b	; 11
    1e58:	01 90       	ld	r0, Z+
    1e5a:	0d 92       	st	X+, r0
    1e5c:	8a 95       	dec	r24
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <main+0x34>
  adcsample_t buffer[DEPTH*NBR_CHANNELS];

  adcStart(&ADCD1, &cfg);
    1e60:	be 01       	movw	r22, r28
    1e62:	6f 5e       	subi	r22, 0xEF	; 239
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	8c e3       	ldi	r24, 0x3C	; 60
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	1f d9       	rcall	.-3522   	; 0x10aa <adcStart>

  /*
   * Starts the LED blinker thread.
   */
  // LEDs Thread
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
    1e6c:	00 e0       	ldi	r16, 0x00	; 0
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	3f e0       	ldi	r19, 0x0F	; 15
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	61 e8       	ldi	r22, 0x81	; 129
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	8a e1       	ldi	r24, 0x1A	; 26
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <chThdCreateStatic>
    1e82:	ce 01       	movw	r24, r28
    1e84:	0b 96       	adiw	r24, 0x0b	; 11
    1e86:	5c 01       	movw	r10, r24

        // }else if(buffer[i] >= 550){
        //   chprintf((BaseSequentialStream *)&SD1, "2,5v\n\r");
        // }

        chprintf((BaseSequentialStream *)&SD1, "%.2f V\n\r",0.1911688311688311*buffer[i]);
    1e88:	83 e8       	ldi	r24, 0x83	; 131
    1e8a:	c8 2e       	mov	r12, r24
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	d8 2e       	mov	r13, r24
    1e90:	91 e5       	ldi	r25, 0x51	; 81
    1e92:	e9 2e       	mov	r14, r25
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	f9 2e       	mov	r15, r25
   */
  // LEDs Thread
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  while(TRUE) {
    adcStartConversion(&ADCD1, &group, buffer, DEPTH);
    1e98:	25 e0       	ldi	r18, 0x05	; 5
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea2:	b5 01       	movw	r22, r10
    1ea4:	8c e3       	ldi	r24, 0x3C	; 60
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	0d d9       	rcall	.-3558   	; 0x10c4 <adcStartConversion>
    while(!flag){
    1eaa:	80 91 9a 03 	lds	r24, 0x039A
    1eae:	88 23       	and	r24, r24
    1eb0:	e1 f3       	breq	.-8      	; 0x1eaa <main+0x86>

    }
      flag =0;
    1eb2:	10 92 9a 03 	sts	0x039A, r1
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	0f 5f       	subi	r16, 0xFF	; 255
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255

        // }else if(buffer[i] >= 550){
        //   chprintf((BaseSequentialStream *)&SD1, "2,5v\n\r");
        // }

        chprintf((BaseSequentialStream *)&SD1, "%.2f V\n\r",0.1911688311688311*buffer[i]);
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	61 91       	ld	r22, Z+
    1ec0:	71 91       	ld	r23, Z+
    1ec2:	8f 01       	movw	r16, r30
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	91 d3       	rcall	.+1826   	; 0x25ec <__floatunsisf>
    1eca:	23 ec       	ldi	r18, 0xC3	; 195
    1ecc:	31 ec       	ldi	r19, 0xC1	; 193
    1ece:	43 e4       	ldi	r20, 0x43	; 67
    1ed0:	5e e3       	ldi	r21, 0x3E	; 62
    1ed2:	3e d4       	rcall	.+2172   	; 0x2750 <__mulsf3>
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	7f 93       	push	r23
    1eda:	6f 93       	push	r22
    1edc:	df 92       	push	r13
    1ede:	cf 92       	push	r12
    1ee0:	ff 92       	push	r15
    1ee2:	ef 92       	push	r14
    1ee4:	7b df       	rcall	.-266    	; 0x1ddc <chprintf>
        // chprintf((BaseSequentialStream *)&SD1, ">> %d\n\r",buffer[i]);
        chThdSleepMilliseconds(500);
    1ee6:	84 e8       	ldi	r24, 0x84	; 132
    1ee8:	9e e1       	ldi	r25, 0x1E	; 30
    1eea:	0e 94 dd 04 	call	0x9ba	; 0x9ba <chThdSleep>

    }
      flag =0;
      // printf("%d", buffer[0]);
      
      for(int i = 0; i < DEPTH; i++){
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	0a 15       	cp	r16, r10
    1efa:	1b 05       	cpc	r17, r11
    1efc:	f9 f6       	brne	.-66     	; 0x1ebc <main+0x98>
    1efe:	cc cf       	rjmp	.-104    	; 0x1e98 <main+0x74>

00001f00 <vfprintf>:
    1f00:	ac e0       	ldi	r26, 0x0C	; 12
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e8       	ldi	r30, 0x85	; 133
    1f06:	ff e0       	ldi	r31, 0x0F	; 15
    1f08:	e2 c4       	rjmp	.+2500   	; 0x28ce <__prologue_saves__+0x8>
    1f0a:	6c 01       	movw	r12, r24
    1f0c:	5b 01       	movw	r10, r22
    1f0e:	7a 01       	movw	r14, r20
    1f10:	fc 01       	movw	r30, r24
    1f12:	17 82       	std	Z+7, r1	; 0x07
    1f14:	16 82       	std	Z+6, r1	; 0x06
    1f16:	83 81       	ldd	r24, Z+3	; 0x03
    1f18:	81 ff       	sbrs	r24, 1
    1f1a:	04 c1       	rjmp	.+520    	; 0x2124 <vfprintf+0x224>
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	4c 01       	movw	r8, r24
    1f22:	f6 01       	movw	r30, r12
    1f24:	03 81       	ldd	r16, Z+3	; 0x03
    1f26:	f5 01       	movw	r30, r10
    1f28:	03 fd       	sbrc	r16, 3
    1f2a:	15 91       	lpm	r17, Z+
    1f2c:	03 ff       	sbrs	r16, 3
    1f2e:	11 91       	ld	r17, Z+
    1f30:	5f 01       	movw	r10, r30
    1f32:	11 23       	and	r17, r17
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <vfprintf+0x38>
    1f36:	f2 c0       	rjmp	.+484    	; 0x211c <vfprintf+0x21c>
    1f38:	15 32       	cpi	r17, 0x25	; 37
    1f3a:	49 f4       	brne	.+18     	; 0x1f4e <vfprintf+0x4e>
    1f3c:	03 fd       	sbrc	r16, 3
    1f3e:	15 91       	lpm	r17, Z+
    1f40:	03 ff       	sbrs	r16, 3
    1f42:	11 91       	ld	r17, Z+
    1f44:	5f 01       	movw	r10, r30
    1f46:	15 32       	cpi	r17, 0x25	; 37
    1f48:	11 f0       	breq	.+4      	; 0x1f4e <vfprintf+0x4e>
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	19 c0       	rjmp	.+50     	; 0x1f80 <vfprintf+0x80>
    1f4e:	b6 01       	movw	r22, r12
    1f50:	81 2f       	mov	r24, r17
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	49 d5       	rcall	.+2706   	; 0x29e8 <fputc>
    1f56:	37 01       	movw	r6, r14
    1f58:	73 01       	movw	r14, r6
    1f5a:	e3 cf       	rjmp	.-58     	; 0x1f22 <vfprintf+0x22>
    1f5c:	11 23       	and	r17, r17
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <vfprintf+0x62>
    1f60:	dd c0       	rjmp	.+442    	; 0x211c <vfprintf+0x21c>
    1f62:	61 2f       	mov	r22, r17
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	83 e4       	ldi	r24, 0x43	; 67
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	2c 87       	std	Y+12, r18	; 0x0c
    1f6c:	eb d4       	rcall	.+2518   	; 0x2944 <strchr_P>
    1f6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f70:	89 2b       	or	r24, r25
    1f72:	49 f0       	breq	.+18     	; 0x1f86 <vfprintf+0x86>
    1f74:	f5 01       	movw	r30, r10
    1f76:	03 fd       	sbrc	r16, 3
    1f78:	15 91       	lpm	r17, Z+
    1f7a:	03 ff       	sbrs	r16, 3
    1f7c:	11 91       	ld	r17, Z+
    1f7e:	5f 01       	movw	r10, r30
    1f80:	27 ff       	sbrs	r18, 7
    1f82:	ec cf       	rjmp	.-40     	; 0x1f5c <vfprintf+0x5c>
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <vfprintf+0x98>
    1f86:	13 32       	cpi	r17, 0x23	; 35
    1f88:	29 f0       	breq	.+10     	; 0x1f94 <vfprintf+0x94>
    1f8a:	1c 36       	cpi	r17, 0x6C	; 108
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <vfprintf+0x90>
    1f8e:	cd c0       	rjmp	.+410    	; 0x212a <vfprintf+0x22a>
    1f90:	20 68       	ori	r18, 0x80	; 128
    1f92:	f0 cf       	rjmp	.-32     	; 0x1f74 <vfprintf+0x74>
    1f94:	20 e1       	ldi	r18, 0x10	; 16
    1f96:	ee cf       	rjmp	.-36     	; 0x1f74 <vfprintf+0x74>
    1f98:	02 2f       	mov	r16, r18
    1f9a:	11 23       	and	r17, r17
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <vfprintf+0xa0>
    1f9e:	be c0       	rjmp	.+380    	; 0x211c <vfprintf+0x21c>
    1fa0:	61 2f       	mov	r22, r17
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	8c e3       	ldi	r24, 0x3C	; 60
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	2c 87       	std	Y+12, r18	; 0x0c
    1faa:	cc d4       	rcall	.+2456   	; 0x2944 <strchr_P>
    1fac:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fae:	89 2b       	or	r24, r25
    1fb0:	41 f0       	breq	.+16     	; 0x1fc2 <vfprintf+0xc2>
    1fb2:	37 01       	movw	r6, r14
    1fb4:	f4 e0       	ldi	r31, 0x04	; 4
    1fb6:	6f 0e       	add	r6, r31
    1fb8:	71 1c       	adc	r7, r1
    1fba:	b6 01       	movw	r22, r12
    1fbc:	8f e3       	ldi	r24, 0x3F	; 63
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	11 c0       	rjmp	.+34     	; 0x1fe4 <vfprintf+0xe4>
    1fc2:	13 36       	cpi	r17, 0x63	; 99
    1fc4:	39 f0       	breq	.+14     	; 0x1fd4 <vfprintf+0xd4>
    1fc6:	13 37       	cpi	r17, 0x73	; 115
    1fc8:	79 f0       	breq	.+30     	; 0x1fe8 <vfprintf+0xe8>
    1fca:	13 35       	cpi	r17, 0x53	; 83
    1fcc:	09 f5       	brne	.+66     	; 0x2010 <vfprintf+0x110>
    1fce:	02 2f       	mov	r16, r18
    1fd0:	01 60       	ori	r16, 0x01	; 1
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <vfprintf+0xe8>
    1fd4:	37 01       	movw	r6, r14
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	68 0e       	add	r6, r24
    1fda:	71 1c       	adc	r7, r1
    1fdc:	b6 01       	movw	r22, r12
    1fde:	f7 01       	movw	r30, r14
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	01 d5       	rcall	.+2562   	; 0x29e8 <fputc>
    1fe6:	b8 cf       	rjmp	.-144    	; 0x1f58 <vfprintf+0x58>
    1fe8:	37 01       	movw	r6, r14
    1fea:	f2 e0       	ldi	r31, 0x02	; 2
    1fec:	6f 0e       	add	r6, r31
    1fee:	71 1c       	adc	r7, r1
    1ff0:	f7 01       	movw	r30, r14
    1ff2:	e0 80       	ld	r14, Z
    1ff4:	f1 80       	ldd	r15, Z+1	; 0x01
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	00 fd       	sbrc	r16, 0
    1ffa:	85 91       	lpm	r24, Z+
    1ffc:	00 ff       	sbrs	r16, 0
    1ffe:	81 91       	ld	r24, Z+
    2000:	7f 01       	movw	r14, r30
    2002:	88 23       	and	r24, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <vfprintf+0x108>
    2006:	a8 cf       	rjmp	.-176    	; 0x1f58 <vfprintf+0x58>
    2008:	b6 01       	movw	r22, r12
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	ed d4       	rcall	.+2522   	; 0x29e8 <fputc>
    200e:	f3 cf       	rjmp	.-26     	; 0x1ff6 <vfprintf+0xf6>
    2010:	14 36       	cpi	r17, 0x64	; 100
    2012:	11 f0       	breq	.+4      	; 0x2018 <vfprintf+0x118>
    2014:	19 36       	cpi	r17, 0x69	; 105
    2016:	29 f5       	brne	.+74     	; 0x2062 <vfprintf+0x162>
    2018:	37 01       	movw	r6, r14
    201a:	27 ff       	sbrs	r18, 7
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <vfprintf+0x130>
    201e:	f4 e0       	ldi	r31, 0x04	; 4
    2020:	6f 0e       	add	r6, r31
    2022:	71 1c       	adc	r7, r1
    2024:	f7 01       	movw	r30, r14
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	0a c0       	rjmp	.+20     	; 0x2044 <vfprintf+0x144>
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	6f 0e       	add	r6, r31
    2034:	71 1c       	adc	r7, r1
    2036:	f7 01       	movw	r30, r14
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	07 2e       	mov	r0, r23
    203e:	00 0c       	add	r0, r0
    2040:	88 0b       	sbc	r24, r24
    2042:	99 0b       	sbc	r25, r25
    2044:	02 2f       	mov	r16, r18
    2046:	0f 7e       	andi	r16, 0xEF	; 239
    2048:	97 ff       	sbrs	r25, 7
    204a:	08 c0       	rjmp	.+16     	; 0x205c <vfprintf+0x15c>
    204c:	90 95       	com	r25
    204e:	80 95       	com	r24
    2050:	70 95       	com	r23
    2052:	61 95       	neg	r22
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	8f 4f       	sbci	r24, 0xFF	; 255
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	00 64       	ori	r16, 0x40	; 64
    205c:	2a e0       	ldi	r18, 0x0A	; 10
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	33 c0       	rjmp	.+102    	; 0x20c8 <vfprintf+0x1c8>
    2062:	10 37       	cpi	r17, 0x70	; 112
    2064:	99 f0       	breq	.+38     	; 0x208c <vfprintf+0x18c>
    2066:	40 f4       	brcc	.+16     	; 0x2078 <vfprintf+0x178>
    2068:	18 35       	cpi	r17, 0x58	; 88
    206a:	b1 f0       	breq	.+44     	; 0x2098 <vfprintf+0x198>
    206c:	1f 36       	cpi	r17, 0x6F	; 111
    206e:	09 f0       	breq	.+2      	; 0x2072 <vfprintf+0x172>
    2070:	55 c0       	rjmp	.+170    	; 0x211c <vfprintf+0x21c>
    2072:	28 e0       	ldi	r18, 0x08	; 8
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <vfprintf+0x1a0>
    2078:	15 37       	cpi	r17, 0x75	; 117
    207a:	19 f0       	breq	.+6      	; 0x2082 <vfprintf+0x182>
    207c:	18 37       	cpi	r17, 0x78	; 120
    207e:	41 f0       	breq	.+16     	; 0x2090 <vfprintf+0x190>
    2080:	4d c0       	rjmp	.+154    	; 0x211c <vfprintf+0x21c>
    2082:	02 2f       	mov	r16, r18
    2084:	0f 7e       	andi	r16, 0xEF	; 239
    2086:	2a e0       	ldi	r18, 0x0A	; 10
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	0a c0       	rjmp	.+20     	; 0x20a0 <vfprintf+0x1a0>
    208c:	02 2f       	mov	r16, r18
    208e:	00 61       	ori	r16, 0x10	; 16
    2090:	04 62       	ori	r16, 0x24	; 36
    2092:	20 e1       	ldi	r18, 0x10	; 16
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <vfprintf+0x1a0>
    2098:	02 2f       	mov	r16, r18
    209a:	04 60       	ori	r16, 0x04	; 4
    209c:	20 e1       	ldi	r18, 0x10	; 16
    209e:	32 e0       	ldi	r19, 0x02	; 2
    20a0:	37 01       	movw	r6, r14
    20a2:	07 ff       	sbrs	r16, 7
    20a4:	09 c0       	rjmp	.+18     	; 0x20b8 <vfprintf+0x1b8>
    20a6:	f4 e0       	ldi	r31, 0x04	; 4
    20a8:	6f 0e       	add	r6, r31
    20aa:	71 1c       	adc	r7, r1
    20ac:	f7 01       	movw	r30, r14
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	08 c0       	rjmp	.+16     	; 0x20c8 <vfprintf+0x1c8>
    20b8:	f2 e0       	ldi	r31, 0x02	; 2
    20ba:	6f 0e       	add	r6, r31
    20bc:	71 1c       	adc	r7, r1
    20be:	f7 01       	movw	r30, r14
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a4 01       	movw	r20, r8
    20ca:	df d4       	rcall	.+2494   	; 0x2a8a <__ultoa_invert>
    20cc:	18 2f       	mov	r17, r24
    20ce:	18 19       	sub	r17, r8
    20d0:	06 ff       	sbrs	r16, 6
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <vfprintf+0x1dc>
    20d4:	b6 01       	movw	r22, r12
    20d6:	8d e2       	ldi	r24, 0x2D	; 45
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	86 d4       	rcall	.+2316   	; 0x29e8 <fputc>
    20dc:	04 ff       	sbrs	r16, 4
    20de:	13 c0       	rjmp	.+38     	; 0x2106 <vfprintf+0x206>
    20e0:	fe 01       	movw	r30, r28
    20e2:	e1 0f       	add	r30, r17
    20e4:	f1 1d       	adc	r31, r1
    20e6:	80 81       	ld	r24, Z
    20e8:	80 33       	cpi	r24, 0x30	; 48
    20ea:	69 f0       	breq	.+26     	; 0x2106 <vfprintf+0x206>
    20ec:	b6 01       	movw	r22, r12
    20ee:	80 e3       	ldi	r24, 0x30	; 48
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	7a d4       	rcall	.+2292   	; 0x29e8 <fputc>
    20f4:	02 ff       	sbrs	r16, 2
    20f6:	07 c0       	rjmp	.+14     	; 0x2106 <vfprintf+0x206>
    20f8:	00 72       	andi	r16, 0x20	; 32
    20fa:	80 2f       	mov	r24, r16
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	b6 01       	movw	r22, r12
    2100:	88 5a       	subi	r24, 0xA8	; 168
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	71 d4       	rcall	.+2274   	; 0x29e8 <fputc>
    2106:	11 50       	subi	r17, 0x01	; 1
    2108:	f4 01       	movw	r30, r8
    210a:	e1 0f       	add	r30, r17
    210c:	f1 1d       	adc	r31, r1
    210e:	80 81       	ld	r24, Z
    2110:	b6 01       	movw	r22, r12
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	69 d4       	rcall	.+2258   	; 0x29e8 <fputc>
    2116:	11 11       	cpse	r17, r1
    2118:	f6 cf       	rjmp	.-20     	; 0x2106 <vfprintf+0x206>
    211a:	1e cf       	rjmp	.-452    	; 0x1f58 <vfprintf+0x58>
    211c:	f6 01       	movw	r30, r12
    211e:	86 81       	ldd	r24, Z+6	; 0x06
    2120:	97 81       	ldd	r25, Z+7	; 0x07
    2122:	05 c0       	rjmp	.+10     	; 0x212e <vfprintf+0x22e>
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	9f ef       	ldi	r25, 0xFF	; 255
    2128:	02 c0       	rjmp	.+4      	; 0x212e <vfprintf+0x22e>
    212a:	02 2f       	mov	r16, r18
    212c:	39 cf       	rjmp	.-398    	; 0x1fa0 <vfprintf+0xa0>
    212e:	2c 96       	adiw	r28, 0x0c	; 12
    2130:	ee e0       	ldi	r30, 0x0E	; 14
    2132:	e9 c3       	rjmp	.+2002   	; 0x2906 <__epilogue_restores__+0x8>

00002134 <putval>:
    2134:	20 fd       	sbrc	r18, 0
    2136:	09 c0       	rjmp	.+18     	; 0x214a <putval+0x16>
    2138:	fc 01       	movw	r30, r24
    213a:	23 fd       	sbrc	r18, 3
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <putval+0x14>
    213e:	22 ff       	sbrs	r18, 2
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <putval+0x12>
    2142:	73 83       	std	Z+3, r23	; 0x03
    2144:	62 83       	std	Z+2, r22	; 0x02
    2146:	51 83       	std	Z+1, r21	; 0x01
    2148:	40 83       	st	Z, r20
    214a:	08 95       	ret

0000214c <mulacc>:
    214c:	44 fd       	sbrc	r20, 4
    214e:	10 c0       	rjmp	.+32     	; 0x2170 <mulacc+0x24>
    2150:	46 fd       	sbrc	r20, 6
    2152:	10 c0       	rjmp	.+32     	; 0x2174 <mulacc+0x28>
    2154:	db 01       	movw	r26, r22
    2156:	fc 01       	movw	r30, r24
    2158:	aa 0f       	add	r26, r26
    215a:	bb 1f       	adc	r27, r27
    215c:	ee 1f       	adc	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	10 94       	com	r1
    2162:	d1 f7       	brne	.-12     	; 0x2158 <mulacc+0xc>
    2164:	6a 0f       	add	r22, r26
    2166:	7b 1f       	adc	r23, r27
    2168:	8e 1f       	adc	r24, r30
    216a:	9f 1f       	adc	r25, r31
    216c:	31 e0       	ldi	r19, 0x01	; 1
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <mulacc+0x2a>
    2170:	33 e0       	ldi	r19, 0x03	; 3
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <mulacc+0x2a>
    2174:	34 e0       	ldi	r19, 0x04	; 4
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	88 1f       	adc	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	31 50       	subi	r19, 0x01	; 1
    2180:	d1 f7       	brne	.-12     	; 0x2176 <mulacc+0x2a>
    2182:	62 0f       	add	r22, r18
    2184:	71 1d       	adc	r23, r1
    2186:	81 1d       	adc	r24, r1
    2188:	91 1d       	adc	r25, r1
    218a:	08 95       	ret

0000218c <skip_spaces>:
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	8c 01       	movw	r16, r24
    2196:	c8 01       	movw	r24, r16
    2198:	e9 d3       	rcall	.+2002   	; 0x296c <fgetc>
    219a:	ec 01       	movw	r28, r24
    219c:	97 fd       	sbrc	r25, 7
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <skip_spaces+0x20>
    21a0:	c9 d3       	rcall	.+1938   	; 0x2934 <isspace>
    21a2:	89 2b       	or	r24, r25
    21a4:	c1 f7       	brne	.-16     	; 0x2196 <skip_spaces+0xa>
    21a6:	b8 01       	movw	r22, r16
    21a8:	ce 01       	movw	r24, r28
    21aa:	56 d4       	rcall	.+2220   	; 0x2a58 <ungetc>
    21ac:	ce 01       	movw	r24, r28
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <conv_int>:
    21b8:	a1 e0       	ldi	r26, 0x01	; 1
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e1 ee       	ldi	r30, 0xE1	; 225
    21be:	f0 e1       	ldi	r31, 0x10	; 16
    21c0:	88 c3       	rjmp	.+1808   	; 0x28d2 <__prologue_saves__+0xc>
    21c2:	8c 01       	movw	r16, r24
    21c4:	c6 2e       	mov	r12, r22
    21c6:	7a 01       	movw	r14, r20
    21c8:	29 83       	std	Y+1, r18	; 0x01
    21ca:	d0 d3       	rcall	.+1952   	; 0x296c <fgetc>
    21cc:	ac 01       	movw	r20, r24
    21ce:	55 27       	eor	r21, r21
    21d0:	29 81       	ldd	r18, Y+1	; 0x01
    21d2:	4b 32       	cpi	r20, 0x2B	; 43
    21d4:	51 05       	cpc	r21, r1
    21d6:	21 f0       	breq	.+8      	; 0x21e0 <conv_int+0x28>
    21d8:	4d 32       	cpi	r20, 0x2D	; 45
    21da:	51 05       	cpc	r21, r1
    21dc:	61 f4       	brne	.+24     	; 0x21f6 <conv_int+0x3e>
    21de:	20 68       	ori	r18, 0x80	; 128
    21e0:	ca 94       	dec	r12
    21e2:	c1 10       	cpse	r12, r1
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <conv_int+0x32>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	6f c0       	rjmp	.+222    	; 0x22c8 <conv_int+0x110>
    21ea:	c8 01       	movw	r24, r16
    21ec:	29 83       	std	Y+1, r18	; 0x01
    21ee:	be d3       	rcall	.+1916   	; 0x296c <fgetc>
    21f0:	29 81       	ldd	r18, Y+1	; 0x01
    21f2:	97 fd       	sbrc	r25, 7
    21f4:	f8 cf       	rjmp	.-16     	; 0x21e6 <conv_int+0x2e>
    21f6:	32 2f       	mov	r19, r18
    21f8:	3d 7f       	andi	r19, 0xFD	; 253
    21fa:	d3 2e       	mov	r13, r19
    21fc:	32 2f       	mov	r19, r18
    21fe:	30 73       	andi	r19, 0x30	; 48
    2200:	39 f5       	brne	.+78     	; 0x2250 <conv_int+0x98>
    2202:	80 33       	cpi	r24, 0x30	; 48
    2204:	29 f5       	brne	.+74     	; 0x2250 <conv_int+0x98>
    2206:	bb 24       	eor	r11, r11
    2208:	ba 94       	dec	r11
    220a:	bc 0c       	add	r11, r12
    220c:	09 f4       	brne	.+2      	; 0x2210 <conv_int+0x58>
    220e:	49 c0       	rjmp	.+146    	; 0x22a2 <conv_int+0xea>
    2210:	c8 01       	movw	r24, r16
    2212:	29 83       	std	Y+1, r18	; 0x01
    2214:	ab d3       	rcall	.+1878   	; 0x296c <fgetc>
    2216:	29 81       	ldd	r18, Y+1	; 0x01
    2218:	97 fd       	sbrc	r25, 7
    221a:	43 c0       	rjmp	.+134    	; 0x22a2 <conv_int+0xea>
    221c:	38 2f       	mov	r19, r24
    221e:	3f 7d       	andi	r19, 0xDF	; 223
    2220:	38 35       	cpi	r19, 0x58	; 88
    2222:	61 f4       	brne	.+24     	; 0x223c <conv_int+0x84>
    2224:	8d 2d       	mov	r24, r13
    2226:	82 64       	ori	r24, 0x42	; 66
    2228:	d8 2e       	mov	r13, r24
    222a:	ca 94       	dec	r12
    222c:	ca 94       	dec	r12
    222e:	cc 20       	and	r12, r12
    2230:	c1 f1       	breq	.+112    	; 0x22a2 <conv_int+0xea>
    2232:	c8 01       	movw	r24, r16
    2234:	9b d3       	rcall	.+1846   	; 0x296c <fgetc>
    2236:	97 ff       	sbrs	r25, 7
    2238:	0b c0       	rjmp	.+22     	; 0x2250 <conv_int+0x98>
    223a:	33 c0       	rjmp	.+102    	; 0x22a2 <conv_int+0xea>
    223c:	26 ff       	sbrs	r18, 6
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <conv_int+0x90>
    2240:	2d 2d       	mov	r18, r13
    2242:	22 60       	ori	r18, 0x02	; 2
    2244:	d2 2e       	mov	r13, r18
    2246:	03 c0       	rjmp	.+6      	; 0x224e <conv_int+0x96>
    2248:	3d 2d       	mov	r19, r13
    224a:	32 61       	ori	r19, 0x12	; 18
    224c:	d3 2e       	mov	r13, r19
    224e:	cb 2c       	mov	r12, r11
    2250:	81 2c       	mov	r8, r1
    2252:	91 2c       	mov	r9, r1
    2254:	54 01       	movw	r10, r8
    2256:	20 ed       	ldi	r18, 0xD0	; 208
    2258:	28 0f       	add	r18, r24
    225a:	28 30       	cpi	r18, 0x08	; 8
    225c:	78 f0       	brcs	.+30     	; 0x227c <conv_int+0xc4>
    225e:	d4 fe       	sbrs	r13, 4
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <conv_int+0xb0>
    2262:	b8 01       	movw	r22, r16
    2264:	f9 d3       	rcall	.+2034   	; 0x2a58 <ungetc>
    2266:	1a c0       	rjmp	.+52     	; 0x229c <conv_int+0xe4>
    2268:	2a 30       	cpi	r18, 0x0A	; 10
    226a:	40 f0       	brcs	.+16     	; 0x227c <conv_int+0xc4>
    226c:	d6 fe       	sbrs	r13, 6
    226e:	f9 cf       	rjmp	.-14     	; 0x2262 <conv_int+0xaa>
    2270:	2f 7d       	andi	r18, 0xDF	; 223
    2272:	3f ee       	ldi	r19, 0xEF	; 239
    2274:	32 0f       	add	r19, r18
    2276:	36 30       	cpi	r19, 0x06	; 6
    2278:	a0 f7       	brcc	.-24     	; 0x2262 <conv_int+0xaa>
    227a:	27 50       	subi	r18, 0x07	; 7
    227c:	4d 2d       	mov	r20, r13
    227e:	c5 01       	movw	r24, r10
    2280:	b4 01       	movw	r22, r8
    2282:	64 df       	rcall	.-312    	; 0x214c <mulacc>
    2284:	4b 01       	movw	r8, r22
    2286:	5c 01       	movw	r10, r24
    2288:	8d 2d       	mov	r24, r13
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	d8 2e       	mov	r13, r24
    228e:	ca 94       	dec	r12
    2290:	cc 20       	and	r12, r12
    2292:	51 f0       	breq	.+20     	; 0x22a8 <conv_int+0xf0>
    2294:	c8 01       	movw	r24, r16
    2296:	6a d3       	rcall	.+1748   	; 0x296c <fgetc>
    2298:	97 ff       	sbrs	r25, 7
    229a:	dd cf       	rjmp	.-70     	; 0x2256 <conv_int+0x9e>
    229c:	d1 fc       	sbrc	r13, 1
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <conv_int+0xf0>
    22a0:	a2 cf       	rjmp	.-188    	; 0x21e6 <conv_int+0x2e>
    22a2:	81 2c       	mov	r8, r1
    22a4:	91 2c       	mov	r9, r1
    22a6:	54 01       	movw	r10, r8
    22a8:	d7 fe       	sbrs	r13, 7
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <conv_int+0x104>
    22ac:	b0 94       	com	r11
    22ae:	a0 94       	com	r10
    22b0:	90 94       	com	r9
    22b2:	80 94       	com	r8
    22b4:	81 1c       	adc	r8, r1
    22b6:	91 1c       	adc	r9, r1
    22b8:	a1 1c       	adc	r10, r1
    22ba:	b1 1c       	adc	r11, r1
    22bc:	2d 2d       	mov	r18, r13
    22be:	b5 01       	movw	r22, r10
    22c0:	a4 01       	movw	r20, r8
    22c2:	c7 01       	movw	r24, r14
    22c4:	37 df       	rcall	.-402    	; 0x2134 <putval>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	21 96       	adiw	r28, 0x01	; 1
    22ca:	ec e0       	ldi	r30, 0x0C	; 12
    22cc:	1e c3       	rjmp	.+1596   	; 0x290a <__epilogue_restores__+0xc>

000022ce <vfscanf>:
    22ce:	a1 e0       	ldi	r26, 0x01	; 1
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	ec e6       	ldi	r30, 0x6C	; 108
    22d4:	f1 e1       	ldi	r31, 0x11	; 17
    22d6:	f9 c2       	rjmp	.+1522   	; 0x28ca <__prologue_saves__+0x4>
    22d8:	7c 01       	movw	r14, r24
    22da:	2b 01       	movw	r4, r22
    22dc:	5a 01       	movw	r10, r20
    22de:	fc 01       	movw	r30, r24
    22e0:	17 82       	std	Z+7, r1	; 0x07
    22e2:	16 82       	std	Z+6, r1	; 0x06
    22e4:	81 2c       	mov	r8, r1
    22e6:	f7 01       	movw	r30, r14
    22e8:	73 80       	ldd	r7, Z+3	; 0x03
    22ea:	f2 01       	movw	r30, r4
    22ec:	73 fc       	sbrc	r7, 3
    22ee:	85 91       	lpm	r24, Z+
    22f0:	73 fe       	sbrs	r7, 3
    22f2:	81 91       	ld	r24, Z+
    22f4:	38 2f       	mov	r19, r24
    22f6:	2f 01       	movw	r4, r30
    22f8:	88 23       	and	r24, r24
    22fa:	09 f4       	brne	.+2      	; 0x22fe <vfscanf+0x30>
    22fc:	d5 c0       	rjmp	.+426    	; 0x24a8 <vfscanf+0x1da>
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	39 83       	std	Y+1, r19	; 0x01
    2302:	18 d3       	rcall	.+1584   	; 0x2934 <isspace>
    2304:	39 81       	ldd	r19, Y+1	; 0x01
    2306:	89 2b       	or	r24, r25
    2308:	19 f0       	breq	.+6      	; 0x2310 <vfscanf+0x42>
    230a:	c7 01       	movw	r24, r14
    230c:	3f df       	rcall	.-386    	; 0x218c <skip_spaces>
    230e:	eb cf       	rjmp	.-42     	; 0x22e6 <vfscanf+0x18>
    2310:	35 32       	cpi	r19, 0x25	; 37
    2312:	41 f4       	brne	.+16     	; 0x2324 <vfscanf+0x56>
    2314:	f2 01       	movw	r30, r4
    2316:	73 fc       	sbrc	r7, 3
    2318:	35 91       	lpm	r19, Z+
    231a:	73 fe       	sbrs	r7, 3
    231c:	31 91       	ld	r19, Z+
    231e:	2f 01       	movw	r4, r30
    2320:	35 32       	cpi	r19, 0x25	; 37
    2322:	59 f4       	brne	.+22     	; 0x233a <vfscanf+0x6c>
    2324:	c7 01       	movw	r24, r14
    2326:	39 83       	std	Y+1, r19	; 0x01
    2328:	21 d3       	rcall	.+1602   	; 0x296c <fgetc>
    232a:	39 81       	ldd	r19, Y+1	; 0x01
    232c:	97 fd       	sbrc	r25, 7
    232e:	ba c0       	rjmp	.+372    	; 0x24a4 <vfscanf+0x1d6>
    2330:	38 17       	cp	r19, r24
    2332:	c9 f2       	breq	.-78     	; 0x22e6 <vfscanf+0x18>
    2334:	b7 01       	movw	r22, r14
    2336:	90 d3       	rcall	.+1824   	; 0x2a58 <ungetc>
    2338:	b7 c0       	rjmp	.+366    	; 0x24a8 <vfscanf+0x1da>
    233a:	3a 32       	cpi	r19, 0x2A	; 42
    233c:	39 f4       	brne	.+14     	; 0x234c <vfscanf+0x7e>
    233e:	73 fc       	sbrc	r7, 3
    2340:	35 91       	lpm	r19, Z+
    2342:	73 fe       	sbrs	r7, 3
    2344:	31 91       	ld	r19, Z+
    2346:	2f 01       	movw	r4, r30
    2348:	11 e0       	ldi	r17, 0x01	; 1
    234a:	01 c0       	rjmp	.+2      	; 0x234e <vfscanf+0x80>
    234c:	10 e0       	ldi	r17, 0x00	; 0
    234e:	62 01       	movw	r12, r4
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	20 ed       	ldi	r18, 0xD0	; 208
    2354:	23 0f       	add	r18, r19
    2356:	2a 30       	cpi	r18, 0x0A	; 10
    2358:	68 f4       	brcc	.+26     	; 0x2374 <vfscanf+0xa6>
    235a:	12 60       	ori	r17, 0x02	; 2
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	f3 de       	rcall	.-538    	; 0x214c <mulacc>
    2366:	f6 01       	movw	r30, r12
    2368:	73 fc       	sbrc	r7, 3
    236a:	35 91       	lpm	r19, Z+
    236c:	73 fe       	sbrs	r7, 3
    236e:	31 91       	ld	r19, Z+
    2370:	6f 01       	movw	r12, r30
    2372:	ef cf       	rjmp	.-34     	; 0x2352 <vfscanf+0x84>
    2374:	96 2e       	mov	r9, r22
    2376:	03 2f       	mov	r16, r19
    2378:	26 01       	movw	r4, r12
    237a:	11 ff       	sbrs	r17, 1
    237c:	03 c0       	rjmp	.+6      	; 0x2384 <vfscanf+0xb6>
    237e:	61 11       	cpse	r22, r1
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <vfscanf+0xba>
    2382:	92 c0       	rjmp	.+292    	; 0x24a8 <vfscanf+0x1da>
    2384:	99 24       	eor	r9, r9
    2386:	9a 94       	dec	r9
    2388:	38 36       	cpi	r19, 0x68	; 104
    238a:	19 f0       	breq	.+6      	; 0x2392 <vfscanf+0xc4>
    238c:	3c 36       	cpi	r19, 0x6C	; 108
    238e:	51 f0       	breq	.+20     	; 0x23a4 <vfscanf+0xd6>
    2390:	10 c0       	rjmp	.+32     	; 0x23b2 <vfscanf+0xe4>
    2392:	f6 01       	movw	r30, r12
    2394:	73 fc       	sbrc	r7, 3
    2396:	05 91       	lpm	r16, Z+
    2398:	73 fe       	sbrs	r7, 3
    239a:	01 91       	ld	r16, Z+
    239c:	2f 01       	movw	r4, r30
    239e:	08 36       	cpi	r16, 0x68	; 104
    23a0:	41 f4       	brne	.+16     	; 0x23b2 <vfscanf+0xe4>
    23a2:	18 60       	ori	r17, 0x08	; 8
    23a4:	14 60       	ori	r17, 0x04	; 4
    23a6:	f2 01       	movw	r30, r4
    23a8:	73 fc       	sbrc	r7, 3
    23aa:	05 91       	lpm	r16, Z+
    23ac:	73 fe       	sbrs	r7, 3
    23ae:	01 91       	ld	r16, Z+
    23b0:	2f 01       	movw	r4, r30
    23b2:	00 23       	and	r16, r16
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <vfscanf+0xea>
    23b6:	78 c0       	rjmp	.+240    	; 0x24a8 <vfscanf+0x1da>
    23b8:	60 2f       	mov	r22, r16
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	83 e5       	ldi	r24, 0x53	; 83
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	c1 d2       	rcall	.+1410   	; 0x2944 <strchr_P>
    23c2:	89 2b       	or	r24, r25
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <vfscanf+0xfa>
    23c6:	70 c0       	rjmp	.+224    	; 0x24a8 <vfscanf+0x1da>
    23c8:	10 fd       	sbrc	r17, 0
    23ca:	07 c0       	rjmp	.+14     	; 0x23da <vfscanf+0x10c>
    23cc:	f5 01       	movw	r30, r10
    23ce:	c0 80       	ld	r12, Z
    23d0:	d1 80       	ldd	r13, Z+1	; 0x01
    23d2:	c5 01       	movw	r24, r10
    23d4:	02 96       	adiw	r24, 0x02	; 2
    23d6:	5c 01       	movw	r10, r24
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <vfscanf+0x110>
    23da:	c1 2c       	mov	r12, r1
    23dc:	d1 2c       	mov	r13, r1
    23de:	0e 36       	cpi	r16, 0x6E	; 110
    23e0:	49 f4       	brne	.+18     	; 0x23f4 <vfscanf+0x126>
    23e2:	f7 01       	movw	r30, r14
    23e4:	46 81       	ldd	r20, Z+6	; 0x06
    23e6:	57 81       	ldd	r21, Z+7	; 0x07
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	21 2f       	mov	r18, r17
    23ee:	c6 01       	movw	r24, r12
    23f0:	a1 de       	rcall	.-702    	; 0x2134 <putval>
    23f2:	79 cf       	rjmp	.-270    	; 0x22e6 <vfscanf+0x18>
    23f4:	03 36       	cpi	r16, 0x63	; 99
    23f6:	a1 f4       	brne	.+40     	; 0x2420 <vfscanf+0x152>
    23f8:	11 fd       	sbrc	r17, 1
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfscanf+0x132>
    23fc:	99 24       	eor	r9, r9
    23fe:	93 94       	inc	r9
    2400:	c7 01       	movw	r24, r14
    2402:	b4 d2       	rcall	.+1384   	; 0x296c <fgetc>
    2404:	97 fd       	sbrc	r25, 7
    2406:	4e c0       	rjmp	.+156    	; 0x24a4 <vfscanf+0x1d6>
    2408:	c1 14       	cp	r12, r1
    240a:	d1 04       	cpc	r13, r1
    240c:	29 f0       	breq	.+10     	; 0x2418 <vfscanf+0x14a>
    240e:	f6 01       	movw	r30, r12
    2410:	80 83       	st	Z, r24
    2412:	c6 01       	movw	r24, r12
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	6c 01       	movw	r12, r24
    2418:	9a 94       	dec	r9
    241a:	91 10       	cpse	r9, r1
    241c:	f1 cf       	rjmp	.-30     	; 0x2400 <vfscanf+0x132>
    241e:	3e c0       	rjmp	.+124    	; 0x249c <vfscanf+0x1ce>
    2420:	c7 01       	movw	r24, r14
    2422:	b4 de       	rcall	.-664    	; 0x218c <skip_spaces>
    2424:	97 fd       	sbrc	r25, 7
    2426:	3e c0       	rjmp	.+124    	; 0x24a4 <vfscanf+0x1d6>
    2428:	0f 36       	cpi	r16, 0x6F	; 111
    242a:	49 f1       	breq	.+82     	; 0x247e <vfscanf+0x1b0>
    242c:	28 f4       	brcc	.+10     	; 0x2438 <vfscanf+0x16a>
    242e:	04 36       	cpi	r16, 0x64	; 100
    2430:	21 f1       	breq	.+72     	; 0x247a <vfscanf+0x1ac>
    2432:	09 36       	cpi	r16, 0x69	; 105
    2434:	39 f1       	breq	.+78     	; 0x2484 <vfscanf+0x1b6>
    2436:	25 c0       	rjmp	.+74     	; 0x2482 <vfscanf+0x1b4>
    2438:	03 37       	cpi	r16, 0x73	; 115
    243a:	71 f0       	breq	.+28     	; 0x2458 <vfscanf+0x18a>
    243c:	05 37       	cpi	r16, 0x75	; 117
    243e:	e9 f0       	breq	.+58     	; 0x247a <vfscanf+0x1ac>
    2440:	20 c0       	rjmp	.+64     	; 0x2482 <vfscanf+0x1b4>
    2442:	c1 14       	cp	r12, r1
    2444:	d1 04       	cpc	r13, r1
    2446:	29 f0       	breq	.+10     	; 0x2452 <vfscanf+0x184>
    2448:	f6 01       	movw	r30, r12
    244a:	60 82       	st	Z, r6
    244c:	c6 01       	movw	r24, r12
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	6c 01       	movw	r12, r24
    2452:	9a 94       	dec	r9
    2454:	99 20       	and	r9, r9
    2456:	59 f0       	breq	.+22     	; 0x246e <vfscanf+0x1a0>
    2458:	c7 01       	movw	r24, r14
    245a:	88 d2       	rcall	.+1296   	; 0x296c <fgetc>
    245c:	3c 01       	movw	r6, r24
    245e:	97 fd       	sbrc	r25, 7
    2460:	06 c0       	rjmp	.+12     	; 0x246e <vfscanf+0x1a0>
    2462:	68 d2       	rcall	.+1232   	; 0x2934 <isspace>
    2464:	89 2b       	or	r24, r25
    2466:	69 f3       	breq	.-38     	; 0x2442 <vfscanf+0x174>
    2468:	b7 01       	movw	r22, r14
    246a:	c3 01       	movw	r24, r6
    246c:	f5 d2       	rcall	.+1514   	; 0x2a58 <ungetc>
    246e:	c1 14       	cp	r12, r1
    2470:	d1 04       	cpc	r13, r1
    2472:	a1 f0       	breq	.+40     	; 0x249c <vfscanf+0x1ce>
    2474:	f6 01       	movw	r30, r12
    2476:	10 82       	st	Z, r1
    2478:	11 c0       	rjmp	.+34     	; 0x249c <vfscanf+0x1ce>
    247a:	10 62       	ori	r17, 0x20	; 32
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <vfscanf+0x1b6>
    247e:	10 61       	ori	r17, 0x10	; 16
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <vfscanf+0x1b6>
    2482:	10 64       	ori	r17, 0x40	; 64
    2484:	21 2f       	mov	r18, r17
    2486:	a6 01       	movw	r20, r12
    2488:	69 2d       	mov	r22, r9
    248a:	c7 01       	movw	r24, r14
    248c:	95 de       	rcall	.-726    	; 0x21b8 <conv_int>
    248e:	81 11       	cpse	r24, r1
    2490:	05 c0       	rjmp	.+10     	; 0x249c <vfscanf+0x1ce>
    2492:	f7 01       	movw	r30, r14
    2494:	83 81       	ldd	r24, Z+3	; 0x03
    2496:	80 73       	andi	r24, 0x30	; 48
    2498:	29 f4       	brne	.+10     	; 0x24a4 <vfscanf+0x1d6>
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <vfscanf+0x1da>
    249c:	10 fd       	sbrc	r17, 0
    249e:	23 cf       	rjmp	.-442    	; 0x22e6 <vfscanf+0x18>
    24a0:	83 94       	inc	r8
    24a2:	21 cf       	rjmp	.-446    	; 0x22e6 <vfscanf+0x18>
    24a4:	88 20       	and	r8, r8
    24a6:	19 f0       	breq	.+6      	; 0x24ae <vfscanf+0x1e0>
    24a8:	88 2d       	mov	r24, r8
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <vfscanf+0x1e4>
    24ae:	8f ef       	ldi	r24, 0xFF	; 255
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	21 96       	adiw	r28, 0x01	; 1
    24b4:	e0 e1       	ldi	r30, 0x10	; 16
    24b6:	25 c2       	rjmp	.+1098   	; 0x2902 <__epilogue_restores__+0x4>

000024b8 <__subsf3>:
    24b8:	50 58       	subi	r21, 0x80	; 128

000024ba <__addsf3>:
    24ba:	bb 27       	eor	r27, r27
    24bc:	aa 27       	eor	r26, r26
    24be:	0e d0       	rcall	.+28     	; 0x24dc <__addsf3x>
    24c0:	0d c1       	rjmp	.+538    	; 0x26dc <__fp_round>
    24c2:	fe d0       	rcall	.+508    	; 0x26c0 <__fp_pscA>
    24c4:	30 f0       	brcs	.+12     	; 0x24d2 <__addsf3+0x18>
    24c6:	03 d1       	rcall	.+518    	; 0x26ce <__fp_pscB>
    24c8:	20 f0       	brcs	.+8      	; 0x24d2 <__addsf3+0x18>
    24ca:	31 f4       	brne	.+12     	; 0x24d8 <__addsf3+0x1e>
    24cc:	9f 3f       	cpi	r25, 0xFF	; 255
    24ce:	11 f4       	brne	.+4      	; 0x24d4 <__addsf3+0x1a>
    24d0:	1e f4       	brtc	.+6      	; 0x24d8 <__addsf3+0x1e>
    24d2:	f3 c0       	rjmp	.+486    	; 0x26ba <__fp_nan>
    24d4:	0e f4       	brtc	.+2      	; 0x24d8 <__addsf3+0x1e>
    24d6:	e0 95       	com	r30
    24d8:	e7 fb       	bst	r30, 7
    24da:	e9 c0       	rjmp	.+466    	; 0x26ae <__fp_inf>

000024dc <__addsf3x>:
    24dc:	e9 2f       	mov	r30, r25
    24de:	0f d1       	rcall	.+542    	; 0x26fe <__fp_split3>
    24e0:	80 f3       	brcs	.-32     	; 0x24c2 <__addsf3+0x8>
    24e2:	ba 17       	cp	r27, r26
    24e4:	62 07       	cpc	r22, r18
    24e6:	73 07       	cpc	r23, r19
    24e8:	84 07       	cpc	r24, r20
    24ea:	95 07       	cpc	r25, r21
    24ec:	18 f0       	brcs	.+6      	; 0x24f4 <__addsf3x+0x18>
    24ee:	71 f4       	brne	.+28     	; 0x250c <__addsf3x+0x30>
    24f0:	9e f5       	brtc	.+102    	; 0x2558 <__addsf3x+0x7c>
    24f2:	27 c1       	rjmp	.+590    	; 0x2742 <__fp_zero>
    24f4:	0e f4       	brtc	.+2      	; 0x24f8 <__addsf3x+0x1c>
    24f6:	e0 95       	com	r30
    24f8:	0b 2e       	mov	r0, r27
    24fa:	ba 2f       	mov	r27, r26
    24fc:	a0 2d       	mov	r26, r0
    24fe:	0b 01       	movw	r0, r22
    2500:	b9 01       	movw	r22, r18
    2502:	90 01       	movw	r18, r0
    2504:	0c 01       	movw	r0, r24
    2506:	ca 01       	movw	r24, r20
    2508:	a0 01       	movw	r20, r0
    250a:	11 24       	eor	r1, r1
    250c:	ff 27       	eor	r31, r31
    250e:	59 1b       	sub	r21, r25
    2510:	99 f0       	breq	.+38     	; 0x2538 <__addsf3x+0x5c>
    2512:	59 3f       	cpi	r21, 0xF9	; 249
    2514:	50 f4       	brcc	.+20     	; 0x252a <__addsf3x+0x4e>
    2516:	50 3e       	cpi	r21, 0xE0	; 224
    2518:	68 f1       	brcs	.+90     	; 0x2574 <__addsf3x+0x98>
    251a:	1a 16       	cp	r1, r26
    251c:	f0 40       	sbci	r31, 0x00	; 0
    251e:	a2 2f       	mov	r26, r18
    2520:	23 2f       	mov	r18, r19
    2522:	34 2f       	mov	r19, r20
    2524:	44 27       	eor	r20, r20
    2526:	58 5f       	subi	r21, 0xF8	; 248
    2528:	f3 cf       	rjmp	.-26     	; 0x2510 <__addsf3x+0x34>
    252a:	46 95       	lsr	r20
    252c:	37 95       	ror	r19
    252e:	27 95       	ror	r18
    2530:	a7 95       	ror	r26
    2532:	f0 40       	sbci	r31, 0x00	; 0
    2534:	53 95       	inc	r21
    2536:	c9 f7       	brne	.-14     	; 0x252a <__addsf3x+0x4e>
    2538:	7e f4       	brtc	.+30     	; 0x2558 <__addsf3x+0x7c>
    253a:	1f 16       	cp	r1, r31
    253c:	ba 0b       	sbc	r27, r26
    253e:	62 0b       	sbc	r22, r18
    2540:	73 0b       	sbc	r23, r19
    2542:	84 0b       	sbc	r24, r20
    2544:	ba f0       	brmi	.+46     	; 0x2574 <__addsf3x+0x98>
    2546:	91 50       	subi	r25, 0x01	; 1
    2548:	a1 f0       	breq	.+40     	; 0x2572 <__addsf3x+0x96>
    254a:	ff 0f       	add	r31, r31
    254c:	bb 1f       	adc	r27, r27
    254e:	66 1f       	adc	r22, r22
    2550:	77 1f       	adc	r23, r23
    2552:	88 1f       	adc	r24, r24
    2554:	c2 f7       	brpl	.-16     	; 0x2546 <__addsf3x+0x6a>
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <__addsf3x+0x98>
    2558:	ba 0f       	add	r27, r26
    255a:	62 1f       	adc	r22, r18
    255c:	73 1f       	adc	r23, r19
    255e:	84 1f       	adc	r24, r20
    2560:	48 f4       	brcc	.+18     	; 0x2574 <__addsf3x+0x98>
    2562:	87 95       	ror	r24
    2564:	77 95       	ror	r23
    2566:	67 95       	ror	r22
    2568:	b7 95       	ror	r27
    256a:	f7 95       	ror	r31
    256c:	9e 3f       	cpi	r25, 0xFE	; 254
    256e:	08 f0       	brcs	.+2      	; 0x2572 <__addsf3x+0x96>
    2570:	b3 cf       	rjmp	.-154    	; 0x24d8 <__addsf3+0x1e>
    2572:	93 95       	inc	r25
    2574:	88 0f       	add	r24, r24
    2576:	08 f0       	brcs	.+2      	; 0x257a <__addsf3x+0x9e>
    2578:	99 27       	eor	r25, r25
    257a:	ee 0f       	add	r30, r30
    257c:	97 95       	ror	r25
    257e:	87 95       	ror	r24
    2580:	08 95       	ret

00002582 <__cmpsf2>:
    2582:	71 d0       	rcall	.+226    	; 0x2666 <__fp_cmp>
    2584:	08 f4       	brcc	.+2      	; 0x2588 <__cmpsf2+0x6>
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	08 95       	ret

0000258a <__fixsfsi>:
    258a:	04 d0       	rcall	.+8      	; 0x2594 <__fixunssfsi>
    258c:	68 94       	set
    258e:	b1 11       	cpse	r27, r1
    2590:	d9 c0       	rjmp	.+434    	; 0x2744 <__fp_szero>
    2592:	08 95       	ret

00002594 <__fixunssfsi>:
    2594:	bc d0       	rcall	.+376    	; 0x270e <__fp_splitA>
    2596:	88 f0       	brcs	.+34     	; 0x25ba <__fixunssfsi+0x26>
    2598:	9f 57       	subi	r25, 0x7F	; 127
    259a:	90 f0       	brcs	.+36     	; 0x25c0 <__fixunssfsi+0x2c>
    259c:	b9 2f       	mov	r27, r25
    259e:	99 27       	eor	r25, r25
    25a0:	b7 51       	subi	r27, 0x17	; 23
    25a2:	a0 f0       	brcs	.+40     	; 0x25cc <__fixunssfsi+0x38>
    25a4:	d1 f0       	breq	.+52     	; 0x25da <__fixunssfsi+0x46>
    25a6:	66 0f       	add	r22, r22
    25a8:	77 1f       	adc	r23, r23
    25aa:	88 1f       	adc	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	1a f0       	brmi	.+6      	; 0x25b6 <__fixunssfsi+0x22>
    25b0:	ba 95       	dec	r27
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__fixunssfsi+0x12>
    25b4:	12 c0       	rjmp	.+36     	; 0x25da <__fixunssfsi+0x46>
    25b6:	b1 30       	cpi	r27, 0x01	; 1
    25b8:	81 f0       	breq	.+32     	; 0x25da <__fixunssfsi+0x46>
    25ba:	c3 d0       	rcall	.+390    	; 0x2742 <__fp_zero>
    25bc:	b1 e0       	ldi	r27, 0x01	; 1
    25be:	08 95       	ret
    25c0:	c0 c0       	rjmp	.+384    	; 0x2742 <__fp_zero>
    25c2:	67 2f       	mov	r22, r23
    25c4:	78 2f       	mov	r23, r24
    25c6:	88 27       	eor	r24, r24
    25c8:	b8 5f       	subi	r27, 0xF8	; 248
    25ca:	39 f0       	breq	.+14     	; 0x25da <__fixunssfsi+0x46>
    25cc:	b9 3f       	cpi	r27, 0xF9	; 249
    25ce:	cc f3       	brlt	.-14     	; 0x25c2 <__fixunssfsi+0x2e>
    25d0:	86 95       	lsr	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b3 95       	inc	r27
    25d8:	d9 f7       	brne	.-10     	; 0x25d0 <__fixunssfsi+0x3c>
    25da:	3e f4       	brtc	.+14     	; 0x25ea <__fixunssfsi+0x56>
    25dc:	90 95       	com	r25
    25de:	80 95       	com	r24
    25e0:	70 95       	com	r23
    25e2:	61 95       	neg	r22
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	8f 4f       	sbci	r24, 0xFF	; 255
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	08 95       	ret

000025ec <__floatunsisf>:
    25ec:	e8 94       	clt
    25ee:	09 c0       	rjmp	.+18     	; 0x2602 <__floatsisf+0x12>

000025f0 <__floatsisf>:
    25f0:	97 fb       	bst	r25, 7
    25f2:	3e f4       	brtc	.+14     	; 0x2602 <__floatsisf+0x12>
    25f4:	90 95       	com	r25
    25f6:	80 95       	com	r24
    25f8:	70 95       	com	r23
    25fa:	61 95       	neg	r22
    25fc:	7f 4f       	sbci	r23, 0xFF	; 255
    25fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2600:	9f 4f       	sbci	r25, 0xFF	; 255
    2602:	99 23       	and	r25, r25
    2604:	a9 f0       	breq	.+42     	; 0x2630 <__floatsisf+0x40>
    2606:	f9 2f       	mov	r31, r25
    2608:	96 e9       	ldi	r25, 0x96	; 150
    260a:	bb 27       	eor	r27, r27
    260c:	93 95       	inc	r25
    260e:	f6 95       	lsr	r31
    2610:	87 95       	ror	r24
    2612:	77 95       	ror	r23
    2614:	67 95       	ror	r22
    2616:	b7 95       	ror	r27
    2618:	f1 11       	cpse	r31, r1
    261a:	f8 cf       	rjmp	.-16     	; 0x260c <__floatsisf+0x1c>
    261c:	fa f4       	brpl	.+62     	; 0x265c <__floatsisf+0x6c>
    261e:	bb 0f       	add	r27, r27
    2620:	11 f4       	brne	.+4      	; 0x2626 <__floatsisf+0x36>
    2622:	60 ff       	sbrs	r22, 0
    2624:	1b c0       	rjmp	.+54     	; 0x265c <__floatsisf+0x6c>
    2626:	6f 5f       	subi	r22, 0xFF	; 255
    2628:	7f 4f       	sbci	r23, 0xFF	; 255
    262a:	8f 4f       	sbci	r24, 0xFF	; 255
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	16 c0       	rjmp	.+44     	; 0x265c <__floatsisf+0x6c>
    2630:	88 23       	and	r24, r24
    2632:	11 f0       	breq	.+4      	; 0x2638 <__floatsisf+0x48>
    2634:	96 e9       	ldi	r25, 0x96	; 150
    2636:	11 c0       	rjmp	.+34     	; 0x265a <__floatsisf+0x6a>
    2638:	77 23       	and	r23, r23
    263a:	21 f0       	breq	.+8      	; 0x2644 <__floatsisf+0x54>
    263c:	9e e8       	ldi	r25, 0x8E	; 142
    263e:	87 2f       	mov	r24, r23
    2640:	76 2f       	mov	r23, r22
    2642:	05 c0       	rjmp	.+10     	; 0x264e <__floatsisf+0x5e>
    2644:	66 23       	and	r22, r22
    2646:	71 f0       	breq	.+28     	; 0x2664 <__floatsisf+0x74>
    2648:	96 e8       	ldi	r25, 0x86	; 134
    264a:	86 2f       	mov	r24, r22
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	2a f0       	brmi	.+10     	; 0x265c <__floatsisf+0x6c>
    2652:	9a 95       	dec	r25
    2654:	66 0f       	add	r22, r22
    2656:	77 1f       	adc	r23, r23
    2658:	88 1f       	adc	r24, r24
    265a:	da f7       	brpl	.-10     	; 0x2652 <__floatsisf+0x62>
    265c:	88 0f       	add	r24, r24
    265e:	96 95       	lsr	r25
    2660:	87 95       	ror	r24
    2662:	97 f9       	bld	r25, 7
    2664:	08 95       	ret

00002666 <__fp_cmp>:
    2666:	99 0f       	add	r25, r25
    2668:	00 08       	sbc	r0, r0
    266a:	55 0f       	add	r21, r21
    266c:	aa 0b       	sbc	r26, r26
    266e:	e0 e8       	ldi	r30, 0x80	; 128
    2670:	fe ef       	ldi	r31, 0xFE	; 254
    2672:	16 16       	cp	r1, r22
    2674:	17 06       	cpc	r1, r23
    2676:	e8 07       	cpc	r30, r24
    2678:	f9 07       	cpc	r31, r25
    267a:	c0 f0       	brcs	.+48     	; 0x26ac <__fp_cmp+0x46>
    267c:	12 16       	cp	r1, r18
    267e:	13 06       	cpc	r1, r19
    2680:	e4 07       	cpc	r30, r20
    2682:	f5 07       	cpc	r31, r21
    2684:	98 f0       	brcs	.+38     	; 0x26ac <__fp_cmp+0x46>
    2686:	62 1b       	sub	r22, r18
    2688:	73 0b       	sbc	r23, r19
    268a:	84 0b       	sbc	r24, r20
    268c:	95 0b       	sbc	r25, r21
    268e:	39 f4       	brne	.+14     	; 0x269e <__fp_cmp+0x38>
    2690:	0a 26       	eor	r0, r26
    2692:	61 f0       	breq	.+24     	; 0x26ac <__fp_cmp+0x46>
    2694:	23 2b       	or	r18, r19
    2696:	24 2b       	or	r18, r20
    2698:	25 2b       	or	r18, r21
    269a:	21 f4       	brne	.+8      	; 0x26a4 <__fp_cmp+0x3e>
    269c:	08 95       	ret
    269e:	0a 26       	eor	r0, r26
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <__fp_cmp+0x3e>
    26a2:	a1 40       	sbci	r26, 0x01	; 1
    26a4:	a6 95       	lsr	r26
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	81 1d       	adc	r24, r1
    26aa:	81 1d       	adc	r24, r1
    26ac:	08 95       	ret

000026ae <__fp_inf>:
    26ae:	97 f9       	bld	r25, 7
    26b0:	9f 67       	ori	r25, 0x7F	; 127
    26b2:	80 e8       	ldi	r24, 0x80	; 128
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	08 95       	ret

000026ba <__fp_nan>:
    26ba:	9f ef       	ldi	r25, 0xFF	; 255
    26bc:	80 ec       	ldi	r24, 0xC0	; 192
    26be:	08 95       	ret

000026c0 <__fp_pscA>:
    26c0:	00 24       	eor	r0, r0
    26c2:	0a 94       	dec	r0
    26c4:	16 16       	cp	r1, r22
    26c6:	17 06       	cpc	r1, r23
    26c8:	18 06       	cpc	r1, r24
    26ca:	09 06       	cpc	r0, r25
    26cc:	08 95       	ret

000026ce <__fp_pscB>:
    26ce:	00 24       	eor	r0, r0
    26d0:	0a 94       	dec	r0
    26d2:	12 16       	cp	r1, r18
    26d4:	13 06       	cpc	r1, r19
    26d6:	14 06       	cpc	r1, r20
    26d8:	05 06       	cpc	r0, r21
    26da:	08 95       	ret

000026dc <__fp_round>:
    26dc:	09 2e       	mov	r0, r25
    26de:	03 94       	inc	r0
    26e0:	00 0c       	add	r0, r0
    26e2:	11 f4       	brne	.+4      	; 0x26e8 <__fp_round+0xc>
    26e4:	88 23       	and	r24, r24
    26e6:	52 f0       	brmi	.+20     	; 0x26fc <__fp_round+0x20>
    26e8:	bb 0f       	add	r27, r27
    26ea:	40 f4       	brcc	.+16     	; 0x26fc <__fp_round+0x20>
    26ec:	bf 2b       	or	r27, r31
    26ee:	11 f4       	brne	.+4      	; 0x26f4 <__fp_round+0x18>
    26f0:	60 ff       	sbrs	r22, 0
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <__fp_round+0x20>
    26f4:	6f 5f       	subi	r22, 0xFF	; 255
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	8f 4f       	sbci	r24, 0xFF	; 255
    26fa:	9f 4f       	sbci	r25, 0xFF	; 255
    26fc:	08 95       	ret

000026fe <__fp_split3>:
    26fe:	57 fd       	sbrc	r21, 7
    2700:	90 58       	subi	r25, 0x80	; 128
    2702:	44 0f       	add	r20, r20
    2704:	55 1f       	adc	r21, r21
    2706:	59 f0       	breq	.+22     	; 0x271e <__fp_splitA+0x10>
    2708:	5f 3f       	cpi	r21, 0xFF	; 255
    270a:	71 f0       	breq	.+28     	; 0x2728 <__fp_splitA+0x1a>
    270c:	47 95       	ror	r20

0000270e <__fp_splitA>:
    270e:	88 0f       	add	r24, r24
    2710:	97 fb       	bst	r25, 7
    2712:	99 1f       	adc	r25, r25
    2714:	61 f0       	breq	.+24     	; 0x272e <__fp_splitA+0x20>
    2716:	9f 3f       	cpi	r25, 0xFF	; 255
    2718:	79 f0       	breq	.+30     	; 0x2738 <__fp_splitA+0x2a>
    271a:	87 95       	ror	r24
    271c:	08 95       	ret
    271e:	12 16       	cp	r1, r18
    2720:	13 06       	cpc	r1, r19
    2722:	14 06       	cpc	r1, r20
    2724:	55 1f       	adc	r21, r21
    2726:	f2 cf       	rjmp	.-28     	; 0x270c <__fp_split3+0xe>
    2728:	46 95       	lsr	r20
    272a:	f1 df       	rcall	.-30     	; 0x270e <__fp_splitA>
    272c:	08 c0       	rjmp	.+16     	; 0x273e <__fp_splitA+0x30>
    272e:	16 16       	cp	r1, r22
    2730:	17 06       	cpc	r1, r23
    2732:	18 06       	cpc	r1, r24
    2734:	99 1f       	adc	r25, r25
    2736:	f1 cf       	rjmp	.-30     	; 0x271a <__fp_splitA+0xc>
    2738:	86 95       	lsr	r24
    273a:	71 05       	cpc	r23, r1
    273c:	61 05       	cpc	r22, r1
    273e:	08 94       	sec
    2740:	08 95       	ret

00002742 <__fp_zero>:
    2742:	e8 94       	clt

00002744 <__fp_szero>:
    2744:	bb 27       	eor	r27, r27
    2746:	66 27       	eor	r22, r22
    2748:	77 27       	eor	r23, r23
    274a:	cb 01       	movw	r24, r22
    274c:	97 f9       	bld	r25, 7
    274e:	08 95       	ret

00002750 <__mulsf3>:
    2750:	0b d0       	rcall	.+22     	; 0x2768 <__mulsf3x>
    2752:	c4 cf       	rjmp	.-120    	; 0x26dc <__fp_round>
    2754:	b5 df       	rcall	.-150    	; 0x26c0 <__fp_pscA>
    2756:	28 f0       	brcs	.+10     	; 0x2762 <__mulsf3+0x12>
    2758:	ba df       	rcall	.-140    	; 0x26ce <__fp_pscB>
    275a:	18 f0       	brcs	.+6      	; 0x2762 <__mulsf3+0x12>
    275c:	95 23       	and	r25, r21
    275e:	09 f0       	breq	.+2      	; 0x2762 <__mulsf3+0x12>
    2760:	a6 cf       	rjmp	.-180    	; 0x26ae <__fp_inf>
    2762:	ab cf       	rjmp	.-170    	; 0x26ba <__fp_nan>
    2764:	11 24       	eor	r1, r1
    2766:	ee cf       	rjmp	.-36     	; 0x2744 <__fp_szero>

00002768 <__mulsf3x>:
    2768:	ca df       	rcall	.-108    	; 0x26fe <__fp_split3>
    276a:	a0 f3       	brcs	.-24     	; 0x2754 <__mulsf3+0x4>

0000276c <__mulsf3_pse>:
    276c:	95 9f       	mul	r25, r21
    276e:	d1 f3       	breq	.-12     	; 0x2764 <__mulsf3+0x14>
    2770:	95 0f       	add	r25, r21
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	55 1f       	adc	r21, r21
    2776:	62 9f       	mul	r22, r18
    2778:	f0 01       	movw	r30, r0
    277a:	72 9f       	mul	r23, r18
    277c:	bb 27       	eor	r27, r27
    277e:	f0 0d       	add	r31, r0
    2780:	b1 1d       	adc	r27, r1
    2782:	63 9f       	mul	r22, r19
    2784:	aa 27       	eor	r26, r26
    2786:	f0 0d       	add	r31, r0
    2788:	b1 1d       	adc	r27, r1
    278a:	aa 1f       	adc	r26, r26
    278c:	64 9f       	mul	r22, r20
    278e:	66 27       	eor	r22, r22
    2790:	b0 0d       	add	r27, r0
    2792:	a1 1d       	adc	r26, r1
    2794:	66 1f       	adc	r22, r22
    2796:	82 9f       	mul	r24, r18
    2798:	22 27       	eor	r18, r18
    279a:	b0 0d       	add	r27, r0
    279c:	a1 1d       	adc	r26, r1
    279e:	62 1f       	adc	r22, r18
    27a0:	73 9f       	mul	r23, r19
    27a2:	b0 0d       	add	r27, r0
    27a4:	a1 1d       	adc	r26, r1
    27a6:	62 1f       	adc	r22, r18
    27a8:	83 9f       	mul	r24, r19
    27aa:	a0 0d       	add	r26, r0
    27ac:	61 1d       	adc	r22, r1
    27ae:	22 1f       	adc	r18, r18
    27b0:	74 9f       	mul	r23, r20
    27b2:	33 27       	eor	r19, r19
    27b4:	a0 0d       	add	r26, r0
    27b6:	61 1d       	adc	r22, r1
    27b8:	23 1f       	adc	r18, r19
    27ba:	84 9f       	mul	r24, r20
    27bc:	60 0d       	add	r22, r0
    27be:	21 1d       	adc	r18, r1
    27c0:	82 2f       	mov	r24, r18
    27c2:	76 2f       	mov	r23, r22
    27c4:	6a 2f       	mov	r22, r26
    27c6:	11 24       	eor	r1, r1
    27c8:	9f 57       	subi	r25, 0x7F	; 127
    27ca:	50 40       	sbci	r21, 0x00	; 0
    27cc:	8a f0       	brmi	.+34     	; 0x27f0 <__mulsf3_pse+0x84>
    27ce:	e1 f0       	breq	.+56     	; 0x2808 <__mulsf3_pse+0x9c>
    27d0:	88 23       	and	r24, r24
    27d2:	4a f0       	brmi	.+18     	; 0x27e6 <__mulsf3_pse+0x7a>
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	bb 1f       	adc	r27, r27
    27da:	66 1f       	adc	r22, r22
    27dc:	77 1f       	adc	r23, r23
    27de:	88 1f       	adc	r24, r24
    27e0:	91 50       	subi	r25, 0x01	; 1
    27e2:	50 40       	sbci	r21, 0x00	; 0
    27e4:	a9 f7       	brne	.-22     	; 0x27d0 <__mulsf3_pse+0x64>
    27e6:	9e 3f       	cpi	r25, 0xFE	; 254
    27e8:	51 05       	cpc	r21, r1
    27ea:	70 f0       	brcs	.+28     	; 0x2808 <__mulsf3_pse+0x9c>
    27ec:	60 cf       	rjmp	.-320    	; 0x26ae <__fp_inf>
    27ee:	aa cf       	rjmp	.-172    	; 0x2744 <__fp_szero>
    27f0:	5f 3f       	cpi	r21, 0xFF	; 255
    27f2:	ec f3       	brlt	.-6      	; 0x27ee <__mulsf3_pse+0x82>
    27f4:	98 3e       	cpi	r25, 0xE8	; 232
    27f6:	dc f3       	brlt	.-10     	; 0x27ee <__mulsf3_pse+0x82>
    27f8:	86 95       	lsr	r24
    27fa:	77 95       	ror	r23
    27fc:	67 95       	ror	r22
    27fe:	b7 95       	ror	r27
    2800:	f7 95       	ror	r31
    2802:	e7 95       	ror	r30
    2804:	9f 5f       	subi	r25, 0xFF	; 255
    2806:	c1 f7       	brne	.-16     	; 0x27f8 <__mulsf3_pse+0x8c>
    2808:	fe 2b       	or	r31, r30
    280a:	88 0f       	add	r24, r24
    280c:	91 1d       	adc	r25, r1
    280e:	96 95       	lsr	r25
    2810:	87 95       	ror	r24
    2812:	97 f9       	bld	r25, 7
    2814:	08 95       	ret

00002816 <__udivmodhi4>:
    2816:	aa 1b       	sub	r26, r26
    2818:	bb 1b       	sub	r27, r27
    281a:	51 e1       	ldi	r21, 0x11	; 17
    281c:	07 c0       	rjmp	.+14     	; 0x282c <__udivmodhi4_ep>

0000281e <__udivmodhi4_loop>:
    281e:	aa 1f       	adc	r26, r26
    2820:	bb 1f       	adc	r27, r27
    2822:	a6 17       	cp	r26, r22
    2824:	b7 07       	cpc	r27, r23
    2826:	10 f0       	brcs	.+4      	; 0x282c <__udivmodhi4_ep>
    2828:	a6 1b       	sub	r26, r22
    282a:	b7 0b       	sbc	r27, r23

0000282c <__udivmodhi4_ep>:
    282c:	88 1f       	adc	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	5a 95       	dec	r21
    2832:	a9 f7       	brne	.-22     	; 0x281e <__udivmodhi4_loop>
    2834:	80 95       	com	r24
    2836:	90 95       	com	r25
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	08 95       	ret

0000283e <__udivmodsi4>:
    283e:	a1 e2       	ldi	r26, 0x21	; 33
    2840:	1a 2e       	mov	r1, r26
    2842:	aa 1b       	sub	r26, r26
    2844:	bb 1b       	sub	r27, r27
    2846:	fd 01       	movw	r30, r26
    2848:	0d c0       	rjmp	.+26     	; 0x2864 <__udivmodsi4_ep>

0000284a <__udivmodsi4_loop>:
    284a:	aa 1f       	adc	r26, r26
    284c:	bb 1f       	adc	r27, r27
    284e:	ee 1f       	adc	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	a2 17       	cp	r26, r18
    2854:	b3 07       	cpc	r27, r19
    2856:	e4 07       	cpc	r30, r20
    2858:	f5 07       	cpc	r31, r21
    285a:	20 f0       	brcs	.+8      	; 0x2864 <__udivmodsi4_ep>
    285c:	a2 1b       	sub	r26, r18
    285e:	b3 0b       	sbc	r27, r19
    2860:	e4 0b       	sbc	r30, r20
    2862:	f5 0b       	sbc	r31, r21

00002864 <__udivmodsi4_ep>:
    2864:	66 1f       	adc	r22, r22
    2866:	77 1f       	adc	r23, r23
    2868:	88 1f       	adc	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	1a 94       	dec	r1
    286e:	69 f7       	brne	.-38     	; 0x284a <__udivmodsi4_loop>
    2870:	60 95       	com	r22
    2872:	70 95       	com	r23
    2874:	80 95       	com	r24
    2876:	90 95       	com	r25
    2878:	9b 01       	movw	r18, r22
    287a:	ac 01       	movw	r20, r24
    287c:	bd 01       	movw	r22, r26
    287e:	cf 01       	movw	r24, r30
    2880:	08 95       	ret

00002882 <__divmodsi4>:
    2882:	05 2e       	mov	r0, r21
    2884:	97 fb       	bst	r25, 7
    2886:	16 f4       	brtc	.+4      	; 0x288c <__divmodsi4+0xa>
    2888:	00 94       	com	r0
    288a:	0f d0       	rcall	.+30     	; 0x28aa <__negsi2>
    288c:	57 fd       	sbrc	r21, 7
    288e:	05 d0       	rcall	.+10     	; 0x289a <__divmodsi4_neg2>
    2890:	d6 df       	rcall	.-84     	; 0x283e <__udivmodsi4>
    2892:	07 fc       	sbrc	r0, 7
    2894:	02 d0       	rcall	.+4      	; 0x289a <__divmodsi4_neg2>
    2896:	46 f4       	brtc	.+16     	; 0x28a8 <__divmodsi4_exit>
    2898:	08 c0       	rjmp	.+16     	; 0x28aa <__negsi2>

0000289a <__divmodsi4_neg2>:
    289a:	50 95       	com	r21
    289c:	40 95       	com	r20
    289e:	30 95       	com	r19
    28a0:	21 95       	neg	r18
    28a2:	3f 4f       	sbci	r19, 0xFF	; 255
    28a4:	4f 4f       	sbci	r20, 0xFF	; 255
    28a6:	5f 4f       	sbci	r21, 0xFF	; 255

000028a8 <__divmodsi4_exit>:
    28a8:	08 95       	ret

000028aa <__negsi2>:
    28aa:	90 95       	com	r25
    28ac:	80 95       	com	r24
    28ae:	70 95       	com	r23
    28b0:	61 95       	neg	r22
    28b2:	7f 4f       	sbci	r23, 0xFF	; 255
    28b4:	8f 4f       	sbci	r24, 0xFF	; 255
    28b6:	9f 4f       	sbci	r25, 0xFF	; 255
    28b8:	08 95       	ret

000028ba <__tablejump2__>:
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	05 90       	lpm	r0, Z+
    28c0:	f4 91       	lpm	r31, Z
    28c2:	e0 2d       	mov	r30, r0
    28c4:	09 94       	ijmp

000028c6 <__prologue_saves__>:
    28c6:	2f 92       	push	r2
    28c8:	3f 92       	push	r3
    28ca:	4f 92       	push	r4
    28cc:	5f 92       	push	r5
    28ce:	6f 92       	push	r6
    28d0:	7f 92       	push	r7
    28d2:	8f 92       	push	r8
    28d4:	9f 92       	push	r9
    28d6:	af 92       	push	r10
    28d8:	bf 92       	push	r11
    28da:	cf 92       	push	r12
    28dc:	df 92       	push	r13
    28de:	ef 92       	push	r14
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	ca 1b       	sub	r28, r26
    28f0:	db 0b       	sbc	r29, r27
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	09 94       	ijmp

000028fe <__epilogue_restores__>:
    28fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2900:	39 88       	ldd	r3, Y+17	; 0x11
    2902:	48 88       	ldd	r4, Y+16	; 0x10
    2904:	5f 84       	ldd	r5, Y+15	; 0x0f
    2906:	6e 84       	ldd	r6, Y+14	; 0x0e
    2908:	7d 84       	ldd	r7, Y+13	; 0x0d
    290a:	8c 84       	ldd	r8, Y+12	; 0x0c
    290c:	9b 84       	ldd	r9, Y+11	; 0x0b
    290e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2910:	b9 84       	ldd	r11, Y+9	; 0x09
    2912:	c8 84       	ldd	r12, Y+8	; 0x08
    2914:	df 80       	ldd	r13, Y+7	; 0x07
    2916:	ee 80       	ldd	r14, Y+6	; 0x06
    2918:	fd 80       	ldd	r15, Y+5	; 0x05
    291a:	0c 81       	ldd	r16, Y+4	; 0x04
    291c:	1b 81       	ldd	r17, Y+3	; 0x03
    291e:	aa 81       	ldd	r26, Y+2	; 0x02
    2920:	b9 81       	ldd	r27, Y+1	; 0x01
    2922:	ce 0f       	add	r28, r30
    2924:	d1 1d       	adc	r29, r1
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	ed 01       	movw	r28, r26
    2932:	08 95       	ret

00002934 <isspace>:
    2934:	91 11       	cpse	r25, r1
    2936:	07 c1       	rjmp	.+526    	; 0x2b46 <__ctype_isfalse>
    2938:	80 32       	cpi	r24, 0x20	; 32
    293a:	19 f0       	breq	.+6      	; 0x2942 <isspace+0xe>
    293c:	89 50       	subi	r24, 0x09	; 9
    293e:	85 50       	subi	r24, 0x05	; 5
    2940:	d0 f7       	brcc	.-12     	; 0x2936 <isspace+0x2>
    2942:	08 95       	ret

00002944 <strchr_P>:
    2944:	fc 01       	movw	r30, r24
    2946:	05 90       	lpm	r0, Z+
    2948:	06 16       	cp	r0, r22
    294a:	21 f0       	breq	.+8      	; 0x2954 <strchr_P+0x10>
    294c:	00 20       	and	r0, r0
    294e:	d9 f7       	brne	.-10     	; 0x2946 <strchr_P+0x2>
    2950:	c0 01       	movw	r24, r0
    2952:	08 95       	ret
    2954:	31 97       	sbiw	r30, 0x01	; 1
    2956:	cf 01       	movw	r24, r30
    2958:	08 95       	ret

0000295a <memcpy>:
    295a:	fb 01       	movw	r30, r22
    295c:	dc 01       	movw	r26, r24
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <memcpy+0xa>
    2960:	01 90       	ld	r0, Z+
    2962:	0d 92       	st	X+, r0
    2964:	41 50       	subi	r20, 0x01	; 1
    2966:	50 40       	sbci	r21, 0x00	; 0
    2968:	d8 f7       	brcc	.-10     	; 0x2960 <memcpy+0x6>
    296a:	08 95       	ret

0000296c <fgetc>:
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	ec 01       	movw	r28, r24
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	20 ff       	sbrs	r18, 0
    2976:	33 c0       	rjmp	.+102    	; 0x29de <fgetc+0x72>
    2978:	26 ff       	sbrs	r18, 6
    297a:	0a c0       	rjmp	.+20     	; 0x2990 <fgetc+0x24>
    297c:	2f 7b       	andi	r18, 0xBF	; 191
    297e:	2b 83       	std	Y+3, r18	; 0x03
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	9f 81       	ldd	r25, Y+7	; 0x07
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	9f 83       	std	Y+7, r25	; 0x07
    2988:	8e 83       	std	Y+6, r24	; 0x06
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	29 c0       	rjmp	.+82     	; 0x29e2 <fgetc+0x76>
    2990:	22 ff       	sbrs	r18, 2
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <fgetc+0x46>
    2994:	e8 81       	ld	r30, Y
    2996:	f9 81       	ldd	r31, Y+1	; 0x01
    2998:	80 81       	ld	r24, Z
    299a:	08 2e       	mov	r0, r24
    299c:	00 0c       	add	r0, r0
    299e:	99 0b       	sbc	r25, r25
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	19 f4       	brne	.+6      	; 0x29aa <fgetc+0x3e>
    29a4:	20 62       	ori	r18, 0x20	; 32
    29a6:	2b 83       	std	Y+3, r18	; 0x03
    29a8:	1a c0       	rjmp	.+52     	; 0x29de <fgetc+0x72>
    29aa:	31 96       	adiw	r30, 0x01	; 1
    29ac:	f9 83       	std	Y+1, r31	; 0x01
    29ae:	e8 83       	st	Y, r30
    29b0:	0e c0       	rjmp	.+28     	; 0x29ce <fgetc+0x62>
    29b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    29b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    29b6:	09 95       	icall
    29b8:	97 ff       	sbrs	r25, 7
    29ba:	09 c0       	rjmp	.+18     	; 0x29ce <fgetc+0x62>
    29bc:	2b 81       	ldd	r18, Y+3	; 0x03
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	11 f0       	breq	.+4      	; 0x29c6 <fgetc+0x5a>
    29c2:	80 e2       	ldi	r24, 0x20	; 32
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <fgetc+0x5c>
    29c6:	80 e1       	ldi	r24, 0x10	; 16
    29c8:	82 2b       	or	r24, r18
    29ca:	8b 83       	std	Y+3, r24	; 0x03
    29cc:	08 c0       	rjmp	.+16     	; 0x29de <fgetc+0x72>
    29ce:	2e 81       	ldd	r18, Y+6	; 0x06
    29d0:	3f 81       	ldd	r19, Y+7	; 0x07
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	3f 83       	std	Y+7, r19	; 0x07
    29d8:	2e 83       	std	Y+6, r18	; 0x06
    29da:	99 27       	eor	r25, r25
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <fgetc+0x76>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	9f ef       	ldi	r25, 0xFF	; 255
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	08 95       	ret

000029e8 <fputc>:
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	fb 01       	movw	r30, r22
    29f2:	23 81       	ldd	r18, Z+3	; 0x03
    29f4:	21 fd       	sbrc	r18, 1
    29f6:	03 c0       	rjmp	.+6      	; 0x29fe <fputc+0x16>
    29f8:	8f ef       	ldi	r24, 0xFF	; 255
    29fa:	9f ef       	ldi	r25, 0xFF	; 255
    29fc:	28 c0       	rjmp	.+80     	; 0x2a4e <fputc+0x66>
    29fe:	22 ff       	sbrs	r18, 2
    2a00:	16 c0       	rjmp	.+44     	; 0x2a2e <fputc+0x46>
    2a02:	46 81       	ldd	r20, Z+6	; 0x06
    2a04:	57 81       	ldd	r21, Z+7	; 0x07
    2a06:	24 81       	ldd	r18, Z+4	; 0x04
    2a08:	35 81       	ldd	r19, Z+5	; 0x05
    2a0a:	42 17       	cp	r20, r18
    2a0c:	53 07       	cpc	r21, r19
    2a0e:	44 f4       	brge	.+16     	; 0x2a20 <fputc+0x38>
    2a10:	a0 81       	ld	r26, Z
    2a12:	b1 81       	ldd	r27, Z+1	; 0x01
    2a14:	9d 01       	movw	r18, r26
    2a16:	2f 5f       	subi	r18, 0xFF	; 255
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	31 83       	std	Z+1, r19	; 0x01
    2a1c:	20 83       	st	Z, r18
    2a1e:	8c 93       	st	X, r24
    2a20:	26 81       	ldd	r18, Z+6	; 0x06
    2a22:	37 81       	ldd	r19, Z+7	; 0x07
    2a24:	2f 5f       	subi	r18, 0xFF	; 255
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
    2a28:	37 83       	std	Z+7, r19	; 0x07
    2a2a:	26 83       	std	Z+6, r18	; 0x06
    2a2c:	10 c0       	rjmp	.+32     	; 0x2a4e <fputc+0x66>
    2a2e:	eb 01       	movw	r28, r22
    2a30:	09 2f       	mov	r16, r25
    2a32:	18 2f       	mov	r17, r24
    2a34:	00 84       	ldd	r0, Z+8	; 0x08
    2a36:	f1 85       	ldd	r31, Z+9	; 0x09
    2a38:	e0 2d       	mov	r30, r0
    2a3a:	09 95       	icall
    2a3c:	89 2b       	or	r24, r25
    2a3e:	e1 f6       	brne	.-72     	; 0x29f8 <fputc+0x10>
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	9f 83       	std	Y+7, r25	; 0x07
    2a48:	8e 83       	std	Y+6, r24	; 0x06
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	90 2f       	mov	r25, r16
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	08 95       	ret

00002a58 <ungetc>:
    2a58:	fb 01       	movw	r30, r22
    2a5a:	23 81       	ldd	r18, Z+3	; 0x03
    2a5c:	20 ff       	sbrs	r18, 0
    2a5e:	12 c0       	rjmp	.+36     	; 0x2a84 <ungetc+0x2c>
    2a60:	26 fd       	sbrc	r18, 6
    2a62:	10 c0       	rjmp	.+32     	; 0x2a84 <ungetc+0x2c>
    2a64:	8f 3f       	cpi	r24, 0xFF	; 255
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	93 07       	cpc	r25, r19
    2a6a:	61 f0       	breq	.+24     	; 0x2a84 <ungetc+0x2c>
    2a6c:	82 83       	std	Z+2, r24	; 0x02
    2a6e:	2f 7d       	andi	r18, 0xDF	; 223
    2a70:	20 64       	ori	r18, 0x40	; 64
    2a72:	23 83       	std	Z+3, r18	; 0x03
    2a74:	26 81       	ldd	r18, Z+6	; 0x06
    2a76:	37 81       	ldd	r19, Z+7	; 0x07
    2a78:	21 50       	subi	r18, 0x01	; 1
    2a7a:	31 09       	sbc	r19, r1
    2a7c:	37 83       	std	Z+7, r19	; 0x07
    2a7e:	26 83       	std	Z+6, r18	; 0x06
    2a80:	99 27       	eor	r25, r25
    2a82:	08 95       	ret
    2a84:	8f ef       	ldi	r24, 0xFF	; 255
    2a86:	9f ef       	ldi	r25, 0xFF	; 255
    2a88:	08 95       	ret

00002a8a <__ultoa_invert>:
    2a8a:	fa 01       	movw	r30, r20
    2a8c:	aa 27       	eor	r26, r26
    2a8e:	28 30       	cpi	r18, 0x08	; 8
    2a90:	51 f1       	breq	.+84     	; 0x2ae6 <__ultoa_invert+0x5c>
    2a92:	20 31       	cpi	r18, 0x10	; 16
    2a94:	81 f1       	breq	.+96     	; 0x2af6 <__ultoa_invert+0x6c>
    2a96:	e8 94       	clt
    2a98:	6f 93       	push	r22
    2a9a:	6e 7f       	andi	r22, 0xFE	; 254
    2a9c:	6e 5f       	subi	r22, 0xFE	; 254
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	af 4f       	sbci	r26, 0xFF	; 255
    2aa6:	b1 e0       	ldi	r27, 0x01	; 1
    2aa8:	3e d0       	rcall	.+124    	; 0x2b26 <__ultoa_invert+0x9c>
    2aaa:	b4 e0       	ldi	r27, 0x04	; 4
    2aac:	3c d0       	rcall	.+120    	; 0x2b26 <__ultoa_invert+0x9c>
    2aae:	67 0f       	add	r22, r23
    2ab0:	78 1f       	adc	r23, r24
    2ab2:	89 1f       	adc	r24, r25
    2ab4:	9a 1f       	adc	r25, r26
    2ab6:	a1 1d       	adc	r26, r1
    2ab8:	68 0f       	add	r22, r24
    2aba:	79 1f       	adc	r23, r25
    2abc:	8a 1f       	adc	r24, r26
    2abe:	91 1d       	adc	r25, r1
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	6a 0f       	add	r22, r26
    2ac4:	71 1d       	adc	r23, r1
    2ac6:	81 1d       	adc	r24, r1
    2ac8:	91 1d       	adc	r25, r1
    2aca:	a1 1d       	adc	r26, r1
    2acc:	20 d0       	rcall	.+64     	; 0x2b0e <__ultoa_invert+0x84>
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <__ultoa_invert+0x48>
    2ad0:	68 94       	set
    2ad2:	3f 91       	pop	r19
    2ad4:	2a e0       	ldi	r18, 0x0A	; 10
    2ad6:	26 9f       	mul	r18, r22
    2ad8:	11 24       	eor	r1, r1
    2ada:	30 19       	sub	r19, r0
    2adc:	30 5d       	subi	r19, 0xD0	; 208
    2ade:	31 93       	st	Z+, r19
    2ae0:	de f6       	brtc	.-74     	; 0x2a98 <__ultoa_invert+0xe>
    2ae2:	cf 01       	movw	r24, r30
    2ae4:	08 95       	ret
    2ae6:	46 2f       	mov	r20, r22
    2ae8:	47 70       	andi	r20, 0x07	; 7
    2aea:	40 5d       	subi	r20, 0xD0	; 208
    2aec:	41 93       	st	Z+, r20
    2aee:	b3 e0       	ldi	r27, 0x03	; 3
    2af0:	0f d0       	rcall	.+30     	; 0x2b10 <__ultoa_invert+0x86>
    2af2:	c9 f7       	brne	.-14     	; 0x2ae6 <__ultoa_invert+0x5c>
    2af4:	f6 cf       	rjmp	.-20     	; 0x2ae2 <__ultoa_invert+0x58>
    2af6:	46 2f       	mov	r20, r22
    2af8:	4f 70       	andi	r20, 0x0F	; 15
    2afa:	40 5d       	subi	r20, 0xD0	; 208
    2afc:	4a 33       	cpi	r20, 0x3A	; 58
    2afe:	18 f0       	brcs	.+6      	; 0x2b06 <__ultoa_invert+0x7c>
    2b00:	49 5d       	subi	r20, 0xD9	; 217
    2b02:	31 fd       	sbrc	r19, 1
    2b04:	40 52       	subi	r20, 0x20	; 32
    2b06:	41 93       	st	Z+, r20
    2b08:	02 d0       	rcall	.+4      	; 0x2b0e <__ultoa_invert+0x84>
    2b0a:	a9 f7       	brne	.-22     	; 0x2af6 <__ultoa_invert+0x6c>
    2b0c:	ea cf       	rjmp	.-44     	; 0x2ae2 <__ultoa_invert+0x58>
    2b0e:	b4 e0       	ldi	r27, 0x04	; 4
    2b10:	a6 95       	lsr	r26
    2b12:	97 95       	ror	r25
    2b14:	87 95       	ror	r24
    2b16:	77 95       	ror	r23
    2b18:	67 95       	ror	r22
    2b1a:	ba 95       	dec	r27
    2b1c:	c9 f7       	brne	.-14     	; 0x2b10 <__ultoa_invert+0x86>
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	61 05       	cpc	r22, r1
    2b22:	71 05       	cpc	r23, r1
    2b24:	08 95       	ret
    2b26:	9b 01       	movw	r18, r22
    2b28:	ac 01       	movw	r20, r24
    2b2a:	0a 2e       	mov	r0, r26
    2b2c:	06 94       	lsr	r0
    2b2e:	57 95       	ror	r21
    2b30:	47 95       	ror	r20
    2b32:	37 95       	ror	r19
    2b34:	27 95       	ror	r18
    2b36:	ba 95       	dec	r27
    2b38:	c9 f7       	brne	.-14     	; 0x2b2c <__ultoa_invert+0xa2>
    2b3a:	62 0f       	add	r22, r18
    2b3c:	73 1f       	adc	r23, r19
    2b3e:	84 1f       	adc	r24, r20
    2b40:	95 1f       	adc	r25, r21
    2b42:	a0 1d       	adc	r26, r0
    2b44:	08 95       	ret

00002b46 <__ctype_isfalse>:
    2b46:	99 27       	eor	r25, r25
    2b48:	88 27       	eor	r24, r24

00002b4a <__ctype_istrue>:
    2b4a:	08 95       	ret

00002b4c <_exit>:
    2b4c:	f8 94       	cli

00002b4e <__stop_program>:
    2b4e:	ff cf       	rjmp	.-2      	; 0x2b4e <__stop_program>
