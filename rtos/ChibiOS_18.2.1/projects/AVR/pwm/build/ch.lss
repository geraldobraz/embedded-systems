
build/ch.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         0000005c  00800100  00001636  000016ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  0080015c  0080015c  00001726  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d31a  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c37  00000000  00000000  0000efd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b1a  00000000  00000000  00011c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d24  00000000  00000000  00015724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000151c  00000000  00000000  00016448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f2a  00000000  00000000  00017964  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d8  00000000  00000000  0001b88e  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5e c0       	rjmp	.+188    	; 0xc2 <__bad_interrupt>
       6:	00 00       	nop
       8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
      12:	00 00       	nop
      14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
      16:	00 00       	nop
      18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c0       	rjmp	.+156    	; 0xc2 <__bad_interrupt>
      26:	00 00       	nop
      28:	4c c0       	rjmp	.+152    	; 0xc2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e6 c4       	rjmp	.+2508   	; 0x9fa <__vector_11>
      2e:	00 00       	nop
      30:	18 c5       	rjmp	.+2608   	; 0xa62 <__vector_12>
      32:	00 00       	nop
      34:	ae c4       	rjmp	.+2396   	; 0x992 <__vector_13>
      36:	00 00       	nop
      38:	77 c4       	rjmp	.+2286   	; 0x928 <__vector_14>
      3a:	00 00       	nop
      3c:	42 c0       	rjmp	.+132    	; 0xc2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c0       	rjmp	.+128    	; 0xc2 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c0       	rjmp	.+124    	; 0xc2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c0       	rjmp	.+120    	; 0xc2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c0       	rjmp	.+116    	; 0xc2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c0       	rjmp	.+112    	; 0xc2 <__bad_interrupt>
      52:	00 00       	nop
      54:	36 c0       	rjmp	.+108    	; 0xc2 <__bad_interrupt>
      56:	00 00       	nop
      58:	34 c0       	rjmp	.+104    	; 0xc2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c0       	rjmp	.+100    	; 0xc2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c0       	rjmp	.+96     	; 0xc2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c0       	rjmp	.+92     	; 0xc2 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2159>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2294>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e6 e3       	ldi	r30, 0x36	; 54
      9e:	f6 e1       	ldi	r31, 0x16	; 22
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ac 35       	cpi	r26, 0x5C	; 92
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	23 e0       	ldi	r18, 0x03	; 3
      ae:	ac e5       	ldi	r26, 0x5C	; 92
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a3 31       	cpi	r26, 0x13	; 19
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	6c d6       	rcall	.+3288   	; 0xd96 <main>
      be:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_exit>

000000c2 <__bad_interrupt>:
      c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <_idle_thread>:
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
      c4:	ff cf       	rjmp	.-2      	; 0xc4 <_idle_thread>

000000c6 <chSysInit>:
      c6:	22 d1       	rcall	.+580    	; 0x30c <_scheduler_init>
      c8:	5c d0       	rcall	.+184    	; 0x182 <_vt_init>
      ca:	4f d3       	rcall	.+1694   	; 0x76a <_core_init>
      cc:	85 d3       	rcall	.+1802   	; 0x7d8 <_heap_init>
      ce:	40 e8       	ldi	r20, 0x80	; 128
      d0:	6a e2       	ldi	r22, 0x2A	; 42
      d2:	71 e0       	ldi	r23, 0x01	; 1
      d4:	8b ee       	ldi	r24, 0xEB	; 235
      d6:	92 e0       	ldi	r25, 0x02	; 2
      d8:	30 d2       	rcall	.+1120   	; 0x53a <_thread_init>
      da:	fc 01       	movw	r30, r24
      dc:	90 93 e0 02 	sts	0x02E0, r25
      e0:	80 93 df 02 	sts	0x02DF, r24
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	95 87       	std	Z+13, r25	; 0x0d
      e8:	90 93 0b 03 	sts	0x030B, r25
      ec:	78 94       	sei
      ee:	88 e1       	ldi	r24, 0x18	; 24
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	a6 c2       	rjmp	.+1356   	; 0x640 <chThdCreate>

000000f4 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
      fc:	80 91 e7 02 	lds	r24, 0x02E7
     100:	90 91 e8 02 	lds	r25, 0x02E8
     104:	01 96       	adiw	r24, 0x01	; 1
     106:	90 93 e8 02 	sts	0x02E8, r25
     10a:	80 93 e7 02 	sts	0x02E7, r24
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
     10e:	a0 91 e1 02 	lds	r26, 0x02E1
     112:	b0 91 e2 02 	lds	r27, 0x02E2
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	a1 3e       	cpi	r26, 0xE1	; 225
     11a:	b8 07       	cpc	r27, r24
     11c:	69 f1       	breq	.+90     	; 0x178 <chSysTimerHandlerI+0x84>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
     11e:	14 96       	adiw	r26, 0x04	; 4
     120:	8d 91       	ld	r24, X+
     122:	9c 91       	ld	r25, X
     124:	15 97       	sbiw	r26, 0x05	; 5
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	15 96       	adiw	r26, 0x05	; 5
     12a:	9c 93       	st	X, r25
     12c:	8e 93       	st	-X, r24
     12e:	14 97       	sbiw	r26, 0x04	; 4
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     130:	89 2b       	or	r24, r25
     132:	11 f5       	brne	.+68     	; 0x178 <chSysTimerHandlerI+0x84>
     134:	01 ee       	ldi	r16, 0xE1	; 225
     136:	12 e0       	ldi	r17, 0x02	; 2
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
     138:	16 96       	adiw	r26, 0x06	; 6
     13a:	ed 91       	ld	r30, X+
     13c:	fc 91       	ld	r31, X
     13e:	17 97       	sbiw	r26, 0x07	; 7
      vtp->func = NULL;
     140:	17 96       	adiw	r26, 0x07	; 7
     142:	1c 92       	st	X, r1
     144:	1e 92       	st	-X, r1
     146:	16 97       	sbiw	r26, 0x06	; 6
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
     148:	cd 91       	ld	r28, X+
     14a:	dc 91       	ld	r29, X
     14c:	11 97       	sbiw	r26, 0x01	; 1
     14e:	1b 83       	std	Y+3, r17	; 0x03
     150:	0a 83       	std	Y+2, r16	; 0x02
      ch.vtlist.next = vtp->next;
     152:	d0 93 e2 02 	sts	0x02E2, r29
     156:	c0 93 e1 02 	sts	0x02E1, r28
      chSysUnlockFromISR();
      fn(vtp->par);
     15a:	18 96       	adiw	r26, 0x08	; 8
     15c:	8d 91       	ld	r24, X+
     15e:	9c 91       	ld	r25, X
     160:	19 97       	sbiw	r26, 0x09	; 9
     162:	09 95       	icall
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
    while (ch.vtlist.next->delta == (sysinterval_t)0) {
     164:	a0 91 e1 02 	lds	r26, 0x02E1
     168:	b0 91 e2 02 	lds	r27, 0x02E2
     16c:	14 96       	adiw	r26, 0x04	; 4
     16e:	8d 91       	ld	r24, X+
     170:	9c 91       	ld	r25, X
     172:	15 97       	sbiw	r26, 0x05	; 5
     174:	89 2b       	or	r24, r25
     176:	01 f3       	breq	.-64     	; 0x138 <chSysTimerHandlerI+0x44>
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	08 95       	ret

00000182 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
     182:	e4 ed       	ldi	r30, 0xD4	; 212
     184:	f2 e0       	ldi	r31, 0x02	; 2
     186:	81 ee       	ldi	r24, 0xE1	; 225
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	96 87       	std	Z+14, r25	; 0x0e
     18c:	85 87       	std	Z+13, r24	; 0x0d
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
     18e:	90 8b       	std	Z+16, r25	; 0x10
     190:	87 87       	std	Z+15, r24	; 0x0f
  ch.vtlist.delta = (sysinterval_t)-1;
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	9f ef       	ldi	r25, 0xFF	; 255
     196:	92 8b       	std	Z+18, r25	; 0x12
     198:	81 8b       	std	Z+17, r24	; 0x11
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
     19a:	14 8a       	std	Z+20, r1	; 0x14
     19c:	13 8a       	std	Z+19, r1	; 0x13
     19e:	08 95       	ret

000001a0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	dc 01       	movw	r26, r24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
     1a6:	19 96       	adiw	r26, 0x09	; 9
     1a8:	3c 93       	st	X, r19
     1aa:	2e 93       	st	-X, r18
     1ac:	18 97       	sbiw	r26, 0x08	; 8
  vtp->func = vtfunc;
     1ae:	17 96       	adiw	r26, 0x07	; 7
     1b0:	5c 93       	st	X, r21
     1b2:	4e 93       	st	-X, r20
     1b4:	16 97       	sbiw	r26, 0x06	; 6
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
     1b6:	e0 91 e1 02 	lds	r30, 0x02E1
     1ba:	f0 91 e2 02 	lds	r31, 0x02E2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     1be:	24 81       	ldd	r18, Z+4	; 0x04
     1c0:	35 81       	ldd	r19, Z+5	; 0x05
     1c2:	26 17       	cp	r18, r22
     1c4:	37 07       	cpc	r19, r23
     1c6:	50 f4       	brcc	.+20     	; 0x1dc <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
     1c8:	62 1b       	sub	r22, r18
     1ca:	73 0b       	sbc	r23, r19
    p = p->next;
     1cc:	01 90       	ld	r0, Z+
     1ce:	f0 81       	ld	r31, Z
     1d0:	e0 2d       	mov	r30, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
     1d2:	24 81       	ldd	r18, Z+4	; 0x04
     1d4:	35 81       	ldd	r19, Z+5	; 0x05
     1d6:	26 17       	cp	r18, r22
     1d8:	37 07       	cpc	r19, r23
     1da:	b0 f3       	brcs	.-20     	; 0x1c8 <chVTDoSetI+0x28>
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
     1dc:	11 96       	adiw	r26, 0x01	; 1
     1de:	fc 93       	st	X, r31
     1e0:	ee 93       	st	-X, r30
  vtp->prev = vtp->next->prev;
     1e2:	c2 81       	ldd	r28, Z+2	; 0x02
     1e4:	d3 81       	ldd	r29, Z+3	; 0x03
     1e6:	13 96       	adiw	r26, 0x03	; 3
     1e8:	dc 93       	st	X, r29
     1ea:	ce 93       	st	-X, r28
     1ec:	12 97       	sbiw	r26, 0x02	; 2
  vtp->prev->next = vtp;
     1ee:	b9 83       	std	Y+1, r27	; 0x01
     1f0:	a8 83       	st	Y, r26
  p->prev = vtp;
     1f2:	b3 83       	std	Z+3, r27	; 0x03
     1f4:	a2 83       	std	Z+2, r26	; 0x02
  vtp->delta = delta;
     1f6:	15 96       	adiw	r26, 0x05	; 5
     1f8:	7c 93       	st	X, r23
     1fa:	6e 93       	st	-X, r22
     1fc:	14 97       	sbiw	r26, 0x04	; 4

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
     1fe:	84 81       	ldd	r24, Z+4	; 0x04
     200:	95 81       	ldd	r25, Z+5	; 0x05
     202:	86 1b       	sub	r24, r22
     204:	97 0b       	sbc	r25, r23
     206:	95 83       	std	Z+5, r25	; 0x05
     208:	84 83       	std	Z+4, r24	; 0x04

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	9f ef       	ldi	r25, 0xFF	; 255
     20e:	90 93 e6 02 	sts	0x02E6, r25
     212:	80 93 e5 02 	sts	0x02E5, r24
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	fc 01       	movw	r30, r24
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
     222:	a0 81       	ld	r26, Z
     224:	b1 81       	ldd	r27, Z+1	; 0x01
     226:	14 96       	adiw	r26, 0x04	; 4
     228:	2d 91       	ld	r18, X+
     22a:	3c 91       	ld	r19, X
     22c:	15 97       	sbiw	r26, 0x05	; 5
     22e:	84 81       	ldd	r24, Z+4	; 0x04
     230:	95 81       	ldd	r25, Z+5	; 0x05
     232:	82 0f       	add	r24, r18
     234:	93 1f       	adc	r25, r19
     236:	15 96       	adiw	r26, 0x05	; 5
     238:	9c 93       	st	X, r25
     23a:	8e 93       	st	-X, r24
     23c:	14 97       	sbiw	r26, 0x04	; 4

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
     23e:	c2 81       	ldd	r28, Z+2	; 0x02
     240:	d3 81       	ldd	r29, Z+3	; 0x03
     242:	b9 83       	std	Y+1, r27	; 0x01
     244:	a8 83       	st	Y, r26
  vtp->next->prev = vtp->prev;
     246:	a0 81       	ld	r26, Z
     248:	b1 81       	ldd	r27, Z+1	; 0x01
     24a:	13 96       	adiw	r26, 0x03	; 3
     24c:	dc 93       	st	X, r29
     24e:	ce 93       	st	-X, r28
     250:	12 97       	sbiw	r26, 0x02	; 2
  vtp->func = NULL;
     252:	17 82       	std	Z+7, r1	; 0x07
     254:	16 82       	std	Z+6, r1	; 0x06

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (sysinterval_t)-1;
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	9f ef       	ldi	r25, 0xFF	; 255
     25a:	90 93 e6 02 	sts	0x02E6, r25
     25e:	80 93 e5 02 	sts	0x02E5, r24
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <wakeup>:
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
    chSchDoRescheduleAhead();
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	dc 01       	movw	r26, r24
     26e:	1d 96       	adiw	r26, 0x0d	; 13
     270:	8c 91       	ld	r24, X
     272:	1d 97       	sbiw	r26, 0x0d	; 13
     274:	84 30       	cpi	r24, 0x04	; 4
     276:	99 f1       	breq	.+102    	; 0x2de <wakeup+0x76>
     278:	70 f5       	brcc	.+92     	; 0x2d6 <wakeup+0x6e>
     27a:	88 23       	and	r24, r24
     27c:	49 f1       	breq	.+82     	; 0x2d0 <wakeup+0x68>
     27e:	83 30       	cpi	r24, 0x03	; 3
     280:	31 f4       	brne	.+12     	; 0x28e <wakeup+0x26>
     282:	50 96       	adiw	r26, 0x10	; 16
     284:	ed 91       	ld	r30, X+
     286:	fc 91       	ld	r31, X
     288:	51 97       	sbiw	r26, 0x11	; 17
     28a:	11 82       	std	Z+1, r1	; 0x01
     28c:	10 82       	st	Z, r1
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	9f ef       	ldi	r25, 0xFF	; 255
     292:	51 96       	adiw	r26, 0x11	; 17
     294:	9c 93       	st	X, r25
     296:	8e 93       	st	-X, r24
     298:	50 97       	sbiw	r26, 0x10	; 16
     29a:	1d 96       	adiw	r26, 0x0d	; 13
     29c:	1c 92       	st	X, r1
     29e:	1d 97       	sbiw	r26, 0x0d	; 13
     2a0:	14 96       	adiw	r26, 0x04	; 4
     2a2:	2c 91       	ld	r18, X
     2a4:	14 97       	sbiw	r26, 0x04	; 4
     2a6:	e4 ed       	ldi	r30, 0xD4	; 212
     2a8:	f2 e0       	ldi	r31, 0x02	; 2
     2aa:	01 90       	ld	r0, Z+
     2ac:	f0 81       	ld	r31, Z
     2ae:	e0 2d       	mov	r30, r0
     2b0:	94 81       	ldd	r25, Z+4	; 0x04
     2b2:	92 17       	cp	r25, r18
     2b4:	d0 f7       	brcc	.-12     	; 0x2aa <wakeup+0x42>
     2b6:	11 96       	adiw	r26, 0x01	; 1
     2b8:	fc 93       	st	X, r31
     2ba:	ee 93       	st	-X, r30
     2bc:	c2 81       	ldd	r28, Z+2	; 0x02
     2be:	d3 81       	ldd	r29, Z+3	; 0x03
     2c0:	13 96       	adiw	r26, 0x03	; 3
     2c2:	dc 93       	st	X, r29
     2c4:	ce 93       	st	-X, r28
     2c6:	12 97       	sbiw	r26, 0x02	; 2
     2c8:	b9 83       	std	Y+1, r27	; 0x01
     2ca:	a8 83       	st	Y, r26
     2cc:	b3 83       	std	Z+3, r27	; 0x03
     2ce:	a2 83       	std	Z+2, r26	; 0x02
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret
     2d6:	85 30       	cpi	r24, 0x05	; 5
     2d8:	89 f0       	breq	.+34     	; 0x2fc <wakeup+0x94>
     2da:	87 30       	cpi	r24, 0x07	; 7
     2dc:	c1 f6       	brne	.-80     	; 0x28e <wakeup+0x26>
     2de:	12 96       	adiw	r26, 0x02	; 2
     2e0:	ed 91       	ld	r30, X+
     2e2:	fc 91       	ld	r31, X
     2e4:	13 97       	sbiw	r26, 0x03	; 3
     2e6:	8d 91       	ld	r24, X+
     2e8:	9c 91       	ld	r25, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
     2f0:	cd 91       	ld	r28, X+
     2f2:	dc 91       	ld	r29, X
     2f4:	11 97       	sbiw	r26, 0x01	; 1
     2f6:	fb 83       	std	Y+3, r31	; 0x03
     2f8:	ea 83       	std	Y+2, r30	; 0x02
     2fa:	c9 cf       	rjmp	.-110    	; 0x28e <wakeup+0x26>
     2fc:	50 96       	adiw	r26, 0x10	; 16
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
     302:	51 97       	sbiw	r26, 0x11	; 17
     304:	84 81       	ldd	r24, Z+4	; 0x04
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	84 83       	std	Z+4, r24	; 0x04
     30a:	e9 cf       	rjmp	.-46     	; 0x2de <wakeup+0x76>

0000030c <_scheduler_init>:
     30c:	e4 ed       	ldi	r30, 0xD4	; 212
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	f1 83       	std	Z+1, r31	; 0x01
     312:	e0 83       	st	Z, r30
     314:	f3 83       	std	Z+3, r31	; 0x03
     316:	e2 83       	std	Z+2, r30	; 0x02
     318:	14 82       	std	Z+4, r1	; 0x04
     31a:	f0 87       	std	Z+8, r31	; 0x08
     31c:	e7 83       	std	Z+7, r30	; 0x07
     31e:	f2 87       	std	Z+10, r31	; 0x0a
     320:	e1 87       	std	Z+9, r30	; 0x09
     322:	08 95       	ret

00000324 <chSchReadyI>:
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	dc 01       	movw	r26, r24
     32a:	1d 96       	adiw	r26, 0x0d	; 13
     32c:	1c 92       	st	X, r1
     32e:	1d 97       	sbiw	r26, 0x0d	; 13
     330:	14 96       	adiw	r26, 0x04	; 4
     332:	2c 91       	ld	r18, X
     334:	14 97       	sbiw	r26, 0x04	; 4
     336:	e4 ed       	ldi	r30, 0xD4	; 212
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	01 90       	ld	r0, Z+
     33c:	f0 81       	ld	r31, Z
     33e:	e0 2d       	mov	r30, r0
     340:	94 81       	ldd	r25, Z+4	; 0x04
     342:	92 17       	cp	r25, r18
     344:	d0 f7       	brcc	.-12     	; 0x33a <chSchReadyI+0x16>
     346:	11 96       	adiw	r26, 0x01	; 1
     348:	fc 93       	st	X, r31
     34a:	ee 93       	st	-X, r30
     34c:	c2 81       	ldd	r28, Z+2	; 0x02
     34e:	d3 81       	ldd	r29, Z+3	; 0x03
     350:	13 96       	adiw	r26, 0x03	; 3
     352:	dc 93       	st	X, r29
     354:	ce 93       	st	-X, r28
     356:	12 97       	sbiw	r26, 0x02	; 2
     358:	b9 83       	std	Y+1, r27	; 0x01
     35a:	a8 83       	st	Y, r26
     35c:	b3 83       	std	Z+3, r27	; 0x03
     35e:	a2 83       	std	Z+2, r26	; 0x02
     360:	cd 01       	movw	r24, r26
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <chSchGoSleepS>:
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	e4 ed       	ldi	r30, 0xD4	; 212
     36e:	f2 e0       	ldi	r31, 0x02	; 2
     370:	63 85       	ldd	r22, Z+11	; 0x0b
     372:	74 85       	ldd	r23, Z+12	; 0x0c
     374:	db 01       	movw	r26, r22
     376:	1d 96       	adiw	r26, 0x0d	; 13
     378:	8c 93       	st	X, r24
     37a:	80 81       	ld	r24, Z
     37c:	91 81       	ldd	r25, Z+1	; 0x01
     37e:	ec 01       	movw	r28, r24
     380:	a8 81       	ld	r26, Y
     382:	b9 81       	ldd	r27, Y+1	; 0x01
     384:	b1 83       	std	Z+1, r27	; 0x01
     386:	a0 83       	st	Z, r26
     388:	13 96       	adiw	r26, 0x03	; 3
     38a:	fc 93       	st	X, r31
     38c:	ee 93       	st	-X, r30
     38e:	12 97       	sbiw	r26, 0x02	; 2
     390:	94 87       	std	Z+12, r25	; 0x0c
     392:	83 87       	std	Z+11, r24	; 0x0b
     394:	21 e0       	ldi	r18, 0x01	; 1
     396:	2d 87       	std	Y+13, r18	; 0x0d
     398:	2c d2       	rcall	.+1112   	; 0x7f2 <_port_switch>
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <chSchGoSleepTimeoutS>:
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	2a 97       	sbiw	r28, 0x0a	; 10
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	18 2f       	mov	r17, r24
     3b8:	6f 3f       	cpi	r22, 0xFF	; 255
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	78 07       	cpc	r23, r24
     3be:	11 f1       	breq	.+68     	; 0x404 <chSchGoSleepTimeoutS+0x64>
     3c0:	20 91 df 02 	lds	r18, 0x02DF
     3c4:	30 91 e0 02 	lds	r19, 0x02E0
     3c8:	44 e3       	ldi	r20, 0x34	; 52
     3ca:	51 e0       	ldi	r21, 0x01	; 1
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	e7 de       	rcall	.-562    	; 0x1a0 <chVTDoSetI>
     3d2:	81 2f       	mov	r24, r17
     3d4:	c9 df       	rcall	.-110    	; 0x368 <chSchGoSleepS>
     3d6:	8f 81       	ldd	r24, Y+7	; 0x07
     3d8:	98 85       	ldd	r25, Y+8	; 0x08
     3da:	89 2b       	or	r24, r25
     3dc:	19 f0       	breq	.+6      	; 0x3e4 <chSchGoSleepTimeoutS+0x44>
     3de:	ce 01       	movw	r24, r28
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	1c df       	rcall	.-456    	; 0x21c <chVTDoResetI>
     3e4:	e0 91 df 02 	lds	r30, 0x02DF
     3e8:	f0 91 e0 02 	lds	r31, 0x02E0
     3ec:	80 89       	ldd	r24, Z+16	; 0x10
     3ee:	91 89       	ldd	r25, Z+17	; 0x11
     3f0:	2a 96       	adiw	r28, 0x0a	; 10
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	08 95       	ret
     404:	81 2f       	mov	r24, r17
     406:	b0 df       	rcall	.-160    	; 0x368 <chSchGoSleepS>
     408:	ed cf       	rjmp	.-38     	; 0x3e4 <chSchGoSleepTimeoutS+0x44>

0000040a <chSchWakeupS>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	dc 01       	movw	r26, r24
     410:	c0 91 df 02 	lds	r28, 0x02DF
     414:	d0 91 e0 02 	lds	r29, 0x02E0
     418:	51 96       	adiw	r26, 0x11	; 17
     41a:	7c 93       	st	X, r23
     41c:	6e 93       	st	-X, r22
     41e:	50 97       	sbiw	r26, 0x10	; 16
     420:	14 96       	adiw	r26, 0x04	; 4
     422:	2c 91       	ld	r18, X
     424:	14 97       	sbiw	r26, 0x04	; 4
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	82 17       	cp	r24, r18
     42a:	d8 f0       	brcs	.+54     	; 0x462 <chSchWakeupS+0x58>
     42c:	1d 96       	adiw	r26, 0x0d	; 13
     42e:	1c 92       	st	X, r1
     430:	1d 97       	sbiw	r26, 0x0d	; 13
     432:	e4 ed       	ldi	r30, 0xD4	; 212
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	01 90       	ld	r0, Z+
     438:	f0 81       	ld	r31, Z
     43a:	e0 2d       	mov	r30, r0
     43c:	94 81       	ldd	r25, Z+4	; 0x04
     43e:	92 17       	cp	r25, r18
     440:	d0 f7       	brcc	.-12     	; 0x436 <chSchWakeupS+0x2c>
     442:	11 96       	adiw	r26, 0x01	; 1
     444:	fc 93       	st	X, r31
     446:	ee 93       	st	-X, r30
     448:	c2 81       	ldd	r28, Z+2	; 0x02
     44a:	d3 81       	ldd	r29, Z+3	; 0x03
     44c:	13 96       	adiw	r26, 0x03	; 3
     44e:	dc 93       	st	X, r29
     450:	ce 93       	st	-X, r28
     452:	12 97       	sbiw	r26, 0x02	; 2
     454:	b9 83       	std	Y+1, r27	; 0x01
     456:	a8 83       	st	Y, r26
     458:	b3 83       	std	Z+3, r27	; 0x03
     45a:	a2 83       	std	Z+2, r26	; 0x02
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret
     462:	1d 86       	std	Y+13, r1	; 0x0d
     464:	e4 ed       	ldi	r30, 0xD4	; 212
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	01 90       	ld	r0, Z+
     46a:	f0 81       	ld	r31, Z
     46c:	e0 2d       	mov	r30, r0
     46e:	94 81       	ldd	r25, Z+4	; 0x04
     470:	98 17       	cp	r25, r24
     472:	d0 f7       	brcc	.-12     	; 0x468 <chSchWakeupS+0x5e>
     474:	cd 01       	movw	r24, r26
     476:	f9 83       	std	Y+1, r31	; 0x01
     478:	e8 83       	st	Y, r30
     47a:	a2 81       	ldd	r26, Z+2	; 0x02
     47c:	b3 81       	ldd	r27, Z+3	; 0x03
     47e:	bb 83       	std	Y+3, r27	; 0x03
     480:	aa 83       	std	Y+2, r26	; 0x02
     482:	cd 93       	st	X+, r28
     484:	dc 93       	st	X, r29
     486:	d3 83       	std	Z+3, r29	; 0x03
     488:	c2 83       	std	Z+2, r28	; 0x02
     48a:	90 93 e0 02 	sts	0x02E0, r25
     48e:	80 93 df 02 	sts	0x02DF, r24
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	fc 01       	movw	r30, r24
     496:	25 87       	std	Z+13, r18	; 0x0d
     498:	be 01       	movw	r22, r28
     49a:	ab d1       	rcall	.+854    	; 0x7f2 <_port_switch>
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <chSchIsPreemptionRequired>:
     4a2:	a0 91 d4 02 	lds	r26, 0x02D4
     4a6:	b0 91 d5 02 	lds	r27, 0x02D5
     4aa:	e0 91 df 02 	lds	r30, 0x02DF
     4ae:	f0 91 e0 02 	lds	r31, 0x02E0
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	14 96       	adiw	r26, 0x04	; 4
     4b6:	2c 91       	ld	r18, X
     4b8:	94 81       	ldd	r25, Z+4	; 0x04
     4ba:	92 17       	cp	r25, r18
     4bc:	08 f0       	brcs	.+2      	; 0x4c0 <chSchIsPreemptionRequired+0x1e>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
  thread_t *otp = currp;
     4c6:	a0 91 df 02 	lds	r26, 0x02DF
     4ca:	b0 91 e0 02 	lds	r27, 0x02E0
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
     4ce:	40 91 d4 02 	lds	r20, 0x02D4
     4d2:	50 91 d5 02 	lds	r21, 0x02D5

  tqp->next             = tp->queue.next;
     4d6:	ea 01       	movw	r28, r20
     4d8:	e8 81       	ld	r30, Y
     4da:	f9 81       	ldd	r31, Y+1	; 0x01
     4dc:	f0 93 d5 02 	sts	0x02D5, r31
     4e0:	e0 93 d4 02 	sts	0x02D4, r30
  tqp->next->queue.prev = (thread_t *)tqp;
     4e4:	84 ed       	ldi	r24, 0xD4	; 212
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	93 83       	std	Z+3, r25	; 0x03
     4ea:	82 83       	std	Z+2, r24	; 0x02

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
     4ec:	50 93 e0 02 	sts	0x02E0, r21
     4f0:	40 93 df 02 	sts	0x02DF, r20
  currp->state = CH_STATE_CURRENT;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	8d 87       	std	Y+13, r24	; 0x0d
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
     4f8:	1d 96       	adiw	r26, 0x0d	; 13
     4fa:	1c 92       	st	X, r1
     4fc:	1d 97       	sbiw	r26, 0x0d	; 13
     4fe:	14 96       	adiw	r26, 0x04	; 4
     500:	2c 91       	ld	r18, X
     502:	14 97       	sbiw	r26, 0x04	; 4
     504:	03 c0       	rjmp	.+6      	; 0x50c <chSchDoReschedule+0x4a>
     506:	01 90       	ld	r0, Z+
     508:	f0 81       	ld	r31, Z
     50a:	e0 2d       	mov	r30, r0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
     50c:	94 81       	ldd	r25, Z+4	; 0x04
     50e:	29 17       	cp	r18, r25
     510:	d0 f3       	brcs	.-12     	; 0x506 <chSchDoReschedule+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
     512:	11 96       	adiw	r26, 0x01	; 1
     514:	fc 93       	st	X, r31
     516:	ee 93       	st	-X, r30
  tp->queue.prev             = cp->queue.prev;
     518:	82 81       	ldd	r24, Z+2	; 0x02
     51a:	93 81       	ldd	r25, Z+3	; 0x03
     51c:	13 96       	adiw	r26, 0x03	; 3
     51e:	9c 93       	st	X, r25
     520:	8e 93       	st	-X, r24
     522:	12 97       	sbiw	r26, 0x02	; 2
  tp->queue.prev->queue.next = tp;
     524:	ec 01       	movw	r28, r24
     526:	b9 83       	std	Y+1, r27	; 0x01
     528:	a8 83       	st	Y, r26
  cp->queue.prev             = tp;
     52a:	b3 83       	std	Z+3, r27	; 0x03
     52c:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
     52e:	bd 01       	movw	r22, r26
     530:	ca 01       	movw	r24, r20
     532:	5f d1       	rcall	.+702    	; 0x7f2 <_port_switch>
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <_thread_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	fc 01       	movw	r30, r24
     540:	44 83       	std	Z+4, r20	; 0x04
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	85 87       	std	Z+13, r24	; 0x0d
     546:	16 86       	std	Z+14, r1	; 0x0e
     548:	43 8f       	std	Z+27, r20	; 0x1b
     54a:	12 8e       	std	Z+26, r1	; 0x1a
     54c:	11 8e       	std	Z+25, r1	; 0x19
     54e:	10 8e       	std	Z+24, r1	; 0x18
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	87 87       	std	Z+15, r24	; 0x0f
     554:	74 87       	std	Z+12, r23	; 0x0c
     556:	63 87       	std	Z+11, r22	; 0x0b
     558:	a4 ed       	ldi	r26, 0xD4	; 212
     55a:	b2 e0       	ldi	r27, 0x02	; 2
     55c:	b0 87       	std	Z+8, r27	; 0x08
     55e:	a7 83       	std	Z+7, r26	; 0x07
     560:	19 96       	adiw	r26, 0x09	; 9
     562:	cd 91       	ld	r28, X+
     564:	dc 91       	ld	r29, X
     566:	1a 97       	sbiw	r26, 0x0a	; 10
     568:	d2 87       	std	Z+10, r29	; 0x0a
     56a:	c1 87       	std	Z+9, r28	; 0x09
     56c:	f8 87       	std	Y+8, r31	; 0x08
     56e:	ef 83       	std	Y+7, r30	; 0x07
     570:	1a 96       	adiw	r26, 0x0a	; 10
     572:	fc 93       	st	X, r31
     574:	ee 93       	st	-X, r30
     576:	19 97       	sbiw	r26, 0x09	; 9
     578:	cf 01       	movw	r24, r30
     57a:	42 96       	adiw	r24, 0x12	; 18
     57c:	93 8b       	std	Z+19, r25	; 0x13
     57e:	82 8b       	std	Z+18, r24	; 0x12
     580:	02 96       	adiw	r24, 0x02	; 2
     582:	95 8b       	std	Z+21, r25	; 0x15
     584:	84 8b       	std	Z+20, r24	; 0x14
     586:	97 8b       	std	Z+23, r25	; 0x17
     588:	86 8b       	std	Z+22, r24	; 0x16
     58a:	cf 01       	movw	r24, r30
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <chThdCreateSuspendedI>:
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	ec 01       	movw	r28, r24
     598:	4c 81       	ldd	r20, Y+4	; 0x04
     59a:	5d 81       	ldd	r21, Y+5	; 0x05
     59c:	fa 01       	movw	r30, r20
     59e:	7c 97       	sbiw	r30, 0x1c	; 28
     5a0:	ca 01       	movw	r24, r20
     5a2:	c1 97       	sbiw	r24, 0x31	; 49
     5a4:	96 83       	std	Z+6, r25	; 0x06
     5a6:	85 83       	std	Z+5, r24	; 0x05
     5a8:	2f 81       	ldd	r18, Y+7	; 0x07
     5aa:	dc 01       	movw	r26, r24
     5ac:	52 96       	adiw	r26, 0x12	; 18
     5ae:	2c 93       	st	X, r18
     5b0:	52 97       	sbiw	r26, 0x12	; 18
     5b2:	28 85       	ldd	r18, Y+8	; 0x08
     5b4:	51 96       	adiw	r26, 0x11	; 17
     5b6:	2c 93       	st	X, r18
     5b8:	51 97       	sbiw	r26, 0x11	; 17
     5ba:	29 85       	ldd	r18, Y+9	; 0x09
     5bc:	50 96       	adiw	r26, 0x10	; 16
     5be:	2c 93       	st	X, r18
     5c0:	50 97       	sbiw	r26, 0x10	; 16
     5c2:	2a 85       	ldd	r18, Y+10	; 0x0a
     5c4:	1f 96       	adiw	r26, 0x0f	; 15
     5c6:	2c 93       	st	X, r18
     5c8:	1f 97       	sbiw	r26, 0x0f	; 15
     5ca:	28 e2       	ldi	r18, 0x28	; 40
     5cc:	34 e0       	ldi	r19, 0x04	; 4
     5ce:	53 96       	adiw	r26, 0x13	; 19
     5d0:	3c 93       	st	X, r19
     5d2:	53 97       	sbiw	r26, 0x13	; 19
     5d4:	54 96       	adiw	r26, 0x14	; 20
     5d6:	2c 93       	st	X, r18
     5d8:	8e 81       	ldd	r24, Y+6	; 0x06
     5da:	28 81       	ld	r18, Y
     5dc:	39 81       	ldd	r19, Y+1	; 0x01
     5de:	84 83       	std	Z+4, r24	; 0x04
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	95 87       	std	Z+13, r25	; 0x0d
     5e4:	16 86       	std	Z+14, r1	; 0x0e
     5e6:	83 8f       	std	Z+27, r24	; 0x1b
     5e8:	12 8e       	std	Z+26, r1	; 0x1a
     5ea:	11 8e       	std	Z+25, r1	; 0x19
     5ec:	10 8e       	std	Z+24, r1	; 0x18
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	87 87       	std	Z+15, r24	; 0x0f
     5f2:	34 87       	std	Z+12, r19	; 0x0c
     5f4:	23 87       	std	Z+11, r18	; 0x0b
     5f6:	c4 ed       	ldi	r28, 0xD4	; 212
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	d0 87       	std	Z+8, r29	; 0x08
     5fc:	c7 83       	std	Z+7, r28	; 0x07
     5fe:	89 85       	ldd	r24, Y+9	; 0x09
     600:	9a 85       	ldd	r25, Y+10	; 0x0a
     602:	92 87       	std	Z+10, r25	; 0x0a
     604:	81 87       	std	Z+9, r24	; 0x09
     606:	dc 01       	movw	r26, r24
     608:	18 96       	adiw	r26, 0x08	; 8
     60a:	fc 93       	st	X, r31
     60c:	ee 93       	st	-X, r30
     60e:	17 97       	sbiw	r26, 0x07	; 7
     610:	fa 87       	std	Y+10, r31	; 0x0a
     612:	e9 87       	std	Y+9, r30	; 0x09
     614:	ea 01       	movw	r28, r20
     616:	2a 97       	sbiw	r28, 0x0a	; 10
     618:	d9 83       	std	Y+1, r29	; 0x01
     61a:	c8 83       	st	Y, r28
     61c:	da 01       	movw	r26, r20
     61e:	18 97       	sbiw	r26, 0x08	; 8
     620:	0b 2e       	mov	r0, r27
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	0c 92       	st	X, r0
     626:	11 97       	sbiw	r26, 0x01	; 1
     628:	ac 93       	st	X, r26
     62a:	0a 2e       	mov	r0, r26
     62c:	1b 2e       	mov	r1, r27
     62e:	13 96       	adiw	r26, 0x03	; 3
     630:	1c 92       	st	X, r1
     632:	0e 92       	st	-X, r0
     634:	11 24       	eor	r1, r1
     636:	12 97       	sbiw	r26, 0x02	; 2
     638:	cf 01       	movw	r24, r30
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <chThdCreate>:
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	f8 94       	cli
     646:	a5 df       	rcall	.-182    	; 0x592 <chThdCreateSuspendedI>
     648:	ec 01       	movw	r28, r24
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	dd de       	rcall	.-582    	; 0x40a <chSchWakeupS>
     650:	78 94       	sei
     652:	ce 01       	movw	r24, r28
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <chThdCreateStatic>:
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	f8 94       	cli
     664:	6c 51       	subi	r22, 0x1C	; 28
     666:	71 09       	sbc	r23, r1
     668:	ec 01       	movw	r28, r24
     66a:	c6 0f       	add	r28, r22
     66c:	d7 1f       	adc	r29, r23
     66e:	fe 01       	movw	r30, r28
     670:	75 97       	sbiw	r30, 0x15	; 21
     672:	fe 83       	std	Y+6, r31	; 0x06
     674:	ed 83       	std	Y+5, r30	; 0x05
     676:	22 8b       	std	Z+18, r18	; 0x12
     678:	31 8b       	std	Z+17, r19	; 0x11
     67a:	00 8b       	std	Z+16, r16	; 0x10
     67c:	17 87       	std	Z+15, r17	; 0x0f
     67e:	88 e2       	ldi	r24, 0x28	; 40
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	93 8b       	std	Z+19, r25	; 0x13
     684:	84 8b       	std	Z+20, r24	; 0x14
     686:	4c 83       	std	Y+4, r20	; 0x04
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	8d 87       	std	Y+13, r24	; 0x0d
     68c:	1e 86       	std	Y+14, r1	; 0x0e
     68e:	4b 8f       	std	Y+27, r20	; 0x1b
     690:	1a 8e       	std	Y+26, r1	; 0x1a
     692:	19 8e       	std	Y+25, r1	; 0x19
     694:	18 8e       	std	Y+24, r1	; 0x18
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	8f 87       	std	Y+15, r24	; 0x0f
     69a:	83 e2       	ldi	r24, 0x23	; 35
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	9c 87       	std	Y+12, r25	; 0x0c
     6a0:	8b 87       	std	Y+11, r24	; 0x0b
     6a2:	e4 ed       	ldi	r30, 0xD4	; 212
     6a4:	f2 e0       	ldi	r31, 0x02	; 2
     6a6:	f8 87       	std	Y+8, r31	; 0x08
     6a8:	ef 83       	std	Y+7, r30	; 0x07
     6aa:	a1 85       	ldd	r26, Z+9	; 0x09
     6ac:	b2 85       	ldd	r27, Z+10	; 0x0a
     6ae:	ba 87       	std	Y+10, r27	; 0x0a
     6b0:	a9 87       	std	Y+9, r26	; 0x09
     6b2:	18 96       	adiw	r26, 0x08	; 8
     6b4:	dc 93       	st	X, r29
     6b6:	ce 93       	st	-X, r28
     6b8:	17 97       	sbiw	r26, 0x07	; 7
     6ba:	d2 87       	std	Z+10, r29	; 0x0a
     6bc:	c1 87       	std	Z+9, r28	; 0x09
     6be:	ce 01       	movw	r24, r28
     6c0:	42 96       	adiw	r24, 0x12	; 18
     6c2:	9b 8b       	std	Y+19, r25	; 0x13
     6c4:	8a 8b       	std	Y+18, r24	; 0x12
     6c6:	02 96       	adiw	r24, 0x02	; 2
     6c8:	9d 8b       	std	Y+21, r25	; 0x15
     6ca:	8c 8b       	std	Y+20, r24	; 0x14
     6cc:	9f 8b       	std	Y+23, r25	; 0x17
     6ce:	8e 8b       	std	Y+22, r24	; 0x16
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	ce 01       	movw	r24, r28
     6d6:	99 de       	rcall	.-718    	; 0x40a <chSchWakeupS>
     6d8:	78 94       	sei
     6da:	ce 01       	movw	r24, r28
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <chThdExitS>:
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	c0 91 df 02 	lds	r28, 0x02DF
     6f2:	d0 91 e0 02 	lds	r29, 0x02E0
     6f6:	99 8b       	std	Y+17, r25	; 0x11
     6f8:	88 8b       	std	Y+16, r24	; 0x10
     6fa:	8e 01       	movw	r16, r28
     6fc:	0e 5e       	subi	r16, 0xEE	; 238
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	8a 89       	ldd	r24, Y+18	; 0x12
     702:	9b 89       	ldd	r25, Y+19	; 0x13
     704:	08 17       	cp	r16, r24
     706:	19 07       	cpc	r17, r25
     708:	59 f0       	breq	.+22     	; 0x720 <chThdExitS+0x3a>
     70a:	fc 01       	movw	r30, r24
     70c:	20 81       	ld	r18, Z
     70e:	31 81       	ldd	r19, Z+1	; 0x01
     710:	3b 8b       	std	Y+19, r19	; 0x13
     712:	2a 8b       	std	Y+18, r18	; 0x12
     714:	07 de       	rcall	.-1010   	; 0x324 <chSchReadyI>
     716:	8a 89       	ldd	r24, Y+18	; 0x12
     718:	9b 89       	ldd	r25, Y+19	; 0x13
     71a:	80 17       	cp	r24, r16
     71c:	91 07       	cpc	r25, r17
     71e:	a9 f7       	brne	.-22     	; 0x70a <chThdExitS+0x24>
     720:	8f 85       	ldd	r24, Y+15	; 0x0f
     722:	81 11       	cpse	r24, r1
     724:	0c c0       	rjmp	.+24     	; 0x73e <chThdExitS+0x58>
     726:	e9 85       	ldd	r30, Y+9	; 0x09
     728:	fa 85       	ldd	r31, Y+10	; 0x0a
     72a:	8f 81       	ldd	r24, Y+7	; 0x07
     72c:	98 85       	ldd	r25, Y+8	; 0x08
     72e:	90 87       	std	Z+8, r25	; 0x08
     730:	87 83       	std	Z+7, r24	; 0x07
     732:	af 81       	ldd	r26, Y+7	; 0x07
     734:	b8 85       	ldd	r27, Y+8	; 0x08
     736:	1a 96       	adiw	r26, 0x0a	; 10
     738:	fc 93       	st	X, r31
     73a:	ee 93       	st	-X, r30
     73c:	19 97       	sbiw	r26, 0x09	; 9
     73e:	8f e0       	ldi	r24, 0x0F	; 15
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	0f ce       	rjmp	.-994    	; 0x368 <chSchGoSleepS>

0000074a <chThdExit>:
     74a:	f8 94       	cli
     74c:	cc cf       	rjmp	.-104    	; 0x6e6 <chThdExitS>

0000074e <chThdSleep>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     74e:	f8 94       	cli
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
     750:	bc 01       	movw	r22, r24
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	25 de       	rcall	.-950    	; 0x3a0 <chSchGoSleepTimeoutS>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     756:	78 94       	sei
     758:	08 95       	ret

0000075a <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     75a:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
     75c:	91 83       	std	Z+1, r25	; 0x01
     75e:	80 83       	st	Z, r24
  tqp->prev = (thread_t *)tqp;
     760:	93 83       	std	Z+3, r25	; 0x03
     762:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
     764:	15 82       	std	Z+5, r1	; 0x05
     766:	14 82       	std	Z+4, r1	; 0x04
     768:	08 95       	ret

0000076a <_core_init>:
  }

  ch_memcore.nextmem = next;

  return p;
}
     76a:	e7 e0       	ldi	r30, 0x07	; 7
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	8c e5       	ldi	r24, 0x5C	; 92
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	91 83       	std	Z+1, r25	; 0x01
     774:	80 83       	st	Z, r24
     776:	8c ed       	ldi	r24, 0xDC	; 220
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	93 83       	std	Z+3, r25	; 0x03
     77c:	82 83       	std	Z+2, r24	; 0x02
     77e:	08 95       	ret

00000780 <chCoreAllocAlignedWithOffset>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     780:	f8 94       	cli
     782:	fb 01       	movw	r30, r22
     784:	31 97       	sbiw	r30, 0x01	; 1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     786:	71 95       	neg	r23
     788:	61 95       	neg	r22
     78a:	71 09       	sbc	r23, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
     78c:	20 91 07 03 	lds	r18, 0x0307
     790:	30 91 08 03 	lds	r19, 0x0308
     794:	42 0f       	add	r20, r18
     796:	53 1f       	adc	r21, r19
     798:	4e 0f       	add	r20, r30
     79a:	5f 1f       	adc	r21, r31
     79c:	46 23       	and	r20, r22
     79e:	57 23       	and	r21, r23
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
     7a0:	8e 0f       	add	r24, r30
     7a2:	9f 1f       	adc	r25, r31
     7a4:	68 23       	and	r22, r24
     7a6:	79 23       	and	r23, r25
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
     7a8:	ca 01       	movw	r24, r20
     7aa:	86 0f       	add	r24, r22
     7ac:	97 1f       	adc	r25, r23

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
     7ae:	60 91 09 03 	lds	r22, 0x0309
     7b2:	70 91 0a 03 	lds	r23, 0x030A
     7b6:	68 17       	cp	r22, r24
     7b8:	79 07       	cpc	r23, r25
     7ba:	50 f0       	brcs	.+20     	; 0x7d0 <chCoreAllocAlignedWithOffset+0x50>
     7bc:	82 17       	cp	r24, r18
     7be:	93 07       	cpc	r25, r19
     7c0:	38 f0       	brcs	.+14     	; 0x7d0 <chCoreAllocAlignedWithOffset+0x50>
    return NULL;
  }

  ch_memcore.nextmem = next;
     7c2:	90 93 08 03 	sts	0x0308, r25
     7c6:	80 93 07 03 	sts	0x0307, r24

  return p;
     7ca:	ca 01       	movw	r24, r20
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     7cc:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     7ce:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	78 94       	sei
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
     7d6:	08 95       	ret

000007d8 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
     7d8:	ec ed       	ldi	r30, 0xDC	; 220
     7da:	f1 e0       	ldi	r31, 0x01	; 1
     7dc:	80 ec       	ldi	r24, 0xC0	; 192
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	91 83       	std	Z+1, r25	; 0x01
     7e2:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
     7e4:	13 82       	std	Z+3, r1	; 0x03
     7e6:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
     7e8:	15 82       	std	Z+5, r1	; 0x05
     7ea:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     7ec:	82 ee       	ldi	r24, 0xE2	; 226
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	b4 cf       	rjmp	.-152    	; 0x75a <chMtxObjectInit>

000007f2 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     7f2:	2f 92       	push	r2
  asm volatile ("push    r3");
     7f4:	3f 92       	push	r3
  asm volatile ("push    r4");
     7f6:	4f 92       	push	r4
  asm volatile ("push    r5");
     7f8:	5f 92       	push	r5
  asm volatile ("push    r6");
     7fa:	6f 92       	push	r6
  asm volatile ("push    r7");
     7fc:	7f 92       	push	r7
  asm volatile ("push    r8");
     7fe:	8f 92       	push	r8
  asm volatile ("push    r9");
     800:	9f 92       	push	r9
  asm volatile ("push    r10");
     802:	af 92       	push	r10
  asm volatile ("push    r11");
     804:	bf 92       	push	r11
  asm volatile ("push    r12");
     806:	cf 92       	push	r12
  asm volatile ("push    r13");
     808:	df 92       	push	r13
  asm volatile ("push    r14");
     80a:	ef 92       	push	r14
  asm volatile ("push    r15");
     80c:	ff 92       	push	r15
  asm volatile ("push    r16");
     80e:	0f 93       	push	r16
  asm volatile ("push    r17");
     810:	1f 93       	push	r17
  asm volatile ("push    r28");
     812:	cf 93       	push	r28
  asm volatile ("push    r29");
     814:	df 93       	push	r29

#if defined(_CHIBIOS_RT_)
  asm volatile ("movw    r30, r22");
     816:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     818:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     81a:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     81c:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     81e:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     820:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     822:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     824:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     826:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     828:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     82a:	df 91       	pop	r29
  asm volatile ("pop     r28");
     82c:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     82e:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     830:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     832:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     834:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     836:	df 90       	pop	r13
  asm volatile ("pop     r12");
     838:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     83a:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     83c:	af 90       	pop	r10
  asm volatile ("pop     r9");
     83e:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     840:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     842:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     844:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     846:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     848:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     84a:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     84c:	2f 90       	pop	r2
  asm volatile ("ret");
     84e:	08 95       	ret

00000850 <_port_thread_start>:
     850:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     852:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     854:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     856:	09 95       	icall
#if defined(_CHIBIOS_RT_)
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     858:	78 cf       	rjmp	.-272    	; 0x74a <chThdExit>

0000085a <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
     85a:	33 d0       	rcall	.+102    	; 0x8c2 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
     85c:	86 e5       	ldi	r24, 0x56	; 86
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	31 d0       	rcall	.+98     	; 0x8c4 <_pal_lld_init>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
     862:	03 d0       	rcall	.+6      	; 0x86a <pwmInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
     864:	8c d2       	rcall	.+1304   	; 0xd7e <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
     866:	00 c0       	rjmp	.+0      	; 0x868 <stInit>

00000868 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
     868:	8a c0       	rjmp	.+276    	; 0x97e <st_lld_init>

0000086a <pwmInit>:
     86a:	2f c1       	rjmp	.+606    	; 0xaca <pwm_lld_init>

0000086c <pwmObjectInit>:
     86c:	fc 01       	movw	r30, r24
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
     872:	12 82       	std	Z+2, r1	; 0x02
     874:	11 82       	std	Z+1, r1	; 0x01
     876:	15 82       	std	Z+5, r1	; 0x05
     878:	16 82       	std	Z+6, r1	; 0x06
     87a:	08 95       	ret

0000087c <pwmStart>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
     882:	f8 94       	cli
     884:	7a 83       	std	Y+2, r23	; 0x02
     886:	69 83       	std	Y+1, r22	; 0x01
     888:	fb 01       	movw	r30, r22
     88a:	84 81       	ldd	r24, Z+4	; 0x04
     88c:	95 81       	ldd	r25, Z+5	; 0x05
     88e:	9c 83       	std	Y+4, r25	; 0x04
     890:	8b 83       	std	Y+3, r24	; 0x03
     892:	ce 01       	movw	r24, r28
     894:	21 d1       	rcall	.+578    	; 0xad8 <pwm_lld_start>
     896:	1d 82       	std	Y+5, r1	; 0x05
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	88 83       	st	Y, r24
     89c:	78 94       	sei
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <pwmEnableChannel>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     8a4:	f8 94       	cli

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	06 2e       	mov	r0, r22
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <pwmEnableChannel+0xc>
     8ae:	22 0f       	add	r18, r18
     8b0:	0a 94       	dec	r0
     8b2:	ea f7       	brpl	.-6      	; 0x8ae <pwmEnableChannel+0xa>
     8b4:	fc 01       	movw	r30, r24
     8b6:	35 81       	ldd	r19, Z+5	; 0x05
     8b8:	23 2b       	or	r18, r19
     8ba:	25 83       	std	Z+5, r18	; 0x05
     8bc:	93 d1       	rcall	.+806    	; 0xbe4 <pwm_lld_enable_channel>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     8be:	78 94       	sei
     8c0:	08 95       	ret

000008c2 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     8c2:	08 95       	ret

000008c4 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     8c4:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     8c6:	80 81       	ld	r24, Z
     8c8:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     8ca:	81 81       	ldd	r24, Z+1	; 0x01
     8cc:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     8ce:	82 81       	ldd	r24, Z+2	; 0x02
     8d0:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     8d2:	83 81       	ldd	r24, Z+3	; 0x03
     8d4:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     8d6:	84 81       	ldd	r24, Z+4	; 0x04
     8d8:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     8da:	85 81       	ldd	r24, Z+5	; 0x05
     8dc:	8a b9       	out	0x0a, r24	; 10
     8de:	08 95       	ret

000008e0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     8e0:	fc 01       	movw	r30, r24

  switch (mode) {
     8e2:	42 30       	cpi	r20, 0x02	; 2
     8e4:	c9 f0       	breq	.+50     	; 0x918 <__stack+0x19>
     8e6:	98 f0       	brcs	.+38     	; 0x90e <__stack+0xf>
     8e8:	45 30       	cpi	r20, 0x05	; 5
     8ea:	b1 f0       	breq	.+44     	; 0x918 <__stack+0x19>
     8ec:	46 30       	cpi	r20, 0x06	; 6
     8ee:	21 f4       	brne	.+8      	; 0x8f8 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     8f0:	81 81       	ldd	r24, Z+1	; 0x01
     8f2:	68 2b       	or	r22, r24
     8f4:	61 83       	std	Z+1, r22	; 0x01
     8f6:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     8f8:	43 30       	cpi	r20, 0x03	; 3
     8fa:	e9 f7       	brne	.-6      	; 0x8f6 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     8fc:	81 81       	ldd	r24, Z+1	; 0x01
     8fe:	96 2f       	mov	r25, r22
     900:	90 95       	com	r25
     902:	89 23       	and	r24, r25
     904:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	68 2b       	or	r22, r24
     90a:	62 83       	std	Z+2, r22	; 0x02
    break;
     90c:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     90e:	44 23       	and	r20, r20
     910:	19 f0       	breq	.+6      	; 0x918 <__stack+0x19>
     912:	41 30       	cpi	r20, 0x01	; 1
     914:	99 f3       	breq	.-26     	; 0x8fc <_pal_lld_setgroupmode+0x1c>
     916:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     918:	81 81       	ldd	r24, Z+1	; 0x01
     91a:	60 95       	com	r22
     91c:	86 23       	and	r24, r22
     91e:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     920:	82 81       	ldd	r24, Z+2	; 0x02
     922:	68 23       	and	r22, r24
     924:	62 83       	std	Z+2, r22	; 0x02
    break;
     926:	08 95       	ret

00000928 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	4f 93       	push	r20
     938:	5f 93       	push	r21
     93a:	6f 93       	push	r22
     93c:	7f 93       	push	r23
     93e:	8f 93       	push	r24
     940:	9f 93       	push	r25
     942:	af 93       	push	r26
     944:	bf 93       	push	r27
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 0b 03 	sts	0x030B, r24
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     950:	d1 db       	rcall	.-2142   	; 0xf4 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     952:	10 92 0b 03 	sts	0x030B, r1
     956:	a5 dd       	rcall	.-1206   	; 0x4a2 <chSchIsPreemptionRequired>
     958:	81 11       	cpse	r24, r1
     95a:	b3 dd       	rcall	.-1178   	; 0x4c2 <chSchDoReschedule>
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     982:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     984:	9f e7       	ldi	r25, 0x7F	; 127
     986:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     988:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     98a:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     98c:	80 93 6e 00 	sts	0x006E, r24
     990:	08 95       	ret

00000992 <__vector_13>:
    PWMD2.period = 0xFF;
    return;
  }
#endif
  uint8_t i = timer_index(pwmp);
  *regs_table[i].icr = period;
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 0b 03 	sts	0x030B, r24
     9ba:	e0 91 0d 03 	lds	r30, 0x030D
     9be:	f0 91 0e 03 	lds	r31, 0x030E
     9c2:	06 80       	ldd	r0, Z+6	; 0x06
     9c4:	f7 81       	ldd	r31, Z+7	; 0x07
     9c6:	e0 2d       	mov	r30, r0
     9c8:	8c e0       	ldi	r24, 0x0C	; 12
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	09 95       	icall
     9ce:	10 92 0b 03 	sts	0x030B, r1
     9d2:	67 dd       	rcall	.-1330   	; 0x4a2 <chSchIsPreemptionRequired>
     9d4:	81 11       	cpse	r24, r1
     9d6:	75 dd       	rcall	.-1302   	; 0x4c2 <chSchDoReschedule>
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <__vector_11>:
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	2f 93       	push	r18
     a06:	3f 93       	push	r19
     a08:	4f 93       	push	r20
     a0a:	5f 93       	push	r21
     a0c:	6f 93       	push	r22
     a0e:	7f 93       	push	r23
     a10:	8f 93       	push	r24
     a12:	9f 93       	push	r25
     a14:	af 93       	push	r26
     a16:	bf 93       	push	r27
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 0b 03 	sts	0x030B, r24
     a22:	e0 91 0d 03 	lds	r30, 0x030D
     a26:	f0 91 0e 03 	lds	r31, 0x030E
     a2a:	01 84       	ldd	r0, Z+9	; 0x09
     a2c:	f2 85       	ldd	r31, Z+10	; 0x0a
     a2e:	e0 2d       	mov	r30, r0
     a30:	8c e0       	ldi	r24, 0x0C	; 12
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	09 95       	icall
     a36:	10 92 0b 03 	sts	0x030B, r1
     a3a:	33 dd       	rcall	.-1434   	; 0x4a2 <chSchIsPreemptionRequired>
     a3c:	81 11       	cpse	r24, r1
     a3e:	41 dd       	rcall	.-1406   	; 0x4c2 <chSchDoReschedule>
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	0f 90       	pop	r0
     a5e:	1f 90       	pop	r1
     a60:	18 95       	reti

00000a62 <__vector_12>:
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 0b 03 	sts	0x030B, r24
     a8a:	e0 91 0d 03 	lds	r30, 0x030D
     a8e:	f0 91 0e 03 	lds	r31, 0x030E
     a92:	04 84       	ldd	r0, Z+12	; 0x0c
     a94:	f5 85       	ldd	r31, Z+13	; 0x0d
     a96:	e0 2d       	mov	r30, r0
     a98:	8c e0       	ldi	r24, 0x0C	; 12
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	09 95       	icall
     a9e:	10 92 0b 03 	sts	0x030B, r1
     aa2:	ff dc       	rcall	.-1538   	; 0x4a2 <chSchIsPreemptionRequired>
     aa4:	81 11       	cpse	r24, r1
     aa6:	0d dd       	rcall	.-1510   	; 0x4c2 <chSchDoReschedule>
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <pwm_lld_init>:
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	93 e0       	ldi	r25, 0x03	; 3
     ace:	ce de       	rcall	.-612    	; 0x86c <pwmObjectInit>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	80 93 12 03 	sts	0x0312, r24
     ad6:	08 95       	ret

00000ad8 <pwm_lld_start>:
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	00 d0       	rcall	.+0      	; 0xaee <pwm_lld_start+0x16>
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <pwm_lld_start+0x18>
     af0:	1f 92       	push	r1
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	9c 01       	movw	r18, r24
     af8:	dc 01       	movw	r26, r24
     afa:	8c 91       	ld	r24, X
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	81 f0       	breq	.+32     	; 0xb20 <pwm_lld_start+0x48>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	cf 90       	pop	r12
     b16:	bf 90       	pop	r11
     b18:	af 90       	pop	r10
     b1a:	9f 90       	pop	r9
     b1c:	8f 90       	pop	r8
     b1e:	08 95       	ret
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	ee e0       	ldi	r30, 0x0E	; 14
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	de 01       	movw	r26, r28
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	8a 95       	dec	r24
     b30:	e1 f7       	brne	.-8      	; 0xb2a <pwm_lld_start+0x52>
     b32:	d9 01       	movw	r26, r18
     b34:	11 96       	adiw	r26, 0x01	; 1
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	80 80       	ld	r8, Z
     b3e:	91 80       	ldd	r9, Z+1	; 0x01
     b40:	a2 80       	ldd	r10, Z+2	; 0x02
     b42:	b3 80       	ldd	r11, Z+3	; 0x03
     b44:	fe 01       	movw	r30, r28
     b46:	31 96       	adiw	r30, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	c1 2c       	mov	r12, r1
     b4c:	84 e2       	ldi	r24, 0x24	; 36
     b4e:	d8 2e       	mov	r13, r24
     b50:	84 ef       	ldi	r24, 0xF4	; 244
     b52:	e8 2e       	mov	r14, r24
     b54:	f1 2c       	mov	r15, r1
     b56:	b7 01       	movw	r22, r14
     b58:	a6 01       	movw	r20, r12
     b5a:	01 90       	ld	r0, Z+
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <pwm_lld_start+0x8e>
     b5e:	76 95       	lsr	r23
     b60:	67 95       	ror	r22
     b62:	57 95       	ror	r21
     b64:	47 95       	ror	r20
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <pwm_lld_start+0x86>
     b6a:	9f 5f       	subi	r25, 0xFF	; 255
     b6c:	48 15       	cp	r20, r8
     b6e:	59 05       	cpc	r21, r9
     b70:	6a 05       	cpc	r22, r10
     b72:	7b 05       	cpc	r23, r11
     b74:	91 f1       	breq	.+100    	; 0xbda <pwm_lld_start+0x102>
     b76:	95 30       	cpi	r25, 0x05	; 5
     b78:	71 f7       	brne	.-36     	; 0xb56 <pwm_lld_start+0x7e>
     b7a:	9d e1       	ldi	r25, 0x1D	; 29
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	b3 e0       	ldi	r27, 0x03	; 3
     b82:	2c 30       	cpi	r18, 0x0C	; 12
     b84:	3b 07       	cpc	r19, r27
     b86:	59 f1       	breq	.+86     	; 0xbde <pwm_lld_start+0x106>
     b88:	f9 01       	movw	r30, r18
     b8a:	63 81       	ldd	r22, Z+3	; 0x03
     b8c:	74 81       	ldd	r23, Z+4	; 0x04
     b8e:	70 93 87 00 	sts	0x0087, r23
     b92:	60 93 86 00 	sts	0x0086, r22
     b96:	86 e1       	ldi	r24, 0x16	; 22
     b98:	84 9f       	mul	r24, r20
     b9a:	f0 01       	movw	r30, r0
     b9c:	85 9f       	mul	r24, r21
     b9e:	f0 0d       	add	r31, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	e0 5c       	subi	r30, 0xC0	; 192
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	a0 81       	ld	r26, Z
     ba8:	b1 81       	ldd	r27, Z+1	; 0x01
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	8c 93       	st	X, r24
     bae:	a2 81       	ldd	r26, Z+2	; 0x02
     bb0:	b3 81       	ldd	r27, Z+3	; 0x03
     bb2:	9c 93       	st	X, r25
     bb4:	d9 01       	movw	r26, r18
     bb6:	11 96       	adiw	r26, 0x01	; 1
     bb8:	8d 91       	ld	r24, X+
     bba:	9c 91       	ld	r25, X
     bbc:	12 97       	sbiw	r26, 0x02	; 2
     bbe:	dc 01       	movw	r26, r24
     bc0:	16 96       	adiw	r26, 0x06	; 6
     bc2:	8d 91       	ld	r24, X+
     bc4:	9c 91       	ld	r25, X
     bc6:	17 97       	sbiw	r26, 0x07	; 7
     bc8:	89 2b       	or	r24, r25
     bca:	09 f4       	brne	.+2      	; 0xbce <pwm_lld_start+0xf6>
     bcc:	99 cf       	rjmp	.-206    	; 0xb00 <pwm_lld_start+0x28>
     bce:	02 88       	ldd	r0, Z+18	; 0x12
     bd0:	f3 89       	ldd	r31, Z+19	; 0x13
     bd2:	e0 2d       	mov	r30, r0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 83       	st	Z, r24
     bd8:	93 cf       	rjmp	.-218    	; 0xb00 <pwm_lld_start+0x28>
     bda:	98 61       	ori	r25, 0x18	; 24
     bdc:	cf cf       	rjmp	.-98     	; 0xb7c <pwm_lld_start+0xa4>
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	d2 cf       	rjmp	.-92     	; 0xb88 <pwm_lld_start+0xb0>

00000be4 <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
     be4:	af 92       	push	r10
     be6:	bf 92       	push	r11
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     bfa:	26 2f       	mov	r18, r22
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	a9 81       	ldd	r26, Y+1	; 0x01
     c00:	ba 81       	ldd	r27, Y+2	; 0x02
     c02:	f9 01       	movw	r30, r18
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	cf 01       	movw	r24, r30
     c0a:	82 0f       	add	r24, r18
     c0c:	93 1f       	adc	r25, r19
     c0e:	a8 0f       	add	r26, r24
     c10:	b9 1f       	adc	r27, r25
     c12:	18 96       	adiw	r26, 0x08	; 8
     c14:	7c 91       	ld	r23, X
static uint8_t timer_index(PWMDriver *pwmp) {

  uint8_t index = 0;

#if AVR_PWM_USE_TIM1 || defined(__DOXYGEN__)
  if (pwmp == &PWMD1) return index;
     c16:	01 e0       	ldi	r16, 0x01	; 1
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	cc 30       	cpi	r28, 0x0C	; 12
     c1e:	d8 07       	cpc	r29, r24
     c20:	09 f4       	brne	.+2      	; 0xc24 <pwm_lld_enable_channel+0x40>
     c22:	aa c0       	rjmp	.+340    	; 0xd78 <pwm_lld_enable_channel+0x194>
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     c24:	86 e1       	ldi	r24, 0x16	; 22
     c26:	80 9f       	mul	r24, r16
     c28:	d0 01       	movw	r26, r0
     c2a:	81 9f       	mul	r24, r17
     c2c:	b0 0d       	add	r27, r0
     c2e:	11 24       	eor	r1, r1
     c30:	a0 5c       	subi	r26, 0xC0	; 192
     c32:	be 4f       	sbci	r27, 0xFE	; 254
     c34:	ed 90       	ld	r14, X+
     c36:	fc 90       	ld	r15, X
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
     c38:	d7 01       	movw	r26, r14
     c3a:	8c 91       	ld	r24, X
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     c3c:	96 2f       	mov	r25, r22
     c3e:	91 95       	neg	r25
     c40:	99 0f       	add	r25, r25
     c42:	99 5f       	subi	r25, 0xF9	; 249
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
     c44:	a1 e0       	ldi	r26, 0x01	; 1
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	6d 01       	movw	r12, r26
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <pwm_lld_enable_channel+0x6a>
     c4c:	cc 0c       	add	r12, r12
     c4e:	9a 95       	dec	r25
     c50:	ea f7       	brpl	.-6      	; 0xc4c <pwm_lld_enable_channel+0x68>
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
                 7 - 2*channel,
                 6 - 2*channel,
     c52:	93 e0       	ldi	r25, 0x03	; 3
     c54:	a9 2e       	mov	r10, r25
     c56:	b1 2c       	mov	r11, r1
     c58:	a2 1a       	sub	r10, r18
     c5a:	b3 0a       	sbc	r11, r19
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     c5c:	aa 0c       	add	r10, r10
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <pwm_lld_enable_channel+0x7e>
     c60:	aa 0f       	add	r26, r26
     c62:	aa 94       	dec	r10
     c64:	ea f7       	brpl	.-6      	; 0xc60 <pwm_lld_enable_channel+0x7c>
     c66:	ba 2e       	mov	r11, r26
     c68:	bc 28       	or	r11, r12
     c6a:	9b 2d       	mov	r25, r11
     c6c:	90 95       	com	r25
     c6e:	89 23       	and	r24, r25
     c70:	d7 01       	movw	r26, r14
     c72:	8c 93       	st	X, r24
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
     c74:	71 30       	cpi	r23, 0x01	; 1
     c76:	09 f4       	brne	.+2      	; 0xc7a <pwm_lld_enable_channel+0x96>
     c78:	76 c0       	rjmp	.+236    	; 0xd66 <pwm_lld_enable_channel+0x182>
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
     c7a:	72 30       	cpi	r23, 0x02	; 2
     c7c:	09 f4       	brne	.+2      	; 0xc80 <pwm_lld_enable_channel+0x9c>
     c7e:	77 c0       	rjmp	.+238    	; 0xd6e <pwm_lld_enable_channel+0x18a>
  config_channel(regs_table[i].tccra,
                 7 - 2*channel,
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
  volatile uint8_t *ocrh, *ocrl;
  switch (channel) {
     c80:	61 30       	cpi	r22, 0x01	; 1
     c82:	09 f4       	brne	.+2      	; 0xc86 <pwm_lld_enable_channel+0xa2>
     c84:	5f c0       	rjmp	.+190    	; 0xd44 <pwm_lld_enable_channel+0x160>
     c86:	62 30       	cpi	r22, 0x02	; 2
     c88:	09 f4       	brne	.+2      	; 0xc8c <pwm_lld_enable_channel+0xa8>
     c8a:	4b c0       	rjmp	.+150    	; 0xd22 <pwm_lld_enable_channel+0x13e>
  case 2:
    ocrh = regs_table[i].ocrch;
    ocrl = regs_table[i].ocrcl;
    break;
  default:
    ocrh = regs_table[i].ocrah;
     c8c:	86 e1       	ldi	r24, 0x16	; 22
     c8e:	80 9f       	mul	r24, r16
     c90:	d0 01       	movw	r26, r0
     c92:	81 9f       	mul	r24, r17
     c94:	b0 0d       	add	r27, r0
     c96:	11 24       	eor	r1, r1
     c98:	a0 5c       	subi	r26, 0xC0	; 192
     c9a:	be 4f       	sbci	r27, 0xFE	; 254
     c9c:	14 96       	adiw	r26, 0x04	; 4
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	15 97       	sbiw	r26, 0x05	; 5
    ocrl = regs_table[i].ocral;
     ca4:	16 96       	adiw	r26, 0x06	; 6
     ca6:	6d 91       	ld	r22, X+
     ca8:	7c 91       	ld	r23, X
     caa:	17 97       	sbiw	r26, 0x07	; 7
  }
  *ocrh = val >> 8;
     cac:	dc 01       	movw	r26, r24
     cae:	5c 93       	st	X, r21
  *ocrl = val & 0xFF;
     cb0:	db 01       	movw	r26, r22
     cb2:	4c 93       	st	X, r20
  *regs_table[i].tifr = (1 << (channel + 1));
     cb4:	86 e1       	ldi	r24, 0x16	; 22
     cb6:	80 9f       	mul	r24, r16
     cb8:	d0 01       	movw	r26, r0
     cba:	81 9f       	mul	r24, r17
     cbc:	b0 0d       	add	r27, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	8d 01       	movw	r16, r26
     cc2:	00 5c       	subi	r16, 0xC0	; 192
     cc4:	1e 4f       	sbci	r17, 0xFE	; 254
     cc6:	d8 01       	movw	r26, r16
     cc8:	50 96       	adiw	r26, 0x10	; 16
     cca:	8d 91       	ld	r24, X+
     ccc:	9c 91       	ld	r25, X
     cce:	51 97       	sbiw	r26, 0x11	; 17
     cd0:	b9 01       	movw	r22, r18
     cd2:	6f 5f       	subi	r22, 0xFF	; 255
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	01 c0       	rjmp	.+2      	; 0xcde <pwm_lld_enable_channel+0xfa>
     cdc:	44 0f       	add	r20, r20
     cde:	6a 95       	dec	r22
     ce0:	ea f7       	brpl	.-6      	; 0xcdc <pwm_lld_enable_channel+0xf8>
     ce2:	dc 01       	movw	r26, r24
     ce4:	4c 93       	st	X, r20
  if (pwmp->config->channels[channel].callback != NULL)
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	2e 0f       	add	r18, r30
     cec:	3f 1f       	adc	r19, r31
     cee:	fc 01       	movw	r30, r24
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	81 85       	ldd	r24, Z+9	; 0x09
     cf6:	92 85       	ldd	r25, Z+10	; 0x0a
     cf8:	89 2b       	or	r24, r25
     cfa:	41 f0       	breq	.+16     	; 0xd0c <pwm_lld_enable_channel+0x128>
    *regs_table[i].timsk |= (1 << (channel + 1));
     cfc:	d8 01       	movw	r26, r16
     cfe:	52 96       	adiw	r26, 0x12	; 18
     d00:	ed 91       	ld	r30, X+
     d02:	fc 91       	ld	r31, X
     d04:	53 97       	sbiw	r26, 0x13	; 19
     d06:	80 81       	ld	r24, Z
     d08:	48 2b       	or	r20, r24
     d0a:	40 83       	st	Z, r20
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	08 95       	ret
  case 1:
    ocrh = regs_table[i].ocrbh;
    ocrl = regs_table[i].ocrbl;
    break;
  case 2:
    ocrh = regs_table[i].ocrch;
     d22:	86 e1       	ldi	r24, 0x16	; 22
     d24:	80 9f       	mul	r24, r16
     d26:	d0 01       	movw	r26, r0
     d28:	81 9f       	mul	r24, r17
     d2a:	b0 0d       	add	r27, r0
     d2c:	11 24       	eor	r1, r1
     d2e:	a0 5c       	subi	r26, 0xC0	; 192
     d30:	be 4f       	sbci	r27, 0xFE	; 254
     d32:	1c 96       	adiw	r26, 0x0c	; 12
     d34:	8d 91       	ld	r24, X+
     d36:	9c 91       	ld	r25, X
     d38:	1d 97       	sbiw	r26, 0x0d	; 13
    ocrl = regs_table[i].ocrcl;
     d3a:	1e 96       	adiw	r26, 0x0e	; 14
     d3c:	6d 91       	ld	r22, X+
     d3e:	7c 91       	ld	r23, X
     d40:	1f 97       	sbiw	r26, 0x0f	; 15
    break;
     d42:	b4 cf       	rjmp	.-152    	; 0xcac <pwm_lld_enable_channel+0xc8>
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
  volatile uint8_t *ocrh, *ocrl;
  switch (channel) {
  case 1:
    ocrh = regs_table[i].ocrbh;
     d44:	86 e1       	ldi	r24, 0x16	; 22
     d46:	80 9f       	mul	r24, r16
     d48:	d0 01       	movw	r26, r0
     d4a:	81 9f       	mul	r24, r17
     d4c:	b0 0d       	add	r27, r0
     d4e:	11 24       	eor	r1, r1
     d50:	a0 5c       	subi	r26, 0xC0	; 192
     d52:	be 4f       	sbci	r27, 0xFE	; 254
     d54:	18 96       	adiw	r26, 0x08	; 8
     d56:	8d 91       	ld	r24, X+
     d58:	9c 91       	ld	r25, X
     d5a:	19 97       	sbiw	r26, 0x09	; 9
    ocrl = regs_table[i].ocrbl;
     d5c:	1a 96       	adiw	r26, 0x0a	; 10
     d5e:	6d 91       	ld	r22, X+
     d60:	7c 91       	ld	r23, X
     d62:	1b 97       	sbiw	r26, 0x0b	; 11
    break;
     d64:	a3 cf       	rjmp	.-186    	; 0xcac <pwm_lld_enable_channel+0xc8>
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
     d66:	8c 91       	ld	r24, X
     d68:	c8 2a       	or	r12, r24
     d6a:	cc 92       	st	X, r12
     d6c:	89 cf       	rjmp	.-238    	; 0xc80 <pwm_lld_enable_channel+0x9c>
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
    *tccra |= (1 << com1) | (1 << com0);   /* Inverting mode.     */
     d6e:	d7 01       	movw	r26, r14
     d70:	8c 91       	ld	r24, X
     d72:	8b 29       	or	r24, r11
     d74:	8c 93       	st	X, r24
     d76:	84 cf       	rjmp	.-248    	; 0xc80 <pwm_lld_enable_channel+0x9c>
static uint8_t timer_index(PWMDriver *pwmp) {

  uint8_t index = 0;

#if AVR_PWM_USE_TIM1 || defined(__DOXYGEN__)
  if (pwmp == &PWMD1) return index;
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     d7c:	53 cf       	rjmp	.-346    	; 0xc24 <pwm_lld_enable_channel+0x40>

00000d7e <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
     d7e:	10 92 69 00 	sts	0x0069, r1
  EIMSK  = 0x00;
     d82:	1d ba       	out	0x1d, r1	; 29
     d84:	08 95       	ret

00000d86 <Thread1>:

static THD_WORKING_AREA(waThread1, 32);
static THD_FUNCTION(Thread1, arg)
{
    while (true) {
        palTogglePad(LED_PORT, LED_PAD);
     d86:	c0 e2       	ldi	r28, 0x20	; 32
     d88:	85 b1       	in	r24, 0x05	; 5
     d8a:	8c 27       	eor	r24, r28
     d8c:	85 b9       	out	0x05, r24	; 5
        chThdSleepMilliseconds(100);
     d8e:	8b e1       	ldi	r24, 0x1B	; 27
     d90:	96 e0       	ldi	r25, 0x06	; 6
     d92:	dd dc       	rcall	.-1606   	; 0x74e <chThdSleep>
    }
     d94:	f9 cf       	rjmp	.-14     	; 0xd88 <Thread1+0x2>

00000d96 <main>:
    static PWMConfig pwmcfg = {
        15625, 0x3FF, 0,
        {{PWM_OUTPUT_DISABLED, 0}, {PWM_OUTPUT_ACTIVE_HIGH, 0}}
    };

    halInit();
     d96:	61 dd       	rcall	.-1342   	; 0x85a <halInit>
    chSysInit();
     d98:	96 d9       	rcall	.-3284   	; 0xc6 <chSysInit>

    pwmStart(&PWMD1, &pwmcfg);
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	8c e0       	ldi	r24, 0x0C	; 12
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	6c dd       	rcall	.-1320   	; 0x87c <pwmStart>

    palSetPadMode(IOPORT2, 2, PAL_MODE_OUTPUT_PUSHPULL);
     da4:	46 e0       	ldi	r20, 0x06	; 6
     da6:	64 e0       	ldi	r22, 0x04	; 4
     da8:	83 e2       	ldi	r24, 0x23	; 35
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	99 dd       	rcall	.-1230   	; 0x8e0 <_pal_lld_setgroupmode>
    palClearPad(LED_PORT, LED_PAD);
     dae:	2d 98       	cbi	0x05, 5	; 5

    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO+1, Thread1, NULL);
     db0:	00 e0       	ldi	r16, 0x00	; 0
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	23 ec       	ldi	r18, 0xC3	; 195
     db6:	36 e0       	ldi	r19, 0x06	; 6
     db8:	41 e8       	ldi	r20, 0x81	; 129
     dba:	61 e8       	ldi	r22, 0x81	; 129
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	8a ee       	ldi	r24, 0xEA	; 234
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	4b dc       	rcall	.-1898   	; 0x65a <chThdCreateStatic>

    while (1) {        
        pwmEnableChannel(&PWMD1, 1, width);
     dc4:	46 e0       	ldi	r20, 0x06	; 6
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	8c e0       	ldi	r24, 0x0C	; 12
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	6a dd       	rcall	.-1324   	; 0x8a4 <pwmEnableChannel>
        width += step;
     dd0:	cc e0       	ldi	r28, 0x0C	; 12
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

int main(void)
{
    int step = 6;
     dd4:	06 e0       	ldi	r16, 0x06	; 6
     dd6:	10 e0       	ldi	r17, 0x00	; 0
        width += step;
        if ((width >= 0x3FF) || (width < 10)) {
            width -= step;
            step = -step;
        }
        chThdSleepMilliseconds(10);
     dd8:	8d e9       	ldi	r24, 0x9D	; 157
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	b8 dc       	rcall	.-1680   	; 0x74e <chThdSleep>
    palClearPad(LED_PORT, LED_PAD);

    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO+1, Thread1, NULL);

    while (1) {        
        pwmEnableChannel(&PWMD1, 1, width);
     dde:	ae 01       	movw	r20, r28
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	8c e0       	ldi	r24, 0x0C	; 12
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	5e dd       	rcall	.-1348   	; 0x8a4 <pwmEnableChannel>
        width += step;
     de8:	c8 01       	movw	r24, r16
     dea:	8c 0f       	add	r24, r28
     dec:	9d 1f       	adc	r25, r29
        if ((width >= 0x3FF) || (width < 10)) {
     dee:	9c 01       	movw	r18, r24
     df0:	2a 50       	subi	r18, 0x0A	; 10
     df2:	31 09       	sbc	r19, r1
     df4:	25 3f       	cpi	r18, 0xF5	; 245
     df6:	33 40       	sbci	r19, 0x03	; 3
     df8:	10 f4       	brcc	.+4      	; 0xdfe <main+0x68>
     dfa:	ec 01       	movw	r28, r24
     dfc:	ed cf       	rjmp	.-38     	; 0xdd8 <main+0x42>
            width -= step;
            step = -step;
     dfe:	11 95       	neg	r17
     e00:	01 95       	neg	r16
     e02:	11 09       	sbc	r17, r1
     e04:	e9 cf       	rjmp	.-46     	; 0xdd8 <main+0x42>

00000e06 <vfprintf>:
     e06:	ac e0       	ldi	r26, 0x0C	; 12
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e8 e0       	ldi	r30, 0x08	; 8
     e0c:	f7 e0       	ldi	r31, 0x07	; 7
     e0e:	db c2       	rjmp	.+1462   	; 0x13c6 <__prologue_saves__+0x8>
     e10:	6c 01       	movw	r12, r24
     e12:	5b 01       	movw	r10, r22
     e14:	7a 01       	movw	r14, r20
     e16:	fc 01       	movw	r30, r24
     e18:	17 82       	std	Z+7, r1	; 0x07
     e1a:	16 82       	std	Z+6, r1	; 0x06
     e1c:	83 81       	ldd	r24, Z+3	; 0x03
     e1e:	81 ff       	sbrs	r24, 1
     e20:	04 c1       	rjmp	.+520    	; 0x102a <vfprintf+0x224>
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	4c 01       	movw	r8, r24
     e28:	f6 01       	movw	r30, r12
     e2a:	03 81       	ldd	r16, Z+3	; 0x03
     e2c:	f5 01       	movw	r30, r10
     e2e:	03 fd       	sbrc	r16, 3
     e30:	15 91       	lpm	r17, Z+
     e32:	03 ff       	sbrs	r16, 3
     e34:	11 91       	ld	r17, Z+
     e36:	5f 01       	movw	r10, r30
     e38:	11 23       	and	r17, r17
     e3a:	09 f4       	brne	.+2      	; 0xe3e <vfprintf+0x38>
     e3c:	f2 c0       	rjmp	.+484    	; 0x1022 <vfprintf+0x21c>
     e3e:	15 32       	cpi	r17, 0x25	; 37
     e40:	49 f4       	brne	.+18     	; 0xe54 <vfprintf+0x4e>
     e42:	03 fd       	sbrc	r16, 3
     e44:	15 91       	lpm	r17, Z+
     e46:	03 ff       	sbrs	r16, 3
     e48:	11 91       	ld	r17, Z+
     e4a:	5f 01       	movw	r10, r30
     e4c:	15 32       	cpi	r17, 0x25	; 37
     e4e:	11 f0       	breq	.+4      	; 0xe54 <vfprintf+0x4e>
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	19 c0       	rjmp	.+50     	; 0xe86 <vfprintf+0x80>
     e54:	b6 01       	movw	r22, r12
     e56:	81 2f       	mov	r24, r17
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	39 d3       	rcall	.+1650   	; 0x14ce <fputc>
     e5c:	37 01       	movw	r6, r14
     e5e:	73 01       	movw	r14, r6
     e60:	e3 cf       	rjmp	.-58     	; 0xe28 <vfprintf+0x22>
     e62:	11 23       	and	r17, r17
     e64:	09 f4       	brne	.+2      	; 0xe68 <vfprintf+0x62>
     e66:	dd c0       	rjmp	.+442    	; 0x1022 <vfprintf+0x21c>
     e68:	61 2f       	mov	r22, r17
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	8f e6       	ldi	r24, 0x6F	; 111
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	2c 87       	std	Y+12, r18	; 0x0c
     e72:	e4 d2       	rcall	.+1480   	; 0x143c <strchr_P>
     e74:	2c 85       	ldd	r18, Y+12	; 0x0c
     e76:	89 2b       	or	r24, r25
     e78:	49 f0       	breq	.+18     	; 0xe8c <vfprintf+0x86>
     e7a:	f5 01       	movw	r30, r10
     e7c:	03 fd       	sbrc	r16, 3
     e7e:	15 91       	lpm	r17, Z+
     e80:	03 ff       	sbrs	r16, 3
     e82:	11 91       	ld	r17, Z+
     e84:	5f 01       	movw	r10, r30
     e86:	27 ff       	sbrs	r18, 7
     e88:	ec cf       	rjmp	.-40     	; 0xe62 <vfprintf+0x5c>
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <vfprintf+0x98>
     e8c:	13 32       	cpi	r17, 0x23	; 35
     e8e:	29 f0       	breq	.+10     	; 0xe9a <vfprintf+0x94>
     e90:	1c 36       	cpi	r17, 0x6C	; 108
     e92:	09 f0       	breq	.+2      	; 0xe96 <vfprintf+0x90>
     e94:	cd c0       	rjmp	.+410    	; 0x1030 <vfprintf+0x22a>
     e96:	20 68       	ori	r18, 0x80	; 128
     e98:	f0 cf       	rjmp	.-32     	; 0xe7a <vfprintf+0x74>
     e9a:	20 e1       	ldi	r18, 0x10	; 16
     e9c:	ee cf       	rjmp	.-36     	; 0xe7a <vfprintf+0x74>
     e9e:	02 2f       	mov	r16, r18
     ea0:	11 23       	and	r17, r17
     ea2:	09 f4       	brne	.+2      	; 0xea6 <vfprintf+0xa0>
     ea4:	be c0       	rjmp	.+380    	; 0x1022 <vfprintf+0x21c>
     ea6:	61 2f       	mov	r22, r17
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	88 e6       	ldi	r24, 0x68	; 104
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2c 87       	std	Y+12, r18	; 0x0c
     eb0:	c5 d2       	rcall	.+1418   	; 0x143c <strchr_P>
     eb2:	2c 85       	ldd	r18, Y+12	; 0x0c
     eb4:	89 2b       	or	r24, r25
     eb6:	41 f0       	breq	.+16     	; 0xec8 <vfprintf+0xc2>
     eb8:	37 01       	movw	r6, r14
     eba:	f4 e0       	ldi	r31, 0x04	; 4
     ebc:	6f 0e       	add	r6, r31
     ebe:	71 1c       	adc	r7, r1
     ec0:	b6 01       	movw	r22, r12
     ec2:	8f e3       	ldi	r24, 0x3F	; 63
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0xe4>
     ec8:	13 36       	cpi	r17, 0x63	; 99
     eca:	39 f0       	breq	.+14     	; 0xeda <vfprintf+0xd4>
     ecc:	13 37       	cpi	r17, 0x73	; 115
     ece:	79 f0       	breq	.+30     	; 0xeee <vfprintf+0xe8>
     ed0:	13 35       	cpi	r17, 0x53	; 83
     ed2:	09 f5       	brne	.+66     	; 0xf16 <vfprintf+0x110>
     ed4:	02 2f       	mov	r16, r18
     ed6:	01 60       	ori	r16, 0x01	; 1
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <vfprintf+0xe8>
     eda:	37 01       	movw	r6, r14
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	68 0e       	add	r6, r24
     ee0:	71 1c       	adc	r7, r1
     ee2:	b6 01       	movw	r22, r12
     ee4:	f7 01       	movw	r30, r14
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	f1 d2       	rcall	.+1506   	; 0x14ce <fputc>
     eec:	b8 cf       	rjmp	.-144    	; 0xe5e <vfprintf+0x58>
     eee:	37 01       	movw	r6, r14
     ef0:	f2 e0       	ldi	r31, 0x02	; 2
     ef2:	6f 0e       	add	r6, r31
     ef4:	71 1c       	adc	r7, r1
     ef6:	f7 01       	movw	r30, r14
     ef8:	e0 80       	ld	r14, Z
     efa:	f1 80       	ldd	r15, Z+1	; 0x01
     efc:	f7 01       	movw	r30, r14
     efe:	00 fd       	sbrc	r16, 0
     f00:	85 91       	lpm	r24, Z+
     f02:	00 ff       	sbrs	r16, 0
     f04:	81 91       	ld	r24, Z+
     f06:	7f 01       	movw	r14, r30
     f08:	88 23       	and	r24, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <vfprintf+0x108>
     f0c:	a8 cf       	rjmp	.-176    	; 0xe5e <vfprintf+0x58>
     f0e:	b6 01       	movw	r22, r12
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	dd d2       	rcall	.+1466   	; 0x14ce <fputc>
     f14:	f3 cf       	rjmp	.-26     	; 0xefc <vfprintf+0xf6>
     f16:	14 36       	cpi	r17, 0x64	; 100
     f18:	11 f0       	breq	.+4      	; 0xf1e <vfprintf+0x118>
     f1a:	19 36       	cpi	r17, 0x69	; 105
     f1c:	29 f5       	brne	.+74     	; 0xf68 <vfprintf+0x162>
     f1e:	37 01       	movw	r6, r14
     f20:	27 ff       	sbrs	r18, 7
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <vfprintf+0x130>
     f24:	f4 e0       	ldi	r31, 0x04	; 4
     f26:	6f 0e       	add	r6, r31
     f28:	71 1c       	adc	r7, r1
     f2a:	f7 01       	movw	r30, r14
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	0a c0       	rjmp	.+20     	; 0xf4a <vfprintf+0x144>
     f36:	f2 e0       	ldi	r31, 0x02	; 2
     f38:	6f 0e       	add	r6, r31
     f3a:	71 1c       	adc	r7, r1
     f3c:	f7 01       	movw	r30, r14
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	07 2e       	mov	r0, r23
     f44:	00 0c       	add	r0, r0
     f46:	88 0b       	sbc	r24, r24
     f48:	99 0b       	sbc	r25, r25
     f4a:	02 2f       	mov	r16, r18
     f4c:	0f 7e       	andi	r16, 0xEF	; 239
     f4e:	97 ff       	sbrs	r25, 7
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <vfprintf+0x15c>
     f52:	90 95       	com	r25
     f54:	80 95       	com	r24
     f56:	70 95       	com	r23
     f58:	61 95       	neg	r22
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	00 64       	ori	r16, 0x40	; 64
     f62:	2a e0       	ldi	r18, 0x0A	; 10
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	33 c0       	rjmp	.+102    	; 0xfce <vfprintf+0x1c8>
     f68:	10 37       	cpi	r17, 0x70	; 112
     f6a:	99 f0       	breq	.+38     	; 0xf92 <vfprintf+0x18c>
     f6c:	40 f4       	brcc	.+16     	; 0xf7e <vfprintf+0x178>
     f6e:	18 35       	cpi	r17, 0x58	; 88
     f70:	b1 f0       	breq	.+44     	; 0xf9e <vfprintf+0x198>
     f72:	1f 36       	cpi	r17, 0x6F	; 111
     f74:	09 f0       	breq	.+2      	; 0xf78 <vfprintf+0x172>
     f76:	55 c0       	rjmp	.+170    	; 0x1022 <vfprintf+0x21c>
     f78:	28 e0       	ldi	r18, 0x08	; 8
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <vfprintf+0x1a0>
     f7e:	15 37       	cpi	r17, 0x75	; 117
     f80:	19 f0       	breq	.+6      	; 0xf88 <vfprintf+0x182>
     f82:	18 37       	cpi	r17, 0x78	; 120
     f84:	41 f0       	breq	.+16     	; 0xf96 <vfprintf+0x190>
     f86:	4d c0       	rjmp	.+154    	; 0x1022 <vfprintf+0x21c>
     f88:	02 2f       	mov	r16, r18
     f8a:	0f 7e       	andi	r16, 0xEF	; 239
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	0a c0       	rjmp	.+20     	; 0xfa6 <vfprintf+0x1a0>
     f92:	02 2f       	mov	r16, r18
     f94:	00 61       	ori	r16, 0x10	; 16
     f96:	04 62       	ori	r16, 0x24	; 36
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <vfprintf+0x1a0>
     f9e:	02 2f       	mov	r16, r18
     fa0:	04 60       	ori	r16, 0x04	; 4
     fa2:	20 e1       	ldi	r18, 0x10	; 16
     fa4:	32 e0       	ldi	r19, 0x02	; 2
     fa6:	37 01       	movw	r6, r14
     fa8:	07 ff       	sbrs	r16, 7
     faa:	09 c0       	rjmp	.+18     	; 0xfbe <vfprintf+0x1b8>
     fac:	f4 e0       	ldi	r31, 0x04	; 4
     fae:	6f 0e       	add	r6, r31
     fb0:	71 1c       	adc	r7, r1
     fb2:	f7 01       	movw	r30, r14
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <vfprintf+0x1c8>
     fbe:	f2 e0       	ldi	r31, 0x02	; 2
     fc0:	6f 0e       	add	r6, r31
     fc2:	71 1c       	adc	r7, r1
     fc4:	f7 01       	movw	r30, r14
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a4 01       	movw	r20, r8
     fd0:	cf d2       	rcall	.+1438   	; 0x1570 <__ultoa_invert>
     fd2:	18 2f       	mov	r17, r24
     fd4:	18 19       	sub	r17, r8
     fd6:	06 ff       	sbrs	r16, 6
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x1dc>
     fda:	b6 01       	movw	r22, r12
     fdc:	8d e2       	ldi	r24, 0x2D	; 45
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	76 d2       	rcall	.+1260   	; 0x14ce <fputc>
     fe2:	04 ff       	sbrs	r16, 4
     fe4:	13 c0       	rjmp	.+38     	; 0x100c <vfprintf+0x206>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e1 0f       	add	r30, r17
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	80 33       	cpi	r24, 0x30	; 48
     ff0:	69 f0       	breq	.+26     	; 0x100c <vfprintf+0x206>
     ff2:	b6 01       	movw	r22, r12
     ff4:	80 e3       	ldi	r24, 0x30	; 48
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	6a d2       	rcall	.+1236   	; 0x14ce <fputc>
     ffa:	02 ff       	sbrs	r16, 2
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <vfprintf+0x206>
     ffe:	00 72       	andi	r16, 0x20	; 32
    1000:	80 2f       	mov	r24, r16
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	b6 01       	movw	r22, r12
    1006:	88 5a       	subi	r24, 0xA8	; 168
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	61 d2       	rcall	.+1218   	; 0x14ce <fputc>
    100c:	11 50       	subi	r17, 0x01	; 1
    100e:	f4 01       	movw	r30, r8
    1010:	e1 0f       	add	r30, r17
    1012:	f1 1d       	adc	r31, r1
    1014:	80 81       	ld	r24, Z
    1016:	b6 01       	movw	r22, r12
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	59 d2       	rcall	.+1202   	; 0x14ce <fputc>
    101c:	11 11       	cpse	r17, r1
    101e:	f6 cf       	rjmp	.-20     	; 0x100c <vfprintf+0x206>
    1020:	1e cf       	rjmp	.-452    	; 0xe5e <vfprintf+0x58>
    1022:	f6 01       	movw	r30, r12
    1024:	86 81       	ldd	r24, Z+6	; 0x06
    1026:	97 81       	ldd	r25, Z+7	; 0x07
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <vfprintf+0x22e>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x22e>
    1030:	02 2f       	mov	r16, r18
    1032:	39 cf       	rjmp	.-398    	; 0xea6 <vfprintf+0xa0>
    1034:	2c 96       	adiw	r28, 0x0c	; 12
    1036:	ee e0       	ldi	r30, 0x0E	; 14
    1038:	e2 c1       	rjmp	.+964    	; 0x13fe <__epilogue_restores__+0x8>

0000103a <putval>:
    103a:	20 fd       	sbrc	r18, 0
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <putval+0x16>
    103e:	fc 01       	movw	r30, r24
    1040:	23 fd       	sbrc	r18, 3
    1042:	05 c0       	rjmp	.+10     	; 0x104e <putval+0x14>
    1044:	22 ff       	sbrs	r18, 2
    1046:	02 c0       	rjmp	.+4      	; 0x104c <putval+0x12>
    1048:	73 83       	std	Z+3, r23	; 0x03
    104a:	62 83       	std	Z+2, r22	; 0x02
    104c:	51 83       	std	Z+1, r21	; 0x01
    104e:	40 83       	st	Z, r20
    1050:	08 95       	ret

00001052 <mulacc>:
    1052:	44 fd       	sbrc	r20, 4
    1054:	10 c0       	rjmp	.+32     	; 0x1076 <mulacc+0x24>
    1056:	46 fd       	sbrc	r20, 6
    1058:	10 c0       	rjmp	.+32     	; 0x107a <mulacc+0x28>
    105a:	db 01       	movw	r26, r22
    105c:	fc 01       	movw	r30, r24
    105e:	aa 0f       	add	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	ee 1f       	adc	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	10 94       	com	r1
    1068:	d1 f7       	brne	.-12     	; 0x105e <mulacc+0xc>
    106a:	6a 0f       	add	r22, r26
    106c:	7b 1f       	adc	r23, r27
    106e:	8e 1f       	adc	r24, r30
    1070:	9f 1f       	adc	r25, r31
    1072:	31 e0       	ldi	r19, 0x01	; 1
    1074:	03 c0       	rjmp	.+6      	; 0x107c <mulacc+0x2a>
    1076:	33 e0       	ldi	r19, 0x03	; 3
    1078:	01 c0       	rjmp	.+2      	; 0x107c <mulacc+0x2a>
    107a:	34 e0       	ldi	r19, 0x04	; 4
    107c:	66 0f       	add	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	31 50       	subi	r19, 0x01	; 1
    1086:	d1 f7       	brne	.-12     	; 0x107c <mulacc+0x2a>
    1088:	62 0f       	add	r22, r18
    108a:	71 1d       	adc	r23, r1
    108c:	81 1d       	adc	r24, r1
    108e:	91 1d       	adc	r25, r1
    1090:	08 95       	ret

00001092 <skip_spaces>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	8c 01       	movw	r16, r24
    109c:	c8 01       	movw	r24, r16
    109e:	d9 d1       	rcall	.+946    	; 0x1452 <fgetc>
    10a0:	ec 01       	movw	r28, r24
    10a2:	97 fd       	sbrc	r25, 7
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <skip_spaces+0x20>
    10a6:	c2 d1       	rcall	.+900    	; 0x142c <isspace>
    10a8:	89 2b       	or	r24, r25
    10aa:	c1 f7       	brne	.-16     	; 0x109c <skip_spaces+0xa>
    10ac:	b8 01       	movw	r22, r16
    10ae:	ce 01       	movw	r24, r28
    10b0:	46 d2       	rcall	.+1164   	; 0x153e <ungetc>
    10b2:	ce 01       	movw	r24, r28
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <conv_int>:
    10be:	a1 e0       	ldi	r26, 0x01	; 1
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e4 e6       	ldi	r30, 0x64	; 100
    10c4:	f8 e0       	ldi	r31, 0x08	; 8
    10c6:	81 c1       	rjmp	.+770    	; 0x13ca <__prologue_saves__+0xc>
    10c8:	8c 01       	movw	r16, r24
    10ca:	c6 2e       	mov	r12, r22
    10cc:	7a 01       	movw	r14, r20
    10ce:	29 83       	std	Y+1, r18	; 0x01
    10d0:	c0 d1       	rcall	.+896    	; 0x1452 <fgetc>
    10d2:	ac 01       	movw	r20, r24
    10d4:	55 27       	eor	r21, r21
    10d6:	29 81       	ldd	r18, Y+1	; 0x01
    10d8:	4b 32       	cpi	r20, 0x2B	; 43
    10da:	51 05       	cpc	r21, r1
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <conv_int+0x28>
    10de:	4d 32       	cpi	r20, 0x2D	; 45
    10e0:	51 05       	cpc	r21, r1
    10e2:	61 f4       	brne	.+24     	; 0x10fc <conv_int+0x3e>
    10e4:	20 68       	ori	r18, 0x80	; 128
    10e6:	ca 94       	dec	r12
    10e8:	c1 10       	cpse	r12, r1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <conv_int+0x32>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	6f c0       	rjmp	.+222    	; 0x11ce <conv_int+0x110>
    10f0:	c8 01       	movw	r24, r16
    10f2:	29 83       	std	Y+1, r18	; 0x01
    10f4:	ae d1       	rcall	.+860    	; 0x1452 <fgetc>
    10f6:	29 81       	ldd	r18, Y+1	; 0x01
    10f8:	97 fd       	sbrc	r25, 7
    10fa:	f8 cf       	rjmp	.-16     	; 0x10ec <conv_int+0x2e>
    10fc:	32 2f       	mov	r19, r18
    10fe:	3d 7f       	andi	r19, 0xFD	; 253
    1100:	d3 2e       	mov	r13, r19
    1102:	32 2f       	mov	r19, r18
    1104:	30 73       	andi	r19, 0x30	; 48
    1106:	39 f5       	brne	.+78     	; 0x1156 <conv_int+0x98>
    1108:	80 33       	cpi	r24, 0x30	; 48
    110a:	29 f5       	brne	.+74     	; 0x1156 <conv_int+0x98>
    110c:	bb 24       	eor	r11, r11
    110e:	ba 94       	dec	r11
    1110:	bc 0c       	add	r11, r12
    1112:	09 f4       	brne	.+2      	; 0x1116 <conv_int+0x58>
    1114:	49 c0       	rjmp	.+146    	; 0x11a8 <conv_int+0xea>
    1116:	c8 01       	movw	r24, r16
    1118:	29 83       	std	Y+1, r18	; 0x01
    111a:	9b d1       	rcall	.+822    	; 0x1452 <fgetc>
    111c:	29 81       	ldd	r18, Y+1	; 0x01
    111e:	97 fd       	sbrc	r25, 7
    1120:	43 c0       	rjmp	.+134    	; 0x11a8 <conv_int+0xea>
    1122:	38 2f       	mov	r19, r24
    1124:	3f 7d       	andi	r19, 0xDF	; 223
    1126:	38 35       	cpi	r19, 0x58	; 88
    1128:	61 f4       	brne	.+24     	; 0x1142 <conv_int+0x84>
    112a:	8d 2d       	mov	r24, r13
    112c:	82 64       	ori	r24, 0x42	; 66
    112e:	d8 2e       	mov	r13, r24
    1130:	ca 94       	dec	r12
    1132:	ca 94       	dec	r12
    1134:	cc 20       	and	r12, r12
    1136:	c1 f1       	breq	.+112    	; 0x11a8 <conv_int+0xea>
    1138:	c8 01       	movw	r24, r16
    113a:	8b d1       	rcall	.+790    	; 0x1452 <fgetc>
    113c:	97 ff       	sbrs	r25, 7
    113e:	0b c0       	rjmp	.+22     	; 0x1156 <conv_int+0x98>
    1140:	33 c0       	rjmp	.+102    	; 0x11a8 <conv_int+0xea>
    1142:	26 ff       	sbrs	r18, 6
    1144:	04 c0       	rjmp	.+8      	; 0x114e <conv_int+0x90>
    1146:	2d 2d       	mov	r18, r13
    1148:	22 60       	ori	r18, 0x02	; 2
    114a:	d2 2e       	mov	r13, r18
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <conv_int+0x96>
    114e:	3d 2d       	mov	r19, r13
    1150:	32 61       	ori	r19, 0x12	; 18
    1152:	d3 2e       	mov	r13, r19
    1154:	cb 2c       	mov	r12, r11
    1156:	81 2c       	mov	r8, r1
    1158:	91 2c       	mov	r9, r1
    115a:	54 01       	movw	r10, r8
    115c:	20 ed       	ldi	r18, 0xD0	; 208
    115e:	28 0f       	add	r18, r24
    1160:	28 30       	cpi	r18, 0x08	; 8
    1162:	78 f0       	brcs	.+30     	; 0x1182 <conv_int+0xc4>
    1164:	d4 fe       	sbrs	r13, 4
    1166:	03 c0       	rjmp	.+6      	; 0x116e <conv_int+0xb0>
    1168:	b8 01       	movw	r22, r16
    116a:	e9 d1       	rcall	.+978    	; 0x153e <ungetc>
    116c:	1a c0       	rjmp	.+52     	; 0x11a2 <conv_int+0xe4>
    116e:	2a 30       	cpi	r18, 0x0A	; 10
    1170:	40 f0       	brcs	.+16     	; 0x1182 <conv_int+0xc4>
    1172:	d6 fe       	sbrs	r13, 6
    1174:	f9 cf       	rjmp	.-14     	; 0x1168 <conv_int+0xaa>
    1176:	2f 7d       	andi	r18, 0xDF	; 223
    1178:	3f ee       	ldi	r19, 0xEF	; 239
    117a:	32 0f       	add	r19, r18
    117c:	36 30       	cpi	r19, 0x06	; 6
    117e:	a0 f7       	brcc	.-24     	; 0x1168 <conv_int+0xaa>
    1180:	27 50       	subi	r18, 0x07	; 7
    1182:	4d 2d       	mov	r20, r13
    1184:	c5 01       	movw	r24, r10
    1186:	b4 01       	movw	r22, r8
    1188:	64 df       	rcall	.-312    	; 0x1052 <mulacc>
    118a:	4b 01       	movw	r8, r22
    118c:	5c 01       	movw	r10, r24
    118e:	8d 2d       	mov	r24, r13
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	d8 2e       	mov	r13, r24
    1194:	ca 94       	dec	r12
    1196:	cc 20       	and	r12, r12
    1198:	51 f0       	breq	.+20     	; 0x11ae <conv_int+0xf0>
    119a:	c8 01       	movw	r24, r16
    119c:	5a d1       	rcall	.+692    	; 0x1452 <fgetc>
    119e:	97 ff       	sbrs	r25, 7
    11a0:	dd cf       	rjmp	.-70     	; 0x115c <conv_int+0x9e>
    11a2:	d1 fc       	sbrc	r13, 1
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <conv_int+0xf0>
    11a6:	a2 cf       	rjmp	.-188    	; 0x10ec <conv_int+0x2e>
    11a8:	81 2c       	mov	r8, r1
    11aa:	91 2c       	mov	r9, r1
    11ac:	54 01       	movw	r10, r8
    11ae:	d7 fe       	sbrs	r13, 7
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <conv_int+0x104>
    11b2:	b0 94       	com	r11
    11b4:	a0 94       	com	r10
    11b6:	90 94       	com	r9
    11b8:	80 94       	com	r8
    11ba:	81 1c       	adc	r8, r1
    11bc:	91 1c       	adc	r9, r1
    11be:	a1 1c       	adc	r10, r1
    11c0:	b1 1c       	adc	r11, r1
    11c2:	2d 2d       	mov	r18, r13
    11c4:	b5 01       	movw	r22, r10
    11c6:	a4 01       	movw	r20, r8
    11c8:	c7 01       	movw	r24, r14
    11ca:	37 df       	rcall	.-402    	; 0x103a <putval>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	21 96       	adiw	r28, 0x01	; 1
    11d0:	ec e0       	ldi	r30, 0x0C	; 12
    11d2:	17 c1       	rjmp	.+558    	; 0x1402 <__epilogue_restores__+0xc>

000011d4 <vfscanf>:
    11d4:	a1 e0       	ldi	r26, 0x01	; 1
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef ee       	ldi	r30, 0xEF	; 239
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	f2 c0       	rjmp	.+484    	; 0x13c2 <__prologue_saves__+0x4>
    11de:	7c 01       	movw	r14, r24
    11e0:	2b 01       	movw	r4, r22
    11e2:	5a 01       	movw	r10, r20
    11e4:	fc 01       	movw	r30, r24
    11e6:	17 82       	std	Z+7, r1	; 0x07
    11e8:	16 82       	std	Z+6, r1	; 0x06
    11ea:	81 2c       	mov	r8, r1
    11ec:	f7 01       	movw	r30, r14
    11ee:	73 80       	ldd	r7, Z+3	; 0x03
    11f0:	f2 01       	movw	r30, r4
    11f2:	73 fc       	sbrc	r7, 3
    11f4:	85 91       	lpm	r24, Z+
    11f6:	73 fe       	sbrs	r7, 3
    11f8:	81 91       	ld	r24, Z+
    11fa:	38 2f       	mov	r19, r24
    11fc:	2f 01       	movw	r4, r30
    11fe:	88 23       	and	r24, r24
    1200:	09 f4       	brne	.+2      	; 0x1204 <vfscanf+0x30>
    1202:	d5 c0       	rjmp	.+426    	; 0x13ae <vfscanf+0x1da>
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	39 83       	std	Y+1, r19	; 0x01
    1208:	11 d1       	rcall	.+546    	; 0x142c <isspace>
    120a:	39 81       	ldd	r19, Y+1	; 0x01
    120c:	89 2b       	or	r24, r25
    120e:	19 f0       	breq	.+6      	; 0x1216 <vfscanf+0x42>
    1210:	c7 01       	movw	r24, r14
    1212:	3f df       	rcall	.-386    	; 0x1092 <skip_spaces>
    1214:	eb cf       	rjmp	.-42     	; 0x11ec <vfscanf+0x18>
    1216:	35 32       	cpi	r19, 0x25	; 37
    1218:	41 f4       	brne	.+16     	; 0x122a <vfscanf+0x56>
    121a:	f2 01       	movw	r30, r4
    121c:	73 fc       	sbrc	r7, 3
    121e:	35 91       	lpm	r19, Z+
    1220:	73 fe       	sbrs	r7, 3
    1222:	31 91       	ld	r19, Z+
    1224:	2f 01       	movw	r4, r30
    1226:	35 32       	cpi	r19, 0x25	; 37
    1228:	59 f4       	brne	.+22     	; 0x1240 <vfscanf+0x6c>
    122a:	c7 01       	movw	r24, r14
    122c:	39 83       	std	Y+1, r19	; 0x01
    122e:	11 d1       	rcall	.+546    	; 0x1452 <fgetc>
    1230:	39 81       	ldd	r19, Y+1	; 0x01
    1232:	97 fd       	sbrc	r25, 7
    1234:	ba c0       	rjmp	.+372    	; 0x13aa <vfscanf+0x1d6>
    1236:	38 17       	cp	r19, r24
    1238:	c9 f2       	breq	.-78     	; 0x11ec <vfscanf+0x18>
    123a:	b7 01       	movw	r22, r14
    123c:	80 d1       	rcall	.+768    	; 0x153e <ungetc>
    123e:	b7 c0       	rjmp	.+366    	; 0x13ae <vfscanf+0x1da>
    1240:	3a 32       	cpi	r19, 0x2A	; 42
    1242:	39 f4       	brne	.+14     	; 0x1252 <vfscanf+0x7e>
    1244:	73 fc       	sbrc	r7, 3
    1246:	35 91       	lpm	r19, Z+
    1248:	73 fe       	sbrs	r7, 3
    124a:	31 91       	ld	r19, Z+
    124c:	2f 01       	movw	r4, r30
    124e:	11 e0       	ldi	r17, 0x01	; 1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <vfscanf+0x80>
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	62 01       	movw	r12, r4
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	20 ed       	ldi	r18, 0xD0	; 208
    125a:	23 0f       	add	r18, r19
    125c:	2a 30       	cpi	r18, 0x0A	; 10
    125e:	68 f4       	brcc	.+26     	; 0x127a <vfscanf+0xa6>
    1260:	12 60       	ori	r17, 0x02	; 2
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	f3 de       	rcall	.-538    	; 0x1052 <mulacc>
    126c:	f6 01       	movw	r30, r12
    126e:	73 fc       	sbrc	r7, 3
    1270:	35 91       	lpm	r19, Z+
    1272:	73 fe       	sbrs	r7, 3
    1274:	31 91       	ld	r19, Z+
    1276:	6f 01       	movw	r12, r30
    1278:	ef cf       	rjmp	.-34     	; 0x1258 <vfscanf+0x84>
    127a:	96 2e       	mov	r9, r22
    127c:	03 2f       	mov	r16, r19
    127e:	26 01       	movw	r4, r12
    1280:	11 ff       	sbrs	r17, 1
    1282:	03 c0       	rjmp	.+6      	; 0x128a <vfscanf+0xb6>
    1284:	61 11       	cpse	r22, r1
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfscanf+0xba>
    1288:	92 c0       	rjmp	.+292    	; 0x13ae <vfscanf+0x1da>
    128a:	99 24       	eor	r9, r9
    128c:	9a 94       	dec	r9
    128e:	38 36       	cpi	r19, 0x68	; 104
    1290:	19 f0       	breq	.+6      	; 0x1298 <vfscanf+0xc4>
    1292:	3c 36       	cpi	r19, 0x6C	; 108
    1294:	51 f0       	breq	.+20     	; 0x12aa <vfscanf+0xd6>
    1296:	10 c0       	rjmp	.+32     	; 0x12b8 <vfscanf+0xe4>
    1298:	f6 01       	movw	r30, r12
    129a:	73 fc       	sbrc	r7, 3
    129c:	05 91       	lpm	r16, Z+
    129e:	73 fe       	sbrs	r7, 3
    12a0:	01 91       	ld	r16, Z+
    12a2:	2f 01       	movw	r4, r30
    12a4:	08 36       	cpi	r16, 0x68	; 104
    12a6:	41 f4       	brne	.+16     	; 0x12b8 <vfscanf+0xe4>
    12a8:	18 60       	ori	r17, 0x08	; 8
    12aa:	14 60       	ori	r17, 0x04	; 4
    12ac:	f2 01       	movw	r30, r4
    12ae:	73 fc       	sbrc	r7, 3
    12b0:	05 91       	lpm	r16, Z+
    12b2:	73 fe       	sbrs	r7, 3
    12b4:	01 91       	ld	r16, Z+
    12b6:	2f 01       	movw	r4, r30
    12b8:	00 23       	and	r16, r16
    12ba:	09 f4       	brne	.+2      	; 0x12be <vfscanf+0xea>
    12bc:	78 c0       	rjmp	.+240    	; 0x13ae <vfscanf+0x1da>
    12be:	60 2f       	mov	r22, r16
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	8f e7       	ldi	r24, 0x7F	; 127
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	ba d0       	rcall	.+372    	; 0x143c <strchr_P>
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f4       	brne	.+2      	; 0x12ce <vfscanf+0xfa>
    12cc:	70 c0       	rjmp	.+224    	; 0x13ae <vfscanf+0x1da>
    12ce:	10 fd       	sbrc	r17, 0
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <vfscanf+0x10c>
    12d2:	f5 01       	movw	r30, r10
    12d4:	c0 80       	ld	r12, Z
    12d6:	d1 80       	ldd	r13, Z+1	; 0x01
    12d8:	c5 01       	movw	r24, r10
    12da:	02 96       	adiw	r24, 0x02	; 2
    12dc:	5c 01       	movw	r10, r24
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <vfscanf+0x110>
    12e0:	c1 2c       	mov	r12, r1
    12e2:	d1 2c       	mov	r13, r1
    12e4:	0e 36       	cpi	r16, 0x6E	; 110
    12e6:	49 f4       	brne	.+18     	; 0x12fa <vfscanf+0x126>
    12e8:	f7 01       	movw	r30, r14
    12ea:	46 81       	ldd	r20, Z+6	; 0x06
    12ec:	57 81       	ldd	r21, Z+7	; 0x07
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	21 2f       	mov	r18, r17
    12f4:	c6 01       	movw	r24, r12
    12f6:	a1 de       	rcall	.-702    	; 0x103a <putval>
    12f8:	79 cf       	rjmp	.-270    	; 0x11ec <vfscanf+0x18>
    12fa:	03 36       	cpi	r16, 0x63	; 99
    12fc:	a1 f4       	brne	.+40     	; 0x1326 <vfscanf+0x152>
    12fe:	11 fd       	sbrc	r17, 1
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <vfscanf+0x132>
    1302:	99 24       	eor	r9, r9
    1304:	93 94       	inc	r9
    1306:	c7 01       	movw	r24, r14
    1308:	a4 d0       	rcall	.+328    	; 0x1452 <fgetc>
    130a:	97 fd       	sbrc	r25, 7
    130c:	4e c0       	rjmp	.+156    	; 0x13aa <vfscanf+0x1d6>
    130e:	c1 14       	cp	r12, r1
    1310:	d1 04       	cpc	r13, r1
    1312:	29 f0       	breq	.+10     	; 0x131e <vfscanf+0x14a>
    1314:	f6 01       	movw	r30, r12
    1316:	80 83       	st	Z, r24
    1318:	c6 01       	movw	r24, r12
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	6c 01       	movw	r12, r24
    131e:	9a 94       	dec	r9
    1320:	91 10       	cpse	r9, r1
    1322:	f1 cf       	rjmp	.-30     	; 0x1306 <vfscanf+0x132>
    1324:	3e c0       	rjmp	.+124    	; 0x13a2 <vfscanf+0x1ce>
    1326:	c7 01       	movw	r24, r14
    1328:	b4 de       	rcall	.-664    	; 0x1092 <skip_spaces>
    132a:	97 fd       	sbrc	r25, 7
    132c:	3e c0       	rjmp	.+124    	; 0x13aa <vfscanf+0x1d6>
    132e:	0f 36       	cpi	r16, 0x6F	; 111
    1330:	49 f1       	breq	.+82     	; 0x1384 <vfscanf+0x1b0>
    1332:	28 f4       	brcc	.+10     	; 0x133e <vfscanf+0x16a>
    1334:	04 36       	cpi	r16, 0x64	; 100
    1336:	21 f1       	breq	.+72     	; 0x1380 <vfscanf+0x1ac>
    1338:	09 36       	cpi	r16, 0x69	; 105
    133a:	39 f1       	breq	.+78     	; 0x138a <vfscanf+0x1b6>
    133c:	25 c0       	rjmp	.+74     	; 0x1388 <vfscanf+0x1b4>
    133e:	03 37       	cpi	r16, 0x73	; 115
    1340:	71 f0       	breq	.+28     	; 0x135e <vfscanf+0x18a>
    1342:	05 37       	cpi	r16, 0x75	; 117
    1344:	e9 f0       	breq	.+58     	; 0x1380 <vfscanf+0x1ac>
    1346:	20 c0       	rjmp	.+64     	; 0x1388 <vfscanf+0x1b4>
    1348:	c1 14       	cp	r12, r1
    134a:	d1 04       	cpc	r13, r1
    134c:	29 f0       	breq	.+10     	; 0x1358 <vfscanf+0x184>
    134e:	f6 01       	movw	r30, r12
    1350:	60 82       	st	Z, r6
    1352:	c6 01       	movw	r24, r12
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	6c 01       	movw	r12, r24
    1358:	9a 94       	dec	r9
    135a:	99 20       	and	r9, r9
    135c:	59 f0       	breq	.+22     	; 0x1374 <vfscanf+0x1a0>
    135e:	c7 01       	movw	r24, r14
    1360:	78 d0       	rcall	.+240    	; 0x1452 <fgetc>
    1362:	3c 01       	movw	r6, r24
    1364:	97 fd       	sbrc	r25, 7
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <vfscanf+0x1a0>
    1368:	61 d0       	rcall	.+194    	; 0x142c <isspace>
    136a:	89 2b       	or	r24, r25
    136c:	69 f3       	breq	.-38     	; 0x1348 <vfscanf+0x174>
    136e:	b7 01       	movw	r22, r14
    1370:	c3 01       	movw	r24, r6
    1372:	e5 d0       	rcall	.+458    	; 0x153e <ungetc>
    1374:	c1 14       	cp	r12, r1
    1376:	d1 04       	cpc	r13, r1
    1378:	a1 f0       	breq	.+40     	; 0x13a2 <vfscanf+0x1ce>
    137a:	f6 01       	movw	r30, r12
    137c:	10 82       	st	Z, r1
    137e:	11 c0       	rjmp	.+34     	; 0x13a2 <vfscanf+0x1ce>
    1380:	10 62       	ori	r17, 0x20	; 32
    1382:	03 c0       	rjmp	.+6      	; 0x138a <vfscanf+0x1b6>
    1384:	10 61       	ori	r17, 0x10	; 16
    1386:	01 c0       	rjmp	.+2      	; 0x138a <vfscanf+0x1b6>
    1388:	10 64       	ori	r17, 0x40	; 64
    138a:	21 2f       	mov	r18, r17
    138c:	a6 01       	movw	r20, r12
    138e:	69 2d       	mov	r22, r9
    1390:	c7 01       	movw	r24, r14
    1392:	95 de       	rcall	.-726    	; 0x10be <conv_int>
    1394:	81 11       	cpse	r24, r1
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <vfscanf+0x1ce>
    1398:	f7 01       	movw	r30, r14
    139a:	83 81       	ldd	r24, Z+3	; 0x03
    139c:	80 73       	andi	r24, 0x30	; 48
    139e:	29 f4       	brne	.+10     	; 0x13aa <vfscanf+0x1d6>
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <vfscanf+0x1da>
    13a2:	10 fd       	sbrc	r17, 0
    13a4:	23 cf       	rjmp	.-442    	; 0x11ec <vfscanf+0x18>
    13a6:	83 94       	inc	r8
    13a8:	21 cf       	rjmp	.-446    	; 0x11ec <vfscanf+0x18>
    13aa:	88 20       	and	r8, r8
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <vfscanf+0x1e0>
    13ae:	88 2d       	mov	r24, r8
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <vfscanf+0x1e4>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	21 96       	adiw	r28, 0x01	; 1
    13ba:	e0 e1       	ldi	r30, 0x10	; 16
    13bc:	1e c0       	rjmp	.+60     	; 0x13fa <__epilogue_restores__+0x4>

000013be <__prologue_saves__>:
    13be:	2f 92       	push	r2
    13c0:	3f 92       	push	r3
    13c2:	4f 92       	push	r4
    13c4:	5f 92       	push	r5
    13c6:	6f 92       	push	r6
    13c8:	7f 92       	push	r7
    13ca:	8f 92       	push	r8
    13cc:	9f 92       	push	r9
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	ca 1b       	sub	r28, r26
    13e8:	db 0b       	sbc	r29, r27
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	09 94       	ijmp

000013f6 <__epilogue_restores__>:
    13f6:	2a 88       	ldd	r2, Y+18	; 0x12
    13f8:	39 88       	ldd	r3, Y+17	; 0x11
    13fa:	48 88       	ldd	r4, Y+16	; 0x10
    13fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    13fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1400:	7d 84       	ldd	r7, Y+13	; 0x0d
    1402:	8c 84       	ldd	r8, Y+12	; 0x0c
    1404:	9b 84       	ldd	r9, Y+11	; 0x0b
    1406:	aa 84       	ldd	r10, Y+10	; 0x0a
    1408:	b9 84       	ldd	r11, Y+9	; 0x09
    140a:	c8 84       	ldd	r12, Y+8	; 0x08
    140c:	df 80       	ldd	r13, Y+7	; 0x07
    140e:	ee 80       	ldd	r14, Y+6	; 0x06
    1410:	fd 80       	ldd	r15, Y+5	; 0x05
    1412:	0c 81       	ldd	r16, Y+4	; 0x04
    1414:	1b 81       	ldd	r17, Y+3	; 0x03
    1416:	aa 81       	ldd	r26, Y+2	; 0x02
    1418:	b9 81       	ldd	r27, Y+1	; 0x01
    141a:	ce 0f       	add	r28, r30
    141c:	d1 1d       	adc	r29, r1
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	ed 01       	movw	r28, r26
    142a:	08 95       	ret

0000142c <isspace>:
    142c:	91 11       	cpse	r25, r1
    142e:	fe c0       	rjmp	.+508    	; 0x162c <__ctype_isfalse>
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	19 f0       	breq	.+6      	; 0x143a <isspace+0xe>
    1434:	89 50       	subi	r24, 0x09	; 9
    1436:	85 50       	subi	r24, 0x05	; 5
    1438:	d0 f7       	brcc	.-12     	; 0x142e <isspace+0x2>
    143a:	08 95       	ret

0000143c <strchr_P>:
    143c:	fc 01       	movw	r30, r24
    143e:	05 90       	lpm	r0, Z+
    1440:	06 16       	cp	r0, r22
    1442:	21 f0       	breq	.+8      	; 0x144c <strchr_P+0x10>
    1444:	00 20       	and	r0, r0
    1446:	d9 f7       	brne	.-10     	; 0x143e <strchr_P+0x2>
    1448:	c0 01       	movw	r24, r0
    144a:	08 95       	ret
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	cf 01       	movw	r24, r30
    1450:	08 95       	ret

00001452 <fgetc>:
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	20 ff       	sbrs	r18, 0
    145c:	33 c0       	rjmp	.+102    	; 0x14c4 <fgetc+0x72>
    145e:	26 ff       	sbrs	r18, 6
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <fgetc+0x24>
    1462:	2f 7b       	andi	r18, 0xBF	; 191
    1464:	2b 83       	std	Y+3, r18	; 0x03
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	9f 83       	std	Y+7, r25	; 0x07
    146e:	8e 83       	std	Y+6, r24	; 0x06
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	29 c0       	rjmp	.+82     	; 0x14c8 <fgetc+0x76>
    1476:	22 ff       	sbrs	r18, 2
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <fgetc+0x46>
    147a:	e8 81       	ld	r30, Y
    147c:	f9 81       	ldd	r31, Y+1	; 0x01
    147e:	80 81       	ld	r24, Z
    1480:	08 2e       	mov	r0, r24
    1482:	00 0c       	add	r0, r0
    1484:	99 0b       	sbc	r25, r25
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	19 f4       	brne	.+6      	; 0x1490 <fgetc+0x3e>
    148a:	20 62       	ori	r18, 0x20	; 32
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	1a c0       	rjmp	.+52     	; 0x14c4 <fgetc+0x72>
    1490:	31 96       	adiw	r30, 0x01	; 1
    1492:	f9 83       	std	Y+1, r31	; 0x01
    1494:	e8 83       	st	Y, r30
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <fgetc+0x62>
    1498:	ea 85       	ldd	r30, Y+10	; 0x0a
    149a:	fb 85       	ldd	r31, Y+11	; 0x0b
    149c:	09 95       	icall
    149e:	97 ff       	sbrs	r25, 7
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <fgetc+0x62>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	11 f0       	breq	.+4      	; 0x14ac <fgetc+0x5a>
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <fgetc+0x5c>
    14ac:	80 e1       	ldi	r24, 0x10	; 16
    14ae:	82 2b       	or	r24, r18
    14b0:	8b 83       	std	Y+3, r24	; 0x03
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <fgetc+0x72>
    14b4:	2e 81       	ldd	r18, Y+6	; 0x06
    14b6:	3f 81       	ldd	r19, Y+7	; 0x07
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	3f 83       	std	Y+7, r19	; 0x07
    14be:	2e 83       	std	Y+6, r18	; 0x06
    14c0:	99 27       	eor	r25, r25
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <fgetc+0x76>
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <fputc>:
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	fb 01       	movw	r30, r22
    14d8:	23 81       	ldd	r18, Z+3	; 0x03
    14da:	21 fd       	sbrc	r18, 1
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <fputc+0x16>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	28 c0       	rjmp	.+80     	; 0x1534 <fputc+0x66>
    14e4:	22 ff       	sbrs	r18, 2
    14e6:	16 c0       	rjmp	.+44     	; 0x1514 <fputc+0x46>
    14e8:	46 81       	ldd	r20, Z+6	; 0x06
    14ea:	57 81       	ldd	r21, Z+7	; 0x07
    14ec:	24 81       	ldd	r18, Z+4	; 0x04
    14ee:	35 81       	ldd	r19, Z+5	; 0x05
    14f0:	42 17       	cp	r20, r18
    14f2:	53 07       	cpc	r21, r19
    14f4:	44 f4       	brge	.+16     	; 0x1506 <fputc+0x38>
    14f6:	a0 81       	ld	r26, Z
    14f8:	b1 81       	ldd	r27, Z+1	; 0x01
    14fa:	9d 01       	movw	r18, r26
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	31 83       	std	Z+1, r19	; 0x01
    1502:	20 83       	st	Z, r18
    1504:	8c 93       	st	X, r24
    1506:	26 81       	ldd	r18, Z+6	; 0x06
    1508:	37 81       	ldd	r19, Z+7	; 0x07
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	37 83       	std	Z+7, r19	; 0x07
    1510:	26 83       	std	Z+6, r18	; 0x06
    1512:	10 c0       	rjmp	.+32     	; 0x1534 <fputc+0x66>
    1514:	eb 01       	movw	r28, r22
    1516:	09 2f       	mov	r16, r25
    1518:	18 2f       	mov	r17, r24
    151a:	00 84       	ldd	r0, Z+8	; 0x08
    151c:	f1 85       	ldd	r31, Z+9	; 0x09
    151e:	e0 2d       	mov	r30, r0
    1520:	09 95       	icall
    1522:	89 2b       	or	r24, r25
    1524:	e1 f6       	brne	.-72     	; 0x14de <fputc+0x10>
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	9f 83       	std	Y+7, r25	; 0x07
    152e:	8e 83       	std	Y+6, r24	; 0x06
    1530:	81 2f       	mov	r24, r17
    1532:	90 2f       	mov	r25, r16
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <ungetc>:
    153e:	fb 01       	movw	r30, r22
    1540:	23 81       	ldd	r18, Z+3	; 0x03
    1542:	20 ff       	sbrs	r18, 0
    1544:	12 c0       	rjmp	.+36     	; 0x156a <ungetc+0x2c>
    1546:	26 fd       	sbrc	r18, 6
    1548:	10 c0       	rjmp	.+32     	; 0x156a <ungetc+0x2c>
    154a:	8f 3f       	cpi	r24, 0xFF	; 255
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	93 07       	cpc	r25, r19
    1550:	61 f0       	breq	.+24     	; 0x156a <ungetc+0x2c>
    1552:	82 83       	std	Z+2, r24	; 0x02
    1554:	2f 7d       	andi	r18, 0xDF	; 223
    1556:	20 64       	ori	r18, 0x40	; 64
    1558:	23 83       	std	Z+3, r18	; 0x03
    155a:	26 81       	ldd	r18, Z+6	; 0x06
    155c:	37 81       	ldd	r19, Z+7	; 0x07
    155e:	21 50       	subi	r18, 0x01	; 1
    1560:	31 09       	sbc	r19, r1
    1562:	37 83       	std	Z+7, r19	; 0x07
    1564:	26 83       	std	Z+6, r18	; 0x06
    1566:	99 27       	eor	r25, r25
    1568:	08 95       	ret
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f ef       	ldi	r25, 0xFF	; 255
    156e:	08 95       	ret

00001570 <__ultoa_invert>:
    1570:	fa 01       	movw	r30, r20
    1572:	aa 27       	eor	r26, r26
    1574:	28 30       	cpi	r18, 0x08	; 8
    1576:	51 f1       	breq	.+84     	; 0x15cc <__ultoa_invert+0x5c>
    1578:	20 31       	cpi	r18, 0x10	; 16
    157a:	81 f1       	breq	.+96     	; 0x15dc <__ultoa_invert+0x6c>
    157c:	e8 94       	clt
    157e:	6f 93       	push	r22
    1580:	6e 7f       	andi	r22, 0xFE	; 254
    1582:	6e 5f       	subi	r22, 0xFE	; 254
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	af 4f       	sbci	r26, 0xFF	; 255
    158c:	b1 e0       	ldi	r27, 0x01	; 1
    158e:	3e d0       	rcall	.+124    	; 0x160c <__ultoa_invert+0x9c>
    1590:	b4 e0       	ldi	r27, 0x04	; 4
    1592:	3c d0       	rcall	.+120    	; 0x160c <__ultoa_invert+0x9c>
    1594:	67 0f       	add	r22, r23
    1596:	78 1f       	adc	r23, r24
    1598:	89 1f       	adc	r24, r25
    159a:	9a 1f       	adc	r25, r26
    159c:	a1 1d       	adc	r26, r1
    159e:	68 0f       	add	r22, r24
    15a0:	79 1f       	adc	r23, r25
    15a2:	8a 1f       	adc	r24, r26
    15a4:	91 1d       	adc	r25, r1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	6a 0f       	add	r22, r26
    15aa:	71 1d       	adc	r23, r1
    15ac:	81 1d       	adc	r24, r1
    15ae:	91 1d       	adc	r25, r1
    15b0:	a1 1d       	adc	r26, r1
    15b2:	20 d0       	rcall	.+64     	; 0x15f4 <__ultoa_invert+0x84>
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__ultoa_invert+0x48>
    15b6:	68 94       	set
    15b8:	3f 91       	pop	r19
    15ba:	2a e0       	ldi	r18, 0x0A	; 10
    15bc:	26 9f       	mul	r18, r22
    15be:	11 24       	eor	r1, r1
    15c0:	30 19       	sub	r19, r0
    15c2:	30 5d       	subi	r19, 0xD0	; 208
    15c4:	31 93       	st	Z+, r19
    15c6:	de f6       	brtc	.-74     	; 0x157e <__ultoa_invert+0xe>
    15c8:	cf 01       	movw	r24, r30
    15ca:	08 95       	ret
    15cc:	46 2f       	mov	r20, r22
    15ce:	47 70       	andi	r20, 0x07	; 7
    15d0:	40 5d       	subi	r20, 0xD0	; 208
    15d2:	41 93       	st	Z+, r20
    15d4:	b3 e0       	ldi	r27, 0x03	; 3
    15d6:	0f d0       	rcall	.+30     	; 0x15f6 <__ultoa_invert+0x86>
    15d8:	c9 f7       	brne	.-14     	; 0x15cc <__ultoa_invert+0x5c>
    15da:	f6 cf       	rjmp	.-20     	; 0x15c8 <__ultoa_invert+0x58>
    15dc:	46 2f       	mov	r20, r22
    15de:	4f 70       	andi	r20, 0x0F	; 15
    15e0:	40 5d       	subi	r20, 0xD0	; 208
    15e2:	4a 33       	cpi	r20, 0x3A	; 58
    15e4:	18 f0       	brcs	.+6      	; 0x15ec <__ultoa_invert+0x7c>
    15e6:	49 5d       	subi	r20, 0xD9	; 217
    15e8:	31 fd       	sbrc	r19, 1
    15ea:	40 52       	subi	r20, 0x20	; 32
    15ec:	41 93       	st	Z+, r20
    15ee:	02 d0       	rcall	.+4      	; 0x15f4 <__ultoa_invert+0x84>
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__ultoa_invert+0x6c>
    15f2:	ea cf       	rjmp	.-44     	; 0x15c8 <__ultoa_invert+0x58>
    15f4:	b4 e0       	ldi	r27, 0x04	; 4
    15f6:	a6 95       	lsr	r26
    15f8:	97 95       	ror	r25
    15fa:	87 95       	ror	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	ba 95       	dec	r27
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__ultoa_invert+0x86>
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	61 05       	cpc	r22, r1
    1608:	71 05       	cpc	r23, r1
    160a:	08 95       	ret
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	0a 2e       	mov	r0, r26
    1612:	06 94       	lsr	r0
    1614:	57 95       	ror	r21
    1616:	47 95       	ror	r20
    1618:	37 95       	ror	r19
    161a:	27 95       	ror	r18
    161c:	ba 95       	dec	r27
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__ultoa_invert+0xa2>
    1620:	62 0f       	add	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	84 1f       	adc	r24, r20
    1626:	95 1f       	adc	r25, r21
    1628:	a0 1d       	adc	r26, r0
    162a:	08 95       	ret

0000162c <__ctype_isfalse>:
    162c:	99 27       	eor	r25, r25
    162e:	88 27       	eor	r24, r24

00001630 <__ctype_istrue>:
    1630:	08 95       	ret

00001632 <_exit>:
    1632:	f8 94       	cli

00001634 <__stop_program>:
    1634:	ff cf       	rjmp	.-2      	; 0x1634 <__stop_program>
