   1               		.file	"chvt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._vt_init,"ax",@progbits
  11               	.global	_vt_init
  13               	_vt_init:
  14               	.LFB130:
  15               		.file 1 "../../../os/rt/src/chvt.c"
   1:../../../os/rt/src/chvt.c **** /*
   2:../../../os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:../../../os/rt/src/chvt.c **** 
   4:../../../os/rt/src/chvt.c ****     This file is part of ChibiOS.
   5:../../../os/rt/src/chvt.c **** 
   6:../../../os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:../../../os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   8:../../../os/rt/src/chvt.c ****     the Free Software Foundation; either version 3 of the License, or
   9:../../../os/rt/src/chvt.c ****     (at your option) any later version.
  10:../../../os/rt/src/chvt.c **** 
  11:../../../os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chvt.c **** 
  16:../../../os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chvt.c **** */
  19:../../../os/rt/src/chvt.c **** 
  20:../../../os/rt/src/chvt.c **** /**
  21:../../../os/rt/src/chvt.c ****  * @file    chvt.c
  22:../../../os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:../../../os/rt/src/chvt.c ****  *
  24:../../../os/rt/src/chvt.c ****  * @addtogroup time
  25:../../../os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:../../../os/rt/src/chvt.c ****  * @{
  27:../../../os/rt/src/chvt.c ****  */
  28:../../../os/rt/src/chvt.c **** 
  29:../../../os/rt/src/chvt.c **** #include "ch.h"
  30:../../../os/rt/src/chvt.c **** 
  31:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  32:../../../os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  33:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  34:../../../os/rt/src/chvt.c **** 
  35:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  36:../../../os/rt/src/chvt.c **** /* Module exported variables.                                                */
  37:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  38:../../../os/rt/src/chvt.c **** 
  39:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  40:../../../os/rt/src/chvt.c **** /* Module local types.                                                       */
  41:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  42:../../../os/rt/src/chvt.c **** 
  43:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  44:../../../os/rt/src/chvt.c **** /* Module local variables.                                                   */
  45:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  46:../../../os/rt/src/chvt.c **** 
  47:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  48:../../../os/rt/src/chvt.c **** /* Module local functions.                                                   */
  49:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  50:../../../os/rt/src/chvt.c **** 
  51:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  52:../../../os/rt/src/chvt.c **** /* Module exported functions.                                                */
  53:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  54:../../../os/rt/src/chvt.c **** 
  55:../../../os/rt/src/chvt.c **** /**
  56:../../../os/rt/src/chvt.c ****  * @brief   Virtual Timers initialization.
  57:../../../os/rt/src/chvt.c ****  * @note    Internal use only.
  58:../../../os/rt/src/chvt.c ****  *
  59:../../../os/rt/src/chvt.c ****  * @notapi
  60:../../../os/rt/src/chvt.c ****  */
  61:../../../os/rt/src/chvt.c **** void _vt_init(void) {
  16               		.loc 1 61 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  62:../../../os/rt/src/chvt.c **** 
  63:../../../os/rt/src/chvt.c ****   ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  22               		.loc 1 63 0
  23 0000 E0E0      		ldi r30,lo8(ch)
  24 0002 F0E0      		ldi r31,hi8(ch)
  25 0004 80E0      		ldi r24,lo8(ch+13)
  26 0006 90E0      		ldi r25,hi8(ch+13)
  27 0008 9687      		std Z+14,r25
  28 000a 8587      		std Z+13,r24
  64:../../../os/rt/src/chvt.c ****   ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  29               		.loc 1 64 0
  30 000c 908B      		std Z+16,r25
  31 000e 8787      		std Z+15,r24
  65:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (sysinterval_t)-1;
  32               		.loc 1 65 0
  33 0010 8FEF      		ldi r24,lo8(-1)
  34 0012 9FEF      		ldi r25,lo8(-1)
  35 0014 928B      		std Z+18,r25
  36 0016 818B      		std Z+17,r24
  66:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
  67:../../../os/rt/src/chvt.c ****   ch.vtlist.systime = (systime_t)0;
  37               		.loc 1 67 0
  38 0018 148A      		std Z+20,__zero_reg__
  39 001a 138A      		std Z+19,__zero_reg__
  40 001c 0895      		ret
  41               		.cfi_endproc
  42               	.LFE130:
  44               		.section	.text.chVTDoSetI,"ax",@progbits
  45               	.global	chVTDoSetI
  47               	chVTDoSetI:
  48               	.LFB131:
  68:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
  69:../../../os/rt/src/chvt.c ****   ch.vtlist.lasttime = (systime_t)0;
  70:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
  71:../../../os/rt/src/chvt.c **** }
  72:../../../os/rt/src/chvt.c **** 
  73:../../../os/rt/src/chvt.c **** /**
  74:../../../os/rt/src/chvt.c ****  * @brief   Enables a virtual timer.
  75:../../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
  76:../../../os/rt/src/chvt.c ****  *          specified as parameter.
  77:../../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
  78:../../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
  79:../../../os/rt/src/chvt.c ****  *
  80:../../../os/rt/src/chvt.c ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  81:../../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
  82:../../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
  83:../../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
  84:../../../os/rt/src/chvt.c ****  *                        normal time specification.
  85:../../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
  86:../../../os/rt/src/chvt.c ****  *                      .
  87:../../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
  88:../../../os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
  89:../../../os/rt/src/chvt.c ****  *                      be disposed or reused.
  90:../../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
  91:../../../os/rt/src/chvt.c ****  *                      function
  92:../../../os/rt/src/chvt.c ****  *
  93:../../../os/rt/src/chvt.c ****  * @iclass
  94:../../../os/rt/src/chvt.c ****  */
  95:../../../os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  96:../../../os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
  49               		.loc 1 96 0
  50               		.cfi_startproc
  51               	.LVL0:
  52 0000 CF93      		push r28
  53               	.LCFI0:
  54               		.cfi_def_cfa_offset 3
  55               		.cfi_offset 28, -2
  56 0002 DF93      		push r29
  57               	.LCFI1:
  58               		.cfi_def_cfa_offset 4
  59               		.cfi_offset 29, -3
  60               	/* prologue: function */
  61               	/* frame size = 0 */
  62               	/* stack size = 2 */
  63               	.L__stack_usage = 2
  64 0004 DC01      		movw r26,r24
  97:../../../os/rt/src/chvt.c ****   virtual_timer_t *p;
  98:../../../os/rt/src/chvt.c ****   sysinterval_t delta;
  99:../../../os/rt/src/chvt.c **** 
 100:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 101:../../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 102:../../../os/rt/src/chvt.c **** 
 103:../../../os/rt/src/chvt.c ****   vtp->par = par;
  65               		.loc 1 103 0
  66 0006 1996      		adiw r26,8+1
  67 0008 3C93      		st X,r19
  68 000a 2E93      		st -X,r18
  69 000c 1897      		sbiw r26,8
 104:../../../os/rt/src/chvt.c ****   vtp->func = vtfunc;
  70               		.loc 1 104 0
  71 000e 1796      		adiw r26,6+1
  72 0010 5C93      		st X,r21
  73 0012 4E93      		st -X,r20
  74 0014 1697      		sbiw r26,6
  75               	.LVL1:
 105:../../../os/rt/src/chvt.c **** 
 106:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 107:../../../os/rt/src/chvt.c ****   {
 108:../../../os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
 109:../../../os/rt/src/chvt.c **** 
 110:../../../os/rt/src/chvt.c ****     /* If the requested delay is lower than the minimum safe delta then it
 111:../../../os/rt/src/chvt.c ****        is raised to the minimum safe value.*/
 112:../../../os/rt/src/chvt.c ****     if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 113:../../../os/rt/src/chvt.c ****       delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 114:../../../os/rt/src/chvt.c ****     }
 115:../../../os/rt/src/chvt.c **** 
 116:../../../os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 117:../../../os/rt/src/chvt.c ****     if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 118:../../../os/rt/src/chvt.c **** 
 119:../../../os/rt/src/chvt.c ****       /* The delta list is empty, the current time becomes the new
 120:../../../os/rt/src/chvt.c ****          delta list base time, the timer is inserted.*/
 121:../../../os/rt/src/chvt.c ****       ch.vtlist.lasttime = now;
 122:../../../os/rt/src/chvt.c ****       ch.vtlist.next = vtp;
 123:../../../os/rt/src/chvt.c ****       ch.vtlist.prev = vtp;
 124:../../../os/rt/src/chvt.c ****       vtp->next = (virtual_timer_t *)&ch.vtlist;
 125:../../../os/rt/src/chvt.c ****       vtp->prev = (virtual_timer_t *)&ch.vtlist;
 126:../../../os/rt/src/chvt.c ****       vtp->delta = delay;
 127:../../../os/rt/src/chvt.c **** 
 128:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 129:../../../os/rt/src/chvt.c ****       /* The delta could be too large for the physical timer to handle.*/
 130:../../../os/rt/src/chvt.c ****       if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 131:../../../os/rt/src/chvt.c ****         delay = (sysinterval_t)TIME_MAX_SYSTIME;
 132:../../../os/rt/src/chvt.c ****       }
 133:../../../os/rt/src/chvt.c **** #endif
 134:../../../os/rt/src/chvt.c **** 
 135:../../../os/rt/src/chvt.c ****       /* Being the first element in the list the alarm timer is started.*/
 136:../../../os/rt/src/chvt.c ****       port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 137:../../../os/rt/src/chvt.c **** 
 138:../../../os/rt/src/chvt.c ****       return;
 139:../../../os/rt/src/chvt.c ****     }
 140:../../../os/rt/src/chvt.c **** 
 141:../../../os/rt/src/chvt.c ****     /* Pointer to the first element in the delta list, which is non-empty.*/
 142:../../../os/rt/src/chvt.c ****     p = ch.vtlist.next;
 143:../../../os/rt/src/chvt.c **** 
 144:../../../os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 145:../../../os/rt/src/chvt.c ****        becomes lower than 'now'.*/
 146:../../../os/rt/src/chvt.c ****     delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 147:../../../os/rt/src/chvt.c **** 
 148:../../../os/rt/src/chvt.c ****     if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 149:../../../os/rt/src/chvt.c ****       /* Scenario where a very large delay excedeed the numeric range, it
 150:../../../os/rt/src/chvt.c ****          requires a special handling. We need to skip the first element and
 151:../../../os/rt/src/chvt.c ****          adjust the delta to wrap back in the previous numeric range.*/
 152:../../../os/rt/src/chvt.c ****       delta -= p->delta;
 153:../../../os/rt/src/chvt.c ****       p = p->next;
 154:../../../os/rt/src/chvt.c ****     }
 155:../../../os/rt/src/chvt.c ****     else if (delta < p->delta) {
 156:../../../os/rt/src/chvt.c ****       sysinterval_t deadline_delta;
 157:../../../os/rt/src/chvt.c **** 
 158:../../../os/rt/src/chvt.c ****       /* A small delay that will become the first element in the delta list
 159:../../../os/rt/src/chvt.c ****          and next deadline.*/
 160:../../../os/rt/src/chvt.c ****       deadline_delta = delta;
 161:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 162:../../../os/rt/src/chvt.c ****       /* The delta could be too large for the physical timer to handle.*/
 163:../../../os/rt/src/chvt.c ****       if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 164:../../../os/rt/src/chvt.c ****         deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
 165:../../../os/rt/src/chvt.c ****       }
 166:../../../os/rt/src/chvt.c **** #endif
 167:../../../os/rt/src/chvt.c ****       port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 168:../../../os/rt/src/chvt.c ****     }
 169:../../../os/rt/src/chvt.c ****   }
 170:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 171:../../../os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 172:../../../os/rt/src/chvt.c ****   delta = delay;
 173:../../../os/rt/src/chvt.c **** 
 174:../../../os/rt/src/chvt.c ****   /* Pointer to the first element in the delta list.*/
 175:../../../os/rt/src/chvt.c ****   p = ch.vtlist.next;
  76               		.loc 1 175 0
  77 0016 E091 0000 		lds r30,ch+13
  78 001a F091 0000 		lds r31,ch+13+1
  79               	.LVL2:
 176:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 177:../../../os/rt/src/chvt.c **** 
 178:../../../os/rt/src/chvt.c ****   /* The delta list is scanned in order to find the correct position for
 179:../../../os/rt/src/chvt.c ****      this timer. */
 180:../../../os/rt/src/chvt.c ****   while (p->delta < delta) {
  80               		.loc 1 180 0
  81 001e 2481      		ldd r18,Z+4
  82 0020 3581      		ldd r19,Z+5
  83               	.LVL3:
  84 0022 2617      		cp r18,r22
  85 0024 3707      		cpc r19,r23
  86 0026 00F4      		brsh .L3
  87               	.LVL4:
  88               	.L4:
 181:../../../os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
 182:../../../os/rt/src/chvt.c ****     chDbgAssert(p != vtp, "timer already armed");
 183:../../../os/rt/src/chvt.c **** 
 184:../../../os/rt/src/chvt.c ****     delta -= p->delta;
  89               		.loc 1 184 0
  90 0028 621B      		sub r22,r18
  91 002a 730B      		sbc r23,r19
  92               	.LVL5:
 185:../../../os/rt/src/chvt.c ****     p = p->next;
  93               		.loc 1 185 0
  94 002c 0190      		ld __tmp_reg__,Z+
  95 002e F081      		ld r31,Z
  96 0030 E02D      		mov r30,__tmp_reg__
  97               	.LVL6:
 180:../../../os/rt/src/chvt.c ****     /* Debug assert if the timer is already in the list.*/
  98               		.loc 1 180 0
  99 0032 2481      		ldd r18,Z+4
 100 0034 3581      		ldd r19,Z+5
 101 0036 2617      		cp r18,r22
 102 0038 3707      		cpc r19,r23
 103 003a 00F0      		brlo .L4
 104               	.L3:
 186:../../../os/rt/src/chvt.c ****   }
 187:../../../os/rt/src/chvt.c **** 
 188:../../../os/rt/src/chvt.c ****   /* The timer is inserted in the delta list.*/
 189:../../../os/rt/src/chvt.c ****   vtp->next = p;
 105               		.loc 1 189 0
 106 003c 1196      		adiw r26,1
 107 003e FC93      		st X,r31
 108 0040 EE93      		st -X,r30
 190:../../../os/rt/src/chvt.c ****   vtp->prev = vtp->next->prev;
 109               		.loc 1 190 0
 110 0042 C281      		ldd r28,Z+2
 111 0044 D381      		ldd r29,Z+3
 112 0046 1396      		adiw r26,2+1
 113 0048 DC93      		st X,r29
 114 004a CE93      		st -X,r28
 115 004c 1297      		sbiw r26,2
 191:../../../os/rt/src/chvt.c ****   vtp->prev->next = vtp;
 116               		.loc 1 191 0
 117 004e B983      		std Y+1,r27
 118 0050 A883      		st Y,r26
 192:../../../os/rt/src/chvt.c ****   p->prev = vtp;
 119               		.loc 1 192 0
 120 0052 B383      		std Z+3,r27
 121 0054 A283      		std Z+2,r26
 193:../../../os/rt/src/chvt.c ****   vtp->delta = delta;
 122               		.loc 1 193 0
 123 0056 1596      		adiw r26,4+1
 124 0058 7C93      		st X,r23
 125 005a 6E93      		st -X,r22
 126 005c 1497      		sbiw r26,4
 194:../../../os/rt/src/chvt.c **** 
 195:../../../os/rt/src/chvt.c ****   /* Calculate new delta for the following entry.*/
 196:../../../os/rt/src/chvt.c ****   p->delta -= delta;
 127               		.loc 1 196 0
 128 005e 8481      		ldd r24,Z+4
 129 0060 9581      		ldd r25,Z+5
 130               	.LVL7:
 131 0062 861B      		sub r24,r22
 132 0064 970B      		sbc r25,r23
 133 0066 9583      		std Z+5,r25
 134 0068 8483      		std Z+4,r24
 197:../../../os/rt/src/chvt.c **** 
 198:../../../os/rt/src/chvt.c ****   /* Special case when the timer is in last position in the list, the
 199:../../../os/rt/src/chvt.c ****      value in the header must be restored.*/
 200:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (sysinterval_t)-1;
 135               		.loc 1 200 0
 136 006a 8FEF      		ldi r24,lo8(-1)
 137 006c 9FEF      		ldi r25,lo8(-1)
 138 006e 9093 0000 		sts ch+17+1,r25
 139 0072 8093 0000 		sts ch+17,r24
 140               	/* epilogue start */
 201:../../../os/rt/src/chvt.c **** }
 141               		.loc 1 201 0
 142 0076 DF91      		pop r29
 143 0078 CF91      		pop r28
 144 007a 0895      		ret
 145               		.cfi_endproc
 146               	.LFE131:
 148               		.section	.text.chVTDoResetI,"ax",@progbits
 149               	.global	chVTDoResetI
 151               	chVTDoResetI:
 152               	.LFB132:
 202:../../../os/rt/src/chvt.c **** 
 203:../../../os/rt/src/chvt.c **** /**
 204:../../../os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 205:../../../os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 206:../../../os/rt/src/chvt.c ****  *
 207:../../../os/rt/src/chvt.c ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 208:../../../os/rt/src/chvt.c ****  *
 209:../../../os/rt/src/chvt.c ****  * @iclass
 210:../../../os/rt/src/chvt.c ****  */
 211:../../../os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 153               		.loc 1 211 0
 154               		.cfi_startproc
 155               	.LVL8:
 156 0000 CF93      		push r28
 157               	.LCFI2:
 158               		.cfi_def_cfa_offset 3
 159               		.cfi_offset 28, -2
 160 0002 DF93      		push r29
 161               	.LCFI3:
 162               		.cfi_def_cfa_offset 4
 163               		.cfi_offset 29, -3
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 2 */
 167               	.L__stack_usage = 2
 168 0004 FC01      		movw r30,r24
 212:../../../os/rt/src/chvt.c **** 
 213:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 214:../../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 215:../../../os/rt/src/chvt.c ****   chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 216:../../../os/rt/src/chvt.c **** 
 217:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 218:../../../os/rt/src/chvt.c **** 
 219:../../../os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 220:../../../os/rt/src/chvt.c ****   vtp->next->delta += vtp->delta;
 169               		.loc 1 220 0
 170 0006 A081      		ld r26,Z
 171 0008 B181      		ldd r27,Z+1
 172 000a 1496      		adiw r26,4
 173 000c 2D91      		ld r18,X+
 174 000e 3C91      		ld r19,X
 175 0010 1597      		sbiw r26,4+1
 176 0012 8481      		ldd r24,Z+4
 177 0014 9581      		ldd r25,Z+5
 178               	.LVL9:
 179 0016 820F      		add r24,r18
 180 0018 931F      		adc r25,r19
 181 001a 1596      		adiw r26,4+1
 182 001c 9C93      		st X,r25
 183 001e 8E93      		st -X,r24
 184 0020 1497      		sbiw r26,4
 221:../../../os/rt/src/chvt.c **** 
 222:../../../os/rt/src/chvt.c ****  /* Removing the element from the delta list.*/
 223:../../../os/rt/src/chvt.c ****   vtp->prev->next = vtp->next;
 185               		.loc 1 223 0
 186 0022 C281      		ldd r28,Z+2
 187 0024 D381      		ldd r29,Z+3
 188 0026 B983      		std Y+1,r27
 189 0028 A883      		st Y,r26
 224:../../../os/rt/src/chvt.c ****   vtp->next->prev = vtp->prev;
 190               		.loc 1 224 0
 191 002a A081      		ld r26,Z
 192 002c B181      		ldd r27,Z+1
 193 002e 1396      		adiw r26,2+1
 194 0030 DC93      		st X,r29
 195 0032 CE93      		st -X,r28
 196 0034 1297      		sbiw r26,2
 225:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 197               		.loc 1 225 0
 198 0036 1782      		std Z+7,__zero_reg__
 199 0038 1682      		std Z+6,__zero_reg__
 226:../../../os/rt/src/chvt.c **** 
 227:../../../os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 228:../../../os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 229:../../../os/rt/src/chvt.c ****   ch.vtlist.delta = (sysinterval_t)-1;
 200               		.loc 1 229 0
 201 003a 8FEF      		ldi r24,lo8(-1)
 202 003c 9FEF      		ldi r25,lo8(-1)
 203 003e 9093 0000 		sts ch+17+1,r25
 204 0042 8093 0000 		sts ch+17,r24
 205               	/* epilogue start */
 230:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 231:../../../os/rt/src/chvt.c ****   sysinterval_t nowdelta, delta;
 232:../../../os/rt/src/chvt.c **** 
 233:../../../os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 234:../../../os/rt/src/chvt.c ****      else the operation is more complex.*/
 235:../../../os/rt/src/chvt.c ****   if (ch.vtlist.next != vtp) {
 236:../../../os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 237:../../../os/rt/src/chvt.c ****     vtp->prev->next = vtp->next;
 238:../../../os/rt/src/chvt.c ****     vtp->next->prev = vtp->prev;
 239:../../../os/rt/src/chvt.c ****     vtp->func = NULL;
 240:../../../os/rt/src/chvt.c **** 
 241:../../../os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 242:../../../os/rt/src/chvt.c ****     if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 243:../../../os/rt/src/chvt.c ****       vtp->next->delta += vtp->delta;
 244:../../../os/rt/src/chvt.c **** 
 245:../../../os/rt/src/chvt.c ****     return;
 246:../../../os/rt/src/chvt.c ****   }
 247:../../../os/rt/src/chvt.c **** 
 248:../../../os/rt/src/chvt.c ****   /* Removing the first timer from the list.*/
 249:../../../os/rt/src/chvt.c ****   ch.vtlist.next = vtp->next;
 250:../../../os/rt/src/chvt.c ****   ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 251:../../../os/rt/src/chvt.c ****   vtp->func = NULL;
 252:../../../os/rt/src/chvt.c **** 
 253:../../../os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 254:../../../os/rt/src/chvt.c ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 255:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 256:../../../os/rt/src/chvt.c **** 
 257:../../../os/rt/src/chvt.c ****     return;
 258:../../../os/rt/src/chvt.c ****   }
 259:../../../os/rt/src/chvt.c **** 
 260:../../../os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 261:../../../os/rt/src/chvt.c ****   ch.vtlist.next->delta += vtp->delta;
 262:../../../os/rt/src/chvt.c **** 
 263:../../../os/rt/src/chvt.c ****   /* If the new first timer has a delta of zero then the alarm is not
 264:../../../os/rt/src/chvt.c ****      modified, the already programmed alarm will serve it.*/
 265:../../../os/rt/src/chvt.c **** /*  if (ch.vtlist.next->delta == 0) {
 266:../../../os/rt/src/chvt.c ****     return;
 267:../../../os/rt/src/chvt.c ****   }*/
 268:../../../os/rt/src/chvt.c **** 
 269:../../../os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 270:../../../os/rt/src/chvt.c ****   nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 271:../../../os/rt/src/chvt.c **** 
 272:../../../os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 273:../../../os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 274:../../../os/rt/src/chvt.c ****   if (nowdelta >= ch.vtlist.next->delta) {
 275:../../../os/rt/src/chvt.c ****     return;
 276:../../../os/rt/src/chvt.c ****   }
 277:../../../os/rt/src/chvt.c **** 
 278:../../../os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 279:../../../os/rt/src/chvt.c ****   delta = ch.vtlist.next->delta - nowdelta;
 280:../../../os/rt/src/chvt.c **** 
 281:../../../os/rt/src/chvt.c ****   /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
 282:../../../os/rt/src/chvt.c ****      ticks from now.*/
 283:../../../os/rt/src/chvt.c ****   if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 284:../../../os/rt/src/chvt.c ****     delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 285:../../../os/rt/src/chvt.c ****   }
 286:../../../os/rt/src/chvt.c ****   else {
 287:../../../os/rt/src/chvt.c ****     delta = nowdelta + delta;
 288:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 289:../../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle.*/
 290:../../../os/rt/src/chvt.c ****     if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 291:../../../os/rt/src/chvt.c ****       delta = (sysinterval_t)TIME_MAX_SYSTIME;
 292:../../../os/rt/src/chvt.c ****     }
 293:../../../os/rt/src/chvt.c **** #endif
 294:../../../os/rt/src/chvt.c ****   }
 295:../../../os/rt/src/chvt.c ****   port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 296:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 297:../../../os/rt/src/chvt.c **** }
 206               		.loc 1 297 0
 207 0046 DF91      		pop r29
 208 0048 CF91      		pop r28
 209 004a 0895      		ret
 210               		.cfi_endproc
 211               	.LFE132:
 213               		.text
 214               	.Letext0:
 215               		.file 2 "/usr/lib/avr/include/stdint.h"
 216               		.file 3 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 217               		.file 4 "../../../os/rt/include/chsystypes.h"
 218               		.file 5 "../../../os/rt/include/chschd.h"
 219               		.file 6 "../../../os/rt/include/chtime.h"
 220               		.file 7 "../../../os/common/ports/AVR/chcore.h"
 221               		.file 8 "../../../os/rt/include/chsem.h"
 222               		.file 9 "../../../os/rt/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
     /tmp/ccyEKzQU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccyEKzQU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccyEKzQU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccyEKzQU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccyEKzQU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccyEKzQU.s:13     .text._vt_init:0000000000000000 _vt_init
     /tmp/ccyEKzQU.s:47     .text.chVTDoSetI:0000000000000000 chVTDoSetI
     /tmp/ccyEKzQU.s:151    .text.chVTDoResetI:0000000000000000 chVTDoResetI

UNDEFINED SYMBOLS
ch
