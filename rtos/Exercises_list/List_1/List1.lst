GAS LISTING /tmp/ccq97VhN.s 			page 1


   1               		.file	"List1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/geraldobraz/Documentos/UFPE/embedded-systems/rtos/Exercises_list/List_1/",100,0,2,.L
   8               		.stabs	"List1.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccq97VhN.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.9.2/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"uartInit:F(0,47)",36,0,34,uartInit
 103               	.global	uartInit
 104               		.type	uartInit, @function
 105               	uartInit:
 106               		.stabd	46,0,0
   1:List1.c       **** /* Atividade da Lista 1
   2:List1.c       ****     Faça um programa para o Arduino que receba um comando pela porta serial e ative o pino conecta
   3:List1.c       ****     Conecte a saída "echo" do ultrassom ao pino INT0 e configure sua interrupção para detectar o
   4:List1.c       ****     No programa principal, ao detectar a flag ativada, envie um byte com valor 48 pela porta serial
   5:List1.c       **** */
   6:List1.c       **** 
   7:List1.c       **** //***********************************//
   8:List1.c       **** // Includes
GAS LISTING /tmp/ccq97VhN.s 			page 3


   9:List1.c       ****     #include <avr/io.h>
  10:List1.c       ****     #include <avr/cpufunc.h>
  11:List1.c       ****     #include <avr/interrupt.h>
  12:List1.c       ****     #include <util/delay.h>
  13:List1.c       **** //"/usr/lib/avr/include/avr"
  14:List1.c       **** //***********************************//
  15:List1.c       **** // Defines
  16:List1.c       ****     #define FOSC 16000000ul  // Clock Speed
  17:List1.c       ****     #define BAUD 115200      // Baudrate
  18:List1.c       ****     #define BAUDRATE (FOSC/(8ul*BAUD) - 1) 
  19:List1.c       ****     #define BUFFER_SIZE 200   // USART buffer size
  20:List1.c       **** 
  21:List1.c       **** //***********************************//
  22:List1.c       **** 
  23:List1.c       **** //***********************************//
  24:List1.c       **** // Global Variables
  25:List1.c       ****     volatile uint8_t flag; 
  26:List1.c       ****     uint8_t tx_buffer[BUFFER_SIZE];     /* buffer para transmissão */
  27:List1.c       ****     uint8_t tx_head, tx_tail;   /* ponteiros para o buffer circular */
  28:List1.c       ****     uint8_t usart_transmitting;
  29:List1.c       **** //***********************************//
  30:List1.c       **** 
  31:List1.c       **** // ********* Configurations *********//
  32:List1.c       ****     //***********************************//
  33:List1.c       ****     // Uart
  34:List1.c       ****         void uartInit(){
 107               		.stabn	68,0,34,.LM0-.LFBB1
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  35:List1.c       ****             // Configuration of Uart Transmition RX-TX
  36:List1.c       ****             DDRD |= (1 << PD1); // Configure Tx as Output
 114               		.stabn	68,0,36,.LM1-.LFBB1
 115               	.LM1:
 116 0000 519A      		sbi 0xa,1
  37:List1.c       ****             DDRD |= ~(1 << PD0); // Configure Rx as Input
 117               		.stabn	68,0,37,.LM2-.LFBB1
 118               	.LM2:
 119 0002 8AB1      		in r24,0xa
 120 0004 8E6F      		ori r24,lo8(-2)
 121 0006 8AB9      		out 0xa,r24
  38:List1.c       ****             
  39:List1.c       ****             // Configurate the Baudrate
  40:List1.c       ****             UBRR0H = (BAUDRATE >> 8);
 122               		.stabn	68,0,40,.LM3-.LFBB1
 123               	.LM3:
 124 0008 1092 C500 		sts 197,__zero_reg__
  41:List1.c       ****             UBRR0L = BAUDRATE;
 125               		.stabn	68,0,41,.LM4-.LFBB1
 126               	.LM4:
 127 000c 80E1      		ldi r24,lo8(16)
 128 000e 8093 C400 		sts 196,r24
  42:List1.c       ****             UCSR0A = (1 << U2X0);
 129               		.stabn	68,0,42,.LM5-.LFBB1
GAS LISTING /tmp/ccq97VhN.s 			page 4


 130               	.LM5:
 131 0012 82E0      		ldi r24,lo8(2)
 132 0014 8093 C000 		sts 192,r24
  43:List1.c       ****             UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 133               		.stabn	68,0,43,.LM6-.LFBB1
 134               	.LM6:
 135 0018 88E9      		ldi r24,lo8(-104)
 136 001a 8093 C100 		sts 193,r24
  44:List1.c       ****             UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 137               		.stabn	68,0,44,.LM7-.LFBB1
 138               	.LM7:
 139 001e 86E0      		ldi r24,lo8(6)
 140 0020 8093 C200 		sts 194,r24
 141 0024 0895      		ret
 142               		.size	uartInit, .-uartInit
 143               	.Lscope1:
 144               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 145               		.stabd	78,0,0
 146               		.stabs	"interruptInit:F(0,47)",36,0,50,interruptInit
 147               	.global	interruptInit
 148               		.type	interruptInit, @function
 149               	interruptInit:
 150               		.stabd	46,0,0
  45:List1.c       ****             
  46:List1.c       ****         }
  47:List1.c       **** 
  48:List1.c       ****         //***********************************//
  49:List1.c       ****     // Interruption
  50:List1.c       ****      void interruptInit(){
 151               		.stabn	68,0,50,.LM8-.LFBB2
 152               	.LM8:
 153               	.LFBB2:
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
  51:List1.c       ****             EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
 158               		.stabn	68,0,51,.LM9-.LFBB2
 159               	.LM9:
 160 0026 E9E6      		ldi r30,lo8(105)
 161 0028 F0E0      		ldi r31,0
 162 002a 8081      		ld r24,Z
 163 002c 8160      		ori r24,lo8(1)
 164 002e 8083      		st Z,r24
  52:List1.c       ****             EIMSK |= (1 << INT0);     // Turns on INT0
 165               		.stabn	68,0,52,.LM10-.LFBB2
 166               	.LM10:
 167 0030 E89A      		sbi 0x1d,0
  53:List1.c       ****             sei();                    // turn on interrupts
 168               		.stabn	68,0,53,.LM11-.LFBB2
 169               	.LM11:
 170               	/* #APP */
 171               	 ;  53 "List1.c" 1
 172 0032 7894      		sei
 173               	 ;  0 "" 2
 174               	/* #NOAPP */
 175 0034 0895      		ret
GAS LISTING /tmp/ccq97VhN.s 			page 5


 176               		.size	interruptInit, .-interruptInit
 177               	.Lscope2:
 178               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 179               		.stabd	78,0,0
 180               		.stabs	"systemInit:F(0,47)",36,0,57,systemInit
 181               	.global	systemInit
 182               		.type	systemInit, @function
 183               	systemInit:
 184               		.stabd	46,0,0
  54:List1.c       ****         } 
  55:List1.c       **** 
  56:List1.c       ****     // System 
  57:List1.c       ****         void systemInit(){
 185               		.stabn	68,0,57,.LM12-.LFBB3
 186               	.LM12:
 187               	.LFBB3:
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
  58:List1.c       ****             DDRB |= (1 << PB0); // Trigger as Output
 192               		.stabn	68,0,58,.LM13-.LFBB3
 193               	.LM13:
 194 0036 209A      		sbi 0x4,0
  59:List1.c       ****             DDRD &= ~(1 << PD2); // Echo as Input            
 195               		.stabn	68,0,59,.LM14-.LFBB3
 196               	.LM14:
 197 0038 5298      		cbi 0xa,2
 198 003a 0895      		ret
 199               		.size	systemInit, .-systemInit
 200               	.Lscope3:
 201               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 202               		.stabd	78,0,0
 203               		.stabs	"delay_ms:F(0,47)",36,0,67,delay_ms
 204               		.stabs	"ms:P(5,4)",64,0,67,24
 205               	.global	delay_ms
 206               		.type	delay_ms, @function
 207               	delay_ms:
 208               		.stabd	46,0,0
  60:List1.c       ****             // DDRB |= (1 << PB1); // Trigger as Output
  61:List1.c       ****             // DDRB |= (1 << PB2);
  62:List1.c       ****         }
  63:List1.c       ****        
  64:List1.c       ****     //***********************************//
  65:List1.c       ****     
  66:List1.c       ****     // Functions
  67:List1.c       ****         void delay_ms(uint16_t ms){
 209               		.stabn	68,0,67,.LM15-.LFBB4
 210               	.LM15:
 211               	.LFBB4:
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 0 */
 215               	.L__stack_usage = 0
  68:List1.c       ****             uint16_t i, j;
  69:List1.c       ****             for(i=0; i<ms; i++)
 216               		.stabn	68,0,69,.LM16-.LFBB4
GAS LISTING /tmp/ccq97VhN.s 			page 6


 217               	.LM16:
 218 003c 20E0      		ldi r18,0
 219 003e 30E0      		ldi r19,0
 220               	.L5:
 221               		.stabn	68,0,69,.LM17-.LFBB4
 222               	.LM17:
 223 0040 2817      		cp r18,r24
 224 0042 3907      		cpc r19,r25
 225 0044 01F0      		breq .L10
 226 0046 40EA      		ldi r20,lo8(-96)
 227 0048 5FE0      		ldi r21,lo8(15)
 228               	.L6:
  70:List1.c       ****                 for(j=0; j<4000; j++)
  71:List1.c       ****                     _NOP();
 229               		.stabn	68,0,71,.LM18-.LFBB4
 230               	.LM18:
 231               	/* #APP */
 232               	 ;  71 "List1.c" 1
 233 004a 0000      		nop
 234               	 ;  0 "" 2
 235               	/* #NOAPP */
 236 004c 4150      		subi r20,1
 237 004e 5109      		sbc r21,__zero_reg__
  70:List1.c       ****                 for(j=0; j<4000; j++)
 238               		.stabn	68,0,70,.LM19-.LFBB4
 239               	.LM19:
 240 0050 01F4      		brne .L6
  69:List1.c       ****                 for(j=0; j<4000; j++)
 241               		.stabn	68,0,69,.LM20-.LFBB4
 242               	.LM20:
 243 0052 2F5F      		subi r18,-1
 244 0054 3F4F      		sbci r19,-1
 245 0056 00C0      		rjmp .L5
 246               	.L10:
 247               	/* epilogue start */
  72:List1.c       ****         }
 248               		.stabn	68,0,72,.LM21-.LFBB4
 249               	.LM21:
 250 0058 0895      		ret
 251               		.size	delay_ms, .-delay_ms
 252               		.stabs	"i:r(5,4)",64,0,68,18
 253               		.stabn	192,0,0,.LFBB4-.LFBB4
 254               		.stabn	224,0,0,.Lscope4-.LFBB4
 255               	.Lscope4:
 256               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 257               		.stabd	78,0,0
 258               		.stabs	"write:F(5,2)",36,0,75,write
 259               		.stabs	"c:P(5,2)",64,0,75,24
 260               	.global	write
 261               		.type	write, @function
 262               	write:
 263               		.stabd	46,0,0
  73:List1.c       **** 
  74:List1.c       ****         // Write on serial one byte
  75:List1.c       ****         uint8_t write(uint8_t c){
 264               		.stabn	68,0,75,.LM22-.LFBB5
 265               	.LM22:
GAS LISTING /tmp/ccq97VhN.s 			page 7


 266               	.LFBB5:
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
  76:List1.c       ****             uint8_t rc = 0;
  77:List1.c       **** 
  78:List1.c       ****             cli();
 271               		.stabn	68,0,78,.LM23-.LFBB5
 272               	.LM23:
 273               	/* #APP */
 274               	 ;  78 "List1.c" 1
 275 005a F894      		cli
 276               	 ;  0 "" 2
  79:List1.c       ****             if (!usart_transmitting) {
 277               		.stabn	68,0,79,.LM24-.LFBB5
 278               	.LM24:
 279               	/* #NOAPP */
 280 005c 9091 0000 		lds r25,usart_transmitting
 281 0060 9111      		cpse r25,__zero_reg__
 282 0062 00C0      		rjmp .L12
  80:List1.c       ****                 UDR0 = c;
 283               		.stabn	68,0,80,.LM25-.LFBB5
 284               	.LM25:
 285 0064 8093 C600 		sts 198,r24
  81:List1.c       ****                 UCSR0B |= (1 << UDRIE0);
 286               		.stabn	68,0,81,.LM26-.LFBB5
 287               	.LM26:
 288 0068 8091 C100 		lds r24,193
 289 006c 8062      		ori r24,lo8(32)
 290 006e 8093 C100 		sts 193,r24
  82:List1.c       ****                 usart_transmitting = 1;
 291               		.stabn	68,0,82,.LM27-.LFBB5
 292               	.LM27:
 293 0072 81E0      		ldi r24,lo8(1)
 294 0074 8093 0000 		sts usart_transmitting,r24
 295 0078 00C0      		rjmp .L16
 296               	.L12:
 297               	.LBB6:
  83:List1.c       ****             } else {
  84:List1.c       ****                 uint8_t next = tx_head + 1;
 298               		.stabn	68,0,84,.LM28-.LFBB5
 299               	.LM28:
 300 007a E091 0000 		lds r30,tx_head
 301 007e 91E0      		ldi r25,lo8(1)
 302 0080 9E0F      		add r25,r30
  85:List1.c       ****                 if (next >= BUFFER_SIZE)
 303               		.stabn	68,0,85,.LM29-.LFBB5
 304               	.LM29:
 305 0082 983C      		cpi r25,lo8(-56)
 306 0084 00F0      		brlo .L14
  86:List1.c       ****                     next = 0;
 307               		.stabn	68,0,86,.LM30-.LFBB5
 308               	.LM30:
 309 0086 90E0      		ldi r25,0
 310               	.L14:
  87:List1.c       ****                 if (next != tx_tail) {
GAS LISTING /tmp/ccq97VhN.s 			page 8


 311               		.stabn	68,0,87,.LM31-.LFBB5
 312               	.LM31:
 313 0088 2091 0000 		lds r18,tx_tail
 314 008c 9217      		cp r25,r18
 315 008e 01F0      		breq .L15
  88:List1.c       ****                     tx_buffer[tx_head] = c;
 316               		.stabn	68,0,88,.LM32-.LFBB5
 317               	.LM32:
 318 0090 F0E0      		ldi r31,0
 319 0092 E050      		subi r30,lo8(-(tx_buffer))
 320 0094 F040      		sbci r31,hi8(-(tx_buffer))
 321 0096 8083      		st Z,r24
  89:List1.c       ****                     tx_head = next;
 322               		.stabn	68,0,89,.LM33-.LFBB5
 323               	.LM33:
 324 0098 9093 0000 		sts tx_head,r25
 325               	.L16:
 326               	.LBE6:
  76:List1.c       **** 
 327               		.stabn	68,0,76,.LM34-.LFBB5
 328               	.LM34:
 329 009c 80E0      		ldi r24,0
 330               	.LBB7:
 331 009e 00C0      		rjmp .L13
 332               	.L15:
  90:List1.c       ****                 } else  /* buffer cheio */
  91:List1.c       ****                     rc = 1;
 333               		.stabn	68,0,91,.LM35-.LFBB5
 334               	.LM35:
 335 00a0 81E0      		ldi r24,lo8(1)
 336               	.L13:
 337               	.LBE7:
  92:List1.c       ****             }
  93:List1.c       ****             sei();
 338               		.stabn	68,0,93,.LM36-.LFBB5
 339               	.LM36:
 340               	/* #APP */
 341               	 ;  93 "List1.c" 1
 342 00a2 7894      		sei
 343               	 ;  0 "" 2
  94:List1.c       ****             return rc;
  95:List1.c       ****         }
 344               		.stabn	68,0,95,.LM37-.LFBB5
 345               	.LM37:
 346               	/* #NOAPP */
 347 00a4 0895      		ret
 348               		.size	write, .-write
 349               		.stabs	"rc:r(5,2)",64,0,76,24
 350               		.stabn	192,0,0,.LFBB5-.LFBB5
 351               		.stabs	"next:r(5,2)",64,0,84,25
 352               		.stabn	192,0,0,.LBB6-.LFBB5
 353               		.stabn	224,0,0,.LBE6-.LFBB5
 354               		.stabs	"next:r(5,2)",64,0,84,25
 355               		.stabn	192,0,0,.LBB7-.LFBB5
 356               		.stabn	224,0,0,.LBE7-.LFBB5
 357               		.stabn	224,0,0,.Lscope5-.LFBB5
 358               	.Lscope5:
GAS LISTING /tmp/ccq97VhN.s 			page 9


 359               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 360               		.stabd	78,0,0
 361               		.stabs	"__vector_18:F(0,47)",36,0,100,__vector_18
 362               	.global	__vector_18
 363               		.type	__vector_18, @function
 364               	__vector_18:
 365               		.stabd	46,0,0
  96:List1.c       ****     //***********************************//
  97:List1.c       ****     
  98:List1.c       ****     //***********************************//
  99:List1.c       ****     // Interruption of RX 
 100:List1.c       ****         ISR(USART_RX_vect){
 366               		.stabn	68,0,100,.LM38-.LFBB6
 367               	.LM38:
 368               	.LFBB6:
 369 00a6 1F92      		push r1
 370 00a8 0F92      		push r0
 371 00aa 0FB6      		in r0,__SREG__
 372 00ac 0F92      		push r0
 373 00ae 1124      		clr __zero_reg__
 374 00b0 8F93      		push r24
 375               	/* prologue: Signal */
 376               	/* frame size = 0 */
 377               	/* stack size = 4 */
 378               	.L__stack_usage = 4
 101:List1.c       ****             unsigned char data = UDR0; // Recived data
 379               		.stabn	68,0,101,.LM39-.LFBB6
 380               	.LM39:
 381 00b2 8091 C600 		lds r24,198
 102:List1.c       ****             // Start the Infrared sensor
 103:List1.c       ****             if(data == 's'){
 382               		.stabn	68,0,103,.LM40-.LFBB6
 383               	.LM40:
 384 00b6 8337      		cpi r24,lo8(115)
 385 00b8 01F4      		brne .L17
 104:List1.c       ****                 PORTB = 0x01;  // Trigger to HIGH   
 386               		.stabn	68,0,104,.LM41-.LFBB6
 387               	.LM41:
 388 00ba 81E0      		ldi r24,lo8(1)
 389 00bc 85B9      		out 0x5,r24
 390               	.LBB8:
 391               	.LBB9:
 392               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 393               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
GAS LISTING /tmp/ccq97VhN.s 			page 10


  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
GAS LISTING /tmp/ccq97VhN.s 			page 11


  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
GAS LISTING /tmp/ccq97VhN.s 			page 12


 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/lib/avr/include/util/delay.h **** 
 165:/usr/lib/avr/include/util/delay.h **** #else
 166:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
GAS LISTING /tmp/ccq97VhN.s 			page 13


 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/lib/avr/include/util/delay.h **** 
 234:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/lib/avr/include/util/delay.h **** 
 237:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/lib/avr/include/util/delay.h **** 
 240:/usr/lib/avr/include/util/delay.h **** 	#else
 241:/usr/lib/avr/include/util/delay.h **** 		//round up by default
GAS LISTING /tmp/ccq97VhN.s 			page 14


 242:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/lib/avr/include/util/delay.h **** 	#endif
 244:/usr/lib/avr/include/util/delay.h **** 
 245:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 394               		.stabn	68,0,245,.LM42-.LFBB6
 395               	.LM42:
 396 00be 85E3      		ldi r24,lo8(53)
 397 00c0 8A95      	1:	dec r24
 398 00c2 01F4      		brne 1b
 399 00c4 0000      		nop
 400               	.LBE9:
 401               	.LBE8:
 402               		.stabs	"List1.c",132,0,0,.Ltext2
 403               	.Ltext2:
 105:List1.c       ****                 _delay_us(10);
 106:List1.c       ****                 PORTB = 0x00;  // Trigger to LOW   
 404               		.stabn	68,0,106,.LM43-.LFBB6
 405               	.LM43:
 406 00c6 15B8      		out 0x5,__zero_reg__
 407               	.L17:
 408               	/* epilogue start */
 107:List1.c       ****             }
 108:List1.c       ****             
 109:List1.c       ****         }
 409               		.stabn	68,0,109,.LM44-.LFBB6
 410               	.LM44:
 411 00c8 8F91      		pop r24
 412 00ca 0F90      		pop r0
 413 00cc 0FBE      		out __SREG__,r0
 414 00ce 0F90      		pop r0
 415 00d0 1F90      		pop r1
 416 00d2 1895      		reti
 417               		.size	__vector_18, .-__vector_18
 418               		.stabs	"data:r(0,11)",64,0,101,24
 419               		.stabn	192,0,0,.LFBB6-.LFBB6
 420               		.stabn	224,0,0,.Lscope6-.LFBB6
 421               	.Lscope6:
 422               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 423               		.stabd	78,0,0
 424               		.stabs	"__vector_19:F(0,47)",36,0,112,__vector_19
 425               	.global	__vector_19
 426               		.type	__vector_19, @function
 427               	__vector_19:
 428               		.stabd	46,0,0
 110:List1.c       **** 
 111:List1.c       ****         // Interrupton of TX
 112:List1.c       ****         ISR(USART_UDRE_vect){
 429               		.stabn	68,0,112,.LM45-.LFBB7
 430               	.LM45:
 431               	.LFBB7:
 432 00d4 1F92      		push r1
 433 00d6 0F92      		push r0
 434 00d8 0FB6      		in r0,__SREG__
 435 00da 0F92      		push r0
 436 00dc 1124      		clr __zero_reg__
 437 00de 2F93      		push r18
 438 00e0 3F93      		push r19
GAS LISTING /tmp/ccq97VhN.s 			page 15


 439 00e2 4F93      		push r20
 440 00e4 5F93      		push r21
 441 00e6 6F93      		push r22
 442 00e8 7F93      		push r23
 443 00ea 8F93      		push r24
 444 00ec 9F93      		push r25
 445 00ee AF93      		push r26
 446 00f0 BF93      		push r27
 447 00f2 EF93      		push r30
 448 00f4 FF93      		push r31
 449               	/* prologue: Signal */
 450               	/* frame size = 0 */
 451               	/* stack size = 15 */
 452               	.L__stack_usage = 15
 113:List1.c       ****             cli();
 453               		.stabn	68,0,113,.LM46-.LFBB7
 454               	.LM46:
 455               	/* #APP */
 456               	 ;  113 "List1.c" 1
 457 00f6 F894      		cli
 458               	 ;  0 "" 2
 114:List1.c       ****             PORTB |= (1 << PB2);
 459               		.stabn	68,0,114,.LM47-.LFBB7
 460               	.LM47:
 461               	/* #NOAPP */
 462 00f8 2A9A      		sbi 0x5,2
 115:List1.c       ****             flag = 0;
 463               		.stabn	68,0,115,.LM48-.LFBB7
 464               	.LM48:
 465 00fa 1092 0000 		sts flag,__zero_reg__
 116:List1.c       ****             delay_ms(10);
 466               		.stabn	68,0,116,.LM49-.LFBB7
 467               	.LM49:
 468 00fe 8AE0      		ldi r24,lo8(10)
 469 0100 90E0      		ldi r25,0
 470 0102 0E94 0000 		call delay_ms
 117:List1.c       ****             sei();
 471               		.stabn	68,0,117,.LM50-.LFBB7
 472               	.LM50:
 473               	/* #APP */
 474               	 ;  117 "List1.c" 1
 475 0106 7894      		sei
 476               	 ;  0 "" 2
 477               	/* epilogue start */
 118:List1.c       **** 
 119:List1.c       ****         }        
 478               		.stabn	68,0,119,.LM51-.LFBB7
 479               	.LM51:
 480               	/* #NOAPP */
 481 0108 FF91      		pop r31
 482 010a EF91      		pop r30
 483 010c BF91      		pop r27
 484 010e AF91      		pop r26
 485 0110 9F91      		pop r25
 486 0112 8F91      		pop r24
 487 0114 7F91      		pop r23
 488 0116 6F91      		pop r22
GAS LISTING /tmp/ccq97VhN.s 			page 16


 489 0118 5F91      		pop r21
 490 011a 4F91      		pop r20
 491 011c 3F91      		pop r19
 492 011e 2F91      		pop r18
 493 0120 0F90      		pop r0
 494 0122 0FBE      		out __SREG__,r0
 495 0124 0F90      		pop r0
 496 0126 1F90      		pop r1
 497 0128 1895      		reti
 498               		.size	__vector_19, .-__vector_19
 499               	.Lscope7:
 500               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 501               		.stabd	78,0,0
 502               		.stabs	"__vector_1:F(0,47)",36,0,121,__vector_1
 503               	.global	__vector_1
 504               		.type	__vector_1, @function
 505               	__vector_1:
 506               		.stabd	46,0,0
 120:List1.c       ****         // Interruption of INT0 
 121:List1.c       ****         ISR(INT0_vect){
 507               		.stabn	68,0,121,.LM52-.LFBB8
 508               	.LM52:
 509               	.LFBB8:
 510 012a 1F92      		push r1
 511 012c 0F92      		push r0
 512 012e 0FB6      		in r0,__SREG__
 513 0130 0F92      		push r0
 514 0132 1124      		clr __zero_reg__
 515 0134 2F93      		push r18
 516 0136 3F93      		push r19
 517 0138 4F93      		push r20
 518 013a 5F93      		push r21
 519 013c 6F93      		push r22
 520 013e 7F93      		push r23
 521 0140 8F93      		push r24
 522 0142 9F93      		push r25
 523 0144 AF93      		push r26
 524 0146 BF93      		push r27
 525 0148 EF93      		push r30
 526 014a FF93      		push r31
 527               	/* prologue: Signal */
 528               	/* frame size = 0 */
 529               	/* stack size = 15 */
 530               	.L__stack_usage = 15
 122:List1.c       ****             
 123:List1.c       ****             cli();
 531               		.stabn	68,0,123,.LM53-.LFBB8
 532               	.LM53:
 533               	/* #APP */
 534               	 ;  123 "List1.c" 1
 535 014c F894      		cli
 536               	 ;  0 "" 2
 124:List1.c       ****             flag = 1; // Enable the the flag to send a message
 537               		.stabn	68,0,124,.LM54-.LFBB8
 538               	.LM54:
 539               	/* #NOAPP */
 540 014e 81E0      		ldi r24,lo8(1)
GAS LISTING /tmp/ccq97VhN.s 			page 17


 541 0150 8093 0000 		sts flag,r24
 125:List1.c       ****             delay_ms(10);
 542               		.stabn	68,0,125,.LM55-.LFBB8
 543               	.LM55:
 544 0154 8AE0      		ldi r24,lo8(10)
 545 0156 90E0      		ldi r25,0
 546 0158 0E94 0000 		call delay_ms
 126:List1.c       ****             sei();
 547               		.stabn	68,0,126,.LM56-.LFBB8
 548               	.LM56:
 549               	/* #APP */
 550               	 ;  126 "List1.c" 1
 551 015c 7894      		sei
 552               	 ;  0 "" 2
 553               	/* epilogue start */
 127:List1.c       ****             
 128:List1.c       ****         }
 554               		.stabn	68,0,128,.LM57-.LFBB8
 555               	.LM57:
 556               	/* #NOAPP */
 557 015e FF91      		pop r31
 558 0160 EF91      		pop r30
 559 0162 BF91      		pop r27
 560 0164 AF91      		pop r26
 561 0166 9F91      		pop r25
 562 0168 8F91      		pop r24
 563 016a 7F91      		pop r23
 564 016c 6F91      		pop r22
 565 016e 5F91      		pop r21
 566 0170 4F91      		pop r20
 567 0172 3F91      		pop r19
 568 0174 2F91      		pop r18
 569 0176 0F90      		pop r0
 570 0178 0FBE      		out __SREG__,r0
 571 017a 0F90      		pop r0
 572 017c 1F90      		pop r1
 573 017e 1895      		reti
 574               		.size	__vector_1, .-__vector_1
 575               	.Lscope8:
 576               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 577               		.stabd	78,0,0
 578               		.section	.text.startup,"ax",@progbits
 579               		.stabs	"main:F(0,1)",36,0,135,main
 580               	.global	main
 581               		.type	main, @function
 582               	main:
 583               		.stabd	46,0,0
 129:List1.c       ****        
 130:List1.c       ****     //***********************************//
 131:List1.c       **** //***********************************//
 132:List1.c       **** 
 133:List1.c       **** //***********************************//
 134:List1.c       **** // Main 
 135:List1.c       ****     int main(void){
 584               		.stabn	68,0,135,.LM58-.LFBB9
 585               	.LM58:
 586               	.LFBB9:
GAS LISTING /tmp/ccq97VhN.s 			page 18


 587               	/* prologue: function */
 588               	/* frame size = 0 */
 589               	/* stack size = 0 */
 590               	.L__stack_usage = 0
 136:List1.c       **** 
 137:List1.c       ****         uartInit();
 591               		.stabn	68,0,137,.LM59-.LFBB9
 592               	.LM59:
 593 0000 0E94 0000 		call uartInit
 138:List1.c       ****         interruptInit();
 594               		.stabn	68,0,138,.LM60-.LFBB9
 595               	.LM60:
 596 0004 0E94 0000 		call interruptInit
 139:List1.c       ****         systemInit();
 597               		.stabn	68,0,139,.LM61-.LFBB9
 598               	.LM61:
 599 0008 0E94 0000 		call systemInit
 600               	.L22:
 601               	.LBB10:
 602               	.LBB11:
 603               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext3
 604               	.Ltext3:
 163:/usr/lib/avr/include/util/delay.h **** 
 605               		.stabn	68,0,163,.LM62-.LFBB9
 606               	.LM62:
 607 000c 2FEF      		ldi r18,lo8(319999)
 608 000e 81EE      		ldi r24,hi8(319999)
 609 0010 94E0      		ldi r25,hlo8(319999)
 610 0012 2150      	1:	subi r18,1
 611 0014 8040      		sbci r24,0
 612 0016 9040      		sbci r25,0
 613 0018 01F4      		brne 1b
 614 001a 00C0      		rjmp .
 615 001c 0000      		nop
 616               	.LBE11:
 617               	.LBE10:
 618               		.stabs	"List1.c",132,0,0,.Ltext4
 619               	.Ltext4:
 140:List1.c       ****         
 141:List1.c       ****         while(1){
 142:List1.c       ****         // Nothing to do
 143:List1.c       ****             _delay_ms(100);
 144:List1.c       ****             PORTB &= ~(1 << PD2);
 620               		.stabn	68,0,144,.LM63-.LFBB9
 621               	.LM63:
 622 001e 2A98      		cbi 0x5,2
 145:List1.c       ****             if(flag){
 623               		.stabn	68,0,145,.LM64-.LFBB9
 624               	.LM64:
 625 0020 8091 0000 		lds r24,flag
 626 0024 8823      		tst r24
 627 0026 01F0      		breq .L22
 146:List1.c       ****                 write(0x48); 
 628               		.stabn	68,0,146,.LM65-.LFBB9
 629               	.LM65:
 630 0028 88E4      		ldi r24,lo8(72)
 631 002a 0E94 0000 		call write
GAS LISTING /tmp/ccq97VhN.s 			page 19


 632 002e 00C0      		rjmp .L22
 633               		.size	main, .-main
 634               	.Lscope9:
 635               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 636               		.stabd	78,0,0
 637               		.comm	usart_transmitting,1,1
 638               		.comm	tx_tail,1,1
 639               		.comm	tx_head,1,1
 640               		.comm	tx_buffer,200,1
 641               		.comm	flag,1,1
 642               		.stabs	"flag:G(0,48)=B(5,2)",32,0,25,0
 643               		.stabs	"tx_buffer:G(0,49)=ar(0,50)=r(0,50);0;0177777;;0;199;(5,2)",32,0,26,0
 644               		.stabs	"tx_head:G(5,2)",32,0,27,0
 645               		.stabs	"tx_tail:G(5,2)",32,0,27,0
 646               		.stabs	"usart_transmitting:G(5,2)",32,0,28,0
 647               		.text
 648               		.stabs	"",100,0,0,.Letext0
 649               	.Letext0:
 650               		.ident	"GCC: (GNU) 4.9.2"
 651               	.global __do_clear_bss
GAS LISTING /tmp/ccq97VhN.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 List1.c
     /tmp/ccq97VhN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccq97VhN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccq97VhN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccq97VhN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccq97VhN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccq97VhN.s:105    .text:0000000000000000 uartInit
     /tmp/ccq97VhN.s:149    .text:0000000000000026 interruptInit
     /tmp/ccq97VhN.s:183    .text:0000000000000036 systemInit
     /tmp/ccq97VhN.s:207    .text:000000000000003c delay_ms
     /tmp/ccq97VhN.s:262    .text:000000000000005a write
                            *COM*:0000000000000001 usart_transmitting
                            *COM*:0000000000000001 tx_head
                            *COM*:0000000000000001 tx_tail
                            *COM*:00000000000000c8 tx_buffer
     /tmp/ccq97VhN.s:364    .text:00000000000000a6 __vector_18
     /tmp/ccq97VhN.s:427    .text:00000000000000d4 __vector_19
                            *COM*:0000000000000001 flag
     /tmp/ccq97VhN.s:505    .text:000000000000012a __vector_1
     /tmp/ccq97VhN.s:582    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss
