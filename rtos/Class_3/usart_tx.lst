GAS LISTING /tmp/ccES3n3d.s 			page 1


   1               		.file	"usart_tx.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/geraldobraz/Documentos/UFPE/embedded-systems/rtos/Class_3/",100,0,2,.Ltext0
   8               		.stabs	"usart_tx.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccES3n3d.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.9.2/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"setup_usart:F(0,47)",36,0,19,setup_usart
 103               	.global	setup_usart
 104               		.type	setup_usart, @function
 105               	setup_usart:
 106               		.stabd	46,0,0
   1:usart_tx.c    **** #include <avr/io.h>
   2:usart_tx.c    **** #include <avr/cpufunc.h>
   3:usart_tx.c    **** #include <avr/interrupt.h>
   4:usart_tx.c    **** 
   5:usart_tx.c    **** 
   6:usart_tx.c    **** /* 
   7:usart_tx.c    ****  * Constantes utilizadas no código 
   8:usart_tx.c    ****  */
GAS LISTING /tmp/ccES3n3d.s 			page 3


   9:usart_tx.c    **** #define FOSC 16000000ul  /* velocidade do relógio */
  10:usart_tx.c    **** #define BAUD 9600      /* velocidade desejada para a serial */
  11:usart_tx.c    **** #define MYUBRR (FOSC/(8ul*BAUD) - 1)  /* valor de 12 bits para configurar o clock da USART */
  12:usart_tx.c    **** 
  13:usart_tx.c    **** #define BUFFER_SIZE 200   /* Tamanho do buffer da USART */
  14:usart_tx.c    **** 
  15:usart_tx.c    **** 
  16:usart_tx.c    **** /* 
  17:usart_tx.c    ****  * Definição de funções 
  18:usart_tx.c    ****  */
  19:usart_tx.c    **** void setup_usart(void)
  20:usart_tx.c    **** {
 107               		.stabn	68,0,20,.LM0-.LFBB1
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  21:usart_tx.c    **** 
  22:usart_tx.c    ****     /*
  23:usart_tx.c    ****      * Para as macros abaixo e outras, veja o arquivo
  24:usart_tx.c    ****      * /usr/lib/avr/include/avr/iom328p.h
  25:usart_tx.c    ****      */
  26:usart_tx.c    ****     /*
  27:usart_tx.c    ****     //  * Primeiro setamos a direção certa para os pinos RX e TX
  28:usart_tx.c    ****     //  */
  29:usart_tx.c    ****     DDRD = ~(1 << PD0);  /* USART RX bit para a placa Nano */
 114               		.stabn	68,0,29,.LM1-.LFBB1
 115               	.LM1:
 116 0000 8EEF      		ldi r24,lo8(-2)
 117 0002 8AB9      		out 0xa,r24
  30:usart_tx.c    ****     DDRD = (1 << PD1);  /* USART TX bit para a placa Nano */
 118               		.stabn	68,0,30,.LM2-.LFBB1
 119               	.LM2:
 120 0004 82E0      		ldi r24,lo8(2)
 121 0006 8AB9      		out 0xa,r24
  31:usart_tx.c    ****     
  32:usart_tx.c    ****     /*
  33:usart_tx.c    ****      * Agora configuramos a USART
  34:usart_tx.c    ****      */
  35:usart_tx.c    ****     UBRR0H = (MYUBRR >> 8) & 0xF;
 122               		.stabn	68,0,35,.LM3-.LFBB1
 123               	.LM3:
 124 0008 1092 C500 		sts 197,__zero_reg__
  36:usart_tx.c    ****     UBRR0L = MYUBRR & 0xFF;
 125               		.stabn	68,0,36,.LM4-.LFBB1
 126               	.LM4:
 127 000c 8FEC      		ldi r24,lo8(-49)
 128 000e 8093 C400 		sts 196,r24
 129 0012 0895      		ret
 130               		.size	setup_usart, .-setup_usart
 131               	.Lscope1:
 132               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 133               		.stabd	78,0,0
 134               		.stabs	"setup_main:F(0,47)",36,0,43,setup_main
 135               	.global	setup_main
GAS LISTING /tmp/ccES3n3d.s 			page 4


 136               		.type	setup_main, @function
 137               	setup_main:
 138               		.stabd	46,0,0
  37:usart_tx.c    **** 	// /*
  38:usart_tx.c    **** 	// * Configure o restante dos registradores
  39:usart_tx.c    **** 	// */
  40:usart_tx.c    **** }
  41:usart_tx.c    **** 
  42:usart_tx.c    **** /* -------------------------------------*/
  43:usart_tx.c    **** void setup_main(void)
  44:usart_tx.c    **** {
 139               		.stabn	68,0,44,.LM5-.LFBB2
 140               	.LM5:
 141               	.LFBB2:
 142               	/* prologue: function */
 143               	/* frame size = 0 */
 144               	/* stack size = 0 */
 145               	.L__stack_usage = 0
  45:usart_tx.c    ****     // LED_DDR |= (1 << LED_PINNBR);
  46:usart_tx.c    ****     sei(); /* Seta flag principal de habilitação de interrupções */
 146               		.stabn	68,0,46,.LM6-.LFBB2
 147               	.LM6:
 148               	/* #APP */
 149               	 ;  46 "usart_tx.c" 1
 150 0014 7894      		sei
 151               	 ;  0 "" 2
 152               	/* #NOAPP */
 153 0016 0895      		ret
 154               		.size	setup_main, .-setup_main
 155               	.Lscope2:
 156               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 157               		.stabd	78,0,0
 158               		.stabs	"delay_ms:F(0,47)",36,0,50,delay_ms
 159               		.stabs	"ms:P(5,4)",64,0,50,24
 160               	.global	delay_ms
 161               		.type	delay_ms, @function
 162               	delay_ms:
 163               		.stabd	46,0,0
  47:usart_tx.c    **** }
  48:usart_tx.c    **** 
  49:usart_tx.c    **** /* -------------------------------------*/
  50:usart_tx.c    **** void delay_ms(uint16_t ms)
  51:usart_tx.c    **** {
 164               		.stabn	68,0,51,.LM7-.LFBB3
 165               	.LM7:
 166               	.LFBB3:
 167               	/* prologue: function */
 168               	/* frame size = 0 */
 169               	/* stack size = 0 */
 170               	.L__stack_usage = 0
  52:usart_tx.c    ****     uint16_t i, j;
  53:usart_tx.c    ****     for(i=0; i<ms; i++)
 171               		.stabn	68,0,53,.LM8-.LFBB3
 172               	.LM8:
 173 0018 20E0      		ldi r18,0
 174 001a 30E0      		ldi r19,0
 175               	.L4:
GAS LISTING /tmp/ccES3n3d.s 			page 5


 176               		.stabn	68,0,53,.LM9-.LFBB3
 177               	.LM9:
 178 001c 2817      		cp r18,r24
 179 001e 3907      		cpc r19,r25
 180 0020 01F0      		breq .L9
 181 0022 40EA      		ldi r20,lo8(-96)
 182 0024 5FE0      		ldi r21,lo8(15)
 183               	.L5:
  54:usart_tx.c    ****         for(j=0; j<4000; j++)
  55:usart_tx.c    ****             _NOP();
 184               		.stabn	68,0,55,.LM10-.LFBB3
 185               	.LM10:
 186               	/* #APP */
 187               	 ;  55 "usart_tx.c" 1
 188 0026 0000      		nop
 189               	 ;  0 "" 2
 190               	/* #NOAPP */
 191 0028 4150      		subi r20,1
 192 002a 5109      		sbc r21,__zero_reg__
  54:usart_tx.c    ****         for(j=0; j<4000; j++)
 193               		.stabn	68,0,54,.LM11-.LFBB3
 194               	.LM11:
 195 002c 01F4      		brne .L5
  53:usart_tx.c    ****         for(j=0; j<4000; j++)
 196               		.stabn	68,0,53,.LM12-.LFBB3
 197               	.LM12:
 198 002e 2F5F      		subi r18,-1
 199 0030 3F4F      		sbci r19,-1
 200 0032 00C0      		rjmp .L4
 201               	.L9:
 202               	/* epilogue start */
  56:usart_tx.c    **** }
 203               		.stabn	68,0,56,.LM13-.LFBB3
 204               	.LM13:
 205 0034 0895      		ret
 206               		.size	delay_ms, .-delay_ms
 207               		.stabs	"i:r(5,4)",64,0,52,18
 208               		.stabn	192,0,0,.LFBB3-.LFBB3
 209               		.stabn	224,0,0,.Lscope3-.LFBB3
 210               	.Lscope3:
 211               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 212               		.stabd	78,0,0
 213               		.stabs	"write:F(5,2)",36,0,63,write
 214               		.stabs	"c:P(5,2)",64,0,63,24
 215               	.global	write
 216               		.type	write, @function
 217               	write:
 218               		.stabd	46,0,0
  57:usart_tx.c    **** 
  58:usart_tx.c    **** /* -------------------------------------*/
  59:usart_tx.c    **** uint8_t tx_buffer[BUFFER_SIZE];     /* buffer para transmissão */
  60:usart_tx.c    **** uint8_t tx_head, tx_tail;   /* ponteiros para o buffer circular */
  61:usart_tx.c    **** uint8_t usart_transmitting;
  62:usart_tx.c    **** 
  63:usart_tx.c    **** uint8_t write(uint8_t c)
  64:usart_tx.c    **** {
 219               		.stabn	68,0,64,.LM14-.LFBB4
GAS LISTING /tmp/ccES3n3d.s 			page 6


 220               	.LM14:
 221               	.LFBB4:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
  65:usart_tx.c    ****     uint8_t rc = 0;
  66:usart_tx.c    **** 
  67:usart_tx.c    ****     cli();
 226               		.stabn	68,0,67,.LM15-.LFBB4
 227               	.LM15:
 228               	/* #APP */
 229               	 ;  67 "usart_tx.c" 1
 230 0036 F894      		cli
 231               	 ;  0 "" 2
  68:usart_tx.c    ****     if (!usart_transmitting) {
 232               		.stabn	68,0,68,.LM16-.LFBB4
 233               	.LM16:
 234               	/* #NOAPP */
 235 0038 9091 0000 		lds r25,usart_transmitting
 236 003c 9111      		cpse r25,__zero_reg__
 237 003e 00C0      		rjmp .L11
  69:usart_tx.c    ****         UDR0 = c;
 238               		.stabn	68,0,69,.LM17-.LFBB4
 239               	.LM17:
 240 0040 8093 C600 		sts 198,r24
  70:usart_tx.c    ****         UCSR0B |= (1 << UDRIE0);
 241               		.stabn	68,0,70,.LM18-.LFBB4
 242               	.LM18:
 243 0044 8091 C100 		lds r24,193
 244 0048 8062      		ori r24,lo8(32)
 245 004a 8093 C100 		sts 193,r24
  71:usart_tx.c    ****         usart_transmitting = 1;
 246               		.stabn	68,0,71,.LM19-.LFBB4
 247               	.LM19:
 248 004e 81E0      		ldi r24,lo8(1)
 249 0050 8093 0000 		sts usart_transmitting,r24
 250 0054 00C0      		rjmp .L15
 251               	.L11:
 252               	.LBB4:
  72:usart_tx.c    ****     } else {
  73:usart_tx.c    ****         uint8_t next = tx_head + 1;
 253               		.stabn	68,0,73,.LM20-.LFBB4
 254               	.LM20:
 255 0056 E091 0000 		lds r30,tx_head
 256 005a 91E0      		ldi r25,lo8(1)
 257 005c 9E0F      		add r25,r30
  74:usart_tx.c    ****         if (next >= BUFFER_SIZE)
 258               		.stabn	68,0,74,.LM21-.LFBB4
 259               	.LM21:
 260 005e 983C      		cpi r25,lo8(-56)
 261 0060 00F0      		brlo .L13
  75:usart_tx.c    ****             next = 0;
 262               		.stabn	68,0,75,.LM22-.LFBB4
 263               	.LM22:
 264 0062 90E0      		ldi r25,0
 265               	.L13:
GAS LISTING /tmp/ccES3n3d.s 			page 7


  76:usart_tx.c    ****         if (next != tx_tail) {
 266               		.stabn	68,0,76,.LM23-.LFBB4
 267               	.LM23:
 268 0064 2091 0000 		lds r18,tx_tail
 269 0068 9217      		cp r25,r18
 270 006a 01F0      		breq .L14
  77:usart_tx.c    ****             tx_buffer[tx_head] = c;
 271               		.stabn	68,0,77,.LM24-.LFBB4
 272               	.LM24:
 273 006c F0E0      		ldi r31,0
 274 006e E050      		subi r30,lo8(-(tx_buffer))
 275 0070 F040      		sbci r31,hi8(-(tx_buffer))
 276 0072 8083      		st Z,r24
  78:usart_tx.c    ****             tx_head = next;
 277               		.stabn	68,0,78,.LM25-.LFBB4
 278               	.LM25:
 279 0074 9093 0000 		sts tx_head,r25
 280               	.L15:
 281               	.LBE4:
  65:usart_tx.c    **** 
 282               		.stabn	68,0,65,.LM26-.LFBB4
 283               	.LM26:
 284 0078 80E0      		ldi r24,0
 285               	.LBB5:
 286 007a 00C0      		rjmp .L12
 287               	.L14:
  79:usart_tx.c    ****         } else  /* buffer cheio */
  80:usart_tx.c    ****             rc = 1;
 288               		.stabn	68,0,80,.LM27-.LFBB4
 289               	.LM27:
 290 007c 81E0      		ldi r24,lo8(1)
 291               	.L12:
 292               	.LBE5:
  81:usart_tx.c    ****     }
  82:usart_tx.c    ****     sei();
 293               		.stabn	68,0,82,.LM28-.LFBB4
 294               	.LM28:
 295               	/* #APP */
 296               	 ;  82 "usart_tx.c" 1
 297 007e 7894      		sei
 298               	 ;  0 "" 2
  83:usart_tx.c    ****     return rc;
  84:usart_tx.c    **** }
 299               		.stabn	68,0,84,.LM29-.LFBB4
 300               	.LM29:
 301               	/* #NOAPP */
 302 0080 0895      		ret
 303               		.size	write, .-write
 304               		.stabs	"rc:r(5,2)",64,0,65,24
 305               		.stabn	192,0,0,.LFBB4-.LFBB4
 306               		.stabs	"next:r(5,2)",64,0,73,25
 307               		.stabn	192,0,0,.LBB4-.LFBB4
 308               		.stabn	224,0,0,.LBE4-.LFBB4
 309               		.stabs	"next:r(5,2)",64,0,73,25
 310               		.stabn	192,0,0,.LBB5-.LFBB4
 311               		.stabn	224,0,0,.LBE5-.LFBB4
 312               		.stabn	224,0,0,.Lscope4-.LFBB4
GAS LISTING /tmp/ccES3n3d.s 			page 8


 313               	.Lscope4:
 314               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 315               		.stabd	78,0,0
 316               		.stabs	"__vector_19:F(0,47)",36,0,93,__vector_19
 317               	.global	__vector_19
 318               		.type	__vector_19, @function
 319               	__vector_19:
 320               		.stabd	46,0,0
  85:usart_tx.c    **** 
  86:usart_tx.c    **** /* -------------------------------------*/
  87:usart_tx.c    **** /*
  88:usart_tx.c    ****  * Interrupt handlers devem ser definidos com a macros
  89:usart_tx.c    ****  * ISR(), que é definida no arquivo avr/interrupt.h.
  90:usart_tx.c    ****  * Veja também a página
  91:usart_tx.c    ****  * http://www.nongnu.org/avr-libc/user-manual/group__avr__interrupts.html
  92:usart_tx.c    ****  */
  93:usart_tx.c    **** ISR(USART_UDRE_vect)
  94:usart_tx.c    **** {
 321               		.stabn	68,0,94,.LM30-.LFBB5
 322               	.LM30:
 323               	.LFBB5:
 324 0082 1F92      		push r1
 325 0084 0F92      		push r0
 326 0086 0FB6      		in r0,__SREG__
 327 0088 0F92      		push r0
 328 008a 1124      		clr __zero_reg__
 329 008c 8F93      		push r24
 330 008e EF93      		push r30
 331 0090 FF93      		push r31
 332               	/* prologue: Signal */
 333               	/* frame size = 0 */
 334               	/* stack size = 6 */
 335               	.L__stack_usage = 6
  95:usart_tx.c    ****     if (tx_head == tx_tail) {
 336               		.stabn	68,0,95,.LM31-.LFBB5
 337               	.LM31:
 338 0092 E091 0000 		lds r30,tx_tail
 339 0096 8091 0000 		lds r24,tx_head
 340 009a 8E13      		cpse r24,r30
 341 009c 00C0      		rjmp .L17
  96:usart_tx.c    ****         UCSR0B &= ~(1 << UDRIE0);
 342               		.stabn	68,0,96,.LM32-.LFBB5
 343               	.LM32:
 344 009e 8091 C100 		lds r24,193
 345 00a2 8F7D      		andi r24,lo8(-33)
 346 00a4 8093 C100 		sts 193,r24
  97:usart_tx.c    ****         usart_transmitting = 0;
 347               		.stabn	68,0,97,.LM33-.LFBB5
 348               	.LM33:
 349 00a8 1092 0000 		sts usart_transmitting,__zero_reg__
 350 00ac 00C0      		rjmp .L16
 351               	.L17:
  98:usart_tx.c    ****     } else {
  99:usart_tx.c    ****         UDR0 = tx_buffer[tx_tail];
 352               		.stabn	68,0,99,.LM34-.LFBB5
 353               	.LM34:
 354 00ae F0E0      		ldi r31,0
GAS LISTING /tmp/ccES3n3d.s 			page 9


 355 00b0 E050      		subi r30,lo8(-(tx_buffer))
 356 00b2 F040      		sbci r31,hi8(-(tx_buffer))
 357 00b4 8081      		ld r24,Z
 358 00b6 8093 C600 		sts 198,r24
 100:usart_tx.c    ****         if (++tx_tail >= BUFFER_SIZE)
 359               		.stabn	68,0,100,.LM35-.LFBB5
 360               	.LM35:
 361 00ba 8091 0000 		lds r24,tx_tail
 362 00be 8F5F      		subi r24,lo8(-(1))
 363 00c0 883C      		cpi r24,lo8(-56)
 364 00c2 00F4      		brsh .L19
 365 00c4 8093 0000 		sts tx_tail,r24
 366 00c8 00C0      		rjmp .L16
 367               	.L19:
 101:usart_tx.c    ****             tx_tail = 0;
 368               		.stabn	68,0,101,.LM36-.LFBB5
 369               	.LM36:
 370 00ca 1092 0000 		sts tx_tail,__zero_reg__
 371               	.L16:
 372               	/* epilogue start */
 102:usart_tx.c    ****     }
 103:usart_tx.c    **** }
 373               		.stabn	68,0,103,.LM37-.LFBB5
 374               	.LM37:
 375 00ce FF91      		pop r31
 376 00d0 EF91      		pop r30
 377 00d2 8F91      		pop r24
 378 00d4 0F90      		pop r0
 379 00d6 0FBE      		out __SREG__,r0
 380 00d8 0F90      		pop r0
 381 00da 1F90      		pop r1
 382 00dc 1895      		reti
 383               		.size	__vector_19, .-__vector_19
 384               	.Lscope5:
 385               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 386               		.stabd	78,0,0
 387               		.section	.text.startup,"ax",@progbits
 388               		.stabs	"main:F(0,1)",36,0,106,main
 389               	.global	main
 390               		.type	main, @function
 391               	main:
 392               		.stabd	46,0,0
 104:usart_tx.c    **** 
 105:usart_tx.c    **** /* -------------------------------------*/
 106:usart_tx.c    **** int main(void)
 107:usart_tx.c    **** {
 393               		.stabn	68,0,107,.LM38-.LFBB6
 394               	.LM38:
 395               	.LFBB6:
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 0 */
 399               	.L__stack_usage = 0
 108:usart_tx.c    ****     // char msg[] = "Hello, world!  I'm alive! It's so good to be alive!\n";
 109:usart_tx.c    ****     // uint8_t i;
 110:usart_tx.c    **** 
 111:usart_tx.c    ****     setup_usart();
GAS LISTING /tmp/ccES3n3d.s 			page 10


 400               		.stabn	68,0,111,.LM39-.LFBB6
 401               	.LM39:
 402 0000 0E94 0000 		call setup_usart
 403               	.LBB6:
 404               	.LBB7:
  46:usart_tx.c    **** }
 405               		.stabn	68,0,46,.LM40-.LFBB6
 406               	.LM40:
 407               	/* #APP */
 408               	 ;  46 "usart_tx.c" 1
 409 0004 7894      		sei
 410               	 ;  0 "" 2
 411               	/* #NOAPP */
 412               	.L21:
 413               	.LBE7:
 414               	.LBE6:
 112:usart_tx.c    ****     setup_main();
 113:usart_tx.c    **** 
 114:usart_tx.c    ****     while(1) {
 115:usart_tx.c    **** 	/*
 116:usart_tx.c    **** 	 * Transmita a msg para a porta serial
 117:usart_tx.c    **** 	 */
 118:usart_tx.c    ****         
 119:usart_tx.c    ****         write('D');
 415               		.stabn	68,0,119,.LM41-.LFBB6
 416               	.LM41:
 417 0006 84E4      		ldi r24,lo8(68)
 418 0008 0E94 0000 		call write
 120:usart_tx.c    **** 		delay_ms(250);
 419               		.stabn	68,0,120,.LM42-.LFBB6
 420               	.LM42:
 421 000c 8AEF      		ldi r24,lo8(-6)
 422 000e 90E0      		ldi r25,0
 423 0010 0E94 0000 		call delay_ms
 121:usart_tx.c    ****     }
 424               		.stabn	68,0,121,.LM43-.LFBB6
 425               	.LM43:
 426 0014 00C0      		rjmp .L21
 427               		.size	main, .-main
 428               	.Lscope6:
 429               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 430               		.stabd	78,0,0
 431               		.comm	usart_transmitting,1,1
 432               		.comm	tx_tail,1,1
 433               		.comm	tx_head,1,1
 434               		.comm	tx_buffer,200,1
 435               		.stabs	"tx_buffer:G(0,48)=ar(0,49)=r(0,49);0;0177777;;0;199;(5,2)",32,0,59,0
 436               		.stabs	"tx_head:G(5,2)",32,0,60,0
 437               		.stabs	"tx_tail:G(5,2)",32,0,60,0
 438               		.stabs	"usart_transmitting:G(5,2)",32,0,61,0
 439               		.text
 440               		.stabs	"",100,0,0,.Letext0
 441               	.Letext0:
 442               		.ident	"GCC: (GNU) 4.9.2"
 443               	.global __do_clear_bss
GAS LISTING /tmp/ccES3n3d.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart_tx.c
     /tmp/ccES3n3d.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccES3n3d.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccES3n3d.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccES3n3d.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccES3n3d.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccES3n3d.s:105    .text:0000000000000000 setup_usart
     /tmp/ccES3n3d.s:137    .text:0000000000000014 setup_main
     /tmp/ccES3n3d.s:162    .text:0000000000000018 delay_ms
     /tmp/ccES3n3d.s:217    .text:0000000000000036 write
                            *COM*:0000000000000001 usart_transmitting
                            *COM*:0000000000000001 tx_head
                            *COM*:0000000000000001 tx_tail
                            *COM*:00000000000000c8 tx_buffer
     /tmp/ccES3n3d.s:319    .text:0000000000000082 __vector_19
     /tmp/ccES3n3d.s:391    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss
