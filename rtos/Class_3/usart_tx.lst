GAS LISTING /tmp/ccUTteEc.s 			page 1


   1               		.file	"usart_tx.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/geraldobraz/Documentos/UFPE/embedded-systems/rtos/Class_3/",100,0,2,.Ltext0
   8               		.stabs	"usart_tx.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccUTteEc.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  60               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  61               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.9.2/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabn	162,0,0,0
  98               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"setup_usart:F(0,47)",36,0,19,setup_usart
 103               	.global	setup_usart
 104               		.type	setup_usart, @function
 105               	setup_usart:
 106               		.stabd	46,0,0
   1:usart_tx.c    **** #include <avr/io.h>
   2:usart_tx.c    **** #include <avr/cpufunc.h>
   3:usart_tx.c    **** #include <avr/interrupt.h>
   4:usart_tx.c    **** 
   5:usart_tx.c    **** 
   6:usart_tx.c    **** /* 
   7:usart_tx.c    ****  * Constantes utilizadas no código 
   8:usart_tx.c    ****  */
GAS LISTING /tmp/ccUTteEc.s 			page 3


   9:usart_tx.c    **** #define FOSC 16000000ul  /* velocidade do relógio */
  10:usart_tx.c    **** #define BAUD 9600      /* velocidade desejada para a serial */
  11:usart_tx.c    **** #define MYUBRR (FOSC/(8ul*BAUD) - 1)  /* valor de 12 bits para configurar o clock da USART */
  12:usart_tx.c    **** 
  13:usart_tx.c    **** #define BUFFER_SIZE 200   /* Tamanho do buffer da USART */
  14:usart_tx.c    **** 
  15:usart_tx.c    **** 
  16:usart_tx.c    **** /* 
  17:usart_tx.c    ****  * Definição de funções 
  18:usart_tx.c    ****  */
  19:usart_tx.c    **** void setup_usart(void)
  20:usart_tx.c    **** {
 107               		.stabn	68,0,20,.LM0-.LFBB1
 108               	.LM0:
 109               	.LFBB1:
 110               	/* prologue: function */
 111               	/* frame size = 0 */
 112               	/* stack size = 0 */
 113               	.L__stack_usage = 0
  21:usart_tx.c    ****     /*
  22:usart_tx.c    ****      * Para as macros abaixo e outras, veja o arquivo
  23:usart_tx.c    ****      * /usr/lib/avr/include/avr/iom328p.h
  24:usart_tx.c    ****      */
  25:usart_tx.c    ****     /*
  26:usart_tx.c    ****      * Primeiro setamos a direção certa para os pinos RX e TX
  27:usart_tx.c    ****      */
  28:usart_tx.c    ****     DDRD &= ~(1 << PD0);  /* USART RX bit para a placa Nano */
 114               		.stabn	68,0,28,.LM1-.LFBB1
 115               	.LM1:
 116 0000 5098      		cbi 0xa,0
  29:usart_tx.c    ****     DDRD |= (1 << PD1);  /* USART TX bit para a placa Nano */
 117               		.stabn	68,0,29,.LM2-.LFBB1
 118               	.LM2:
 119 0002 519A      		sbi 0xa,1
  30:usart_tx.c    ****     
  31:usart_tx.c    ****     /*
  32:usart_tx.c    ****      * Agora configuramos a USART
  33:usart_tx.c    ****      */
  34:usart_tx.c    ****     UBRR0H = (MYUBRR >> 8) & 0xF;
 120               		.stabn	68,0,34,.LM3-.LFBB1
 121               	.LM3:
 122 0004 1092 C500 		sts 197,__zero_reg__
  35:usart_tx.c    ****     UBRR0L = MYUBRR & 0xFF;
 123               		.stabn	68,0,35,.LM4-.LFBB1
 124               	.LM4:
 125 0008 8FEC      		ldi r24,lo8(-49)
 126 000a 8093 C400 		sts 196,r24
 127 000e 0895      		ret
 128               		.size	setup_usart, .-setup_usart
 129               	.Lscope1:
 130               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 131               		.stabd	78,0,0
 132               		.stabs	"setup_main:F(0,47)",36,0,42,setup_main
 133               	.global	setup_main
 134               		.type	setup_main, @function
 135               	setup_main:
 136               		.stabd	46,0,0
GAS LISTING /tmp/ccUTteEc.s 			page 4


  36:usart_tx.c    **** 	/*
  37:usart_tx.c    **** 	* Configure o restante dos registradores
  38:usart_tx.c    **** 	*/
  39:usart_tx.c    **** }
  40:usart_tx.c    **** 
  41:usart_tx.c    **** /* -------------------------------------*/
  42:usart_tx.c    **** void setup_main(void)
  43:usart_tx.c    **** {
 137               		.stabn	68,0,43,.LM5-.LFBB2
 138               	.LM5:
 139               	.LFBB2:
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
  44:usart_tx.c    ****     LED_DDR |= (1 << LED_PINNBR);
 144               		.stabn	68,0,44,.LM6-.LFBB2
 145               	.LM6:
 146 0010 259A      		sbi 0x4,5
  45:usart_tx.c    ****     sei(); /* Seta flag principal de habilitação de interrupções */
 147               		.stabn	68,0,45,.LM7-.LFBB2
 148               	.LM7:
 149               	/* #APP */
 150               	 ;  45 "usart_tx.c" 1
 151 0012 7894      		sei
 152               	 ;  0 "" 2
 153               	/* #NOAPP */
 154 0014 0895      		ret
 155               		.size	setup_main, .-setup_main
 156               	.Lscope2:
 157               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 158               		.stabd	78,0,0
 159               		.stabs	"delay_ms:F(0,47)",36,0,49,delay_ms
 160               		.stabs	"ms:P(5,4)",64,0,49,24
 161               	.global	delay_ms
 162               		.type	delay_ms, @function
 163               	delay_ms:
 164               		.stabd	46,0,0
  46:usart_tx.c    **** }
  47:usart_tx.c    **** 
  48:usart_tx.c    **** /* -------------------------------------*/
  49:usart_tx.c    **** void delay_ms(uint16_t ms)
  50:usart_tx.c    **** {
 165               		.stabn	68,0,50,.LM8-.LFBB3
 166               	.LM8:
 167               	.LFBB3:
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
  51:usart_tx.c    ****     uint16_t i, j;
  52:usart_tx.c    ****     for(i=0; i<ms; i++)
 172               		.stabn	68,0,52,.LM9-.LFBB3
 173               	.LM9:
 174 0016 20E0      		ldi r18,0
 175 0018 30E0      		ldi r19,0
 176               	.L4:
GAS LISTING /tmp/ccUTteEc.s 			page 5


 177               		.stabn	68,0,52,.LM10-.LFBB3
 178               	.LM10:
 179 001a 2817      		cp r18,r24
 180 001c 3907      		cpc r19,r25
 181 001e 01F0      		breq .L9
 182 0020 40EA      		ldi r20,lo8(-96)
 183 0022 5FE0      		ldi r21,lo8(15)
 184               	.L5:
  53:usart_tx.c    ****         for(j=0; j<4000; j++)
  54:usart_tx.c    ****             _NOP();
 185               		.stabn	68,0,54,.LM11-.LFBB3
 186               	.LM11:
 187               	/* #APP */
 188               	 ;  54 "usart_tx.c" 1
 189 0024 0000      		nop
 190               	 ;  0 "" 2
 191               	/* #NOAPP */
 192 0026 4150      		subi r20,1
 193 0028 5109      		sbc r21,__zero_reg__
  53:usart_tx.c    ****         for(j=0; j<4000; j++)
 194               		.stabn	68,0,53,.LM12-.LFBB3
 195               	.LM12:
 196 002a 01F4      		brne .L5
  52:usart_tx.c    ****         for(j=0; j<4000; j++)
 197               		.stabn	68,0,52,.LM13-.LFBB3
 198               	.LM13:
 199 002c 2F5F      		subi r18,-1
 200 002e 3F4F      		sbci r19,-1
 201 0030 00C0      		rjmp .L4
 202               	.L9:
 203               	/* epilogue start */
  55:usart_tx.c    **** }
 204               		.stabn	68,0,55,.LM14-.LFBB3
 205               	.LM14:
 206 0032 0895      		ret
 207               		.size	delay_ms, .-delay_ms
 208               		.stabs	"i:r(5,4)",64,0,51,18
 209               		.stabn	192,0,0,.LFBB3-.LFBB3
 210               		.stabn	224,0,0,.Lscope3-.LFBB3
 211               	.Lscope3:
 212               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 213               		.stabd	78,0,0
 214               		.stabs	"write:F(5,2)",36,0,62,write
 215               		.stabs	"c:P(5,2)",64,0,62,24
 216               	.global	write
 217               		.type	write, @function
 218               	write:
 219               		.stabd	46,0,0
  56:usart_tx.c    **** 
  57:usart_tx.c    **** /* -------------------------------------*/
  58:usart_tx.c    **** uint8_t tx_buffer[BUFFER_SIZE];     /* buffer para transmissão */
  59:usart_tx.c    **** uint8_t tx_head, tx_tail;   /* ponteiros para o buffer circular */
  60:usart_tx.c    **** uint8_t usart_transmitting;
  61:usart_tx.c    **** 
  62:usart_tx.c    **** uint8_t write(uint8_t c)
  63:usart_tx.c    **** {
 220               		.stabn	68,0,63,.LM15-.LFBB4
GAS LISTING /tmp/ccUTteEc.s 			page 6


 221               	.LM15:
 222               	.LFBB4:
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 0 */
 226               	.L__stack_usage = 0
  64:usart_tx.c    ****     uint8_t rc = 0;
  65:usart_tx.c    **** 
  66:usart_tx.c    ****     cli();
 227               		.stabn	68,0,66,.LM16-.LFBB4
 228               	.LM16:
 229               	/* #APP */
 230               	 ;  66 "usart_tx.c" 1
 231 0034 F894      		cli
 232               	 ;  0 "" 2
  67:usart_tx.c    ****     if (!usart_transmitting) {
 233               		.stabn	68,0,67,.LM17-.LFBB4
 234               	.LM17:
 235               	/* #NOAPP */
 236 0036 9091 0000 		lds r25,usart_transmitting
 237 003a 9111      		cpse r25,__zero_reg__
 238 003c 00C0      		rjmp .L11
  68:usart_tx.c    ****         UDR0 = c;
 239               		.stabn	68,0,68,.LM18-.LFBB4
 240               	.LM18:
 241 003e 8093 C600 		sts 198,r24
  69:usart_tx.c    ****         UCSR0B |= (1 << UDRIE0);
 242               		.stabn	68,0,69,.LM19-.LFBB4
 243               	.LM19:
 244 0042 8091 C100 		lds r24,193
 245 0046 8062      		ori r24,lo8(32)
 246 0048 8093 C100 		sts 193,r24
  70:usart_tx.c    ****         usart_transmitting = 1;
 247               		.stabn	68,0,70,.LM20-.LFBB4
 248               	.LM20:
 249 004c 81E0      		ldi r24,lo8(1)
 250 004e 8093 0000 		sts usart_transmitting,r24
 251 0052 00C0      		rjmp .L15
 252               	.L11:
 253               	.LBB2:
  71:usart_tx.c    ****     } else {
  72:usart_tx.c    ****         uint8_t next = tx_head + 1;
 254               		.stabn	68,0,72,.LM21-.LFBB4
 255               	.LM21:
 256 0054 E091 0000 		lds r30,tx_head
 257 0058 91E0      		ldi r25,lo8(1)
 258 005a 9E0F      		add r25,r30
  73:usart_tx.c    ****         if (next >= BUFFER_SIZE)
 259               		.stabn	68,0,73,.LM22-.LFBB4
 260               	.LM22:
 261 005c 983C      		cpi r25,lo8(-56)
 262 005e 00F0      		brlo .L13
  74:usart_tx.c    ****             next = 0;
 263               		.stabn	68,0,74,.LM23-.LFBB4
 264               	.LM23:
 265 0060 90E0      		ldi r25,0
 266               	.L13:
GAS LISTING /tmp/ccUTteEc.s 			page 7


  75:usart_tx.c    ****         if (next != tx_tail) {
 267               		.stabn	68,0,75,.LM24-.LFBB4
 268               	.LM24:
 269 0062 2091 0000 		lds r18,tx_tail
 270 0066 9217      		cp r25,r18
 271 0068 01F0      		breq .L14
  76:usart_tx.c    ****             tx_buffer[tx_head] = c;
 272               		.stabn	68,0,76,.LM25-.LFBB4
 273               	.LM25:
 274 006a F0E0      		ldi r31,0
 275 006c E050      		subi r30,lo8(-(tx_buffer))
 276 006e F040      		sbci r31,hi8(-(tx_buffer))
 277 0070 8083      		st Z,r24
  77:usart_tx.c    ****             tx_head = next;
 278               		.stabn	68,0,77,.LM26-.LFBB4
 279               	.LM26:
 280 0072 9093 0000 		sts tx_head,r25
 281               	.L15:
 282               	.LBE2:
  64:usart_tx.c    **** 
 283               		.stabn	68,0,64,.LM27-.LFBB4
 284               	.LM27:
 285 0076 80E0      		ldi r24,0
 286               	.LBB3:
 287 0078 00C0      		rjmp .L12
 288               	.L14:
  78:usart_tx.c    ****         } else  /* buffer cheio */
  79:usart_tx.c    ****             rc = 1;
 289               		.stabn	68,0,79,.LM28-.LFBB4
 290               	.LM28:
 291 007a 81E0      		ldi r24,lo8(1)
 292               	.L12:
 293               	.LBE3:
  80:usart_tx.c    ****     }
  81:usart_tx.c    ****     sei();
 294               		.stabn	68,0,81,.LM29-.LFBB4
 295               	.LM29:
 296               	/* #APP */
 297               	 ;  81 "usart_tx.c" 1
 298 007c 7894      		sei
 299               	 ;  0 "" 2
  82:usart_tx.c    ****     return rc;
  83:usart_tx.c    **** }
 300               		.stabn	68,0,83,.LM30-.LFBB4
 301               	.LM30:
 302               	/* #NOAPP */
 303 007e 0895      		ret
 304               		.size	write, .-write
 305               		.stabs	"rc:r(5,2)",64,0,64,24
 306               		.stabn	192,0,0,.LFBB4-.LFBB4
 307               		.stabs	"next:r(5,2)",64,0,72,25
 308               		.stabn	192,0,0,.LBB2-.LFBB4
 309               		.stabn	224,0,0,.LBE2-.LFBB4
 310               		.stabs	"next:r(5,2)",64,0,72,25
 311               		.stabn	192,0,0,.LBB3-.LFBB4
 312               		.stabn	224,0,0,.LBE3-.LFBB4
 313               		.stabn	224,0,0,.Lscope4-.LFBB4
GAS LISTING /tmp/ccUTteEc.s 			page 8


 314               	.Lscope4:
 315               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 316               		.stabd	78,0,0
 317               		.stabs	"__vector_19:F(0,47)",36,0,92,__vector_19
 318               	.global	__vector_19
 319               		.type	__vector_19, @function
 320               	__vector_19:
 321               		.stabd	46,0,0
  84:usart_tx.c    **** 
  85:usart_tx.c    **** /* -------------------------------------*/
  86:usart_tx.c    **** /*
  87:usart_tx.c    ****  * Interrupt handlers devem ser definidos com a macros
  88:usart_tx.c    ****  * ISR(), que é definida no arquivo avr/interrupt.h.
  89:usart_tx.c    ****  * Veja também a página
  90:usart_tx.c    ****  * http://www.nongnu.org/avr-libc/user-manual/group__avr__interrupts.html
  91:usart_tx.c    ****  */
  92:usart_tx.c    **** ISR(USART_UDRE_vect)
  93:usart_tx.c    **** {
 322               		.stabn	68,0,93,.LM31-.LFBB5
 323               	.LM31:
 324               	.LFBB5:
 325 0080 1F92      		push r1
 326 0082 0F92      		push r0
 327 0084 0FB6      		in r0,__SREG__
 328 0086 0F92      		push r0
 329 0088 1124      		clr __zero_reg__
 330 008a 8F93      		push r24
 331 008c EF93      		push r30
 332 008e FF93      		push r31
 333               	/* prologue: Signal */
 334               	/* frame size = 0 */
 335               	/* stack size = 6 */
 336               	.L__stack_usage = 6
  94:usart_tx.c    ****     if (tx_head == tx_tail) {
 337               		.stabn	68,0,94,.LM32-.LFBB5
 338               	.LM32:
 339 0090 E091 0000 		lds r30,tx_tail
 340 0094 8091 0000 		lds r24,tx_head
 341 0098 8E13      		cpse r24,r30
 342 009a 00C0      		rjmp .L17
  95:usart_tx.c    ****         UCSR0B &= ~(1 << UDRIE0);
 343               		.stabn	68,0,95,.LM33-.LFBB5
 344               	.LM33:
 345 009c 8091 C100 		lds r24,193
 346 00a0 8F7D      		andi r24,lo8(-33)
 347 00a2 8093 C100 		sts 193,r24
  96:usart_tx.c    ****         usart_transmitting = 0;
 348               		.stabn	68,0,96,.LM34-.LFBB5
 349               	.LM34:
 350 00a6 1092 0000 		sts usart_transmitting,__zero_reg__
 351 00aa 00C0      		rjmp .L16
 352               	.L17:
  97:usart_tx.c    ****     } else {
  98:usart_tx.c    ****         UDR0 = tx_buffer[tx_tail];
 353               		.stabn	68,0,98,.LM35-.LFBB5
 354               	.LM35:
 355 00ac F0E0      		ldi r31,0
GAS LISTING /tmp/ccUTteEc.s 			page 9


 356 00ae E050      		subi r30,lo8(-(tx_buffer))
 357 00b0 F040      		sbci r31,hi8(-(tx_buffer))
 358 00b2 8081      		ld r24,Z
 359 00b4 8093 C600 		sts 198,r24
  99:usart_tx.c    ****         if (++tx_tail >= BUFFER_SIZE)
 360               		.stabn	68,0,99,.LM36-.LFBB5
 361               	.LM36:
 362 00b8 8091 0000 		lds r24,tx_tail
 363 00bc 8F5F      		subi r24,lo8(-(1))
 364 00be 883C      		cpi r24,lo8(-56)
 365 00c0 00F4      		brsh .L19
 366 00c2 8093 0000 		sts tx_tail,r24
 367 00c6 00C0      		rjmp .L16
 368               	.L19:
 100:usart_tx.c    ****             tx_tail = 0;
 369               		.stabn	68,0,100,.LM37-.LFBB5
 370               	.LM37:
 371 00c8 1092 0000 		sts tx_tail,__zero_reg__
 372               	.L16:
 373               	/* epilogue start */
 101:usart_tx.c    ****     }
 102:usart_tx.c    **** }
 374               		.stabn	68,0,102,.LM38-.LFBB5
 375               	.LM38:
 376 00cc FF91      		pop r31
 377 00ce EF91      		pop r30
 378 00d0 8F91      		pop r24
 379 00d2 0F90      		pop r0
 380 00d4 0FBE      		out __SREG__,r0
 381 00d6 0F90      		pop r0
 382 00d8 1F90      		pop r1
 383 00da 1895      		reti
 384               		.size	__vector_19, .-__vector_19
 385               	.Lscope5:
 386               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 387               		.stabd	78,0,0
 388               		.section	.text.startup,"ax",@progbits
 389               		.stabs	"main:F(0,1)",36,0,105,main
 390               	.global	main
 391               		.type	main, @function
 392               	main:
 393               		.stabd	46,0,0
 103:usart_tx.c    **** 
 104:usart_tx.c    **** /* -------------------------------------*/
 105:usart_tx.c    **** int main(void)
 106:usart_tx.c    **** {
 394               		.stabn	68,0,106,.LM39-.LFBB6
 395               	.LM39:
 396               	.LFBB6:
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 399               	/* stack size = 0 */
 400               	.L__stack_usage = 0
 107:usart_tx.c    ****     char msg[] = "Hello, world!  I'm alive! It's so good to be alive!\n";
 108:usart_tx.c    ****     uint8_t i;
 109:usart_tx.c    **** 
 110:usart_tx.c    ****     setup_usart();
GAS LISTING /tmp/ccUTteEc.s 			page 10


 401               		.stabn	68,0,110,.LM40-.LFBB6
 402               	.LM40:
 403 0000 0E94 0000 		call setup_usart
 111:usart_tx.c    ****     setup_main();
 404               		.stabn	68,0,111,.LM41-.LFBB6
 405               	.LM41:
 406 0004 0E94 0000 		call setup_main
 407               	.L21:
 112:usart_tx.c    **** 
 113:usart_tx.c    ****     while(1) {
 114:usart_tx.c    **** 	/*
 115:usart_tx.c    **** 	 * Transmita a msg para a porta serial
 116:usart_tx.c    **** 	 */
 117:usart_tx.c    ****         write(2);
 408               		.stabn	68,0,117,.LM42-.LFBB6
 409               	.LM42:
 410 0008 82E0      		ldi r24,lo8(2)
 411 000a 0E94 0000 		call write
 118:usart_tx.c    **** 		delay_ms(250);
 412               		.stabn	68,0,118,.LM43-.LFBB6
 413               	.LM43:
 414 000e 8AEF      		ldi r24,lo8(-6)
 415 0010 90E0      		ldi r25,0
 416 0012 0E94 0000 		call delay_ms
 119:usart_tx.c    ****     }
 417               		.stabn	68,0,119,.LM44-.LFBB6
 418               	.LM44:
 419 0016 00C0      		rjmp .L21
 420               		.size	main, .-main
 421               	.Lscope6:
 422               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 423               		.stabd	78,0,0
 424               		.comm	usart_transmitting,1,1
 425               		.comm	tx_tail,1,1
 426               		.comm	tx_head,1,1
 427               		.comm	tx_buffer,200,1
 428               		.stabs	"tx_buffer:G(0,48)=ar(0,49)=r(0,49);0;0177777;;0;199;(5,2)",32,0,58,0
 429               		.stabs	"tx_head:G(5,2)",32,0,59,0
 430               		.stabs	"tx_tail:G(5,2)",32,0,59,0
 431               		.stabs	"usart_transmitting:G(5,2)",32,0,60,0
 432               		.text
 433               		.stabs	"",100,0,0,.Letext0
 434               	.Letext0:
 435               		.ident	"GCC: (GNU) 4.9.2"
 436               	.global __do_clear_bss
GAS LISTING /tmp/ccUTteEc.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart_tx.c
     /tmp/ccUTteEc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccUTteEc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccUTteEc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccUTteEc.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccUTteEc.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccUTteEc.s:105    .text:0000000000000000 setup_usart
     /tmp/ccUTteEc.s:135    .text:0000000000000010 setup_main
     /tmp/ccUTteEc.s:163    .text:0000000000000016 delay_ms
     /tmp/ccUTteEc.s:218    .text:0000000000000034 write
                            *COM*:0000000000000001 usart_transmitting
                            *COM*:0000000000000001 tx_head
                            *COM*:0000000000000001 tx_tail
                            *COM*:00000000000000c8 tx_buffer
     /tmp/ccUTteEc.s:320    .text:0000000000000080 __vector_19
     /tmp/ccUTteEc.s:392    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss
